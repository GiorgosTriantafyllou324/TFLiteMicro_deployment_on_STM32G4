
micro_tflite.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000197ec  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00053960  080199d0  080199d0  000299d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0806d330  0806d330  000801dc  2**0
                  CONTENTS
  4 .ARM          00000008  0806d330  0806d330  0007d330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0806d338  0806d338  000801dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0806d338  0806d338  0007d338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0806d33c  0806d33c  0007d33c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0806d340  00080000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009cc0  200001e0  0806d51c  000801e0  2**4
                  ALLOC
 10 ._user_heap_stack 00000600  20009ea0  0806d51c  00089ea0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000801dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0008020c  2**0
                  CONTENTS, READONLY
 13 .debug_info   003abd70  00000000  00000000  0008024f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00019f71  00000000  00000000  0042bfbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 000441b3  00000000  00000000  00445f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000020d8  00000000  00000000  0048a0e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000822f  00000000  00000000  0048c1c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003bd3c  00000000  00000000  004943ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000839e8  00000000  00000000  004d012b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001a3f35  00000000  00000000  00553b13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00009074  00000000  00000000  006f7a48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  00700abc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	00000000 	.word	0x00000000
 8000200:	080199b4 	.word	0x080199b4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e4 	.word	0x200001e4
 800021c:	080199b4 	.word	0x080199b4

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2iz>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d215      	bcs.n	8000bfe <__aeabi_d2iz+0x36>
 8000bd2:	d511      	bpl.n	8000bf8 <__aeabi_d2iz+0x30>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d912      	bls.n	8000c04 <__aeabi_d2iz+0x3c>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d105      	bne.n	8000c10 <__aeabi_d2iz+0x48>
 8000c04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	bf08      	it	eq
 8000c0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_ldivmod>:
 8000cb8:	b97b      	cbnz	r3, 8000cda <__aeabi_ldivmod+0x22>
 8000cba:	b972      	cbnz	r2, 8000cda <__aeabi_ldivmod+0x22>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bfbe      	ittt	lt
 8000cc0:	2000      	movlt	r0, #0
 8000cc2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cc6:	e006      	blt.n	8000cd6 <__aeabi_ldivmod+0x1e>
 8000cc8:	bf08      	it	eq
 8000cca:	2800      	cmpeq	r0, #0
 8000ccc:	bf1c      	itt	ne
 8000cce:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cd2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cd6:	f000 b9f1 	b.w	80010bc <__aeabi_idiv0>
 8000cda:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	db09      	blt.n	8000cfa <__aeabi_ldivmod+0x42>
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	db1a      	blt.n	8000d20 <__aeabi_ldivmod+0x68>
 8000cea:	f000 f883 	bl	8000df4 <__udivmoddi4>
 8000cee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf6:	b004      	add	sp, #16
 8000cf8:	4770      	bx	lr
 8000cfa:	4240      	negs	r0, r0
 8000cfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	db1b      	blt.n	8000d3c <__aeabi_ldivmod+0x84>
 8000d04:	f000 f876 	bl	8000df4 <__udivmoddi4>
 8000d08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d10:	b004      	add	sp, #16
 8000d12:	4240      	negs	r0, r0
 8000d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d18:	4252      	negs	r2, r2
 8000d1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d1e:	4770      	bx	lr
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	f000 f865 	bl	8000df4 <__udivmoddi4>
 8000d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d32:	b004      	add	sp, #16
 8000d34:	4240      	negs	r0, r0
 8000d36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d3a:	4770      	bx	lr
 8000d3c:	4252      	negs	r2, r2
 8000d3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d42:	f000 f857 	bl	8000df4 <__udivmoddi4>
 8000d46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d4e:	b004      	add	sp, #16
 8000d50:	4252      	negs	r2, r2
 8000d52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_uldivmod>:
 8000d58:	b953      	cbnz	r3, 8000d70 <__aeabi_uldivmod+0x18>
 8000d5a:	b94a      	cbnz	r2, 8000d70 <__aeabi_uldivmod+0x18>
 8000d5c:	2900      	cmp	r1, #0
 8000d5e:	bf08      	it	eq
 8000d60:	2800      	cmpeq	r0, #0
 8000d62:	bf1c      	itt	ne
 8000d64:	f04f 31ff 	movne.w	r1, #4294967295
 8000d68:	f04f 30ff 	movne.w	r0, #4294967295
 8000d6c:	f000 b9a6 	b.w	80010bc <__aeabi_idiv0>
 8000d70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d78:	f000 f83c 	bl	8000df4 <__udivmoddi4>
 8000d7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d84:	b004      	add	sp, #16
 8000d86:	4770      	bx	lr

08000d88 <__aeabi_d2lz>:
 8000d88:	b538      	push	{r3, r4, r5, lr}
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	4604      	mov	r4, r0
 8000d90:	460d      	mov	r5, r1
 8000d92:	f7ff fedb 	bl	8000b4c <__aeabi_dcmplt>
 8000d96:	b928      	cbnz	r0, 8000da4 <__aeabi_d2lz+0x1c>
 8000d98:	4620      	mov	r0, r4
 8000d9a:	4629      	mov	r1, r5
 8000d9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000da0:	f000 b80a 	b.w	8000db8 <__aeabi_d2ulz>
 8000da4:	4620      	mov	r0, r4
 8000da6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000daa:	f000 f805 	bl	8000db8 <__aeabi_d2ulz>
 8000dae:	4240      	negs	r0, r0
 8000db0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000db4:	bd38      	pop	{r3, r4, r5, pc}
 8000db6:	bf00      	nop

08000db8 <__aeabi_d2ulz>:
 8000db8:	b5d0      	push	{r4, r6, r7, lr}
 8000dba:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <__aeabi_d2ulz+0x34>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	4606      	mov	r6, r0
 8000dc0:	460f      	mov	r7, r1
 8000dc2:	f7ff fc51 	bl	8000668 <__aeabi_dmul>
 8000dc6:	f000 f97b 	bl	80010c0 <__aeabi_d2uiz>
 8000dca:	4604      	mov	r4, r0
 8000dcc:	f7ff fbd2 	bl	8000574 <__aeabi_ui2d>
 8000dd0:	4b07      	ldr	r3, [pc, #28]	; (8000df0 <__aeabi_d2ulz+0x38>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f7ff fc48 	bl	8000668 <__aeabi_dmul>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	460b      	mov	r3, r1
 8000ddc:	4630      	mov	r0, r6
 8000dde:	4639      	mov	r1, r7
 8000de0:	f7ff fa8a 	bl	80002f8 <__aeabi_dsub>
 8000de4:	f000 f96c 	bl	80010c0 <__aeabi_d2uiz>
 8000de8:	4621      	mov	r1, r4
 8000dea:	bdd0      	pop	{r4, r6, r7, pc}
 8000dec:	3df00000 	.word	0x3df00000
 8000df0:	41f00000 	.word	0x41f00000

08000df4 <__udivmoddi4>:
 8000df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000df8:	9e08      	ldr	r6, [sp, #32]
 8000dfa:	460d      	mov	r5, r1
 8000dfc:	4604      	mov	r4, r0
 8000dfe:	460f      	mov	r7, r1
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d14a      	bne.n	8000e9a <__udivmoddi4+0xa6>
 8000e04:	428a      	cmp	r2, r1
 8000e06:	4694      	mov	ip, r2
 8000e08:	d965      	bls.n	8000ed6 <__udivmoddi4+0xe2>
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	b143      	cbz	r3, 8000e22 <__udivmoddi4+0x2e>
 8000e10:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e14:	f1c3 0220 	rsb	r2, r3, #32
 8000e18:	409f      	lsls	r7, r3
 8000e1a:	fa20 f202 	lsr.w	r2, r0, r2
 8000e1e:	4317      	orrs	r7, r2
 8000e20:	409c      	lsls	r4, r3
 8000e22:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000e26:	fa1f f58c 	uxth.w	r5, ip
 8000e2a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000e2e:	0c22      	lsrs	r2, r4, #16
 8000e30:	fb0e 7711 	mls	r7, lr, r1, r7
 8000e34:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000e38:	fb01 f005 	mul.w	r0, r1, r5
 8000e3c:	4290      	cmp	r0, r2
 8000e3e:	d90a      	bls.n	8000e56 <__udivmoddi4+0x62>
 8000e40:	eb1c 0202 	adds.w	r2, ip, r2
 8000e44:	f101 37ff 	add.w	r7, r1, #4294967295
 8000e48:	f080 811c 	bcs.w	8001084 <__udivmoddi4+0x290>
 8000e4c:	4290      	cmp	r0, r2
 8000e4e:	f240 8119 	bls.w	8001084 <__udivmoddi4+0x290>
 8000e52:	3902      	subs	r1, #2
 8000e54:	4462      	add	r2, ip
 8000e56:	1a12      	subs	r2, r2, r0
 8000e58:	b2a4      	uxth	r4, r4
 8000e5a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e5e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e62:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e66:	fb00 f505 	mul.w	r5, r0, r5
 8000e6a:	42a5      	cmp	r5, r4
 8000e6c:	d90a      	bls.n	8000e84 <__udivmoddi4+0x90>
 8000e6e:	eb1c 0404 	adds.w	r4, ip, r4
 8000e72:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e76:	f080 8107 	bcs.w	8001088 <__udivmoddi4+0x294>
 8000e7a:	42a5      	cmp	r5, r4
 8000e7c:	f240 8104 	bls.w	8001088 <__udivmoddi4+0x294>
 8000e80:	4464      	add	r4, ip
 8000e82:	3802      	subs	r0, #2
 8000e84:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e88:	1b64      	subs	r4, r4, r5
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	b11e      	cbz	r6, 8000e96 <__udivmoddi4+0xa2>
 8000e8e:	40dc      	lsrs	r4, r3
 8000e90:	2300      	movs	r3, #0
 8000e92:	e9c6 4300 	strd	r4, r3, [r6]
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d908      	bls.n	8000eb0 <__udivmoddi4+0xbc>
 8000e9e:	2e00      	cmp	r6, #0
 8000ea0:	f000 80ed 	beq.w	800107e <__udivmoddi4+0x28a>
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	e9c6 0500 	strd	r0, r5, [r6]
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb0:	fab3 f183 	clz	r1, r3
 8000eb4:	2900      	cmp	r1, #0
 8000eb6:	d149      	bne.n	8000f4c <__udivmoddi4+0x158>
 8000eb8:	42ab      	cmp	r3, r5
 8000eba:	d302      	bcc.n	8000ec2 <__udivmoddi4+0xce>
 8000ebc:	4282      	cmp	r2, r0
 8000ebe:	f200 80f8 	bhi.w	80010b2 <__udivmoddi4+0x2be>
 8000ec2:	1a84      	subs	r4, r0, r2
 8000ec4:	eb65 0203 	sbc.w	r2, r5, r3
 8000ec8:	2001      	movs	r0, #1
 8000eca:	4617      	mov	r7, r2
 8000ecc:	2e00      	cmp	r6, #0
 8000ece:	d0e2      	beq.n	8000e96 <__udivmoddi4+0xa2>
 8000ed0:	e9c6 4700 	strd	r4, r7, [r6]
 8000ed4:	e7df      	b.n	8000e96 <__udivmoddi4+0xa2>
 8000ed6:	b902      	cbnz	r2, 8000eda <__udivmoddi4+0xe6>
 8000ed8:	deff      	udf	#255	; 0xff
 8000eda:	fab2 f382 	clz	r3, r2
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	f040 8090 	bne.w	8001004 <__udivmoddi4+0x210>
 8000ee4:	1a8a      	subs	r2, r1, r2
 8000ee6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eea:	fa1f fe8c 	uxth.w	lr, ip
 8000eee:	2101      	movs	r1, #1
 8000ef0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ef4:	fb07 2015 	mls	r0, r7, r5, r2
 8000ef8:	0c22      	lsrs	r2, r4, #16
 8000efa:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000efe:	fb0e f005 	mul.w	r0, lr, r5
 8000f02:	4290      	cmp	r0, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x124>
 8000f06:	eb1c 0202 	adds.w	r2, ip, r2
 8000f0a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f0e:	d202      	bcs.n	8000f16 <__udivmoddi4+0x122>
 8000f10:	4290      	cmp	r0, r2
 8000f12:	f200 80cb 	bhi.w	80010ac <__udivmoddi4+0x2b8>
 8000f16:	4645      	mov	r5, r8
 8000f18:	1a12      	subs	r2, r2, r0
 8000f1a:	b2a4      	uxth	r4, r4
 8000f1c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000f20:	fb07 2210 	mls	r2, r7, r0, r2
 8000f24:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000f28:	fb0e fe00 	mul.w	lr, lr, r0
 8000f2c:	45a6      	cmp	lr, r4
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x14e>
 8000f30:	eb1c 0404 	adds.w	r4, ip, r4
 8000f34:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f38:	d202      	bcs.n	8000f40 <__udivmoddi4+0x14c>
 8000f3a:	45a6      	cmp	lr, r4
 8000f3c:	f200 80bb 	bhi.w	80010b6 <__udivmoddi4+0x2c2>
 8000f40:	4610      	mov	r0, r2
 8000f42:	eba4 040e 	sub.w	r4, r4, lr
 8000f46:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000f4a:	e79f      	b.n	8000e8c <__udivmoddi4+0x98>
 8000f4c:	f1c1 0720 	rsb	r7, r1, #32
 8000f50:	408b      	lsls	r3, r1
 8000f52:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f56:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f5a:	fa05 f401 	lsl.w	r4, r5, r1
 8000f5e:	fa20 f307 	lsr.w	r3, r0, r7
 8000f62:	40fd      	lsrs	r5, r7
 8000f64:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f68:	4323      	orrs	r3, r4
 8000f6a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000f6e:	fa1f fe8c 	uxth.w	lr, ip
 8000f72:	fb09 5518 	mls	r5, r9, r8, r5
 8000f76:	0c1c      	lsrs	r4, r3, #16
 8000f78:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f7c:	fb08 f50e 	mul.w	r5, r8, lr
 8000f80:	42a5      	cmp	r5, r4
 8000f82:	fa02 f201 	lsl.w	r2, r2, r1
 8000f86:	fa00 f001 	lsl.w	r0, r0, r1
 8000f8a:	d90b      	bls.n	8000fa4 <__udivmoddi4+0x1b0>
 8000f8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f90:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f94:	f080 8088 	bcs.w	80010a8 <__udivmoddi4+0x2b4>
 8000f98:	42a5      	cmp	r5, r4
 8000f9a:	f240 8085 	bls.w	80010a8 <__udivmoddi4+0x2b4>
 8000f9e:	f1a8 0802 	sub.w	r8, r8, #2
 8000fa2:	4464      	add	r4, ip
 8000fa4:	1b64      	subs	r4, r4, r5
 8000fa6:	b29d      	uxth	r5, r3
 8000fa8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000fac:	fb09 4413 	mls	r4, r9, r3, r4
 8000fb0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000fb4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000fb8:	45a6      	cmp	lr, r4
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x1da>
 8000fbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000fc0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000fc4:	d26c      	bcs.n	80010a0 <__udivmoddi4+0x2ac>
 8000fc6:	45a6      	cmp	lr, r4
 8000fc8:	d96a      	bls.n	80010a0 <__udivmoddi4+0x2ac>
 8000fca:	3b02      	subs	r3, #2
 8000fcc:	4464      	add	r4, ip
 8000fce:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000fd2:	fba3 9502 	umull	r9, r5, r3, r2
 8000fd6:	eba4 040e 	sub.w	r4, r4, lr
 8000fda:	42ac      	cmp	r4, r5
 8000fdc:	46c8      	mov	r8, r9
 8000fde:	46ae      	mov	lr, r5
 8000fe0:	d356      	bcc.n	8001090 <__udivmoddi4+0x29c>
 8000fe2:	d053      	beq.n	800108c <__udivmoddi4+0x298>
 8000fe4:	b156      	cbz	r6, 8000ffc <__udivmoddi4+0x208>
 8000fe6:	ebb0 0208 	subs.w	r2, r0, r8
 8000fea:	eb64 040e 	sbc.w	r4, r4, lr
 8000fee:	fa04 f707 	lsl.w	r7, r4, r7
 8000ff2:	40ca      	lsrs	r2, r1
 8000ff4:	40cc      	lsrs	r4, r1
 8000ff6:	4317      	orrs	r7, r2
 8000ff8:	e9c6 7400 	strd	r7, r4, [r6]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	2100      	movs	r1, #0
 8001000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001004:	f1c3 0120 	rsb	r1, r3, #32
 8001008:	fa02 fc03 	lsl.w	ip, r2, r3
 800100c:	fa20 f201 	lsr.w	r2, r0, r1
 8001010:	fa25 f101 	lsr.w	r1, r5, r1
 8001014:	409d      	lsls	r5, r3
 8001016:	432a      	orrs	r2, r5
 8001018:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800101c:	fa1f fe8c 	uxth.w	lr, ip
 8001020:	fbb1 f0f7 	udiv	r0, r1, r7
 8001024:	fb07 1510 	mls	r5, r7, r0, r1
 8001028:	0c11      	lsrs	r1, r2, #16
 800102a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800102e:	fb00 f50e 	mul.w	r5, r0, lr
 8001032:	428d      	cmp	r5, r1
 8001034:	fa04 f403 	lsl.w	r4, r4, r3
 8001038:	d908      	bls.n	800104c <__udivmoddi4+0x258>
 800103a:	eb1c 0101 	adds.w	r1, ip, r1
 800103e:	f100 38ff 	add.w	r8, r0, #4294967295
 8001042:	d22f      	bcs.n	80010a4 <__udivmoddi4+0x2b0>
 8001044:	428d      	cmp	r5, r1
 8001046:	d92d      	bls.n	80010a4 <__udivmoddi4+0x2b0>
 8001048:	3802      	subs	r0, #2
 800104a:	4461      	add	r1, ip
 800104c:	1b49      	subs	r1, r1, r5
 800104e:	b292      	uxth	r2, r2
 8001050:	fbb1 f5f7 	udiv	r5, r1, r7
 8001054:	fb07 1115 	mls	r1, r7, r5, r1
 8001058:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800105c:	fb05 f10e 	mul.w	r1, r5, lr
 8001060:	4291      	cmp	r1, r2
 8001062:	d908      	bls.n	8001076 <__udivmoddi4+0x282>
 8001064:	eb1c 0202 	adds.w	r2, ip, r2
 8001068:	f105 38ff 	add.w	r8, r5, #4294967295
 800106c:	d216      	bcs.n	800109c <__udivmoddi4+0x2a8>
 800106e:	4291      	cmp	r1, r2
 8001070:	d914      	bls.n	800109c <__udivmoddi4+0x2a8>
 8001072:	3d02      	subs	r5, #2
 8001074:	4462      	add	r2, ip
 8001076:	1a52      	subs	r2, r2, r1
 8001078:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800107c:	e738      	b.n	8000ef0 <__udivmoddi4+0xfc>
 800107e:	4631      	mov	r1, r6
 8001080:	4630      	mov	r0, r6
 8001082:	e708      	b.n	8000e96 <__udivmoddi4+0xa2>
 8001084:	4639      	mov	r1, r7
 8001086:	e6e6      	b.n	8000e56 <__udivmoddi4+0x62>
 8001088:	4610      	mov	r0, r2
 800108a:	e6fb      	b.n	8000e84 <__udivmoddi4+0x90>
 800108c:	4548      	cmp	r0, r9
 800108e:	d2a9      	bcs.n	8000fe4 <__udivmoddi4+0x1f0>
 8001090:	ebb9 0802 	subs.w	r8, r9, r2
 8001094:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001098:	3b01      	subs	r3, #1
 800109a:	e7a3      	b.n	8000fe4 <__udivmoddi4+0x1f0>
 800109c:	4645      	mov	r5, r8
 800109e:	e7ea      	b.n	8001076 <__udivmoddi4+0x282>
 80010a0:	462b      	mov	r3, r5
 80010a2:	e794      	b.n	8000fce <__udivmoddi4+0x1da>
 80010a4:	4640      	mov	r0, r8
 80010a6:	e7d1      	b.n	800104c <__udivmoddi4+0x258>
 80010a8:	46d0      	mov	r8, sl
 80010aa:	e77b      	b.n	8000fa4 <__udivmoddi4+0x1b0>
 80010ac:	3d02      	subs	r5, #2
 80010ae:	4462      	add	r2, ip
 80010b0:	e732      	b.n	8000f18 <__udivmoddi4+0x124>
 80010b2:	4608      	mov	r0, r1
 80010b4:	e70a      	b.n	8000ecc <__udivmoddi4+0xd8>
 80010b6:	4464      	add	r4, ip
 80010b8:	3802      	subs	r0, #2
 80010ba:	e742      	b.n	8000f42 <__udivmoddi4+0x14e>

080010bc <__aeabi_idiv0>:
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop

080010c0 <__aeabi_d2uiz>:
 80010c0:	004a      	lsls	r2, r1, #1
 80010c2:	d211      	bcs.n	80010e8 <__aeabi_d2uiz+0x28>
 80010c4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80010c8:	d211      	bcs.n	80010ee <__aeabi_d2uiz+0x2e>
 80010ca:	d50d      	bpl.n	80010e8 <__aeabi_d2uiz+0x28>
 80010cc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80010d0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80010d4:	d40e      	bmi.n	80010f4 <__aeabi_d2uiz+0x34>
 80010d6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80010da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010de:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80010e2:	fa23 f002 	lsr.w	r0, r3, r2
 80010e6:	4770      	bx	lr
 80010e8:	f04f 0000 	mov.w	r0, #0
 80010ec:	4770      	bx	lr
 80010ee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80010f2:	d102      	bne.n	80010fa <__aeabi_d2uiz+0x3a>
 80010f4:	f04f 30ff 	mov.w	r0, #4294967295
 80010f8:	4770      	bx	lr
 80010fa:	f04f 0000 	mov.w	r0, #0
 80010fe:	4770      	bx	lr

08001100 <__tcf_0>:

  // Start timer / counter
  HAL_TIM_Base_Start(&htim16);

  // Set up logging (modify tensorflow/lite/micro/debug_log.cc)
  static tflite::MicroErrorReporter micro_error_reporter;
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop

08001104 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpENS_15BuiltinOperatorE>:
  TF_LITE_REMOVE_VIRTUAL_DELETE

  explicit MicroMutableOpResolver() {}

  const TFLMRegistration* FindOp(tflite::BuiltinOperator op) const override {
    if (op == BuiltinOperator_CUSTOM) return nullptr;
 8001104:	2920      	cmp	r1, #32
 8001106:	d022      	beq.n	800114e <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpENS_15BuiltinOperatorE+0x4a>

    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001108:	f8d0 30ac 	ldr.w	r3, [r0, #172]	; 0xac
 800110c:	b1fb      	cbz	r3, 800114e <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpENS_15BuiltinOperatorE+0x4a>
      const TFLMRegistration& registration = registrations_[i];
      if (registration.builtin_code == op) {
 800110e:	6982      	ldr	r2, [r0, #24]
 8001110:	4291      	cmp	r1, r2
 8001112:	d01e      	beq.n	8001152 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpENS_15BuiltinOperatorE+0x4e>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001114:	2b01      	cmp	r3, #1
 8001116:	d01a      	beq.n	800114e <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpENS_15BuiltinOperatorE+0x4a>
      if (registration.builtin_code == op) {
 8001118:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800111a:	4291      	cmp	r1, r2
 800111c:	d020      	beq.n	8001160 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpENS_15BuiltinOperatorE+0x5c>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 800111e:	2b02      	cmp	r3, #2
 8001120:	d015      	beq.n	800114e <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpENS_15BuiltinOperatorE+0x4a>
      if (registration.builtin_code == op) {
 8001122:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8001124:	4291      	cmp	r1, r2
 8001126:	d01d      	beq.n	8001164 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpENS_15BuiltinOperatorE+0x60>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001128:	2b03      	cmp	r3, #3
 800112a:	d010      	beq.n	800114e <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpENS_15BuiltinOperatorE+0x4a>
      if (registration.builtin_code == op) {
 800112c:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800112e:	4291      	cmp	r1, r2
 8001130:	d01a      	beq.n	8001168 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpENS_15BuiltinOperatorE+0x64>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001132:	2b04      	cmp	r3, #4
 8001134:	d00b      	beq.n	800114e <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpENS_15BuiltinOperatorE+0x4a>
      if (registration.builtin_code == op) {
 8001136:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800113a:	4291      	cmp	r1, r2
 800113c:	d016      	beq.n	800116c <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpENS_15BuiltinOperatorE+0x68>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 800113e:	2b05      	cmp	r3, #5
 8001140:	d005      	beq.n	800114e <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpENS_15BuiltinOperatorE+0x4a>
      if (registration.builtin_code == op) {
 8001142:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8001146:	428b      	cmp	r3, r1
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001148:	bf08      	it	eq
 800114a:	2305      	moveq	r3, #5
      if (registration.builtin_code == op) {
 800114c:	d002      	beq.n	8001154 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpENS_15BuiltinOperatorE+0x50>
    if (op == BuiltinOperator_CUSTOM) return nullptr;
 800114e:	2000      	movs	r0, #0
        return &registration;
      }
    }
    return nullptr;
  }
 8001150:	4770      	bx	lr
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001152:	2300      	movs	r3, #0
      const TFLMRegistration& registration = registrations_[i];
 8001154:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8001158:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800115c:	3004      	adds	r0, #4
 800115e:	4770      	bx	lr
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001160:	2301      	movs	r3, #1
 8001162:	e7f7      	b.n	8001154 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpENS_15BuiltinOperatorE+0x50>
 8001164:	2302      	movs	r3, #2
 8001166:	e7f5      	b.n	8001154 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpENS_15BuiltinOperatorE+0x50>
 8001168:	2303      	movs	r3, #3
 800116a:	e7f3      	b.n	8001154 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpENS_15BuiltinOperatorE+0x50>
 800116c:	2304      	movs	r3, #4
 800116e:	e7f1      	b.n	8001154 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpENS_15BuiltinOperatorE+0x50>

08001170 <_ZN6tflite22MicroMutableOpResolverILj6EED0Ev>:
class MicroMutableOpResolver : public MicroOpResolver {
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop

08001174 <__tcf_2>:
  micro_op_resolver.AddDequantize();


  // Build an interpreter to run the model with.
  // NOLINTNEXTLINE(runtime-global-variables)
  static tflite::MicroInterpreter static_interpreter(model, micro_op_resolver, tensor_arena, kTensorArenaSize);
 8001174:	4801      	ldr	r0, [pc, #4]	; (800117c <__tcf_2+0x8>)
 8001176:	f007 bbed 	b.w	8008954 <_ZN6tflite16MicroInterpreterD1Ev>
 800117a:	bf00      	nop
 800117c:	20009b0c 	.word	0x20009b0c

08001180 <_ZNK6tflite22MicroMutableOpResolverILj6EE15GetOpDataParserENS_15BuiltinOperatorE>:
      }
    }
    return nullptr;
  }

  TfLiteBridgeBuiltinParseFunction GetOpDataParser(
 8001180:	b508      	push	{r3, lr}
      BuiltinOperator op) const override {
    TFLITE_DCHECK(num_buitin_ops_ <= tOpCount);
 8001182:	f8d0 30e0 	ldr.w	r3, [r0, #224]	; 0xe0
 8001186:	2b06      	cmp	r3, #6
 8001188:	d833      	bhi.n	80011f2 <_ZNK6tflite22MicroMutableOpResolverILj6EE15GetOpDataParserENS_15BuiltinOperatorE+0x72>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
 800118a:	b31b      	cbz	r3, 80011d4 <_ZNK6tflite22MicroMutableOpResolverILj6EE15GetOpDataParserENS_15BuiltinOperatorE+0x54>
      if (builtin_codes_[i] == op) return builtin_parsers_[i];
 800118c:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
 8001190:	4291      	cmp	r1, r2
 8001192:	d021      	beq.n	80011d8 <_ZNK6tflite22MicroMutableOpResolverILj6EE15GetOpDataParserENS_15BuiltinOperatorE+0x58>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
 8001194:	2b01      	cmp	r3, #1
 8001196:	d01d      	beq.n	80011d4 <_ZNK6tflite22MicroMutableOpResolverILj6EE15GetOpDataParserENS_15BuiltinOperatorE+0x54>
      if (builtin_codes_[i] == op) return builtin_parsers_[i];
 8001198:	f8d0 20b4 	ldr.w	r2, [r0, #180]	; 0xb4
 800119c:	4291      	cmp	r1, r2
 800119e:	d020      	beq.n	80011e2 <_ZNK6tflite22MicroMutableOpResolverILj6EE15GetOpDataParserENS_15BuiltinOperatorE+0x62>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d017      	beq.n	80011d4 <_ZNK6tflite22MicroMutableOpResolverILj6EE15GetOpDataParserENS_15BuiltinOperatorE+0x54>
      if (builtin_codes_[i] == op) return builtin_parsers_[i];
 80011a4:	f8d0 20b8 	ldr.w	r2, [r0, #184]	; 0xb8
 80011a8:	4291      	cmp	r1, r2
 80011aa:	d01c      	beq.n	80011e6 <_ZNK6tflite22MicroMutableOpResolverILj6EE15GetOpDataParserENS_15BuiltinOperatorE+0x66>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
 80011ac:	2b03      	cmp	r3, #3
 80011ae:	d011      	beq.n	80011d4 <_ZNK6tflite22MicroMutableOpResolverILj6EE15GetOpDataParserENS_15BuiltinOperatorE+0x54>
      if (builtin_codes_[i] == op) return builtin_parsers_[i];
 80011b0:	f8d0 20bc 	ldr.w	r2, [r0, #188]	; 0xbc
 80011b4:	4291      	cmp	r1, r2
 80011b6:	d018      	beq.n	80011ea <_ZNK6tflite22MicroMutableOpResolverILj6EE15GetOpDataParserENS_15BuiltinOperatorE+0x6a>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
 80011b8:	2b04      	cmp	r3, #4
 80011ba:	d00b      	beq.n	80011d4 <_ZNK6tflite22MicroMutableOpResolverILj6EE15GetOpDataParserENS_15BuiltinOperatorE+0x54>
      if (builtin_codes_[i] == op) return builtin_parsers_[i];
 80011bc:	f8d0 20c0 	ldr.w	r2, [r0, #192]	; 0xc0
 80011c0:	4291      	cmp	r1, r2
 80011c2:	d014      	beq.n	80011ee <_ZNK6tflite22MicroMutableOpResolverILj6EE15GetOpDataParserENS_15BuiltinOperatorE+0x6e>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
 80011c4:	2b06      	cmp	r3, #6
 80011c6:	d105      	bne.n	80011d4 <_ZNK6tflite22MicroMutableOpResolverILj6EE15GetOpDataParserENS_15BuiltinOperatorE+0x54>
      if (builtin_codes_[i] == op) return builtin_parsers_[i];
 80011c8:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
 80011cc:	428b      	cmp	r3, r1
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
 80011ce:	bf08      	it	eq
 80011d0:	2305      	moveq	r3, #5
      if (builtin_codes_[i] == op) return builtin_parsers_[i];
 80011d2:	d002      	beq.n	80011da <_ZNK6tflite22MicroMutableOpResolverILj6EE15GetOpDataParserENS_15BuiltinOperatorE+0x5a>
    }
    return nullptr;
 80011d4:	2000      	movs	r0, #0
  }
 80011d6:	bd08      	pop	{r3, pc}
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
 80011d8:	2300      	movs	r3, #0
      if (builtin_codes_[i] == op) return builtin_parsers_[i];
 80011da:	3332      	adds	r3, #50	; 0x32
 80011dc:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
  }
 80011e0:	bd08      	pop	{r3, pc}
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
 80011e2:	2301      	movs	r3, #1
 80011e4:	e7f9      	b.n	80011da <_ZNK6tflite22MicroMutableOpResolverILj6EE15GetOpDataParserENS_15BuiltinOperatorE+0x5a>
 80011e6:	2302      	movs	r3, #2
 80011e8:	e7f7      	b.n	80011da <_ZNK6tflite22MicroMutableOpResolverILj6EE15GetOpDataParserENS_15BuiltinOperatorE+0x5a>
 80011ea:	2303      	movs	r3, #3
 80011ec:	e7f5      	b.n	80011da <_ZNK6tflite22MicroMutableOpResolverILj6EE15GetOpDataParserENS_15BuiltinOperatorE+0x5a>
 80011ee:	2304      	movs	r3, #4
 80011f0:	e7f3      	b.n	80011da <_ZNK6tflite22MicroMutableOpResolverILj6EE15GetOpDataParserENS_15BuiltinOperatorE+0x5a>
    TFLITE_DCHECK(num_buitin_ops_ <= tOpCount);
 80011f2:	f015 fcbb 	bl	8016b6c <abort>
 80011f6:	bf00      	nop

080011f8 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc>:
  const TFLMRegistration* FindOp(const char* op) const override {
 80011f8:	b570      	push	{r4, r5, r6, lr}
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 80011fa:	f8d0 50ac 	ldr.w	r5, [r0, #172]	; 0xac
 80011fe:	b1fd      	cbz	r5, 8001240 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc+0x48>
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 8001200:	6983      	ldr	r3, [r0, #24]
 8001202:	2b20      	cmp	r3, #32
 8001204:	4604      	mov	r4, r0
 8001206:	460e      	mov	r6, r1
 8001208:	d03b      	beq.n	8001282 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc+0x8a>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 800120a:	2d01      	cmp	r5, #1
 800120c:	d018      	beq.n	8001240 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc+0x48>
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 800120e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001210:	2b20      	cmp	r3, #32
 8001212:	d03c      	beq.n	800128e <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc+0x96>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001214:	2d02      	cmp	r5, #2
 8001216:	d013      	beq.n	8001240 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc+0x48>
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 8001218:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800121a:	2b20      	cmp	r3, #32
 800121c:	d03f      	beq.n	800129e <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc+0xa6>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 800121e:	2d03      	cmp	r5, #3
 8001220:	d00e      	beq.n	8001240 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc+0x48>
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 8001222:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8001224:	2b20      	cmp	r3, #32
 8001226:	d00d      	beq.n	8001244 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc+0x4c>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001228:	2d04      	cmp	r5, #4
 800122a:	d009      	beq.n	8001240 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc+0x48>
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 800122c:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8001230:	2b20      	cmp	r3, #32
 8001232:	d014      	beq.n	800125e <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc+0x66>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001234:	2d05      	cmp	r5, #5
 8001236:	d003      	beq.n	8001240 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc+0x48>
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 8001238:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800123c:	2b20      	cmp	r3, #32
 800123e:	d017      	beq.n	8001270 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc+0x78>
    return nullptr;
 8001240:	2000      	movs	r0, #0
  }
 8001242:	bd70      	pop	{r4, r5, r6, pc}
          (strcmp(registration.custom_name, op) == 0)) {
 8001244:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8001246:	4631      	mov	r1, r6
 8001248:	f7fe ffea 	bl	8000220 <strcmp>
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 800124c:	2800      	cmp	r0, #0
 800124e:	d1eb      	bne.n	8001228 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc+0x30>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001250:	2003      	movs	r0, #3
      const TFLMRegistration& registration = registrations_[i];
 8001252:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8001256:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 800125a:	1d20      	adds	r0, r4, #4
  }
 800125c:	bd70      	pop	{r4, r5, r6, pc}
          (strcmp(registration.custom_name, op) == 0)) {
 800125e:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8001262:	4631      	mov	r1, r6
 8001264:	f7fe ffdc 	bl	8000220 <strcmp>
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 8001268:	2800      	cmp	r0, #0
 800126a:	d1e3      	bne.n	8001234 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc+0x3c>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 800126c:	2004      	movs	r0, #4
 800126e:	e7f0      	b.n	8001252 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc+0x5a>
          (strcmp(registration.custom_name, op) == 0)) {
 8001270:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 8001274:	4631      	mov	r1, r6
 8001276:	f7fe ffd3 	bl	8000220 <strcmp>
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 800127a:	2800      	cmp	r0, #0
 800127c:	d1e0      	bne.n	8001240 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc+0x48>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 800127e:	2005      	movs	r0, #5
 8001280:	e7e7      	b.n	8001252 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc+0x5a>
          (strcmp(registration.custom_name, op) == 0)) {
 8001282:	69c0      	ldr	r0, [r0, #28]
 8001284:	f7fe ffcc 	bl	8000220 <strcmp>
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 8001288:	2800      	cmp	r0, #0
 800128a:	d1be      	bne.n	800120a <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc+0x12>
 800128c:	e7e1      	b.n	8001252 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc+0x5a>
          (strcmp(registration.custom_name, op) == 0)) {
 800128e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001290:	4631      	mov	r1, r6
 8001292:	f7fe ffc5 	bl	8000220 <strcmp>
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 8001296:	2800      	cmp	r0, #0
 8001298:	d1bc      	bne.n	8001214 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc+0x1c>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 800129a:	2001      	movs	r0, #1
 800129c:	e7d9      	b.n	8001252 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc+0x5a>
          (strcmp(registration.custom_name, op) == 0)) {
 800129e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80012a0:	4631      	mov	r1, r6
 80012a2:	f7fe ffbd 	bl	8000220 <strcmp>
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 80012a6:	2800      	cmp	r0, #0
 80012a8:	d1b9      	bne.n	800121e <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc+0x26>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 80012aa:	2002      	movs	r0, #2
 80012ac:	e7d1      	b.n	8001252 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc+0x5a>
 80012ae:	bf00      	nop

080012b0 <_ZN6tflite22MicroMutableOpResolverILj6EE10AddBuiltinENS_15BuiltinOperatorERK16TFLMRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE.isra.0>:

 private:
  TfLiteStatus AddBuiltin(tflite::BuiltinOperator op,
                          const TFLMRegistration& registration,
                          TfLiteBridgeBuiltinParseFunction parser) {
    if (op == BuiltinOperator_CUSTOM) {
 80012b0:	2920      	cmp	r1, #32
  TfLiteStatus AddBuiltin(tflite::BuiltinOperator op,
 80012b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (op == BuiltinOperator_CUSTOM) {
 80012b6:	d040      	beq.n	800133a <_ZN6tflite22MicroMutableOpResolverILj6EE10AddBuiltinENS_15BuiltinOperatorERK16TFLMRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE.isra.0+0x8a>
 80012b8:	461e      	mov	r6, r3
      MicroPrintf("Invalid parameter BuiltinOperator_CUSTOM to the ");
      MicroPrintf("AddBuiltin function.");
      return kTfLiteError;
    }

    if (FindOp(op) != nullptr) {
 80012ba:	6803      	ldr	r3, [r0, #0]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4604      	mov	r4, r0
 80012c0:	4617      	mov	r7, r2
 80012c2:	460d      	mov	r5, r1
 80012c4:	4798      	blx	r3
 80012c6:	bb28      	cbnz	r0, 8001314 <_ZN6tflite22MicroMutableOpResolverILj6EE10AddBuiltinENS_15BuiltinOperatorERK16TFLMRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE.isra.0+0x64>
      MicroPrintf("Calling AddBuiltin with the same op more than ");
      MicroPrintf("once is not supported (Op: #%d).", op);
      return kTfLiteError;
    }

    if (registrations_len_ >= tOpCount) {
 80012c8:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 80012cc:	2b05      	cmp	r3, #5
 80012ce:	d82a      	bhi.n	8001326 <_ZN6tflite22MicroMutableOpResolverILj6EE10AddBuiltinENS_15BuiltinOperatorERK16TFLMRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE.isra.0+0x76>
      MicroPrintf("Couldn't register builtin op #%d, resolver size ", op);
      MicroPrintf("is too small (%d).", tOpCount);
      return kTfLiteError;
    }

    registrations_[registrations_len_] = registration;
 80012d0:	f04f 091c 	mov.w	r9, #28
 80012d4:	fb09 4903 	mla	r9, r9, r3, r4
 80012d8:	46be      	mov	lr, r7
    // Strictly speaking, the builtin_code is not necessary for TFLM but filling
    // it in regardless.
    registrations_[registrations_len_].builtin_code = op;
    registrations_len_++;
 80012da:	1c5f      	adds	r7, r3, #1

    builtin_codes_[num_buitin_ops_] = op;
 80012dc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80012e0:	eb04 0a83 	add.w	sl, r4, r3, lsl #2
    builtin_parsers_[num_buitin_ops_] = parser;
    num_buitin_ops_++;
 80012e4:	f103 0801 	add.w	r8, r3, #1
    registrations_[registrations_len_] = registration;
 80012e8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80012ec:	f109 0c04 	add.w	ip, r9, #4
 80012f0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80012f4:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 80012f8:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    registrations_[registrations_len_].builtin_code = op;
 80012fc:	f8c9 5018 	str.w	r5, [r9, #24]
    registrations_len_++;
 8001300:	f8c4 70ac 	str.w	r7, [r4, #172]	; 0xac
    builtin_codes_[num_buitin_ops_] = op;
 8001304:	f8ca 50b0 	str.w	r5, [sl, #176]	; 0xb0
    builtin_parsers_[num_buitin_ops_] = parser;
 8001308:	f8ca 60c8 	str.w	r6, [sl, #200]	; 0xc8
    num_buitin_ops_++;
 800130c:	f8c4 80e0 	str.w	r8, [r4, #224]	; 0xe0

    return kTfLiteOk;
  }
 8001310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      MicroPrintf("Calling AddBuiltin with the same op more than ");
 8001314:	480d      	ldr	r0, [pc, #52]	; (800134c <_ZN6tflite22MicroMutableOpResolverILj6EE10AddBuiltinENS_15BuiltinOperatorERK16TFLMRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE.isra.0+0x9c>)
 8001316:	f008 fa61 	bl	80097dc <_Z11MicroPrintfPKcz>
      MicroPrintf("once is not supported (Op: #%d).", op);
 800131a:	4629      	mov	r1, r5
 800131c:	480c      	ldr	r0, [pc, #48]	; (8001350 <_ZN6tflite22MicroMutableOpResolverILj6EE10AddBuiltinENS_15BuiltinOperatorERK16TFLMRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE.isra.0+0xa0>)
  }
 800131e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      MicroPrintf("once is not supported (Op: #%d).", op);
 8001322:	f008 ba5b 	b.w	80097dc <_Z11MicroPrintfPKcz>
      MicroPrintf("Couldn't register builtin op #%d, resolver size ", op);
 8001326:	4629      	mov	r1, r5
 8001328:	480a      	ldr	r0, [pc, #40]	; (8001354 <_ZN6tflite22MicroMutableOpResolverILj6EE10AddBuiltinENS_15BuiltinOperatorERK16TFLMRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE.isra.0+0xa4>)
 800132a:	f008 fa57 	bl	80097dc <_Z11MicroPrintfPKcz>
  }
 800132e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      MicroPrintf("is too small (%d).", tOpCount);
 8001332:	4809      	ldr	r0, [pc, #36]	; (8001358 <_ZN6tflite22MicroMutableOpResolverILj6EE10AddBuiltinENS_15BuiltinOperatorERK16TFLMRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE.isra.0+0xa8>)
 8001334:	2106      	movs	r1, #6
 8001336:	f008 ba51 	b.w	80097dc <_Z11MicroPrintfPKcz>
      MicroPrintf("Invalid parameter BuiltinOperator_CUSTOM to the ");
 800133a:	4808      	ldr	r0, [pc, #32]	; (800135c <_ZN6tflite22MicroMutableOpResolverILj6EE10AddBuiltinENS_15BuiltinOperatorERK16TFLMRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE.isra.0+0xac>)
 800133c:	f008 fa4e 	bl	80097dc <_Z11MicroPrintfPKcz>
  }
 8001340:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      MicroPrintf("AddBuiltin function.");
 8001344:	4806      	ldr	r0, [pc, #24]	; (8001360 <_ZN6tflite22MicroMutableOpResolverILj6EE10AddBuiltinENS_15BuiltinOperatorERK16TFLMRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE.isra.0+0xb0>)
 8001346:	f008 ba49 	b.w	80097dc <_Z11MicroPrintfPKcz>
 800134a:	bf00      	nop
 800134c:	08019a1c 	.word	0x08019a1c
 8001350:	08019a4c 	.word	0x08019a4c
 8001354:	08019a70 	.word	0x08019a70
 8001358:	08019aa4 	.word	0x08019aa4
 800135c:	080199d0 	.word	0x080199d0
 8001360:	08019a04 	.word	0x08019a04

08001364 <__tcf_1>:
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop

08001368 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001368:	b510      	push	{r4, lr}
 800136a:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800136c:	2238      	movs	r2, #56	; 0x38
 800136e:	2100      	movs	r1, #0
 8001370:	a806      	add	r0, sp, #24
 8001372:	f016 fabb 	bl	80178ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001376:	2300      	movs	r3, #0

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001378:	f44f 7000 	mov.w	r0, #512	; 0x200
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800137c:	e9cd 3300 	strd	r3, r3, [sp]
 8001380:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001384:	9304      	str	r3, [sp, #16]
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001386:	f001 f993 	bl	80026b0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800138a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800138e:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001390:	2240      	movs	r2, #64	; 0x40
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001392:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001394:	2404      	movs	r4, #4
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001396:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 75;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001398:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLN = 75;
 800139a:	224b      	movs	r2, #75	; 0x4b
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800139c:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 75;
 80013a0:	e9cd 420f 	strd	r4, r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80013a4:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013a8:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80013aa:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013ac:	f001 fa34 	bl	8002818 <HAL_RCC_OscConfig>
 80013b0:	b108      	cbz	r0, 80013b6 <_Z18SystemClock_Configv+0x4e>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013b2:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013b4:	e7fe      	b.n	80013b4 <_Z18SystemClock_Configv+0x4c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013b6:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 80013e0 <_Z18SystemClock_Configv+0x78>
 80013ba:	ed8d 7b00 	vstr	d7, [sp]
 80013be:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 80013e8 <_Z18SystemClock_Configv+0x80>
 80013c2:	4603      	mov	r3, r0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80013c4:	4621      	mov	r1, r4
 80013c6:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013c8:	ed8d 7b02 	vstr	d7, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013cc:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80013ce:	f001 fd35 	bl	8002e3c <HAL_RCC_ClockConfig>
 80013d2:	b108      	cbz	r0, 80013d8 <_Z18SystemClock_Configv+0x70>
 80013d4:	b672      	cpsid	i
  while (1)
 80013d6:	e7fe      	b.n	80013d6 <_Z18SystemClock_Configv+0x6e>
}
 80013d8:	b014      	add	sp, #80	; 0x50
 80013da:	bd10      	pop	{r4, pc}
 80013dc:	f3af 8000 	nop.w
 80013e0:	0000000f 	.word	0x0000000f
 80013e4:	00000003 	.word	0x00000003
	...

080013f0 <main>:
{
 80013f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013f4:	ed2d 8b0a 	vpush	{d8-d12}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f8:	2400      	movs	r4, #0
{
 80013fa:	b0b1      	sub	sp, #196	; 0xc4
  HAL_Init();
 80013fc:	f000 fd3f 	bl	8001e7e <HAL_Init>
  SystemClock_Config();
 8001400:	f7ff ffb2 	bl	8001368 <_Z18SystemClock_Configv>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001404:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
 8001408:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800140c:	4b7a      	ldr	r3, [pc, #488]	; (80015f8 <main+0x208>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140e:	940e      	str	r4, [sp, #56]	; 0x38
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001410:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
  hlpuart1.Instance = LPUART1;
 8001412:	4d7a      	ldr	r5, [pc, #488]	; (80015fc <main+0x20c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001414:	f041 0104 	orr.w	r1, r1, #4
 8001418:	64d9      	str	r1, [r3, #76]	; 0x4c
 800141a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800141c:	f001 0104 	and.w	r1, r1, #4
 8001420:	9106      	str	r1, [sp, #24]
 8001422:	9906      	ldr	r1, [sp, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001424:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8001426:	f041 0120 	orr.w	r1, r1, #32
 800142a:	64d9      	str	r1, [r3, #76]	; 0x4c
 800142c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800142e:	f001 0120 	and.w	r1, r1, #32
 8001432:	9107      	str	r1, [sp, #28]
 8001434:	9907      	ldr	r1, [sp, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001436:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8001438:	f041 0101 	orr.w	r1, r1, #1
 800143c:	64d9      	str	r1, [r3, #76]	; 0x4c
 800143e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8001440:	f001 0101 	and.w	r1, r1, #1
 8001444:	9108      	str	r1, [sp, #32]
 8001446:	9908      	ldr	r1, [sp, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001448:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800144a:	f041 0102 	orr.w	r1, r1, #2
 800144e:	64d9      	str	r1, [r3, #76]	; 0x4c
 8001450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001452:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001456:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001458:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800145a:	2120      	movs	r1, #32
 800145c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001460:	9b09      	ldr	r3, [sp, #36]	; 0x24
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001462:	f001 f8cf 	bl	8002604 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 8001466:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800146a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800146e:	4864      	ldr	r0, [pc, #400]	; (8001600 <main+0x210>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001470:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001472:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pin = B1_Pin;
 8001474:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001478:	f000 ff42 	bl	8002300 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800147c:	2301      	movs	r3, #1
 800147e:	2220      	movs	r2, #32
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001480:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001484:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001486:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148a:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800148e:	f000 ff37 	bl	8002300 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001492:	4622      	mov	r2, r4
 8001494:	4621      	mov	r1, r4
 8001496:	2028      	movs	r0, #40	; 0x28
 8001498:	f000 fe3d 	bl	8002116 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800149c:	2028      	movs	r0, #40	; 0x28
 800149e:	f000 fe54 	bl	800214a <HAL_NVIC_EnableIRQ>
  hlpuart1.Init.BaudRate = 115200;
 80014a2:	4a58      	ldr	r2, [pc, #352]	; (8001604 <main+0x214>)
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014a4:	61ac      	str	r4, [r5, #24]
  hlpuart1.Init.BaudRate = 115200;
 80014a6:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80014aa:	e9c5 2300 	strd	r2, r3, [r5]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80014ae:	230c      	movs	r3, #12
 80014b0:	e9c5 4304 	strd	r4, r3, [r5, #16]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014b4:	2200      	movs	r2, #0
 80014b6:	2300      	movs	r3, #0
 80014b8:	e9c5 2308 	strd	r2, r3, [r5, #32]
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80014bc:	4628      	mov	r0, r5
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80014be:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014c2:	62ac      	str	r4, [r5, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80014c4:	f002 fa7c 	bl	80039c0 <HAL_UART_Init>
 80014c8:	b108      	cbz	r0, 80014ce <main+0xde>
 80014ca:	b672      	cpsid	i
  while (1)
 80014cc:	e7fe      	b.n	80014cc <main+0xdc>
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014ce:	4601      	mov	r1, r0
 80014d0:	4628      	mov	r0, r5
 80014d2:	f004 fad6 	bl	8005a82 <HAL_UARTEx_SetTxFifoThreshold>
 80014d6:	b108      	cbz	r0, 80014dc <main+0xec>
 80014d8:	b672      	cpsid	i
  while (1)
 80014da:	e7fe      	b.n	80014da <main+0xea>
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014dc:	4601      	mov	r1, r0
 80014de:	4628      	mov	r0, r5
 80014e0:	f004 fb0d 	bl	8005afe <HAL_UARTEx_SetRxFifoThreshold>
 80014e4:	b108      	cbz	r0, 80014ea <main+0xfa>
 80014e6:	b672      	cpsid	i
  while (1)
 80014e8:	e7fe      	b.n	80014e8 <main+0xf8>
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80014ea:	4628      	mov	r0, r5
 80014ec:	f004 fa90 	bl	8005a10 <HAL_UARTEx_DisableFifoMode>
 80014f0:	4603      	mov	r3, r0
 80014f2:	b108      	cbz	r0, 80014f8 <main+0x108>
 80014f4:	b672      	cpsid	i
  while (1)
 80014f6:	e7fe      	b.n	80014f6 <main+0x106>
  htim16.Instance = TIM16;
 80014f8:	4c43      	ldr	r4, [pc, #268]	; (8001608 <main+0x218>)
  htim16.Init.Prescaler = 80 - 1;
 80014fa:	4944      	ldr	r1, [pc, #272]	; (800160c <main+0x21c>)
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014fc:	61a3      	str	r3, [r4, #24]
  htim16.Init.Prescaler = 80 - 1;
 80014fe:	224f      	movs	r2, #79	; 0x4f
 8001500:	e9c4 1200 	strd	r1, r2, [r4]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001504:	4620      	mov	r0, r4
  htim16.Init.Period = 65535;
 8001506:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800150a:	e9c4 3202 	strd	r3, r2, [r4, #8]
  htim16.Init.RepetitionCounter = 0;
 800150e:	e9c4 3304 	strd	r3, r3, [r4, #16]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001512:	f002 f8eb 	bl	80036ec <HAL_TIM_Base_Init>
 8001516:	b108      	cbz	r0, 800151c <main+0x12c>
 8001518:	b672      	cpsid	i
  while (1)
 800151a:	e7fe      	b.n	800151a <main+0x12a>
  static tflite::MicroErrorReporter micro_error_reporter;
 800151c:	4d3c      	ldr	r5, [pc, #240]	; (8001610 <main+0x220>)
  HAL_TIM_Base_Start(&htim16);
 800151e:	4620      	mov	r0, r4
 8001520:	f002 f93c 	bl	800379c <HAL_TIM_Base_Start>
  static tflite::MicroErrorReporter micro_error_reporter;
 8001524:	682b      	ldr	r3, [r5, #0]
 8001526:	f3bf 8f5b 	dmb	ish
 800152a:	07db      	lsls	r3, r3, #31
 800152c:	f140 8271 	bpl.w	8001a12 <main+0x622>
  error_reporter = &micro_error_reporter;
 8001530:	f8df a124 	ldr.w	sl, [pc, #292]	; 8001658 <main+0x268>
 8001534:	4837      	ldr	r0, [pc, #220]	; (8001614 <main+0x224>)
  error_reporter->Report("\r\n------------------------------------");
 8001536:	4938      	ldr	r1, [pc, #224]	; (8001618 <main+0x228>)
  model = tflite::GetModel(cnn_model_int8);
 8001538:	4e38      	ldr	r6, [pc, #224]	; (800161c <main+0x22c>)
  error_reporter = &micro_error_reporter;
 800153a:	f8ca 0000 	str.w	r0, [sl]
  error_reporter->Report("\r\n------------------------------------");
 800153e:	f004 fb6b 	bl	8005c18 <_ZN6tflite13ErrorReporter6ReportEPKcz>
  error_reporter->Report("STM32 TF lite test");
 8001542:	4937      	ldr	r1, [pc, #220]	; (8001620 <main+0x230>)
 8001544:	f8da 0000 	ldr.w	r0, [sl]
  static tflite::MicroMutableOpResolver<6> micro_op_resolver;
 8001548:	4d36      	ldr	r5, [pc, #216]	; (8001624 <main+0x234>)
  error_reporter->Report("STM32 TF lite test");
 800154a:	f004 fb65 	bl	8005c18 <_ZN6tflite13ErrorReporter6ReportEPKcz>
  model = tflite::GetModel(cnn_model_int8);
 800154e:	4b36      	ldr	r3, [pc, #216]	; (8001628 <main+0x238>)
 8001550:	6033      	str	r3, [r6, #0]
  static tflite::MicroMutableOpResolver<6> micro_op_resolver;
 8001552:	682c      	ldr	r4, [r5, #0]
 8001554:	f3bf 8f5b 	dmb	ish
 8001558:	f014 0401 	ands.w	r4, r4, #1
 800155c:	f000 8245 	beq.w	80019ea <main+0x5fa>
  micro_op_resolver.AddConv2D(tflite::Register_CONV_2D_INT8());
 8001560:	a80a      	add	r0, sp, #40	; 0x28
 8001562:	f00a f83b 	bl	800b5dc <_ZN6tflite21Register_CONV_2D_INT8Ev>
    return AddBuiltin(BuiltinOperator_CONV_2D, registration, ParseConv2D);
 8001566:	4b31      	ldr	r3, [pc, #196]	; (800162c <main+0x23c>)
 8001568:	4831      	ldr	r0, [pc, #196]	; (8001630 <main+0x240>)
  static tflite::MicroInterpreter static_interpreter(model, micro_op_resolver, tensor_arena, kTensorArenaSize);
 800156a:	4d32      	ldr	r5, [pc, #200]	; (8001634 <main+0x244>)
 800156c:	aa0a      	add	r2, sp, #40	; 0x28
 800156e:	2103      	movs	r1, #3
 8001570:	f7ff fe9e 	bl	80012b0 <_ZN6tflite22MicroMutableOpResolverILj6EE10AddBuiltinENS_15BuiltinOperatorERK16TFLMRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE.isra.0>
    return AddBuiltin(BuiltinOperator_RESHAPE, Register_RESHAPE(),
 8001574:	a80a      	add	r0, sp, #40	; 0x28
 8001576:	f009 fc17 	bl	800ada8 <_ZN6tflite16Register_RESHAPEEv>
 800157a:	4b2f      	ldr	r3, [pc, #188]	; (8001638 <main+0x248>)
 800157c:	482c      	ldr	r0, [pc, #176]	; (8001630 <main+0x240>)
 800157e:	aa0a      	add	r2, sp, #40	; 0x28
 8001580:	2116      	movs	r1, #22
 8001582:	f7ff fe95 	bl	80012b0 <_ZN6tflite22MicroMutableOpResolverILj6EE10AddBuiltinENS_15BuiltinOperatorERK16TFLMRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE.isra.0>
    return AddBuiltin(BuiltinOperator_QUANTIZE, Register_QUANTIZE(),
 8001586:	a80a      	add	r0, sp, #40	; 0x28
 8001588:	f008 ff12 	bl	800a3b0 <_ZN6tflite17Register_QUANTIZEEv>
 800158c:	4b2b      	ldr	r3, [pc, #172]	; (800163c <main+0x24c>)
 800158e:	4828      	ldr	r0, [pc, #160]	; (8001630 <main+0x240>)
 8001590:	aa0a      	add	r2, sp, #40	; 0x28
 8001592:	2172      	movs	r1, #114	; 0x72
 8001594:	f7ff fe8c 	bl	80012b0 <_ZN6tflite22MicroMutableOpResolverILj6EE10AddBuiltinENS_15BuiltinOperatorERK16TFLMRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE.isra.0>
  micro_op_resolver.AddMaxPool2D(tflite::Register_MAX_POOL_2D_INT8());
 8001598:	a80a      	add	r0, sp, #40	; 0x28
 800159a:	f00a fbdb 	bl	800bd54 <_ZN6tflite25Register_MAX_POOL_2D_INT8Ev>
    return AddBuiltin(BuiltinOperator_MAX_POOL_2D, registration, ParsePool);
 800159e:	4b28      	ldr	r3, [pc, #160]	; (8001640 <main+0x250>)
 80015a0:	4823      	ldr	r0, [pc, #140]	; (8001630 <main+0x240>)
 80015a2:	aa0a      	add	r2, sp, #40	; 0x28
 80015a4:	2111      	movs	r1, #17
 80015a6:	f7ff fe83 	bl	80012b0 <_ZN6tflite22MicroMutableOpResolverILj6EE10AddBuiltinENS_15BuiltinOperatorERK16TFLMRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE.isra.0>
  micro_op_resolver.AddFullyConnected(tflite::Register_FULLY_CONNECTED_INT8());
 80015aa:	a80a      	add	r0, sp, #40	; 0x28
 80015ac:	f00a fb0a 	bl	800bbc4 <_ZN6tflite29Register_FULLY_CONNECTED_INT8Ev>
    return AddBuiltin(BuiltinOperator_FULLY_CONNECTED, registration,
 80015b0:	4b24      	ldr	r3, [pc, #144]	; (8001644 <main+0x254>)
 80015b2:	481f      	ldr	r0, [pc, #124]	; (8001630 <main+0x240>)
 80015b4:	aa0a      	add	r2, sp, #40	; 0x28
 80015b6:	2109      	movs	r1, #9
 80015b8:	f7ff fe7a 	bl	80012b0 <_ZN6tflite22MicroMutableOpResolverILj6EE10AddBuiltinENS_15BuiltinOperatorERK16TFLMRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE.isra.0>
    return AddBuiltin(BuiltinOperator_DEQUANTIZE, tflite::Register_DEQUANTIZE(),
 80015bc:	a80a      	add	r0, sp, #40	; 0x28
 80015be:	f008 fc6b 	bl	8009e98 <_ZN6tflite19Register_DEQUANTIZEEv>
 80015c2:	4b21      	ldr	r3, [pc, #132]	; (8001648 <main+0x258>)
 80015c4:	481a      	ldr	r0, [pc, #104]	; (8001630 <main+0x240>)
 80015c6:	aa0a      	add	r2, sp, #40	; 0x28
 80015c8:	2106      	movs	r1, #6
 80015ca:	f7ff fe71 	bl	80012b0 <_ZN6tflite22MicroMutableOpResolverILj6EE10AddBuiltinENS_15BuiltinOperatorERK16TFLMRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE.isra.0>
  static tflite::MicroInterpreter static_interpreter(model, micro_op_resolver, tensor_arena, kTensorArenaSize);
 80015ce:	682c      	ldr	r4, [r5, #0]
 80015d0:	f3bf 8f5b 	dmb	ish
 80015d4:	f014 0401 	ands.w	r4, r4, #1
 80015d8:	f000 81ee 	beq.w	80019b8 <main+0x5c8>
  interpreter = &static_interpreter;
 80015dc:	4b1b      	ldr	r3, [pc, #108]	; (800164c <main+0x25c>)
 80015de:	481c      	ldr	r0, [pc, #112]	; (8001650 <main+0x260>)
 80015e0:	6018      	str	r0, [r3, #0]
  TfLiteStatus allocate_status = interpreter->AllocateTensors();
 80015e2:	f007 fb49 	bl	8008c78 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>
  if (allocate_status != kTfLiteOk) {
 80015e6:	4605      	mov	r5, r0
 80015e8:	b3c0      	cbz	r0, 800165c <main+0x26c>
	  error_reporter->Report("AllocateTensors() failed");
 80015ea:	491a      	ldr	r1, [pc, #104]	; (8001654 <main+0x264>)
 80015ec:	f8da 0000 	ldr.w	r0, [sl]
 80015f0:	f004 fb12 	bl	8005c18 <_ZN6tflite13ErrorReporter6ReportEPKcz>
	  while(1);
 80015f4:	e7fe      	b.n	80015f4 <main+0x204>
 80015f6:	bf00      	nop
 80015f8:	40021000 	.word	0x40021000
 80015fc:	20009bc8 	.word	0x20009bc8
 8001600:	48000800 	.word	0x48000800
 8001604:	40008000 	.word	0x40008000
 8001608:	20009c5c 	.word	0x20009c5c
 800160c:	40014400 	.word	0x40014400
 8001610:	20000204 	.word	0x20000204
 8001614:	20000000 	.word	0x20000000
 8001618:	08019ab8 	.word	0x08019ab8
 800161c:	20009a24 	.word	0x20009a24
 8001620:	08019ae0 	.word	0x08019ae0
 8001624:	200001fc 	.word	0x200001fc
 8001628:	08019cf8 	.word	0x08019cf8
 800162c:	08005d01 	.word	0x08005d01
 8001630:	20009a28 	.word	0x20009a28
 8001634:	20000200 	.word	0x20000200
 8001638:	08006011 	.word	0x08006011
 800163c:	0800600d 	.word	0x0800600d
 8001640:	08005f3d 	.word	0x08005f3d
 8001644:	08005e29 	.word	0x08005e29
 8001648:	08005e25 	.word	0x08005e25
 800164c:	20000208 	.word	0x20000208
 8001650:	20009b0c 	.word	0x20009b0c
 8001654:	08019af4 	.word	0x08019af4
 8001658:	20009a20 	.word	0x20009a20
  model_input = interpreter->input(0);
 800165c:	4ec3      	ldr	r6, [pc, #780]	; (800196c <main+0x57c>)
 800165e:	f8df b350 	ldr.w	fp, [pc, #848]	; 80019b0 <main+0x5c0>
  model_output = interpreter->output(0);
 8001662:	f8df 9350 	ldr.w	r9, [pc, #848]	; 80019b4 <main+0x5c4>
  model_input = interpreter->input(0);
 8001666:	4601      	mov	r1, r0
 8001668:	6830      	ldr	r0, [r6, #0]
 800166a:	f007 f903 	bl	8008874 <_ZN6tflite16MicroInterpreter5inputEj>
  model_output = interpreter->output(0);
 800166e:	4629      	mov	r1, r5
  model_input = interpreter->input(0);
 8001670:	f8cb 0000 	str.w	r0, [fp]
  model_output = interpreter->output(0);
 8001674:	6830      	ldr	r0, [r6, #0]
 8001676:	f007 f935 	bl	80088e4 <_ZN6tflite16MicroInterpreter6outputEj>
  error_reporter->Report("Fully Optimized Setup OK!");
 800167a:	49bd      	ldr	r1, [pc, #756]	; (8001970 <main+0x580>)
  model_output = interpreter->output(0);
 800167c:	f8c9 0000 	str.w	r0, [r9]
  error_reporter->Report("Fully Optimized Setup OK!");
 8001680:	f8da 0000 	ldr.w	r0, [sl]
 8001684:	f004 fac8 	bl	8005c18 <_ZN6tflite13ErrorReporter6ReportEPKcz>
  num_elements = model_input->bytes / sizeof(float);
 8001688:	f8db 3000 	ldr.w	r3, [fp]
  sprintf(buf, "Model input / output elements: %lu / %d", num_elements, model_output->bytes / sizeof(float));
 800168c:	49b9      	ldr	r1, [pc, #740]	; (8001974 <main+0x584>)
  num_elements = model_input->bytes / sizeof(float);
 800168e:	699c      	ldr	r4, [r3, #24]
  sprintf(buf, "Model input / output elements: %lu / %d", num_elements, model_output->bytes / sizeof(float));
 8001690:	f8d9 3000 	ldr.w	r3, [r9]
 8001694:	699b      	ldr	r3, [r3, #24]
  num_elements = model_input->bytes / sizeof(float);
 8001696:	08a4      	lsrs	r4, r4, #2
  sprintf(buf, "Model input / output elements: %lu / %d", num_elements, model_output->bytes / sizeof(float));
 8001698:	089b      	lsrs	r3, r3, #2
 800169a:	4622      	mov	r2, r4
 800169c:	a80a      	add	r0, sp, #40	; 0x28
 800169e:	f016 f887 	bl	80177b0 <siprintf>
  error_reporter->Report(buf);
 80016a2:	a90a      	add	r1, sp, #40	; 0x28
 80016a4:	f8da 0000 	ldr.w	r0, [sl]
 80016a8:	f004 fab6 	bl	8005c18 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return model_->subgraphs()->Get(0)->inputs()->size();
  }
  const flatbuffers::Vector<int32_t>& inputs() const {
    return *model_->subgraphs()->Get(0)->inputs();
  }
  TfLiteTensor* input_tensor(size_t index) { return input(index); }
 80016ac:	4629      	mov	r1, r5
 80016ae:	6830      	ldr	r0, [r6, #0]
 80016b0:	f007 f8e0 	bl	8008874 <_ZN6tflite16MicroInterpreter5inputEj>
  sprintf(buf, "Input Tensor Type: %s", TfLiteTypeGetName(input_tensor_type));
 80016b4:	7f00      	ldrb	r0, [r0, #28]
 80016b6:	f004 fd45 	bl	8006144 <TfLiteTypeGetName>
 80016ba:	49af      	ldr	r1, [pc, #700]	; (8001978 <main+0x588>)
 80016bc:	4602      	mov	r2, r0
 80016be:	a80a      	add	r0, sp, #40	; 0x28
 80016c0:	f016 f876 	bl	80177b0 <siprintf>
  error_reporter->Report(buf);
 80016c4:	a90a      	add	r1, sp, #40	; 0x28
 80016c6:	f8da 0000 	ldr.w	r0, [sl]
 80016ca:	f004 faa5 	bl	8005c18 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return model_->subgraphs()->Get(0)->outputs()->size();
  }
  const flatbuffers::Vector<int32_t>& outputs() const {
    return *model_->subgraphs()->Get(0)->outputs();
  }
  TfLiteTensor* output_tensor(size_t index) { return output(index); }
 80016ce:	4629      	mov	r1, r5
 80016d0:	6830      	ldr	r0, [r6, #0]
 80016d2:	4daa      	ldr	r5, [pc, #680]	; (800197c <main+0x58c>)
 80016d4:	f007 f906 	bl	80088e4 <_ZN6tflite16MicroInterpreter6outputEj>
  sprintf(buf, "Output Tensor Type: %s\r\n", TfLiteTypeGetName(output_tensor_type));
 80016d8:	7f00      	ldrb	r0, [r0, #28]
 80016da:	f004 fd33 	bl	8006144 <TfLiteTypeGetName>
 80016de:	49a8      	ldr	r1, [pc, #672]	; (8001980 <main+0x590>)
 80016e0:	4602      	mov	r2, r0
 80016e2:	a80a      	add	r0, sp, #40	; 0x28
 80016e4:	f016 f864 	bl	80177b0 <siprintf>
  error_reporter->Report(buf);
 80016e8:	a90a      	add	r1, sp, #40	; 0x28
 80016ea:	f8da 0000 	ldr.w	r0, [sl]
 80016ee:	f004 fa93 	bl	8005c18 <_ZN6tflite13ErrorReporter6ReportEPKcz>
  HAL_UART_Receive_IT(&hlpuart1, uart_rx_data, sizeof(uart_rx_data));
 80016f2:	49a4      	ldr	r1, [pc, #656]	; (8001984 <main+0x594>)
 80016f4:	48a4      	ldr	r0, [pc, #656]	; (8001988 <main+0x598>)
 80016f6:	220a      	movs	r2, #10
 80016f8:	f002 fa40 	bl	8003b7c <HAL_UART_Receive_IT>
	  for (uint8_t img = 0; img < sizeof(inference_array) / sizeof(inference_array[0]); ++img)
 80016fc:	4ba3      	ldr	r3, [pc, #652]	; (800198c <main+0x59c>)
 80016fe:	9304      	str	r3, [sp, #16]
	  uint8_t correct_predictions = 0;
 8001700:	2700      	movs	r7, #0
 8001702:	9705      	str	r7, [sp, #20]
		  for (uint16_t i = 0; i < num_elements; ++i)
 8001704:	b19c      	cbz	r4, 800172e <main+0x33e>
			  model_input->data.f[i] = inference_array[img][i];
 8001706:	f8db 3000 	ldr.w	r3, [fp]
 800170a:	eb07 0047 	add.w	r0, r7, r7, lsl #1
 800170e:	691e      	ldr	r6, [r3, #16]
		  for (uint16_t i = 0; i < num_elements; ++i)
 8001710:	2300      	movs	r3, #0
			  model_input->data.f[i] = inference_array[img][i];
 8001712:	0280      	lsls	r0, r0, #10
		  for (uint16_t i = 0; i < num_elements; ++i)
 8001714:	461a      	mov	r2, r3
			  model_input->data.f[i] = inference_array[img][i];
 8001716:	18c1      	adds	r1, r0, r3
 8001718:	eb05 0181 	add.w	r1, r5, r1, lsl #2
		  for (uint16_t i = 0; i < num_elements; ++i)
 800171c:	3301      	adds	r3, #1
			  model_input->data.f[i] = inference_array[img][i];
 800171e:	eb06 0282 	add.w	r2, r6, r2, lsl #2
		  for (uint16_t i = 0; i < num_elements; ++i)
 8001722:	b29b      	uxth	r3, r3
			  model_input->data.f[i] = inference_array[img][i];
 8001724:	6809      	ldr	r1, [r1, #0]
 8001726:	6011      	str	r1, [r2, #0]
		  for (uint16_t i = 0; i < num_elements; ++i)
 8001728:	42a3      	cmp	r3, r4
 800172a:	461a      	mov	r2, r3
 800172c:	d3f3      	bcc.n	8001716 <main+0x326>
		  uint32_t tick0 = HAL_GetTick();
 800172e:	f000 fc0b 	bl	8001f48 <HAL_GetTick>
		  tflite_status = interpreter->Invoke();
 8001732:	4b8e      	ldr	r3, [pc, #568]	; (800196c <main+0x57c>)
		  uint32_t tick0 = HAL_GetTick();
 8001734:	4606      	mov	r6, r0
		  tflite_status = interpreter->Invoke();
 8001736:	6818      	ldr	r0, [r3, #0]
 8001738:	f007 fc32 	bl	8008fa0 <_ZN6tflite16MicroInterpreter6InvokeEv>
		  if (tflite_status != kTfLiteOk)
 800173c:	2800      	cmp	r0, #0
 800173e:	f040 8108 	bne.w	8001952 <main+0x562>
		  sprintf(buf, "Process image time: %lu (ms)", HAL_GetTick() - tick0);
 8001742:	f000 fc01 	bl	8001f48 <HAL_GetTick>
 8001746:	4992      	ldr	r1, [pc, #584]	; (8001990 <main+0x5a0>)
 8001748:	1b82      	subs	r2, r0, r6
 800174a:	a80a      	add	r0, sp, #40	; 0x28
 800174c:	f016 f830 	bl	80177b0 <siprintf>
		  error_reporter->Report(buf);
 8001750:	a90a      	add	r1, sp, #40	; 0x28
 8001752:	f8da 0000 	ldr.w	r0, [sl]
 8001756:	f004 fa5f 	bl	8005c18 <_ZN6tflite13ErrorReporter6ReportEPKcz>
			  soft_table[i] = model_output->data.f[i];
 800175a:	f8d9 3000 	ldr.w	r3, [r9]
 800175e:	691e      	ldr	r6, [r3, #16]
  using ::exp;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  exp(float __x)
  { return __builtin_expf(__x); }
 8001760:	ed96 0a00 	vldr	s0, [r6]
 8001764:	f015 f862 	bl	801682c <expf>
 8001768:	eef0 aa40 	vmov.f32	s21, s0
 800176c:	ed96 0a01 	vldr	s0, [r6, #4]
 8001770:	f015 f85c 	bl	801682c <expf>
 8001774:	eeb0 aa40 	vmov.f32	s20, s0
 8001778:	ed96 0a02 	vldr	s0, [r6, #8]
 800177c:	f015 f856 	bl	801682c <expf>
 8001780:	eef0 9a40 	vmov.f32	s19, s0
 8001784:	ed96 0a03 	vldr	s0, [r6, #12]
 8001788:	f015 f850 	bl	801682c <expf>
 800178c:	eeb0 9a40 	vmov.f32	s18, s0
 8001790:	ed96 0a04 	vldr	s0, [r6, #16]
 8001794:	f015 f84a 	bl	801682c <expf>
 8001798:	eef0 8a40 	vmov.f32	s17, s0
 800179c:	ed96 0a05 	vldr	s0, [r6, #20]
 80017a0:	f015 f844 	bl	801682c <expf>
 80017a4:	eeb0 ba40 	vmov.f32	s22, s0
 80017a8:	ed96 0a06 	vldr	s0, [r6, #24]
 80017ac:	f015 f83e 	bl	801682c <expf>
        sum_exp += std::exp(input[i]);
 80017b0:	ee3a 8a8a 	vadd.f32	s16, s21, s20
 80017b4:	eef0 ba40 	vmov.f32	s23, s0
 80017b8:	ee38 8a29 	vadd.f32	s16, s16, s19
 80017bc:	ed96 0a07 	vldr	s0, [r6, #28]
 80017c0:	f015 f834 	bl	801682c <expf>
 80017c4:	ee38 8a09 	vadd.f32	s16, s16, s18
 80017c8:	eef0 ca40 	vmov.f32	s25, s0
 80017cc:	ee38 8a28 	vadd.f32	s16, s16, s17
 80017d0:	ed96 0a08 	vldr	s0, [r6, #32]
 80017d4:	f015 f82a 	bl	801682c <expf>
 80017d8:	ee38 8a0b 	vadd.f32	s16, s16, s22
 80017dc:	eeb0 ca40 	vmov.f32	s24, s0
 80017e0:	ee38 8a2b 	vadd.f32	s16, s16, s23
 80017e4:	ed96 0a09 	vldr	s0, [r6, #36]	; 0x24
 80017e8:	f015 f820 	bl	801682c <expf>
 80017ec:	ee78 7a2c 	vadd.f32	s15, s16, s25
 80017f0:	ee77 7a8c 	vadd.f32	s15, s15, s24
 80017f4:	ee77 7a80 	vadd.f32	s15, s15, s0
        input[i] = std::exp(input[i]) / sum_exp;
 80017f8:	ee8a 7aa7 	vdiv.f32	s14, s21, s15
 80017fc:	ee8a 2a27 	vdiv.f32	s4, s20, s15
 8001800:	eec9 2aa7 	vdiv.f32	s5, s19, s15
 8001804:	ee89 3a27 	vdiv.f32	s6, s18, s15
 8001808:	eec8 3aa7 	vdiv.f32	s7, s17, s15
 800180c:	ee8b 4a27 	vdiv.f32	s8, s22, s15
			  if (soft_table[i] > max_probability)
 8001810:	eeb4 7ac2 	vcmpe.f32	s14, s4
        input[i] = std::exp(input[i]) / sum_exp;
 8001814:	eecb 4aa7 	vdiv.f32	s9, s23, s15
			  if (soft_table[i] > max_probability)
 8001818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800181c:	bf48      	it	mi
 800181e:	eeb0 7a42 	vmovmi.f32	s14, s4
 8001822:	eeb4 7ae2 	vcmpe.f32	s14, s5
        input[i] = std::exp(input[i]) / sum_exp;
 8001826:	ee8c 5aa7 	vdiv.f32	s10, s25, s15
		  for (uint8_t i = 1; i < 10; ++i)
 800182a:	bf4c      	ite	mi
 800182c:	2601      	movmi	r6, #1
		  uint8_t index_max_probability = 0;
 800182e:	2600      	movpl	r6, #0
			  if (soft_table[i] > max_probability)
 8001830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001834:	bf48      	it	mi
 8001836:	eeb0 7a62 	vmovmi.f32	s14, s5
 800183a:	eeb4 7ac3 	vcmpe.f32	s14, s6
        input[i] = std::exp(input[i]) / sum_exp;
 800183e:	eecc 5a27 	vdiv.f32	s11, s24, s15
		  for (uint8_t i = 1; i < 10; ++i)
 8001842:	bf48      	it	mi
 8001844:	2602      	movmi	r6, #2
			  if (soft_table[i] > max_probability)
 8001846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800184a:	bf48      	it	mi
 800184c:	eeb0 7a43 	vmovmi.f32	s14, s6
 8001850:	eeb4 7ae3 	vcmpe.f32	s14, s7
		  for (uint8_t i = 1; i < 10; ++i)
 8001854:	bf48      	it	mi
 8001856:	2603      	movmi	r6, #3
			  if (soft_table[i] > max_probability)
 8001858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800185c:	bf48      	it	mi
 800185e:	eeb0 7a63 	vmovmi.f32	s14, s7
 8001862:	eeb4 7ac4 	vcmpe.f32	s14, s8
		  for (uint8_t i = 1; i < 10; ++i)
 8001866:	bf48      	it	mi
 8001868:	2604      	movmi	r6, #4
			  if (soft_table[i] > max_probability)
 800186a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800186e:	bf48      	it	mi
 8001870:	eeb0 7a44 	vmovmi.f32	s14, s8
 8001874:	eeb4 7ae4 	vcmpe.f32	s14, s9
		  for (uint8_t i = 1; i < 10; ++i)
 8001878:	bf48      	it	mi
 800187a:	2605      	movmi	r6, #5
			  if (soft_table[i] > max_probability)
 800187c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001880:	bf48      	it	mi
 8001882:	eeb0 7a64 	vmovmi.f32	s14, s9
 8001886:	eeb4 7ac5 	vcmpe.f32	s14, s10
		  for (uint8_t i = 1; i < 10; ++i)
 800188a:	bf48      	it	mi
 800188c:	2606      	movmi	r6, #6
			  if (soft_table[i] > max_probability)
 800188e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001892:	bf48      	it	mi
 8001894:	eeb0 7a45 	vmovmi.f32	s14, s10
 8001898:	eeb4 7ae5 	vcmpe.f32	s14, s11
		  for (uint8_t i = 1; i < 10; ++i)
 800189c:	bf48      	it	mi
 800189e:	2607      	movmi	r6, #7
			  if (soft_table[i] > max_probability)
 80018a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        input[i] = std::exp(input[i]) / sum_exp;
 80018a4:	ee80 6a27 	vdiv.f32	s12, s0, s15
			  if (soft_table[i] > max_probability)
 80018a8:	d502      	bpl.n	80018b0 <main+0x4c0>
		  for (uint8_t i = 1; i < 10; ++i)
 80018aa:	2608      	movs	r6, #8
			  if (soft_table[i] > max_probability)
 80018ac:	eeb0 7a65 	vmov.f32	s14, s11
 80018b0:	eeb4 7ac6 	vcmpe.f32	s14, s12
 80018b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018b8:	d551      	bpl.n	800195e <main+0x56e>
		  sprintf(buf, "Max probability: %0.2f  |  Prediction: %s  |  Ground truth label: %s \r\n",
 80018ba:	ee16 0a10 	vmov	r0, s12
 80018be:	f7fe fe7b 	bl	80005b8 <__aeabi_f2d>
		  for (uint8_t i = 1; i < 10; ++i)
 80018c2:	2609      	movs	r6, #9
		  sprintf(buf, "Max probability: %0.2f  |  Prediction: %s  |  Ground truth label: %s \r\n",
 80018c4:	4602      	mov	r2, r0
 80018c6:	460b      	mov	r3, r1
				       max_probability, GetClassName(index_max_probability), GetClassName(inference_labels[img]));
 80018c8:	9904      	ldr	r1, [sp, #16]
 80018ca:	4832      	ldr	r0, [pc, #200]	; (8001994 <main+0x5a4>)
 80018cc:	f811 8b01 	ldrb.w	r8, [r1], #1
 80018d0:	9104      	str	r1, [sp, #16]
 80018d2:	f1b8 0f09 	cmp.w	r8, #9
 80018d6:	f850 1026 	ldr.w	r1, [r0, r6, lsl #2]
		  sprintf(buf, "Max probability: %0.2f  |  Prediction: %s  |  Ground truth label: %s \r\n",
 80018da:	9100      	str	r1, [sp, #0]
 80018dc:	d82d      	bhi.n	800193a <main+0x54a>
 80018de:	f850 1028 	ldr.w	r1, [r0, r8, lsl #2]
 80018e2:	9101      	str	r1, [sp, #4]
 80018e4:	a80a      	add	r0, sp, #40	; 0x28
 80018e6:	492c      	ldr	r1, [pc, #176]	; (8001998 <main+0x5a8>)
 80018e8:	f015 ff62 	bl	80177b0 <siprintf>
		  error_reporter->Report(buf);
 80018ec:	f8da 0000 	ldr.w	r0, [sl]
 80018f0:	a90a      	add	r1, sp, #40	; 0x28
 80018f2:	f004 f991 	bl	8005c18 <_ZN6tflite13ErrorReporter6ReportEPKcz>
		  if (index_max_probability == inference_labels[img])
 80018f6:	45b0      	cmp	r8, r6
 80018f8:	d103      	bne.n	8001902 <main+0x512>
			  correct_predictions++;
 80018fa:	9b05      	ldr	r3, [sp, #20]
 80018fc:	3301      	adds	r3, #1
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	9305      	str	r3, [sp, #20]
	  for (uint8_t img = 0; img < sizeof(inference_array) / sizeof(inference_array[0]); ++img)
 8001902:	3701      	adds	r7, #1
 8001904:	2f10      	cmp	r7, #16
 8001906:	f47f aefd 	bne.w	8001704 <main+0x314>
	  sprintf(buf, "Accuracy: %0.2f", 1.0 * correct_predictions / total_samples);
 800190a:	9805      	ldr	r0, [sp, #20]
 800190c:	f7fe fe42 	bl	8000594 <__aeabi_i2d>
 8001910:	4b22      	ldr	r3, [pc, #136]	; (800199c <main+0x5ac>)
 8001912:	2200      	movs	r2, #0
 8001914:	f7fe fea8 	bl	8000668 <__aeabi_dmul>
 8001918:	4602      	mov	r2, r0
 800191a:	460b      	mov	r3, r1
 800191c:	a80a      	add	r0, sp, #40	; 0x28
 800191e:	4920      	ldr	r1, [pc, #128]	; (80019a0 <main+0x5b0>)
 8001920:	f015 ff46 	bl	80177b0 <siprintf>
	  error_reporter->Report(buf);
 8001924:	a90a      	add	r1, sp, #40	; 0x28
 8001926:	f8da 0000 	ldr.w	r0, [sl]
 800192a:	f004 f975 	bl	8005c18 <_ZN6tflite13ErrorReporter6ReportEPKcz>
	  error_reporter->Report("\r\n--------- Iteration done ---------\r\n");
 800192e:	491d      	ldr	r1, [pc, #116]	; (80019a4 <main+0x5b4>)
 8001930:	f8da 0000 	ldr.w	r0, [sl]
 8001934:	f004 f970 	bl	8005c18 <_ZN6tflite13ErrorReporter6ReportEPKcz>
  }
 8001938:	e6e0      	b.n	80016fc <main+0x30c>
		  sprintf(buf, "Max probability: %0.2f  |  Prediction: %s  |  Ground truth label: %s \r\n",
 800193a:	491b      	ldr	r1, [pc, #108]	; (80019a8 <main+0x5b8>)
 800193c:	9101      	str	r1, [sp, #4]
 800193e:	a80a      	add	r0, sp, #40	; 0x28
 8001940:	4915      	ldr	r1, [pc, #84]	; (8001998 <main+0x5a8>)
 8001942:	f015 ff35 	bl	80177b0 <siprintf>
		  error_reporter->Report(buf);
 8001946:	f8da 0000 	ldr.w	r0, [sl]
 800194a:	a90a      	add	r1, sp, #40	; 0x28
 800194c:	f004 f964 	bl	8005c18 <_ZN6tflite13ErrorReporter6ReportEPKcz>
		  if (index_max_probability == inference_labels[img])
 8001950:	e7d7      	b.n	8001902 <main+0x512>
			  error_reporter->Report("Invoke failed :(");
 8001952:	f8da 0000 	ldr.w	r0, [sl]
 8001956:	4915      	ldr	r1, [pc, #84]	; (80019ac <main+0x5bc>)
 8001958:	f004 f95e 	bl	8005c18 <_ZN6tflite13ErrorReporter6ReportEPKcz>
 800195c:	e6f1      	b.n	8001742 <main+0x352>
		  sprintf(buf, "Max probability: %0.2f  |  Prediction: %s  |  Ground truth label: %s \r\n",
 800195e:	ee17 0a10 	vmov	r0, s14
 8001962:	f7fe fe29 	bl	80005b8 <__aeabi_f2d>
 8001966:	4602      	mov	r2, r0
 8001968:	460b      	mov	r3, r1
  switch (class_code) {
 800196a:	e7ad      	b.n	80018c8 <main+0x4d8>
 800196c:	20000208 	.word	0x20000208
 8001970:	08019b10 	.word	0x08019b10
 8001974:	08019b2c 	.word	0x08019b2c
 8001978:	08019b54 	.word	0x08019b54
 800197c:	08039f88 	.word	0x08039f88
 8001980:	08019b6c 	.word	0x08019b6c
 8001984:	20009ca8 	.word	0x20009ca8
 8001988:	20009bc8 	.word	0x20009bc8
 800198c:	08069f88 	.word	0x08069f88
 8001990:	08019b9c 	.word	0x08019b9c
 8001994:	08019cb0 	.word	0x08019cb0
 8001998:	08019bbc 	.word	0x08019bbc
 800199c:	3fb00000 	.word	0x3fb00000
 80019a0:	08019c04 	.word	0x08019c04
 80019a4:	08019c14 	.word	0x08019c14
 80019a8:	08019c3c 	.word	0x08019c3c
 80019ac:	08019b88 	.word	0x08019b88
 80019b0:	2000020c 	.word	0x2000020c
 80019b4:	20000210 	.word	0x20000210
  static tflite::MicroInterpreter static_interpreter(model, micro_op_resolver, tensor_arena, kTensorArenaSize);
 80019b8:	4628      	mov	r0, r5
 80019ba:	f014 feee 	bl	801679a <__cxa_guard_acquire>
 80019be:	2800      	cmp	r0, #0
 80019c0:	f43f ae0c 	beq.w	80015dc <main+0x1ec>
 80019c4:	f44f 4318 	mov.w	r3, #38912	; 0x9800
 80019c8:	6831      	ldr	r1, [r6, #0]
 80019ca:	4a18      	ldr	r2, [pc, #96]	; (8001a2c <main+0x63c>)
 80019cc:	9300      	str	r3, [sp, #0]
 80019ce:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80019d2:	4b17      	ldr	r3, [pc, #92]	; (8001a30 <main+0x640>)
 80019d4:	9401      	str	r4, [sp, #4]
 80019d6:	4817      	ldr	r0, [pc, #92]	; (8001a34 <main+0x644>)
 80019d8:	f006 fef0 	bl	80087bc <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_22MicroResourceVariablesEPNS_22MicroProfilerInterfaceEb>
 80019dc:	4816      	ldr	r0, [pc, #88]	; (8001a38 <main+0x648>)
 80019de:	f015 f8eb 	bl	8016bb8 <atexit>
 80019e2:	4628      	mov	r0, r5
 80019e4:	f014 fee5 	bl	80167b2 <__cxa_guard_release>
 80019e8:	e5f8      	b.n	80015dc <main+0x1ec>
  static tflite::MicroMutableOpResolver<6> micro_op_resolver;
 80019ea:	4628      	mov	r0, r5
 80019ec:	f014 fed5 	bl	801679a <__cxa_guard_acquire>
 80019f0:	2800      	cmp	r0, #0
 80019f2:	f43f adb5 	beq.w	8001560 <main+0x170>
  explicit MicroMutableOpResolver() {}
 80019f6:	4b0d      	ldr	r3, [pc, #52]	; (8001a2c <main+0x63c>)
 80019f8:	4a10      	ldr	r2, [pc, #64]	; (8001a3c <main+0x64c>)
 80019fa:	f8c3 40ac 	str.w	r4, [r3, #172]	; 0xac
 80019fe:	f8c3 40e0 	str.w	r4, [r3, #224]	; 0xe0
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	480e      	ldr	r0, [pc, #56]	; (8001a40 <main+0x650>)
 8001a06:	f015 f8d7 	bl	8016bb8 <atexit>
 8001a0a:	4628      	mov	r0, r5
 8001a0c:	f014 fed1 	bl	80167b2 <__cxa_guard_release>
 8001a10:	e5a6      	b.n	8001560 <main+0x170>
  static tflite::MicroErrorReporter micro_error_reporter;
 8001a12:	4628      	mov	r0, r5
 8001a14:	f014 fec1 	bl	801679a <__cxa_guard_acquire>
 8001a18:	2800      	cmp	r0, #0
 8001a1a:	f43f ad89 	beq.w	8001530 <main+0x140>
 8001a1e:	4809      	ldr	r0, [pc, #36]	; (8001a44 <main+0x654>)
 8001a20:	f015 f8ca 	bl	8016bb8 <atexit>
 8001a24:	4628      	mov	r0, r5
 8001a26:	f014 fec4 	bl	80167b2 <__cxa_guard_release>
 8001a2a:	e581      	b.n	8001530 <main+0x140>
 8001a2c:	20009a28 	.word	0x20009a28
 8001a30:	20000220 	.word	0x20000220
 8001a34:	20009b0c 	.word	0x20009b0c
 8001a38:	08001175 	.word	0x08001175
 8001a3c:	08019c9c 	.word	0x08019c9c
 8001a40:	08001365 	.word	0x08001365
 8001a44:	08001101 	.word	0x08001101

08001a48 <DebugLog>:
{
 8001a48:	b500      	push	{lr}
 8001a4a:	b09b      	sub	sp, #108	; 0x6c
 8001a4c:	460a      	mov	r2, r1
	vsprintf(s, format, args);
 8001a4e:	4601      	mov	r1, r0
 8001a50:	a801      	add	r0, sp, #4
 8001a52:	f015 ff27 	bl	80178a4 <vsiprintf>
	HAL_UART_Transmit(&hlpuart1, (uint8_t*)s, strlen(s), HAL_MAX_DELAY);
 8001a56:	a801      	add	r0, sp, #4
 8001a58:	f7fe fc42 	bl	80002e0 <strlen>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a62:	b292      	uxth	r2, r2
 8001a64:	a901      	add	r1, sp, #4
 8001a66:	4803      	ldr	r0, [pc, #12]	; (8001a74 <DebugLog+0x2c>)
 8001a68:	f001 fffa 	bl	8003a60 <HAL_UART_Transmit>
}
 8001a6c:	b01b      	add	sp, #108	; 0x6c
 8001a6e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a72:	bf00      	nop
 8001a74:	20009bc8 	.word	0x20009bc8

08001a78 <HAL_UART_RxCpltCallback>:
{
 8001a78:	b508      	push	{r3, lr}
    if (huart->Instance == LPUART1)
 8001a7a:	6802      	ldr	r2, [r0, #0]
 8001a7c:	4b0b      	ldr	r3, [pc, #44]	; (8001aac <HAL_UART_RxCpltCallback+0x34>)
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d004      	beq.n	8001a8c <HAL_UART_RxCpltCallback+0x14>
}
 8001a82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_UART_IRQHandler(&hlpuart1);
 8001a86:	480a      	ldr	r0, [pc, #40]	; (8001ab0 <HAL_UART_RxCpltCallback+0x38>)
 8001a88:	f002 b8c4 	b.w	8003c14 <HAL_UART_IRQHandler>
    	HAL_GPIO_TogglePin(GPIOA, LD2_Pin);
 8001a8c:	2120      	movs	r1, #32
 8001a8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a92:	f000 fdcf 	bl	8002634 <HAL_GPIO_TogglePin>
    	HAL_UART_Receive_IT(&hlpuart1, uart_rx_data, sizeof(uart_rx_data));
 8001a96:	4907      	ldr	r1, [pc, #28]	; (8001ab4 <HAL_UART_RxCpltCallback+0x3c>)
 8001a98:	4805      	ldr	r0, [pc, #20]	; (8001ab0 <HAL_UART_RxCpltCallback+0x38>)
 8001a9a:	220a      	movs	r2, #10
 8001a9c:	f002 f86e 	bl	8003b7c <HAL_UART_Receive_IT>
}
 8001aa0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_UART_IRQHandler(&hlpuart1);
 8001aa4:	4802      	ldr	r0, [pc, #8]	; (8001ab0 <HAL_UART_RxCpltCallback+0x38>)
 8001aa6:	f002 b8b5 	b.w	8003c14 <HAL_UART_IRQHandler>
 8001aaa:	bf00      	nop
 8001aac:	40008000 	.word	0x40008000
 8001ab0:	20009bc8 	.word	0x20009bc8
 8001ab4:	20009ca8 	.word	0x20009ca8

08001ab8 <Error_Handler>:
 8001ab8:	b672      	cpsid	i
  while (1)
 8001aba:	e7fe      	b.n	8001aba <Error_Handler+0x2>

08001abc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ac2:	4b0f      	ldr	r3, [pc, #60]	; (8001b00 <HAL_MspInit+0x44>)
 8001ac4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ac6:	4a0e      	ldr	r2, [pc, #56]	; (8001b00 <HAL_MspInit+0x44>)
 8001ac8:	f043 0301 	orr.w	r3, r3, #1
 8001acc:	6613      	str	r3, [r2, #96]	; 0x60
 8001ace:	4b0c      	ldr	r3, [pc, #48]	; (8001b00 <HAL_MspInit+0x44>)
 8001ad0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ad2:	f003 0301 	and.w	r3, r3, #1
 8001ad6:	607b      	str	r3, [r7, #4]
 8001ad8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ada:	4b09      	ldr	r3, [pc, #36]	; (8001b00 <HAL_MspInit+0x44>)
 8001adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ade:	4a08      	ldr	r2, [pc, #32]	; (8001b00 <HAL_MspInit+0x44>)
 8001ae0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ae4:	6593      	str	r3, [r2, #88]	; 0x58
 8001ae6:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <HAL_MspInit+0x44>)
 8001ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aee:	603b      	str	r3, [r7, #0]
 8001af0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001af2:	f000 fe81 	bl	80027f8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001af6:	bf00      	nop
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	40021000 	.word	0x40021000

08001b04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b09e      	sub	sp, #120	; 0x78
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b0c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	605a      	str	r2, [r3, #4]
 8001b16:	609a      	str	r2, [r3, #8]
 8001b18:	60da      	str	r2, [r3, #12]
 8001b1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b1c:	f107 0314 	add.w	r3, r7, #20
 8001b20:	2250      	movs	r2, #80	; 0x50
 8001b22:	2100      	movs	r1, #0
 8001b24:	4618      	mov	r0, r3
 8001b26:	f015 fee1 	bl	80178ec <memset>
  if(huart->Instance==LPUART1)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a23      	ldr	r2, [pc, #140]	; (8001bbc <HAL_UART_MspInit+0xb8>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d13e      	bne.n	8001bb2 <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001b34:	2320      	movs	r3, #32
 8001b36:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b3c:	f107 0314 	add.w	r3, r7, #20
 8001b40:	4618      	mov	r0, r3
 8001b42:	f001 fb97 	bl	8003274 <HAL_RCCEx_PeriphCLKConfig>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001b4c:	f7ff ffb4 	bl	8001ab8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001b50:	4b1b      	ldr	r3, [pc, #108]	; (8001bc0 <HAL_UART_MspInit+0xbc>)
 8001b52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b54:	4a1a      	ldr	r2, [pc, #104]	; (8001bc0 <HAL_UART_MspInit+0xbc>)
 8001b56:	f043 0301 	orr.w	r3, r3, #1
 8001b5a:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001b5c:	4b18      	ldr	r3, [pc, #96]	; (8001bc0 <HAL_UART_MspInit+0xbc>)
 8001b5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b60:	f003 0301 	and.w	r3, r3, #1
 8001b64:	613b      	str	r3, [r7, #16]
 8001b66:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b68:	4b15      	ldr	r3, [pc, #84]	; (8001bc0 <HAL_UART_MspInit+0xbc>)
 8001b6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b6c:	4a14      	ldr	r2, [pc, #80]	; (8001bc0 <HAL_UART_MspInit+0xbc>)
 8001b6e:	f043 0301 	orr.w	r3, r3, #1
 8001b72:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b74:	4b12      	ldr	r3, [pc, #72]	; (8001bc0 <HAL_UART_MspInit+0xbc>)
 8001b76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b78:	f003 0301 	and.w	r3, r3, #1
 8001b7c:	60fb      	str	r3, [r7, #12]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001b80:	230c      	movs	r3, #12
 8001b82:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b84:	2302      	movs	r3, #2
 8001b86:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001b90:	230c      	movs	r3, #12
 8001b92:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b94:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001b98:	4619      	mov	r1, r3
 8001b9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b9e:	f000 fbaf 	bl	8002300 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	205b      	movs	r0, #91	; 0x5b
 8001ba8:	f000 fab5 	bl	8002116 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001bac:	205b      	movs	r0, #91	; 0x5b
 8001bae:	f000 facc 	bl	800214a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001bb2:	bf00      	nop
 8001bb4:	3778      	adds	r7, #120	; 0x78
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	40008000 	.word	0x40008000
 8001bc0:	40021000 	.word	0x40021000

08001bc4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b085      	sub	sp, #20
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a0a      	ldr	r2, [pc, #40]	; (8001bfc <HAL_TIM_Base_MspInit+0x38>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d10b      	bne.n	8001bee <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001bd6:	4b0a      	ldr	r3, [pc, #40]	; (8001c00 <HAL_TIM_Base_MspInit+0x3c>)
 8001bd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bda:	4a09      	ldr	r2, [pc, #36]	; (8001c00 <HAL_TIM_Base_MspInit+0x3c>)
 8001bdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001be0:	6613      	str	r3, [r2, #96]	; 0x60
 8001be2:	4b07      	ldr	r3, [pc, #28]	; (8001c00 <HAL_TIM_Base_MspInit+0x3c>)
 8001be4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bea:	60fb      	str	r3, [r7, #12]
 8001bec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001bee:	bf00      	nop
 8001bf0:	3714      	adds	r7, #20
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	40014400 	.word	0x40014400
 8001c00:	40021000 	.word	0x40021000

08001c04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c08:	e7fe      	b.n	8001c08 <NMI_Handler+0x4>

08001c0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c0e:	e7fe      	b.n	8001c0e <HardFault_Handler+0x4>

08001c10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c14:	e7fe      	b.n	8001c14 <MemManage_Handler+0x4>

08001c16 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c16:	b480      	push	{r7}
 8001c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c1a:	e7fe      	b.n	8001c1a <BusFault_Handler+0x4>

08001c1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c20:	e7fe      	b.n	8001c20 <UsageFault_Handler+0x4>

08001c22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c22:	b480      	push	{r7}
 8001c24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c26:	bf00      	nop
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c34:	bf00      	nop
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr

08001c3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c42:	bf00      	nop
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c50:	f000 f968 	bl	8001f24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c54:	bf00      	nop
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001c5c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001c60:	f000 fd02 	bl	8002668 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001c64:	bf00      	nop
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001c6c:	4802      	ldr	r0, [pc, #8]	; (8001c78 <LPUART1_IRQHandler+0x10>)
 8001c6e:	f001 ffd1 	bl	8003c14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8001c72:	bf00      	nop
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	20009bc8 	.word	0x20009bc8

08001c7c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  return 1;
 8001c80:	2301      	movs	r3, #1
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <_kill>:

int _kill(int pid, int sig)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c96:	f015 fee1 	bl	8017a5c <__errno>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2216      	movs	r2, #22
 8001c9e:	601a      	str	r2, [r3, #0]
  return -1;
 8001ca0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3708      	adds	r7, #8
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <_exit>:

void _exit (int status)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001cb4:	f04f 31ff 	mov.w	r1, #4294967295
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f7ff ffe7 	bl	8001c8c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001cbe:	e7fe      	b.n	8001cbe <_exit+0x12>

08001cc0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b086      	sub	sp, #24
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	60f8      	str	r0, [r7, #12]
 8001cc8:	60b9      	str	r1, [r7, #8]
 8001cca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ccc:	2300      	movs	r3, #0
 8001cce:	617b      	str	r3, [r7, #20]
 8001cd0:	e00a      	b.n	8001ce8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001cd2:	f3af 8000 	nop.w
 8001cd6:	4601      	mov	r1, r0
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	1c5a      	adds	r2, r3, #1
 8001cdc:	60ba      	str	r2, [r7, #8]
 8001cde:	b2ca      	uxtb	r2, r1
 8001ce0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	617b      	str	r3, [r7, #20]
 8001ce8:	697a      	ldr	r2, [r7, #20]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	dbf0      	blt.n	8001cd2 <_read+0x12>
  }

  return len;
 8001cf0:	687b      	ldr	r3, [r7, #4]
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3718      	adds	r7, #24
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b086      	sub	sp, #24
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	60f8      	str	r0, [r7, #12]
 8001d02:	60b9      	str	r1, [r7, #8]
 8001d04:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d06:	2300      	movs	r3, #0
 8001d08:	617b      	str	r3, [r7, #20]
 8001d0a:	e009      	b.n	8001d20 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	1c5a      	adds	r2, r3, #1
 8001d10:	60ba      	str	r2, [r7, #8]
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	617b      	str	r3, [r7, #20]
 8001d20:	697a      	ldr	r2, [r7, #20]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	dbf1      	blt.n	8001d0c <_write+0x12>
  }
  return len;
 8001d28:	687b      	ldr	r3, [r7, #4]
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3718      	adds	r7, #24
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <_close>:

int _close(int file)
{
 8001d32:	b480      	push	{r7}
 8001d34:	b083      	sub	sp, #12
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr

08001d4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	b083      	sub	sp, #12
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
 8001d52:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d5a:	605a      	str	r2, [r3, #4]
  return 0;
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr

08001d6a <_isatty>:

int _isatty(int file)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	b083      	sub	sp, #12
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d72:	2301      	movs	r3, #1
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	60b9      	str	r1, [r7, #8]
 8001d8a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3714      	adds	r7, #20
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
	...

08001d9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b086      	sub	sp, #24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001da4:	4a14      	ldr	r2, [pc, #80]	; (8001df8 <_sbrk+0x5c>)
 8001da6:	4b15      	ldr	r3, [pc, #84]	; (8001dfc <_sbrk+0x60>)
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001db0:	4b13      	ldr	r3, [pc, #76]	; (8001e00 <_sbrk+0x64>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d102      	bne.n	8001dbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001db8:	4b11      	ldr	r3, [pc, #68]	; (8001e00 <_sbrk+0x64>)
 8001dba:	4a12      	ldr	r2, [pc, #72]	; (8001e04 <_sbrk+0x68>)
 8001dbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dbe:	4b10      	ldr	r3, [pc, #64]	; (8001e00 <_sbrk+0x64>)
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	693a      	ldr	r2, [r7, #16]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d207      	bcs.n	8001ddc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dcc:	f015 fe46 	bl	8017a5c <__errno>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	220c      	movs	r2, #12
 8001dd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8001dda:	e009      	b.n	8001df0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ddc:	4b08      	ldr	r3, [pc, #32]	; (8001e00 <_sbrk+0x64>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001de2:	4b07      	ldr	r3, [pc, #28]	; (8001e00 <_sbrk+0x64>)
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4413      	add	r3, r2
 8001dea:	4a05      	ldr	r2, [pc, #20]	; (8001e00 <_sbrk+0x64>)
 8001dec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dee:	68fb      	ldr	r3, [r7, #12]
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3718      	adds	r7, #24
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	2001c000 	.word	0x2001c000
 8001dfc:	00000400 	.word	0x00000400
 8001e00:	20009cb4 	.word	0x20009cb4
 8001e04:	20009ea0 	.word	0x20009ea0

08001e08 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001e0c:	4b06      	ldr	r3, [pc, #24]	; (8001e28 <SystemInit+0x20>)
 8001e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e12:	4a05      	ldr	r2, [pc, #20]	; (8001e28 <SystemInit+0x20>)
 8001e14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e1c:	bf00      	nop
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	e000ed00 	.word	0xe000ed00

08001e2c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e2c:	480d      	ldr	r0, [pc, #52]	; (8001e64 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e2e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e30:	f7ff ffea 	bl	8001e08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e34:	480c      	ldr	r0, [pc, #48]	; (8001e68 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e36:	490d      	ldr	r1, [pc, #52]	; (8001e6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e38:	4a0d      	ldr	r2, [pc, #52]	; (8001e70 <LoopForever+0xe>)
  movs r3, #0
 8001e3a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001e3c:	e002      	b.n	8001e44 <LoopCopyDataInit>

08001e3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e42:	3304      	adds	r3, #4

08001e44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e48:	d3f9      	bcc.n	8001e3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e4a:	4a0a      	ldr	r2, [pc, #40]	; (8001e74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e4c:	4c0a      	ldr	r4, [pc, #40]	; (8001e78 <LoopForever+0x16>)
  movs r3, #0
 8001e4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e50:	e001      	b.n	8001e56 <LoopFillZerobss>

08001e52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e54:	3204      	adds	r2, #4

08001e56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e58:	d3fb      	bcc.n	8001e52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e5a:	f015 fe05 	bl	8017a68 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e5e:	f7ff fac7 	bl	80013f0 <main>

08001e62 <LoopForever>:

LoopForever:
    b LoopForever
 8001e62:	e7fe      	b.n	8001e62 <LoopForever>
  ldr   r0, =_estack
 8001e64:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8001e68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e6c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001e70:	0806d340 	.word	0x0806d340
  ldr r2, =_sbss
 8001e74:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001e78:	20009ea0 	.word	0x20009ea0

08001e7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e7c:	e7fe      	b.n	8001e7c <ADC1_2_IRQHandler>

08001e7e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b082      	sub	sp, #8
 8001e82:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e84:	2300      	movs	r3, #0
 8001e86:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e88:	2003      	movs	r0, #3
 8001e8a:	f000 f939 	bl	8002100 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e8e:	2000      	movs	r0, #0
 8001e90:	f000 f80e 	bl	8001eb0 <HAL_InitTick>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d002      	beq.n	8001ea0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	71fb      	strb	r3, [r7, #7]
 8001e9e:	e001      	b.n	8001ea4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ea0:	f7ff fe0c 	bl	8001abc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ea4:	79fb      	ldrb	r3, [r7, #7]

}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
	...

08001eb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001ebc:	4b16      	ldr	r3, [pc, #88]	; (8001f18 <HAL_InitTick+0x68>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d022      	beq.n	8001f0a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001ec4:	4b15      	ldr	r3, [pc, #84]	; (8001f1c <HAL_InitTick+0x6c>)
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	4b13      	ldr	r3, [pc, #76]	; (8001f18 <HAL_InitTick+0x68>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001ed0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ed4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f000 f944 	bl	8002166 <HAL_SYSTICK_Config>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d10f      	bne.n	8001f04 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2b0f      	cmp	r3, #15
 8001ee8:	d809      	bhi.n	8001efe <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001eea:	2200      	movs	r2, #0
 8001eec:	6879      	ldr	r1, [r7, #4]
 8001eee:	f04f 30ff 	mov.w	r0, #4294967295
 8001ef2:	f000 f910 	bl	8002116 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ef6:	4a0a      	ldr	r2, [pc, #40]	; (8001f20 <HAL_InitTick+0x70>)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6013      	str	r3, [r2, #0]
 8001efc:	e007      	b.n	8001f0e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	73fb      	strb	r3, [r7, #15]
 8001f02:	e004      	b.n	8001f0e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	73fb      	strb	r3, [r7, #15]
 8001f08:	e001      	b.n	8001f0e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3710      	adds	r7, #16
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	2000000c 	.word	0x2000000c
 8001f1c:	20000004 	.word	0x20000004
 8001f20:	20000008 	.word	0x20000008

08001f24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f28:	4b05      	ldr	r3, [pc, #20]	; (8001f40 <HAL_IncTick+0x1c>)
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	4b05      	ldr	r3, [pc, #20]	; (8001f44 <HAL_IncTick+0x20>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4413      	add	r3, r2
 8001f32:	4a03      	ldr	r2, [pc, #12]	; (8001f40 <HAL_IncTick+0x1c>)
 8001f34:	6013      	str	r3, [r2, #0]
}
 8001f36:	bf00      	nop
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr
 8001f40:	20009cb8 	.word	0x20009cb8
 8001f44:	2000000c 	.word	0x2000000c

08001f48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f4c:	4b03      	ldr	r3, [pc, #12]	; (8001f5c <HAL_GetTick+0x14>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	20009cb8 	.word	0x20009cb8

08001f60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b085      	sub	sp, #20
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f003 0307 	and.w	r3, r3, #7
 8001f6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f70:	4b0c      	ldr	r3, [pc, #48]	; (8001fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f76:	68ba      	ldr	r2, [r7, #8]
 8001f78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f92:	4a04      	ldr	r2, [pc, #16]	; (8001fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	60d3      	str	r3, [r2, #12]
}
 8001f98:	bf00      	nop
 8001f9a:	3714      	adds	r7, #20
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr
 8001fa4:	e000ed00 	.word	0xe000ed00

08001fa8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fac:	4b04      	ldr	r3, [pc, #16]	; (8001fc0 <__NVIC_GetPriorityGrouping+0x18>)
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	0a1b      	lsrs	r3, r3, #8
 8001fb2:	f003 0307 	and.w	r3, r3, #7
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr
 8001fc0:	e000ed00 	.word	0xe000ed00

08001fc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	4603      	mov	r3, r0
 8001fcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	db0b      	blt.n	8001fee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fd6:	79fb      	ldrb	r3, [r7, #7]
 8001fd8:	f003 021f 	and.w	r2, r3, #31
 8001fdc:	4907      	ldr	r1, [pc, #28]	; (8001ffc <__NVIC_EnableIRQ+0x38>)
 8001fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe2:	095b      	lsrs	r3, r3, #5
 8001fe4:	2001      	movs	r0, #1
 8001fe6:	fa00 f202 	lsl.w	r2, r0, r2
 8001fea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001fee:	bf00      	nop
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	e000e100 	.word	0xe000e100

08002000 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	4603      	mov	r3, r0
 8002008:	6039      	str	r1, [r7, #0]
 800200a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800200c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002010:	2b00      	cmp	r3, #0
 8002012:	db0a      	blt.n	800202a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	b2da      	uxtb	r2, r3
 8002018:	490c      	ldr	r1, [pc, #48]	; (800204c <__NVIC_SetPriority+0x4c>)
 800201a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201e:	0112      	lsls	r2, r2, #4
 8002020:	b2d2      	uxtb	r2, r2
 8002022:	440b      	add	r3, r1
 8002024:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002028:	e00a      	b.n	8002040 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	b2da      	uxtb	r2, r3
 800202e:	4908      	ldr	r1, [pc, #32]	; (8002050 <__NVIC_SetPriority+0x50>)
 8002030:	79fb      	ldrb	r3, [r7, #7]
 8002032:	f003 030f 	and.w	r3, r3, #15
 8002036:	3b04      	subs	r3, #4
 8002038:	0112      	lsls	r2, r2, #4
 800203a:	b2d2      	uxtb	r2, r2
 800203c:	440b      	add	r3, r1
 800203e:	761a      	strb	r2, [r3, #24]
}
 8002040:	bf00      	nop
 8002042:	370c      	adds	r7, #12
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr
 800204c:	e000e100 	.word	0xe000e100
 8002050:	e000ed00 	.word	0xe000ed00

08002054 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002054:	b480      	push	{r7}
 8002056:	b089      	sub	sp, #36	; 0x24
 8002058:	af00      	add	r7, sp, #0
 800205a:	60f8      	str	r0, [r7, #12]
 800205c:	60b9      	str	r1, [r7, #8]
 800205e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	f003 0307 	and.w	r3, r3, #7
 8002066:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	f1c3 0307 	rsb	r3, r3, #7
 800206e:	2b04      	cmp	r3, #4
 8002070:	bf28      	it	cs
 8002072:	2304      	movcs	r3, #4
 8002074:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	3304      	adds	r3, #4
 800207a:	2b06      	cmp	r3, #6
 800207c:	d902      	bls.n	8002084 <NVIC_EncodePriority+0x30>
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	3b03      	subs	r3, #3
 8002082:	e000      	b.n	8002086 <NVIC_EncodePriority+0x32>
 8002084:	2300      	movs	r3, #0
 8002086:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002088:	f04f 32ff 	mov.w	r2, #4294967295
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	fa02 f303 	lsl.w	r3, r2, r3
 8002092:	43da      	mvns	r2, r3
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	401a      	ands	r2, r3
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800209c:	f04f 31ff 	mov.w	r1, #4294967295
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	fa01 f303 	lsl.w	r3, r1, r3
 80020a6:	43d9      	mvns	r1, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020ac:	4313      	orrs	r3, r2
         );
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3724      	adds	r7, #36	; 0x24
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
	...

080020bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	3b01      	subs	r3, #1
 80020c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020cc:	d301      	bcc.n	80020d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020ce:	2301      	movs	r3, #1
 80020d0:	e00f      	b.n	80020f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020d2:	4a0a      	ldr	r2, [pc, #40]	; (80020fc <SysTick_Config+0x40>)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	3b01      	subs	r3, #1
 80020d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020da:	210f      	movs	r1, #15
 80020dc:	f04f 30ff 	mov.w	r0, #4294967295
 80020e0:	f7ff ff8e 	bl	8002000 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020e4:	4b05      	ldr	r3, [pc, #20]	; (80020fc <SysTick_Config+0x40>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020ea:	4b04      	ldr	r3, [pc, #16]	; (80020fc <SysTick_Config+0x40>)
 80020ec:	2207      	movs	r2, #7
 80020ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020f0:	2300      	movs	r3, #0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	e000e010 	.word	0xe000e010

08002100 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f7ff ff29 	bl	8001f60 <__NVIC_SetPriorityGrouping>
}
 800210e:	bf00      	nop
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002116:	b580      	push	{r7, lr}
 8002118:	b086      	sub	sp, #24
 800211a:	af00      	add	r7, sp, #0
 800211c:	4603      	mov	r3, r0
 800211e:	60b9      	str	r1, [r7, #8]
 8002120:	607a      	str	r2, [r7, #4]
 8002122:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002124:	f7ff ff40 	bl	8001fa8 <__NVIC_GetPriorityGrouping>
 8002128:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	68b9      	ldr	r1, [r7, #8]
 800212e:	6978      	ldr	r0, [r7, #20]
 8002130:	f7ff ff90 	bl	8002054 <NVIC_EncodePriority>
 8002134:	4602      	mov	r2, r0
 8002136:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800213a:	4611      	mov	r1, r2
 800213c:	4618      	mov	r0, r3
 800213e:	f7ff ff5f 	bl	8002000 <__NVIC_SetPriority>
}
 8002142:	bf00      	nop
 8002144:	3718      	adds	r7, #24
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b082      	sub	sp, #8
 800214e:	af00      	add	r7, sp, #0
 8002150:	4603      	mov	r3, r0
 8002152:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002158:	4618      	mov	r0, r3
 800215a:	f7ff ff33 	bl	8001fc4 <__NVIC_EnableIRQ>
}
 800215e:	bf00      	nop
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002166:	b580      	push	{r7, lr}
 8002168:	b082      	sub	sp, #8
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f7ff ffa4 	bl	80020bc <SysTick_Config>
 8002174:	4603      	mov	r3, r0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}

0800217e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800217e:	b480      	push	{r7}
 8002180:	b085      	sub	sp, #20
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002186:	2300      	movs	r3, #0
 8002188:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002190:	b2db      	uxtb	r3, r3
 8002192:	2b02      	cmp	r3, #2
 8002194:	d005      	beq.n	80021a2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2204      	movs	r2, #4
 800219a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	73fb      	strb	r3, [r7, #15]
 80021a0:	e037      	b.n	8002212 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f022 020e 	bic.w	r2, r2, #14
 80021b0:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021c0:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f022 0201 	bic.w	r2, r2, #1
 80021d0:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d6:	f003 021f 	and.w	r2, r3, #31
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021de:	2101      	movs	r1, #1
 80021e0:	fa01 f202 	lsl.w	r2, r1, r2
 80021e4:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80021ee:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d00c      	beq.n	8002212 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002202:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002206:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002210:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2201      	movs	r2, #1
 8002216:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2200      	movs	r2, #0
 800221e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8002222:	7bfb      	ldrb	r3, [r7, #15]
}
 8002224:	4618      	mov	r0, r3
 8002226:	3714      	adds	r7, #20
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002238:	2300      	movs	r3, #0
 800223a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002242:	b2db      	uxtb	r3, r3
 8002244:	2b02      	cmp	r3, #2
 8002246:	d00d      	beq.n	8002264 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2204      	movs	r2, #4
 800224c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2201      	movs	r2, #1
 8002252:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	73fb      	strb	r3, [r7, #15]
 8002262:	e047      	b.n	80022f4 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f022 020e 	bic.w	r2, r2, #14
 8002272:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f022 0201 	bic.w	r2, r2, #1
 8002282:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800228e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002292:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002298:	f003 021f 	and.w	r2, r3, #31
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a0:	2101      	movs	r1, #1
 80022a2:	fa01 f202 	lsl.w	r2, r1, r2
 80022a6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80022b0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d00c      	beq.n	80022d4 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022c8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80022d2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2201      	movs	r2, #1
 80022d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2200      	movs	r2, #0
 80022e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d003      	beq.n	80022f4 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	4798      	blx	r3
    }
  }
  return status;
 80022f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3710      	adds	r7, #16
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
	...

08002300 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002300:	b480      	push	{r7}
 8002302:	b087      	sub	sp, #28
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800230a:	2300      	movs	r3, #0
 800230c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800230e:	e15a      	b.n	80025c6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	2101      	movs	r1, #1
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	fa01 f303 	lsl.w	r3, r1, r3
 800231c:	4013      	ands	r3, r2
 800231e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2b00      	cmp	r3, #0
 8002324:	f000 814c 	beq.w	80025c0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f003 0303 	and.w	r3, r3, #3
 8002330:	2b01      	cmp	r3, #1
 8002332:	d005      	beq.n	8002340 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800233c:	2b02      	cmp	r3, #2
 800233e:	d130      	bne.n	80023a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	2203      	movs	r2, #3
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	43db      	mvns	r3, r3
 8002352:	693a      	ldr	r2, [r7, #16]
 8002354:	4013      	ands	r3, r2
 8002356:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	68da      	ldr	r2, [r3, #12]
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	693a      	ldr	r2, [r7, #16]
 8002366:	4313      	orrs	r3, r2
 8002368:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	693a      	ldr	r2, [r7, #16]
 800236e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002376:	2201      	movs	r2, #1
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	fa02 f303 	lsl.w	r3, r2, r3
 800237e:	43db      	mvns	r3, r3
 8002380:	693a      	ldr	r2, [r7, #16]
 8002382:	4013      	ands	r3, r2
 8002384:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	091b      	lsrs	r3, r3, #4
 800238c:	f003 0201 	and.w	r2, r3, #1
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	fa02 f303 	lsl.w	r3, r2, r3
 8002396:	693a      	ldr	r2, [r7, #16]
 8002398:	4313      	orrs	r3, r2
 800239a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	693a      	ldr	r2, [r7, #16]
 80023a0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f003 0303 	and.w	r3, r3, #3
 80023aa:	2b03      	cmp	r3, #3
 80023ac:	d017      	beq.n	80023de <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	005b      	lsls	r3, r3, #1
 80023b8:	2203      	movs	r2, #3
 80023ba:	fa02 f303 	lsl.w	r3, r2, r3
 80023be:	43db      	mvns	r3, r3
 80023c0:	693a      	ldr	r2, [r7, #16]
 80023c2:	4013      	ands	r3, r2
 80023c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	689a      	ldr	r2, [r3, #8]
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	fa02 f303 	lsl.w	r3, r2, r3
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	693a      	ldr	r2, [r7, #16]
 80023dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f003 0303 	and.w	r3, r3, #3
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d123      	bne.n	8002432 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	08da      	lsrs	r2, r3, #3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	3208      	adds	r2, #8
 80023f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	f003 0307 	and.w	r3, r3, #7
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	220f      	movs	r2, #15
 8002402:	fa02 f303 	lsl.w	r3, r2, r3
 8002406:	43db      	mvns	r3, r3
 8002408:	693a      	ldr	r2, [r7, #16]
 800240a:	4013      	ands	r3, r2
 800240c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	691a      	ldr	r2, [r3, #16]
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	f003 0307 	and.w	r3, r3, #7
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	fa02 f303 	lsl.w	r3, r2, r3
 800241e:	693a      	ldr	r2, [r7, #16]
 8002420:	4313      	orrs	r3, r2
 8002422:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	08da      	lsrs	r2, r3, #3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	3208      	adds	r2, #8
 800242c:	6939      	ldr	r1, [r7, #16]
 800242e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	2203      	movs	r2, #3
 800243e:	fa02 f303 	lsl.w	r3, r2, r3
 8002442:	43db      	mvns	r3, r3
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	4013      	ands	r3, r2
 8002448:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f003 0203 	and.w	r2, r3, #3
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	005b      	lsls	r3, r3, #1
 8002456:	fa02 f303 	lsl.w	r3, r2, r3
 800245a:	693a      	ldr	r2, [r7, #16]
 800245c:	4313      	orrs	r3, r2
 800245e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	693a      	ldr	r2, [r7, #16]
 8002464:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800246e:	2b00      	cmp	r3, #0
 8002470:	f000 80a6 	beq.w	80025c0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002474:	4b5b      	ldr	r3, [pc, #364]	; (80025e4 <HAL_GPIO_Init+0x2e4>)
 8002476:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002478:	4a5a      	ldr	r2, [pc, #360]	; (80025e4 <HAL_GPIO_Init+0x2e4>)
 800247a:	f043 0301 	orr.w	r3, r3, #1
 800247e:	6613      	str	r3, [r2, #96]	; 0x60
 8002480:	4b58      	ldr	r3, [pc, #352]	; (80025e4 <HAL_GPIO_Init+0x2e4>)
 8002482:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002484:	f003 0301 	and.w	r3, r3, #1
 8002488:	60bb      	str	r3, [r7, #8]
 800248a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800248c:	4a56      	ldr	r2, [pc, #344]	; (80025e8 <HAL_GPIO_Init+0x2e8>)
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	089b      	lsrs	r3, r3, #2
 8002492:	3302      	adds	r3, #2
 8002494:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002498:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	f003 0303 	and.w	r3, r3, #3
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	220f      	movs	r2, #15
 80024a4:	fa02 f303 	lsl.w	r3, r2, r3
 80024a8:	43db      	mvns	r3, r3
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	4013      	ands	r3, r2
 80024ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80024b6:	d01f      	beq.n	80024f8 <HAL_GPIO_Init+0x1f8>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	4a4c      	ldr	r2, [pc, #304]	; (80025ec <HAL_GPIO_Init+0x2ec>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d019      	beq.n	80024f4 <HAL_GPIO_Init+0x1f4>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	4a4b      	ldr	r2, [pc, #300]	; (80025f0 <HAL_GPIO_Init+0x2f0>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d013      	beq.n	80024f0 <HAL_GPIO_Init+0x1f0>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	4a4a      	ldr	r2, [pc, #296]	; (80025f4 <HAL_GPIO_Init+0x2f4>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d00d      	beq.n	80024ec <HAL_GPIO_Init+0x1ec>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	4a49      	ldr	r2, [pc, #292]	; (80025f8 <HAL_GPIO_Init+0x2f8>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d007      	beq.n	80024e8 <HAL_GPIO_Init+0x1e8>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	4a48      	ldr	r2, [pc, #288]	; (80025fc <HAL_GPIO_Init+0x2fc>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d101      	bne.n	80024e4 <HAL_GPIO_Init+0x1e4>
 80024e0:	2305      	movs	r3, #5
 80024e2:	e00a      	b.n	80024fa <HAL_GPIO_Init+0x1fa>
 80024e4:	2306      	movs	r3, #6
 80024e6:	e008      	b.n	80024fa <HAL_GPIO_Init+0x1fa>
 80024e8:	2304      	movs	r3, #4
 80024ea:	e006      	b.n	80024fa <HAL_GPIO_Init+0x1fa>
 80024ec:	2303      	movs	r3, #3
 80024ee:	e004      	b.n	80024fa <HAL_GPIO_Init+0x1fa>
 80024f0:	2302      	movs	r3, #2
 80024f2:	e002      	b.n	80024fa <HAL_GPIO_Init+0x1fa>
 80024f4:	2301      	movs	r3, #1
 80024f6:	e000      	b.n	80024fa <HAL_GPIO_Init+0x1fa>
 80024f8:	2300      	movs	r3, #0
 80024fa:	697a      	ldr	r2, [r7, #20]
 80024fc:	f002 0203 	and.w	r2, r2, #3
 8002500:	0092      	lsls	r2, r2, #2
 8002502:	4093      	lsls	r3, r2
 8002504:	693a      	ldr	r2, [r7, #16]
 8002506:	4313      	orrs	r3, r2
 8002508:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800250a:	4937      	ldr	r1, [pc, #220]	; (80025e8 <HAL_GPIO_Init+0x2e8>)
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	089b      	lsrs	r3, r3, #2
 8002510:	3302      	adds	r3, #2
 8002512:	693a      	ldr	r2, [r7, #16]
 8002514:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002518:	4b39      	ldr	r3, [pc, #228]	; (8002600 <HAL_GPIO_Init+0x300>)
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	43db      	mvns	r3, r3
 8002522:	693a      	ldr	r2, [r7, #16]
 8002524:	4013      	ands	r3, r2
 8002526:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d003      	beq.n	800253c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002534:	693a      	ldr	r2, [r7, #16]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	4313      	orrs	r3, r2
 800253a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800253c:	4a30      	ldr	r2, [pc, #192]	; (8002600 <HAL_GPIO_Init+0x300>)
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002542:	4b2f      	ldr	r3, [pc, #188]	; (8002600 <HAL_GPIO_Init+0x300>)
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	43db      	mvns	r3, r3
 800254c:	693a      	ldr	r2, [r7, #16]
 800254e:	4013      	ands	r3, r2
 8002550:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d003      	beq.n	8002566 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800255e:	693a      	ldr	r2, [r7, #16]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	4313      	orrs	r3, r2
 8002564:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002566:	4a26      	ldr	r2, [pc, #152]	; (8002600 <HAL_GPIO_Init+0x300>)
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800256c:	4b24      	ldr	r3, [pc, #144]	; (8002600 <HAL_GPIO_Init+0x300>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	43db      	mvns	r3, r3
 8002576:	693a      	ldr	r2, [r7, #16]
 8002578:	4013      	ands	r3, r2
 800257a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d003      	beq.n	8002590 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002588:	693a      	ldr	r2, [r7, #16]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	4313      	orrs	r3, r2
 800258e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002590:	4a1b      	ldr	r2, [pc, #108]	; (8002600 <HAL_GPIO_Init+0x300>)
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002596:	4b1a      	ldr	r3, [pc, #104]	; (8002600 <HAL_GPIO_Init+0x300>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	43db      	mvns	r3, r3
 80025a0:	693a      	ldr	r2, [r7, #16]
 80025a2:	4013      	ands	r3, r2
 80025a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d003      	beq.n	80025ba <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80025b2:	693a      	ldr	r2, [r7, #16]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80025ba:	4a11      	ldr	r2, [pc, #68]	; (8002600 <HAL_GPIO_Init+0x300>)
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	3301      	adds	r3, #1
 80025c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	fa22 f303 	lsr.w	r3, r2, r3
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	f47f ae9d 	bne.w	8002310 <HAL_GPIO_Init+0x10>
  }
}
 80025d6:	bf00      	nop
 80025d8:	bf00      	nop
 80025da:	371c      	adds	r7, #28
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr
 80025e4:	40021000 	.word	0x40021000
 80025e8:	40010000 	.word	0x40010000
 80025ec:	48000400 	.word	0x48000400
 80025f0:	48000800 	.word	0x48000800
 80025f4:	48000c00 	.word	0x48000c00
 80025f8:	48001000 	.word	0x48001000
 80025fc:	48001400 	.word	0x48001400
 8002600:	40010400 	.word	0x40010400

08002604 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	460b      	mov	r3, r1
 800260e:	807b      	strh	r3, [r7, #2]
 8002610:	4613      	mov	r3, r2
 8002612:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002614:	787b      	ldrb	r3, [r7, #1]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d003      	beq.n	8002622 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800261a:	887a      	ldrh	r2, [r7, #2]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002620:	e002      	b.n	8002628 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002622:	887a      	ldrh	r2, [r7, #2]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002628:	bf00      	nop
 800262a:	370c      	adds	r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr

08002634 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002634:	b480      	push	{r7}
 8002636:	b085      	sub	sp, #20
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	460b      	mov	r3, r1
 800263e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	695b      	ldr	r3, [r3, #20]
 8002644:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002646:	887a      	ldrh	r2, [r7, #2]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	4013      	ands	r3, r2
 800264c:	041a      	lsls	r2, r3, #16
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	43d9      	mvns	r1, r3
 8002652:	887b      	ldrh	r3, [r7, #2]
 8002654:	400b      	ands	r3, r1
 8002656:	431a      	orrs	r2, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	619a      	str	r2, [r3, #24]
}
 800265c:	bf00      	nop
 800265e:	3714      	adds	r7, #20
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr

08002668 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	4603      	mov	r3, r0
 8002670:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002672:	4b08      	ldr	r3, [pc, #32]	; (8002694 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002674:	695a      	ldr	r2, [r3, #20]
 8002676:	88fb      	ldrh	r3, [r7, #6]
 8002678:	4013      	ands	r3, r2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d006      	beq.n	800268c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800267e:	4a05      	ldr	r2, [pc, #20]	; (8002694 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002680:	88fb      	ldrh	r3, [r7, #6]
 8002682:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002684:	88fb      	ldrh	r3, [r7, #6]
 8002686:	4618      	mov	r0, r3
 8002688:	f000 f806 	bl	8002698 <HAL_GPIO_EXTI_Callback>
  }
}
 800268c:	bf00      	nop
 800268e:	3708      	adds	r7, #8
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	40010400 	.word	0x40010400

08002698 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	4603      	mov	r3, r0
 80026a0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80026a2:	bf00      	nop
 80026a4:	370c      	adds	r7, #12
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
	...

080026b0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b085      	sub	sp, #20
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d141      	bne.n	8002742 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80026be:	4b4b      	ldr	r3, [pc, #300]	; (80027ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80026c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026ca:	d131      	bne.n	8002730 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80026cc:	4b47      	ldr	r3, [pc, #284]	; (80027ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026d2:	4a46      	ldr	r2, [pc, #280]	; (80027ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026d8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80026dc:	4b43      	ldr	r3, [pc, #268]	; (80027ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80026e4:	4a41      	ldr	r2, [pc, #260]	; (80027ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026ea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80026ec:	4b40      	ldr	r3, [pc, #256]	; (80027f0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2232      	movs	r2, #50	; 0x32
 80026f2:	fb02 f303 	mul.w	r3, r2, r3
 80026f6:	4a3f      	ldr	r2, [pc, #252]	; (80027f4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80026f8:	fba2 2303 	umull	r2, r3, r2, r3
 80026fc:	0c9b      	lsrs	r3, r3, #18
 80026fe:	3301      	adds	r3, #1
 8002700:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002702:	e002      	b.n	800270a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	3b01      	subs	r3, #1
 8002708:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800270a:	4b38      	ldr	r3, [pc, #224]	; (80027ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800270c:	695b      	ldr	r3, [r3, #20]
 800270e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002712:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002716:	d102      	bne.n	800271e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d1f2      	bne.n	8002704 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800271e:	4b33      	ldr	r3, [pc, #204]	; (80027ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002720:	695b      	ldr	r3, [r3, #20]
 8002722:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002726:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800272a:	d158      	bne.n	80027de <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e057      	b.n	80027e0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002730:	4b2e      	ldr	r3, [pc, #184]	; (80027ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002732:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002736:	4a2d      	ldr	r2, [pc, #180]	; (80027ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002738:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800273c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002740:	e04d      	b.n	80027de <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002748:	d141      	bne.n	80027ce <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800274a:	4b28      	ldr	r3, [pc, #160]	; (80027ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002752:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002756:	d131      	bne.n	80027bc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002758:	4b24      	ldr	r3, [pc, #144]	; (80027ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800275a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800275e:	4a23      	ldr	r2, [pc, #140]	; (80027ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002760:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002764:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002768:	4b20      	ldr	r3, [pc, #128]	; (80027ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002770:	4a1e      	ldr	r2, [pc, #120]	; (80027ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002772:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002776:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002778:	4b1d      	ldr	r3, [pc, #116]	; (80027f0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2232      	movs	r2, #50	; 0x32
 800277e:	fb02 f303 	mul.w	r3, r2, r3
 8002782:	4a1c      	ldr	r2, [pc, #112]	; (80027f4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002784:	fba2 2303 	umull	r2, r3, r2, r3
 8002788:	0c9b      	lsrs	r3, r3, #18
 800278a:	3301      	adds	r3, #1
 800278c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800278e:	e002      	b.n	8002796 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	3b01      	subs	r3, #1
 8002794:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002796:	4b15      	ldr	r3, [pc, #84]	; (80027ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002798:	695b      	ldr	r3, [r3, #20]
 800279a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800279e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027a2:	d102      	bne.n	80027aa <HAL_PWREx_ControlVoltageScaling+0xfa>
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d1f2      	bne.n	8002790 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80027aa:	4b10      	ldr	r3, [pc, #64]	; (80027ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027ac:	695b      	ldr	r3, [r3, #20]
 80027ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027b6:	d112      	bne.n	80027de <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	e011      	b.n	80027e0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80027bc:	4b0b      	ldr	r3, [pc, #44]	; (80027ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027c2:	4a0a      	ldr	r2, [pc, #40]	; (80027ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80027cc:	e007      	b.n	80027de <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80027ce:	4b07      	ldr	r3, [pc, #28]	; (80027ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80027d6:	4a05      	ldr	r2, [pc, #20]	; (80027ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027dc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80027de:	2300      	movs	r3, #0
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3714      	adds	r7, #20
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr
 80027ec:	40007000 	.word	0x40007000
 80027f0:	20000004 	.word	0x20000004
 80027f4:	431bde83 	.word	0x431bde83

080027f8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80027fc:	4b05      	ldr	r3, [pc, #20]	; (8002814 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	4a04      	ldr	r2, [pc, #16]	; (8002814 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002802:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002806:	6093      	str	r3, [r2, #8]
}
 8002808:	bf00      	nop
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	40007000 	.word	0x40007000

08002818 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b088      	sub	sp, #32
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d101      	bne.n	800282a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e2fe      	b.n	8002e28 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	2b00      	cmp	r3, #0
 8002834:	d075      	beq.n	8002922 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002836:	4b97      	ldr	r3, [pc, #604]	; (8002a94 <HAL_RCC_OscConfig+0x27c>)
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f003 030c 	and.w	r3, r3, #12
 800283e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002840:	4b94      	ldr	r3, [pc, #592]	; (8002a94 <HAL_RCC_OscConfig+0x27c>)
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	f003 0303 	and.w	r3, r3, #3
 8002848:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	2b0c      	cmp	r3, #12
 800284e:	d102      	bne.n	8002856 <HAL_RCC_OscConfig+0x3e>
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	2b03      	cmp	r3, #3
 8002854:	d002      	beq.n	800285c <HAL_RCC_OscConfig+0x44>
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	2b08      	cmp	r3, #8
 800285a:	d10b      	bne.n	8002874 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800285c:	4b8d      	ldr	r3, [pc, #564]	; (8002a94 <HAL_RCC_OscConfig+0x27c>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002864:	2b00      	cmp	r3, #0
 8002866:	d05b      	beq.n	8002920 <HAL_RCC_OscConfig+0x108>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d157      	bne.n	8002920 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e2d9      	b.n	8002e28 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800287c:	d106      	bne.n	800288c <HAL_RCC_OscConfig+0x74>
 800287e:	4b85      	ldr	r3, [pc, #532]	; (8002a94 <HAL_RCC_OscConfig+0x27c>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a84      	ldr	r2, [pc, #528]	; (8002a94 <HAL_RCC_OscConfig+0x27c>)
 8002884:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002888:	6013      	str	r3, [r2, #0]
 800288a:	e01d      	b.n	80028c8 <HAL_RCC_OscConfig+0xb0>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002894:	d10c      	bne.n	80028b0 <HAL_RCC_OscConfig+0x98>
 8002896:	4b7f      	ldr	r3, [pc, #508]	; (8002a94 <HAL_RCC_OscConfig+0x27c>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a7e      	ldr	r2, [pc, #504]	; (8002a94 <HAL_RCC_OscConfig+0x27c>)
 800289c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028a0:	6013      	str	r3, [r2, #0]
 80028a2:	4b7c      	ldr	r3, [pc, #496]	; (8002a94 <HAL_RCC_OscConfig+0x27c>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a7b      	ldr	r2, [pc, #492]	; (8002a94 <HAL_RCC_OscConfig+0x27c>)
 80028a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028ac:	6013      	str	r3, [r2, #0]
 80028ae:	e00b      	b.n	80028c8 <HAL_RCC_OscConfig+0xb0>
 80028b0:	4b78      	ldr	r3, [pc, #480]	; (8002a94 <HAL_RCC_OscConfig+0x27c>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a77      	ldr	r2, [pc, #476]	; (8002a94 <HAL_RCC_OscConfig+0x27c>)
 80028b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028ba:	6013      	str	r3, [r2, #0]
 80028bc:	4b75      	ldr	r3, [pc, #468]	; (8002a94 <HAL_RCC_OscConfig+0x27c>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a74      	ldr	r2, [pc, #464]	; (8002a94 <HAL_RCC_OscConfig+0x27c>)
 80028c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d013      	beq.n	80028f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d0:	f7ff fb3a 	bl	8001f48 <HAL_GetTick>
 80028d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028d6:	e008      	b.n	80028ea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028d8:	f7ff fb36 	bl	8001f48 <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	2b64      	cmp	r3, #100	; 0x64
 80028e4:	d901      	bls.n	80028ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e29e      	b.n	8002e28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028ea:	4b6a      	ldr	r3, [pc, #424]	; (8002a94 <HAL_RCC_OscConfig+0x27c>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d0f0      	beq.n	80028d8 <HAL_RCC_OscConfig+0xc0>
 80028f6:	e014      	b.n	8002922 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f8:	f7ff fb26 	bl	8001f48 <HAL_GetTick>
 80028fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028fe:	e008      	b.n	8002912 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002900:	f7ff fb22 	bl	8001f48 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b64      	cmp	r3, #100	; 0x64
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e28a      	b.n	8002e28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002912:	4b60      	ldr	r3, [pc, #384]	; (8002a94 <HAL_RCC_OscConfig+0x27c>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d1f0      	bne.n	8002900 <HAL_RCC_OscConfig+0xe8>
 800291e:	e000      	b.n	8002922 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002920:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0302 	and.w	r3, r3, #2
 800292a:	2b00      	cmp	r3, #0
 800292c:	d075      	beq.n	8002a1a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800292e:	4b59      	ldr	r3, [pc, #356]	; (8002a94 <HAL_RCC_OscConfig+0x27c>)
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f003 030c 	and.w	r3, r3, #12
 8002936:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002938:	4b56      	ldr	r3, [pc, #344]	; (8002a94 <HAL_RCC_OscConfig+0x27c>)
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	f003 0303 	and.w	r3, r3, #3
 8002940:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	2b0c      	cmp	r3, #12
 8002946:	d102      	bne.n	800294e <HAL_RCC_OscConfig+0x136>
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	2b02      	cmp	r3, #2
 800294c:	d002      	beq.n	8002954 <HAL_RCC_OscConfig+0x13c>
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	2b04      	cmp	r3, #4
 8002952:	d11f      	bne.n	8002994 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002954:	4b4f      	ldr	r3, [pc, #316]	; (8002a94 <HAL_RCC_OscConfig+0x27c>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800295c:	2b00      	cmp	r3, #0
 800295e:	d005      	beq.n	800296c <HAL_RCC_OscConfig+0x154>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d101      	bne.n	800296c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e25d      	b.n	8002e28 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800296c:	4b49      	ldr	r3, [pc, #292]	; (8002a94 <HAL_RCC_OscConfig+0x27c>)
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	691b      	ldr	r3, [r3, #16]
 8002978:	061b      	lsls	r3, r3, #24
 800297a:	4946      	ldr	r1, [pc, #280]	; (8002a94 <HAL_RCC_OscConfig+0x27c>)
 800297c:	4313      	orrs	r3, r2
 800297e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002980:	4b45      	ldr	r3, [pc, #276]	; (8002a98 <HAL_RCC_OscConfig+0x280>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4618      	mov	r0, r3
 8002986:	f7ff fa93 	bl	8001eb0 <HAL_InitTick>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d043      	beq.n	8002a18 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e249      	b.n	8002e28 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d023      	beq.n	80029e4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800299c:	4b3d      	ldr	r3, [pc, #244]	; (8002a94 <HAL_RCC_OscConfig+0x27c>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a3c      	ldr	r2, [pc, #240]	; (8002a94 <HAL_RCC_OscConfig+0x27c>)
 80029a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a8:	f7ff face 	bl	8001f48 <HAL_GetTick>
 80029ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029ae:	e008      	b.n	80029c2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029b0:	f7ff faca 	bl	8001f48 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e232      	b.n	8002e28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029c2:	4b34      	ldr	r3, [pc, #208]	; (8002a94 <HAL_RCC_OscConfig+0x27c>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d0f0      	beq.n	80029b0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029ce:	4b31      	ldr	r3, [pc, #196]	; (8002a94 <HAL_RCC_OscConfig+0x27c>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	061b      	lsls	r3, r3, #24
 80029dc:	492d      	ldr	r1, [pc, #180]	; (8002a94 <HAL_RCC_OscConfig+0x27c>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	604b      	str	r3, [r1, #4]
 80029e2:	e01a      	b.n	8002a1a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029e4:	4b2b      	ldr	r3, [pc, #172]	; (8002a94 <HAL_RCC_OscConfig+0x27c>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a2a      	ldr	r2, [pc, #168]	; (8002a94 <HAL_RCC_OscConfig+0x27c>)
 80029ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f0:	f7ff faaa 	bl	8001f48 <HAL_GetTick>
 80029f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029f6:	e008      	b.n	8002a0a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029f8:	f7ff faa6 	bl	8001f48 <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d901      	bls.n	8002a0a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e20e      	b.n	8002e28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a0a:	4b22      	ldr	r3, [pc, #136]	; (8002a94 <HAL_RCC_OscConfig+0x27c>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d1f0      	bne.n	80029f8 <HAL_RCC_OscConfig+0x1e0>
 8002a16:	e000      	b.n	8002a1a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a18:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0308 	and.w	r3, r3, #8
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d041      	beq.n	8002aaa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	695b      	ldr	r3, [r3, #20]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d01c      	beq.n	8002a68 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a2e:	4b19      	ldr	r3, [pc, #100]	; (8002a94 <HAL_RCC_OscConfig+0x27c>)
 8002a30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a34:	4a17      	ldr	r2, [pc, #92]	; (8002a94 <HAL_RCC_OscConfig+0x27c>)
 8002a36:	f043 0301 	orr.w	r3, r3, #1
 8002a3a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a3e:	f7ff fa83 	bl	8001f48 <HAL_GetTick>
 8002a42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a44:	e008      	b.n	8002a58 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a46:	f7ff fa7f 	bl	8001f48 <HAL_GetTick>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d901      	bls.n	8002a58 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	e1e7      	b.n	8002e28 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a58:	4b0e      	ldr	r3, [pc, #56]	; (8002a94 <HAL_RCC_OscConfig+0x27c>)
 8002a5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d0ef      	beq.n	8002a46 <HAL_RCC_OscConfig+0x22e>
 8002a66:	e020      	b.n	8002aaa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a68:	4b0a      	ldr	r3, [pc, #40]	; (8002a94 <HAL_RCC_OscConfig+0x27c>)
 8002a6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a6e:	4a09      	ldr	r2, [pc, #36]	; (8002a94 <HAL_RCC_OscConfig+0x27c>)
 8002a70:	f023 0301 	bic.w	r3, r3, #1
 8002a74:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a78:	f7ff fa66 	bl	8001f48 <HAL_GetTick>
 8002a7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a7e:	e00d      	b.n	8002a9c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a80:	f7ff fa62 	bl	8001f48 <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d906      	bls.n	8002a9c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e1ca      	b.n	8002e28 <HAL_RCC_OscConfig+0x610>
 8002a92:	bf00      	nop
 8002a94:	40021000 	.word	0x40021000
 8002a98:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a9c:	4b8c      	ldr	r3, [pc, #560]	; (8002cd0 <HAL_RCC_OscConfig+0x4b8>)
 8002a9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002aa2:	f003 0302 	and.w	r3, r3, #2
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d1ea      	bne.n	8002a80 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0304 	and.w	r3, r3, #4
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	f000 80a6 	beq.w	8002c04 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002abc:	4b84      	ldr	r3, [pc, #528]	; (8002cd0 <HAL_RCC_OscConfig+0x4b8>)
 8002abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ac0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d101      	bne.n	8002acc <HAL_RCC_OscConfig+0x2b4>
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e000      	b.n	8002ace <HAL_RCC_OscConfig+0x2b6>
 8002acc:	2300      	movs	r3, #0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d00d      	beq.n	8002aee <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ad2:	4b7f      	ldr	r3, [pc, #508]	; (8002cd0 <HAL_RCC_OscConfig+0x4b8>)
 8002ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad6:	4a7e      	ldr	r2, [pc, #504]	; (8002cd0 <HAL_RCC_OscConfig+0x4b8>)
 8002ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002adc:	6593      	str	r3, [r2, #88]	; 0x58
 8002ade:	4b7c      	ldr	r3, [pc, #496]	; (8002cd0 <HAL_RCC_OscConfig+0x4b8>)
 8002ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ae6:	60fb      	str	r3, [r7, #12]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002aea:	2301      	movs	r3, #1
 8002aec:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002aee:	4b79      	ldr	r3, [pc, #484]	; (8002cd4 <HAL_RCC_OscConfig+0x4bc>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d118      	bne.n	8002b2c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002afa:	4b76      	ldr	r3, [pc, #472]	; (8002cd4 <HAL_RCC_OscConfig+0x4bc>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a75      	ldr	r2, [pc, #468]	; (8002cd4 <HAL_RCC_OscConfig+0x4bc>)
 8002b00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b06:	f7ff fa1f 	bl	8001f48 <HAL_GetTick>
 8002b0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b0c:	e008      	b.n	8002b20 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b0e:	f7ff fa1b 	bl	8001f48 <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d901      	bls.n	8002b20 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e183      	b.n	8002e28 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b20:	4b6c      	ldr	r3, [pc, #432]	; (8002cd4 <HAL_RCC_OscConfig+0x4bc>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d0f0      	beq.n	8002b0e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d108      	bne.n	8002b46 <HAL_RCC_OscConfig+0x32e>
 8002b34:	4b66      	ldr	r3, [pc, #408]	; (8002cd0 <HAL_RCC_OscConfig+0x4b8>)
 8002b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b3a:	4a65      	ldr	r2, [pc, #404]	; (8002cd0 <HAL_RCC_OscConfig+0x4b8>)
 8002b3c:	f043 0301 	orr.w	r3, r3, #1
 8002b40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b44:	e024      	b.n	8002b90 <HAL_RCC_OscConfig+0x378>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	2b05      	cmp	r3, #5
 8002b4c:	d110      	bne.n	8002b70 <HAL_RCC_OscConfig+0x358>
 8002b4e:	4b60      	ldr	r3, [pc, #384]	; (8002cd0 <HAL_RCC_OscConfig+0x4b8>)
 8002b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b54:	4a5e      	ldr	r2, [pc, #376]	; (8002cd0 <HAL_RCC_OscConfig+0x4b8>)
 8002b56:	f043 0304 	orr.w	r3, r3, #4
 8002b5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b5e:	4b5c      	ldr	r3, [pc, #368]	; (8002cd0 <HAL_RCC_OscConfig+0x4b8>)
 8002b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b64:	4a5a      	ldr	r2, [pc, #360]	; (8002cd0 <HAL_RCC_OscConfig+0x4b8>)
 8002b66:	f043 0301 	orr.w	r3, r3, #1
 8002b6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b6e:	e00f      	b.n	8002b90 <HAL_RCC_OscConfig+0x378>
 8002b70:	4b57      	ldr	r3, [pc, #348]	; (8002cd0 <HAL_RCC_OscConfig+0x4b8>)
 8002b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b76:	4a56      	ldr	r2, [pc, #344]	; (8002cd0 <HAL_RCC_OscConfig+0x4b8>)
 8002b78:	f023 0301 	bic.w	r3, r3, #1
 8002b7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b80:	4b53      	ldr	r3, [pc, #332]	; (8002cd0 <HAL_RCC_OscConfig+0x4b8>)
 8002b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b86:	4a52      	ldr	r2, [pc, #328]	; (8002cd0 <HAL_RCC_OscConfig+0x4b8>)
 8002b88:	f023 0304 	bic.w	r3, r3, #4
 8002b8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d016      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b98:	f7ff f9d6 	bl	8001f48 <HAL_GetTick>
 8002b9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b9e:	e00a      	b.n	8002bb6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ba0:	f7ff f9d2 	bl	8001f48 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d901      	bls.n	8002bb6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e138      	b.n	8002e28 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bb6:	4b46      	ldr	r3, [pc, #280]	; (8002cd0 <HAL_RCC_OscConfig+0x4b8>)
 8002bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bbc:	f003 0302 	and.w	r3, r3, #2
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d0ed      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x388>
 8002bc4:	e015      	b.n	8002bf2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bc6:	f7ff f9bf 	bl	8001f48 <HAL_GetTick>
 8002bca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002bcc:	e00a      	b.n	8002be4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bce:	f7ff f9bb 	bl	8001f48 <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d901      	bls.n	8002be4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e121      	b.n	8002e28 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002be4:	4b3a      	ldr	r3, [pc, #232]	; (8002cd0 <HAL_RCC_OscConfig+0x4b8>)
 8002be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bea:	f003 0302 	and.w	r3, r3, #2
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d1ed      	bne.n	8002bce <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002bf2:	7ffb      	ldrb	r3, [r7, #31]
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d105      	bne.n	8002c04 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bf8:	4b35      	ldr	r3, [pc, #212]	; (8002cd0 <HAL_RCC_OscConfig+0x4b8>)
 8002bfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bfc:	4a34      	ldr	r2, [pc, #208]	; (8002cd0 <HAL_RCC_OscConfig+0x4b8>)
 8002bfe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c02:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0320 	and.w	r3, r3, #32
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d03c      	beq.n	8002c8a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	699b      	ldr	r3, [r3, #24]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d01c      	beq.n	8002c52 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002c18:	4b2d      	ldr	r3, [pc, #180]	; (8002cd0 <HAL_RCC_OscConfig+0x4b8>)
 8002c1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c1e:	4a2c      	ldr	r2, [pc, #176]	; (8002cd0 <HAL_RCC_OscConfig+0x4b8>)
 8002c20:	f043 0301 	orr.w	r3, r3, #1
 8002c24:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c28:	f7ff f98e 	bl	8001f48 <HAL_GetTick>
 8002c2c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002c2e:	e008      	b.n	8002c42 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c30:	f7ff f98a 	bl	8001f48 <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d901      	bls.n	8002c42 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e0f2      	b.n	8002e28 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002c42:	4b23      	ldr	r3, [pc, #140]	; (8002cd0 <HAL_RCC_OscConfig+0x4b8>)
 8002c44:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c48:	f003 0302 	and.w	r3, r3, #2
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d0ef      	beq.n	8002c30 <HAL_RCC_OscConfig+0x418>
 8002c50:	e01b      	b.n	8002c8a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002c52:	4b1f      	ldr	r3, [pc, #124]	; (8002cd0 <HAL_RCC_OscConfig+0x4b8>)
 8002c54:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c58:	4a1d      	ldr	r2, [pc, #116]	; (8002cd0 <HAL_RCC_OscConfig+0x4b8>)
 8002c5a:	f023 0301 	bic.w	r3, r3, #1
 8002c5e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c62:	f7ff f971 	bl	8001f48 <HAL_GetTick>
 8002c66:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002c68:	e008      	b.n	8002c7c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c6a:	f7ff f96d 	bl	8001f48 <HAL_GetTick>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d901      	bls.n	8002c7c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	e0d5      	b.n	8002e28 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002c7c:	4b14      	ldr	r3, [pc, #80]	; (8002cd0 <HAL_RCC_OscConfig+0x4b8>)
 8002c7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d1ef      	bne.n	8002c6a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	69db      	ldr	r3, [r3, #28]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	f000 80c9 	beq.w	8002e26 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c94:	4b0e      	ldr	r3, [pc, #56]	; (8002cd0 <HAL_RCC_OscConfig+0x4b8>)
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	f003 030c 	and.w	r3, r3, #12
 8002c9c:	2b0c      	cmp	r3, #12
 8002c9e:	f000 8083 	beq.w	8002da8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	69db      	ldr	r3, [r3, #28]
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d15e      	bne.n	8002d68 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002caa:	4b09      	ldr	r3, [pc, #36]	; (8002cd0 <HAL_RCC_OscConfig+0x4b8>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a08      	ldr	r2, [pc, #32]	; (8002cd0 <HAL_RCC_OscConfig+0x4b8>)
 8002cb0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb6:	f7ff f947 	bl	8001f48 <HAL_GetTick>
 8002cba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cbc:	e00c      	b.n	8002cd8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cbe:	f7ff f943 	bl	8001f48 <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d905      	bls.n	8002cd8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e0ab      	b.n	8002e28 <HAL_RCC_OscConfig+0x610>
 8002cd0:	40021000 	.word	0x40021000
 8002cd4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cd8:	4b55      	ldr	r3, [pc, #340]	; (8002e30 <HAL_RCC_OscConfig+0x618>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d1ec      	bne.n	8002cbe <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ce4:	4b52      	ldr	r3, [pc, #328]	; (8002e30 <HAL_RCC_OscConfig+0x618>)
 8002ce6:	68da      	ldr	r2, [r3, #12]
 8002ce8:	4b52      	ldr	r3, [pc, #328]	; (8002e34 <HAL_RCC_OscConfig+0x61c>)
 8002cea:	4013      	ands	r3, r2
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	6a11      	ldr	r1, [r2, #32]
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002cf4:	3a01      	subs	r2, #1
 8002cf6:	0112      	lsls	r2, r2, #4
 8002cf8:	4311      	orrs	r1, r2
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002cfe:	0212      	lsls	r2, r2, #8
 8002d00:	4311      	orrs	r1, r2
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002d06:	0852      	lsrs	r2, r2, #1
 8002d08:	3a01      	subs	r2, #1
 8002d0a:	0552      	lsls	r2, r2, #21
 8002d0c:	4311      	orrs	r1, r2
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002d12:	0852      	lsrs	r2, r2, #1
 8002d14:	3a01      	subs	r2, #1
 8002d16:	0652      	lsls	r2, r2, #25
 8002d18:	4311      	orrs	r1, r2
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002d1e:	06d2      	lsls	r2, r2, #27
 8002d20:	430a      	orrs	r2, r1
 8002d22:	4943      	ldr	r1, [pc, #268]	; (8002e30 <HAL_RCC_OscConfig+0x618>)
 8002d24:	4313      	orrs	r3, r2
 8002d26:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d28:	4b41      	ldr	r3, [pc, #260]	; (8002e30 <HAL_RCC_OscConfig+0x618>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a40      	ldr	r2, [pc, #256]	; (8002e30 <HAL_RCC_OscConfig+0x618>)
 8002d2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d32:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d34:	4b3e      	ldr	r3, [pc, #248]	; (8002e30 <HAL_RCC_OscConfig+0x618>)
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	4a3d      	ldr	r2, [pc, #244]	; (8002e30 <HAL_RCC_OscConfig+0x618>)
 8002d3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d3e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d40:	f7ff f902 	bl	8001f48 <HAL_GetTick>
 8002d44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d46:	e008      	b.n	8002d5a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d48:	f7ff f8fe 	bl	8001f48 <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d901      	bls.n	8002d5a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e066      	b.n	8002e28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d5a:	4b35      	ldr	r3, [pc, #212]	; (8002e30 <HAL_RCC_OscConfig+0x618>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d0f0      	beq.n	8002d48 <HAL_RCC_OscConfig+0x530>
 8002d66:	e05e      	b.n	8002e26 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d68:	4b31      	ldr	r3, [pc, #196]	; (8002e30 <HAL_RCC_OscConfig+0x618>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a30      	ldr	r2, [pc, #192]	; (8002e30 <HAL_RCC_OscConfig+0x618>)
 8002d6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d74:	f7ff f8e8 	bl	8001f48 <HAL_GetTick>
 8002d78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d7a:	e008      	b.n	8002d8e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d7c:	f7ff f8e4 	bl	8001f48 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e04c      	b.n	8002e28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d8e:	4b28      	ldr	r3, [pc, #160]	; (8002e30 <HAL_RCC_OscConfig+0x618>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d1f0      	bne.n	8002d7c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002d9a:	4b25      	ldr	r3, [pc, #148]	; (8002e30 <HAL_RCC_OscConfig+0x618>)
 8002d9c:	68da      	ldr	r2, [r3, #12]
 8002d9e:	4924      	ldr	r1, [pc, #144]	; (8002e30 <HAL_RCC_OscConfig+0x618>)
 8002da0:	4b25      	ldr	r3, [pc, #148]	; (8002e38 <HAL_RCC_OscConfig+0x620>)
 8002da2:	4013      	ands	r3, r2
 8002da4:	60cb      	str	r3, [r1, #12]
 8002da6:	e03e      	b.n	8002e26 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	69db      	ldr	r3, [r3, #28]
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d101      	bne.n	8002db4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e039      	b.n	8002e28 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002db4:	4b1e      	ldr	r3, [pc, #120]	; (8002e30 <HAL_RCC_OscConfig+0x618>)
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	f003 0203 	and.w	r2, r3, #3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6a1b      	ldr	r3, [r3, #32]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d12c      	bne.n	8002e22 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd2:	3b01      	subs	r3, #1
 8002dd4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d123      	bne.n	8002e22 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d11b      	bne.n	8002e22 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d113      	bne.n	8002e22 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e04:	085b      	lsrs	r3, r3, #1
 8002e06:	3b01      	subs	r3, #1
 8002e08:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d109      	bne.n	8002e22 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e18:	085b      	lsrs	r3, r3, #1
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d001      	beq.n	8002e26 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e000      	b.n	8002e28 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002e26:	2300      	movs	r3, #0
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3720      	adds	r7, #32
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	40021000 	.word	0x40021000
 8002e34:	019f800c 	.word	0x019f800c
 8002e38:	feeefffc 	.word	0xfeeefffc

08002e3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b086      	sub	sp, #24
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002e46:	2300      	movs	r3, #0
 8002e48:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d101      	bne.n	8002e54 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e11e      	b.n	8003092 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e54:	4b91      	ldr	r3, [pc, #580]	; (800309c <HAL_RCC_ClockConfig+0x260>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 030f 	and.w	r3, r3, #15
 8002e5c:	683a      	ldr	r2, [r7, #0]
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d910      	bls.n	8002e84 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e62:	4b8e      	ldr	r3, [pc, #568]	; (800309c <HAL_RCC_ClockConfig+0x260>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f023 020f 	bic.w	r2, r3, #15
 8002e6a:	498c      	ldr	r1, [pc, #560]	; (800309c <HAL_RCC_ClockConfig+0x260>)
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e72:	4b8a      	ldr	r3, [pc, #552]	; (800309c <HAL_RCC_ClockConfig+0x260>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 030f 	and.w	r3, r3, #15
 8002e7a:	683a      	ldr	r2, [r7, #0]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d001      	beq.n	8002e84 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e106      	b.n	8003092 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0301 	and.w	r3, r3, #1
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d073      	beq.n	8002f78 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	2b03      	cmp	r3, #3
 8002e96:	d129      	bne.n	8002eec <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e98:	4b81      	ldr	r3, [pc, #516]	; (80030a0 <HAL_RCC_ClockConfig+0x264>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d101      	bne.n	8002ea8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e0f4      	b.n	8003092 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002ea8:	f000 f99e 	bl	80031e8 <RCC_GetSysClockFreqFromPLLSource>
 8002eac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	4a7c      	ldr	r2, [pc, #496]	; (80030a4 <HAL_RCC_ClockConfig+0x268>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d93f      	bls.n	8002f36 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002eb6:	4b7a      	ldr	r3, [pc, #488]	; (80030a0 <HAL_RCC_ClockConfig+0x264>)
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d009      	beq.n	8002ed6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d033      	beq.n	8002f36 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d12f      	bne.n	8002f36 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002ed6:	4b72      	ldr	r3, [pc, #456]	; (80030a0 <HAL_RCC_ClockConfig+0x264>)
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ede:	4a70      	ldr	r2, [pc, #448]	; (80030a0 <HAL_RCC_ClockConfig+0x264>)
 8002ee0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ee4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002ee6:	2380      	movs	r3, #128	; 0x80
 8002ee8:	617b      	str	r3, [r7, #20]
 8002eea:	e024      	b.n	8002f36 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d107      	bne.n	8002f04 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ef4:	4b6a      	ldr	r3, [pc, #424]	; (80030a0 <HAL_RCC_ClockConfig+0x264>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d109      	bne.n	8002f14 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e0c6      	b.n	8003092 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f04:	4b66      	ldr	r3, [pc, #408]	; (80030a0 <HAL_RCC_ClockConfig+0x264>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d101      	bne.n	8002f14 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e0be      	b.n	8003092 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002f14:	f000 f8ce 	bl	80030b4 <HAL_RCC_GetSysClockFreq>
 8002f18:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	4a61      	ldr	r2, [pc, #388]	; (80030a4 <HAL_RCC_ClockConfig+0x268>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d909      	bls.n	8002f36 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002f22:	4b5f      	ldr	r3, [pc, #380]	; (80030a0 <HAL_RCC_ClockConfig+0x264>)
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f2a:	4a5d      	ldr	r2, [pc, #372]	; (80030a0 <HAL_RCC_ClockConfig+0x264>)
 8002f2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f30:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002f32:	2380      	movs	r3, #128	; 0x80
 8002f34:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f36:	4b5a      	ldr	r3, [pc, #360]	; (80030a0 <HAL_RCC_ClockConfig+0x264>)
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f023 0203 	bic.w	r2, r3, #3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	4957      	ldr	r1, [pc, #348]	; (80030a0 <HAL_RCC_ClockConfig+0x264>)
 8002f44:	4313      	orrs	r3, r2
 8002f46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f48:	f7fe fffe 	bl	8001f48 <HAL_GetTick>
 8002f4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f4e:	e00a      	b.n	8002f66 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f50:	f7fe fffa 	bl	8001f48 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d901      	bls.n	8002f66 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e095      	b.n	8003092 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f66:	4b4e      	ldr	r3, [pc, #312]	; (80030a0 <HAL_RCC_ClockConfig+0x264>)
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f003 020c 	and.w	r2, r3, #12
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d1eb      	bne.n	8002f50 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0302 	and.w	r3, r3, #2
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d023      	beq.n	8002fcc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0304 	and.w	r3, r3, #4
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d005      	beq.n	8002f9c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f90:	4b43      	ldr	r3, [pc, #268]	; (80030a0 <HAL_RCC_ClockConfig+0x264>)
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	4a42      	ldr	r2, [pc, #264]	; (80030a0 <HAL_RCC_ClockConfig+0x264>)
 8002f96:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f9a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0308 	and.w	r3, r3, #8
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d007      	beq.n	8002fb8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002fa8:	4b3d      	ldr	r3, [pc, #244]	; (80030a0 <HAL_RCC_ClockConfig+0x264>)
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002fb0:	4a3b      	ldr	r2, [pc, #236]	; (80030a0 <HAL_RCC_ClockConfig+0x264>)
 8002fb2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002fb6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fb8:	4b39      	ldr	r3, [pc, #228]	; (80030a0 <HAL_RCC_ClockConfig+0x264>)
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	4936      	ldr	r1, [pc, #216]	; (80030a0 <HAL_RCC_ClockConfig+0x264>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	608b      	str	r3, [r1, #8]
 8002fca:	e008      	b.n	8002fde <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	2b80      	cmp	r3, #128	; 0x80
 8002fd0:	d105      	bne.n	8002fde <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002fd2:	4b33      	ldr	r3, [pc, #204]	; (80030a0 <HAL_RCC_ClockConfig+0x264>)
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	4a32      	ldr	r2, [pc, #200]	; (80030a0 <HAL_RCC_ClockConfig+0x264>)
 8002fd8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fdc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fde:	4b2f      	ldr	r3, [pc, #188]	; (800309c <HAL_RCC_ClockConfig+0x260>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 030f 	and.w	r3, r3, #15
 8002fe6:	683a      	ldr	r2, [r7, #0]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d21d      	bcs.n	8003028 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fec:	4b2b      	ldr	r3, [pc, #172]	; (800309c <HAL_RCC_ClockConfig+0x260>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f023 020f 	bic.w	r2, r3, #15
 8002ff4:	4929      	ldr	r1, [pc, #164]	; (800309c <HAL_RCC_ClockConfig+0x260>)
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002ffc:	f7fe ffa4 	bl	8001f48 <HAL_GetTick>
 8003000:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003002:	e00a      	b.n	800301a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003004:	f7fe ffa0 	bl	8001f48 <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003012:	4293      	cmp	r3, r2
 8003014:	d901      	bls.n	800301a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e03b      	b.n	8003092 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800301a:	4b20      	ldr	r3, [pc, #128]	; (800309c <HAL_RCC_ClockConfig+0x260>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 030f 	and.w	r3, r3, #15
 8003022:	683a      	ldr	r2, [r7, #0]
 8003024:	429a      	cmp	r2, r3
 8003026:	d1ed      	bne.n	8003004 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0304 	and.w	r3, r3, #4
 8003030:	2b00      	cmp	r3, #0
 8003032:	d008      	beq.n	8003046 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003034:	4b1a      	ldr	r3, [pc, #104]	; (80030a0 <HAL_RCC_ClockConfig+0x264>)
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	4917      	ldr	r1, [pc, #92]	; (80030a0 <HAL_RCC_ClockConfig+0x264>)
 8003042:	4313      	orrs	r3, r2
 8003044:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0308 	and.w	r3, r3, #8
 800304e:	2b00      	cmp	r3, #0
 8003050:	d009      	beq.n	8003066 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003052:	4b13      	ldr	r3, [pc, #76]	; (80030a0 <HAL_RCC_ClockConfig+0x264>)
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	00db      	lsls	r3, r3, #3
 8003060:	490f      	ldr	r1, [pc, #60]	; (80030a0 <HAL_RCC_ClockConfig+0x264>)
 8003062:	4313      	orrs	r3, r2
 8003064:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003066:	f000 f825 	bl	80030b4 <HAL_RCC_GetSysClockFreq>
 800306a:	4602      	mov	r2, r0
 800306c:	4b0c      	ldr	r3, [pc, #48]	; (80030a0 <HAL_RCC_ClockConfig+0x264>)
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	091b      	lsrs	r3, r3, #4
 8003072:	f003 030f 	and.w	r3, r3, #15
 8003076:	490c      	ldr	r1, [pc, #48]	; (80030a8 <HAL_RCC_ClockConfig+0x26c>)
 8003078:	5ccb      	ldrb	r3, [r1, r3]
 800307a:	f003 031f 	and.w	r3, r3, #31
 800307e:	fa22 f303 	lsr.w	r3, r2, r3
 8003082:	4a0a      	ldr	r2, [pc, #40]	; (80030ac <HAL_RCC_ClockConfig+0x270>)
 8003084:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003086:	4b0a      	ldr	r3, [pc, #40]	; (80030b0 <HAL_RCC_ClockConfig+0x274>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4618      	mov	r0, r3
 800308c:	f7fe ff10 	bl	8001eb0 <HAL_InitTick>
 8003090:	4603      	mov	r3, r0
}
 8003092:	4618      	mov	r0, r3
 8003094:	3718      	adds	r7, #24
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	40022000 	.word	0x40022000
 80030a0:	40021000 	.word	0x40021000
 80030a4:	04c4b400 	.word	0x04c4b400
 80030a8:	08069fbc 	.word	0x08069fbc
 80030ac:	20000004 	.word	0x20000004
 80030b0:	20000008 	.word	0x20000008

080030b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b087      	sub	sp, #28
 80030b8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80030ba:	4b2c      	ldr	r3, [pc, #176]	; (800316c <HAL_RCC_GetSysClockFreq+0xb8>)
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f003 030c 	and.w	r3, r3, #12
 80030c2:	2b04      	cmp	r3, #4
 80030c4:	d102      	bne.n	80030cc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80030c6:	4b2a      	ldr	r3, [pc, #168]	; (8003170 <HAL_RCC_GetSysClockFreq+0xbc>)
 80030c8:	613b      	str	r3, [r7, #16]
 80030ca:	e047      	b.n	800315c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80030cc:	4b27      	ldr	r3, [pc, #156]	; (800316c <HAL_RCC_GetSysClockFreq+0xb8>)
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f003 030c 	and.w	r3, r3, #12
 80030d4:	2b08      	cmp	r3, #8
 80030d6:	d102      	bne.n	80030de <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80030d8:	4b26      	ldr	r3, [pc, #152]	; (8003174 <HAL_RCC_GetSysClockFreq+0xc0>)
 80030da:	613b      	str	r3, [r7, #16]
 80030dc:	e03e      	b.n	800315c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80030de:	4b23      	ldr	r3, [pc, #140]	; (800316c <HAL_RCC_GetSysClockFreq+0xb8>)
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f003 030c 	and.w	r3, r3, #12
 80030e6:	2b0c      	cmp	r3, #12
 80030e8:	d136      	bne.n	8003158 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80030ea:	4b20      	ldr	r3, [pc, #128]	; (800316c <HAL_RCC_GetSysClockFreq+0xb8>)
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	f003 0303 	and.w	r3, r3, #3
 80030f2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80030f4:	4b1d      	ldr	r3, [pc, #116]	; (800316c <HAL_RCC_GetSysClockFreq+0xb8>)
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	091b      	lsrs	r3, r3, #4
 80030fa:	f003 030f 	and.w	r3, r3, #15
 80030fe:	3301      	adds	r3, #1
 8003100:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2b03      	cmp	r3, #3
 8003106:	d10c      	bne.n	8003122 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003108:	4a1a      	ldr	r2, [pc, #104]	; (8003174 <HAL_RCC_GetSysClockFreq+0xc0>)
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003110:	4a16      	ldr	r2, [pc, #88]	; (800316c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003112:	68d2      	ldr	r2, [r2, #12]
 8003114:	0a12      	lsrs	r2, r2, #8
 8003116:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800311a:	fb02 f303 	mul.w	r3, r2, r3
 800311e:	617b      	str	r3, [r7, #20]
      break;
 8003120:	e00c      	b.n	800313c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003122:	4a13      	ldr	r2, [pc, #76]	; (8003170 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	fbb2 f3f3 	udiv	r3, r2, r3
 800312a:	4a10      	ldr	r2, [pc, #64]	; (800316c <HAL_RCC_GetSysClockFreq+0xb8>)
 800312c:	68d2      	ldr	r2, [r2, #12]
 800312e:	0a12      	lsrs	r2, r2, #8
 8003130:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003134:	fb02 f303 	mul.w	r3, r2, r3
 8003138:	617b      	str	r3, [r7, #20]
      break;
 800313a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800313c:	4b0b      	ldr	r3, [pc, #44]	; (800316c <HAL_RCC_GetSysClockFreq+0xb8>)
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	0e5b      	lsrs	r3, r3, #25
 8003142:	f003 0303 	and.w	r3, r3, #3
 8003146:	3301      	adds	r3, #1
 8003148:	005b      	lsls	r3, r3, #1
 800314a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800314c:	697a      	ldr	r2, [r7, #20]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	fbb2 f3f3 	udiv	r3, r2, r3
 8003154:	613b      	str	r3, [r7, #16]
 8003156:	e001      	b.n	800315c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003158:	2300      	movs	r3, #0
 800315a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800315c:	693b      	ldr	r3, [r7, #16]
}
 800315e:	4618      	mov	r0, r3
 8003160:	371c      	adds	r7, #28
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	40021000 	.word	0x40021000
 8003170:	00f42400 	.word	0x00f42400
 8003174:	016e3600 	.word	0x016e3600

08003178 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003178:	b480      	push	{r7}
 800317a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800317c:	4b03      	ldr	r3, [pc, #12]	; (800318c <HAL_RCC_GetHCLKFreq+0x14>)
 800317e:	681b      	ldr	r3, [r3, #0]
}
 8003180:	4618      	mov	r0, r3
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	20000004 	.word	0x20000004

08003190 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003194:	f7ff fff0 	bl	8003178 <HAL_RCC_GetHCLKFreq>
 8003198:	4602      	mov	r2, r0
 800319a:	4b06      	ldr	r3, [pc, #24]	; (80031b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	0a1b      	lsrs	r3, r3, #8
 80031a0:	f003 0307 	and.w	r3, r3, #7
 80031a4:	4904      	ldr	r1, [pc, #16]	; (80031b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80031a6:	5ccb      	ldrb	r3, [r1, r3]
 80031a8:	f003 031f 	and.w	r3, r3, #31
 80031ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	40021000 	.word	0x40021000
 80031b8:	08069fcc 	.word	0x08069fcc

080031bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80031c0:	f7ff ffda 	bl	8003178 <HAL_RCC_GetHCLKFreq>
 80031c4:	4602      	mov	r2, r0
 80031c6:	4b06      	ldr	r3, [pc, #24]	; (80031e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	0adb      	lsrs	r3, r3, #11
 80031cc:	f003 0307 	and.w	r3, r3, #7
 80031d0:	4904      	ldr	r1, [pc, #16]	; (80031e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80031d2:	5ccb      	ldrb	r3, [r1, r3]
 80031d4:	f003 031f 	and.w	r3, r3, #31
 80031d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031dc:	4618      	mov	r0, r3
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	40021000 	.word	0x40021000
 80031e4:	08069fcc 	.word	0x08069fcc

080031e8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b087      	sub	sp, #28
 80031ec:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80031ee:	4b1e      	ldr	r3, [pc, #120]	; (8003268 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	f003 0303 	and.w	r3, r3, #3
 80031f6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80031f8:	4b1b      	ldr	r3, [pc, #108]	; (8003268 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	091b      	lsrs	r3, r3, #4
 80031fe:	f003 030f 	and.w	r3, r3, #15
 8003202:	3301      	adds	r3, #1
 8003204:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	2b03      	cmp	r3, #3
 800320a:	d10c      	bne.n	8003226 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800320c:	4a17      	ldr	r2, [pc, #92]	; (800326c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	fbb2 f3f3 	udiv	r3, r2, r3
 8003214:	4a14      	ldr	r2, [pc, #80]	; (8003268 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003216:	68d2      	ldr	r2, [r2, #12]
 8003218:	0a12      	lsrs	r2, r2, #8
 800321a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800321e:	fb02 f303 	mul.w	r3, r2, r3
 8003222:	617b      	str	r3, [r7, #20]
    break;
 8003224:	e00c      	b.n	8003240 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003226:	4a12      	ldr	r2, [pc, #72]	; (8003270 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	fbb2 f3f3 	udiv	r3, r2, r3
 800322e:	4a0e      	ldr	r2, [pc, #56]	; (8003268 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003230:	68d2      	ldr	r2, [r2, #12]
 8003232:	0a12      	lsrs	r2, r2, #8
 8003234:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003238:	fb02 f303 	mul.w	r3, r2, r3
 800323c:	617b      	str	r3, [r7, #20]
    break;
 800323e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003240:	4b09      	ldr	r3, [pc, #36]	; (8003268 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	0e5b      	lsrs	r3, r3, #25
 8003246:	f003 0303 	and.w	r3, r3, #3
 800324a:	3301      	adds	r3, #1
 800324c:	005b      	lsls	r3, r3, #1
 800324e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003250:	697a      	ldr	r2, [r7, #20]
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	fbb2 f3f3 	udiv	r3, r2, r3
 8003258:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800325a:	687b      	ldr	r3, [r7, #4]
}
 800325c:	4618      	mov	r0, r3
 800325e:	371c      	adds	r7, #28
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr
 8003268:	40021000 	.word	0x40021000
 800326c:	016e3600 	.word	0x016e3600
 8003270:	00f42400 	.word	0x00f42400

08003274 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b086      	sub	sp, #24
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800327c:	2300      	movs	r3, #0
 800327e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003280:	2300      	movs	r3, #0
 8003282:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800328c:	2b00      	cmp	r3, #0
 800328e:	f000 8098 	beq.w	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003292:	2300      	movs	r3, #0
 8003294:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003296:	4b43      	ldr	r3, [pc, #268]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800329a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d10d      	bne.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032a2:	4b40      	ldr	r3, [pc, #256]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032a6:	4a3f      	ldr	r2, [pc, #252]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032ac:	6593      	str	r3, [r2, #88]	; 0x58
 80032ae:	4b3d      	ldr	r3, [pc, #244]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032b6:	60bb      	str	r3, [r7, #8]
 80032b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032ba:	2301      	movs	r3, #1
 80032bc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032be:	4b3a      	ldr	r3, [pc, #232]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a39      	ldr	r2, [pc, #228]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80032c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032c8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80032ca:	f7fe fe3d 	bl	8001f48 <HAL_GetTick>
 80032ce:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80032d0:	e009      	b.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032d2:	f7fe fe39 	bl	8001f48 <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d902      	bls.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	74fb      	strb	r3, [r7, #19]
        break;
 80032e4:	e005      	b.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80032e6:	4b30      	ldr	r3, [pc, #192]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d0ef      	beq.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80032f2:	7cfb      	ldrb	r3, [r7, #19]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d159      	bne.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80032f8:	4b2a      	ldr	r3, [pc, #168]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003302:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d01e      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800330e:	697a      	ldr	r2, [r7, #20]
 8003310:	429a      	cmp	r2, r3
 8003312:	d019      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003314:	4b23      	ldr	r3, [pc, #140]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800331a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800331e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003320:	4b20      	ldr	r3, [pc, #128]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003326:	4a1f      	ldr	r2, [pc, #124]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800332c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003330:	4b1c      	ldr	r3, [pc, #112]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003336:	4a1b      	ldr	r2, [pc, #108]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003338:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800333c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003340:	4a18      	ldr	r2, [pc, #96]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	f003 0301 	and.w	r3, r3, #1
 800334e:	2b00      	cmp	r3, #0
 8003350:	d016      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003352:	f7fe fdf9 	bl	8001f48 <HAL_GetTick>
 8003356:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003358:	e00b      	b.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800335a:	f7fe fdf5 	bl	8001f48 <HAL_GetTick>
 800335e:	4602      	mov	r2, r0
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	f241 3288 	movw	r2, #5000	; 0x1388
 8003368:	4293      	cmp	r3, r2
 800336a:	d902      	bls.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800336c:	2303      	movs	r3, #3
 800336e:	74fb      	strb	r3, [r7, #19]
            break;
 8003370:	e006      	b.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003372:	4b0c      	ldr	r3, [pc, #48]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003374:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003378:	f003 0302 	and.w	r3, r3, #2
 800337c:	2b00      	cmp	r3, #0
 800337e:	d0ec      	beq.n	800335a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003380:	7cfb      	ldrb	r3, [r7, #19]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d10b      	bne.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003386:	4b07      	ldr	r3, [pc, #28]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003388:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800338c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003394:	4903      	ldr	r1, [pc, #12]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003396:	4313      	orrs	r3, r2
 8003398:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800339c:	e008      	b.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800339e:	7cfb      	ldrb	r3, [r7, #19]
 80033a0:	74bb      	strb	r3, [r7, #18]
 80033a2:	e005      	b.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80033a4:	40021000 	.word	0x40021000
 80033a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033ac:	7cfb      	ldrb	r3, [r7, #19]
 80033ae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033b0:	7c7b      	ldrb	r3, [r7, #17]
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d105      	bne.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033b6:	4ba7      	ldr	r3, [pc, #668]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ba:	4aa6      	ldr	r2, [pc, #664]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033c0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0301 	and.w	r3, r3, #1
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d00a      	beq.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80033ce:	4ba1      	ldr	r3, [pc, #644]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033d4:	f023 0203 	bic.w	r2, r3, #3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	499d      	ldr	r1, [pc, #628]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033de:	4313      	orrs	r3, r2
 80033e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0302 	and.w	r3, r3, #2
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d00a      	beq.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80033f0:	4b98      	ldr	r3, [pc, #608]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033f6:	f023 020c 	bic.w	r2, r3, #12
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	4995      	ldr	r1, [pc, #596]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003400:	4313      	orrs	r3, r2
 8003402:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0304 	and.w	r3, r3, #4
 800340e:	2b00      	cmp	r3, #0
 8003410:	d00a      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003412:	4b90      	ldr	r3, [pc, #576]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003414:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003418:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	498c      	ldr	r1, [pc, #560]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003422:	4313      	orrs	r3, r2
 8003424:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0308 	and.w	r3, r3, #8
 8003430:	2b00      	cmp	r3, #0
 8003432:	d00a      	beq.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003434:	4b87      	ldr	r3, [pc, #540]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800343a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	4984      	ldr	r1, [pc, #528]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003444:	4313      	orrs	r3, r2
 8003446:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0310 	and.w	r3, r3, #16
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00a      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003456:	4b7f      	ldr	r3, [pc, #508]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003458:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800345c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	695b      	ldr	r3, [r3, #20]
 8003464:	497b      	ldr	r1, [pc, #492]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003466:	4313      	orrs	r3, r2
 8003468:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0320 	and.w	r3, r3, #32
 8003474:	2b00      	cmp	r3, #0
 8003476:	d00a      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003478:	4b76      	ldr	r3, [pc, #472]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800347a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800347e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	699b      	ldr	r3, [r3, #24]
 8003486:	4973      	ldr	r1, [pc, #460]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003488:	4313      	orrs	r3, r2
 800348a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003496:	2b00      	cmp	r3, #0
 8003498:	d00a      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800349a:	4b6e      	ldr	r3, [pc, #440]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800349c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034a0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	69db      	ldr	r3, [r3, #28]
 80034a8:	496a      	ldr	r1, [pc, #424]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034aa:	4313      	orrs	r3, r2
 80034ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d00a      	beq.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80034bc:	4b65      	ldr	r3, [pc, #404]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034c2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a1b      	ldr	r3, [r3, #32]
 80034ca:	4962      	ldr	r1, [pc, #392]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034cc:	4313      	orrs	r3, r2
 80034ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d00a      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80034de:	4b5d      	ldr	r3, [pc, #372]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ec:	4959      	ldr	r1, [pc, #356]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d00a      	beq.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003500:	4b54      	ldr	r3, [pc, #336]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003506:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800350e:	4951      	ldr	r1, [pc, #324]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003510:	4313      	orrs	r3, r2
 8003512:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800351e:	2b00      	cmp	r3, #0
 8003520:	d015      	beq.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003522:	4b4c      	ldr	r3, [pc, #304]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003524:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003528:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003530:	4948      	ldr	r1, [pc, #288]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003532:	4313      	orrs	r3, r2
 8003534:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800353c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003540:	d105      	bne.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003542:	4b44      	ldr	r3, [pc, #272]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	4a43      	ldr	r2, [pc, #268]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003548:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800354c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003556:	2b00      	cmp	r3, #0
 8003558:	d015      	beq.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800355a:	4b3e      	ldr	r3, [pc, #248]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800355c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003560:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003568:	493a      	ldr	r1, [pc, #232]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800356a:	4313      	orrs	r3, r2
 800356c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003574:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003578:	d105      	bne.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800357a:	4b36      	ldr	r3, [pc, #216]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	4a35      	ldr	r2, [pc, #212]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003580:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003584:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d015      	beq.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003592:	4b30      	ldr	r3, [pc, #192]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003594:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003598:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035a0:	492c      	ldr	r1, [pc, #176]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035b0:	d105      	bne.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035b2:	4b28      	ldr	r3, [pc, #160]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	4a27      	ldr	r2, [pc, #156]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035bc:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d015      	beq.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035ca:	4b22      	ldr	r3, [pc, #136]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035d0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d8:	491e      	ldr	r1, [pc, #120]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035da:	4313      	orrs	r3, r2
 80035dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035e8:	d105      	bne.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035ea:	4b1a      	ldr	r3, [pc, #104]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	4a19      	ldr	r2, [pc, #100]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035f4:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d015      	beq.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003602:	4b14      	ldr	r3, [pc, #80]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003604:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003608:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003610:	4910      	ldr	r1, [pc, #64]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003612:	4313      	orrs	r3, r2
 8003614:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800361c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003620:	d105      	bne.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003622:	4b0c      	ldr	r3, [pc, #48]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	4a0b      	ldr	r2, [pc, #44]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003628:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800362c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d018      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800363a:	4b06      	ldr	r3, [pc, #24]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800363c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003640:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003648:	4902      	ldr	r1, [pc, #8]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800364a:	4313      	orrs	r3, r2
 800364c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	e001      	b.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003654:	40021000 	.word	0x40021000
 8003658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800365e:	d105      	bne.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003660:	4b21      	ldr	r3, [pc, #132]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	4a20      	ldr	r2, [pc, #128]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003666:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800366a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003674:	2b00      	cmp	r3, #0
 8003676:	d015      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003678:	4b1b      	ldr	r3, [pc, #108]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800367a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800367e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003686:	4918      	ldr	r1, [pc, #96]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003688:	4313      	orrs	r3, r2
 800368a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003692:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003696:	d105      	bne.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003698:	4b13      	ldr	r3, [pc, #76]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	4a12      	ldr	r2, [pc, #72]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800369e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036a2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d015      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80036b0:	4b0d      	ldr	r3, [pc, #52]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80036b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80036b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036be:	490a      	ldr	r1, [pc, #40]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80036c0:	4313      	orrs	r3, r2
 80036c2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80036ce:	d105      	bne.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036d0:	4b05      	ldr	r3, [pc, #20]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	4a04      	ldr	r2, [pc, #16]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80036d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036da:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80036dc:	7cbb      	ldrb	r3, [r7, #18]
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3718      	adds	r7, #24
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	40021000 	.word	0x40021000

080036ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d101      	bne.n	80036fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e049      	b.n	8003792 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b00      	cmp	r3, #0
 8003708:	d106      	bne.n	8003718 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f7fe fa56 	bl	8001bc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2202      	movs	r2, #2
 800371c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	3304      	adds	r3, #4
 8003728:	4619      	mov	r1, r3
 800372a:	4610      	mov	r0, r2
 800372c:	f000 f89e 	bl	800386c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2201      	movs	r2, #1
 800377c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003790:	2300      	movs	r3, #0
}
 8003792:	4618      	mov	r0, r3
 8003794:	3708      	adds	r7, #8
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
	...

0800379c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800379c:	b480      	push	{r7}
 800379e:	b085      	sub	sp, #20
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d001      	beq.n	80037b4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e047      	b.n	8003844 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2202      	movs	r2, #2
 80037b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a23      	ldr	r2, [pc, #140]	; (8003850 <HAL_TIM_Base_Start+0xb4>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d01d      	beq.n	8003802 <HAL_TIM_Base_Start+0x66>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037ce:	d018      	beq.n	8003802 <HAL_TIM_Base_Start+0x66>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a1f      	ldr	r2, [pc, #124]	; (8003854 <HAL_TIM_Base_Start+0xb8>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d013      	beq.n	8003802 <HAL_TIM_Base_Start+0x66>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a1e      	ldr	r2, [pc, #120]	; (8003858 <HAL_TIM_Base_Start+0xbc>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d00e      	beq.n	8003802 <HAL_TIM_Base_Start+0x66>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a1c      	ldr	r2, [pc, #112]	; (800385c <HAL_TIM_Base_Start+0xc0>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d009      	beq.n	8003802 <HAL_TIM_Base_Start+0x66>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a1b      	ldr	r2, [pc, #108]	; (8003860 <HAL_TIM_Base_Start+0xc4>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d004      	beq.n	8003802 <HAL_TIM_Base_Start+0x66>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a19      	ldr	r2, [pc, #100]	; (8003864 <HAL_TIM_Base_Start+0xc8>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d115      	bne.n	800382e <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	689a      	ldr	r2, [r3, #8]
 8003808:	4b17      	ldr	r3, [pc, #92]	; (8003868 <HAL_TIM_Base_Start+0xcc>)
 800380a:	4013      	ands	r3, r2
 800380c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2b06      	cmp	r3, #6
 8003812:	d015      	beq.n	8003840 <HAL_TIM_Base_Start+0xa4>
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800381a:	d011      	beq.n	8003840 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f042 0201 	orr.w	r2, r2, #1
 800382a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800382c:	e008      	b.n	8003840 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f042 0201 	orr.w	r2, r2, #1
 800383c:	601a      	str	r2, [r3, #0]
 800383e:	e000      	b.n	8003842 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003840:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003842:	2300      	movs	r3, #0
}
 8003844:	4618      	mov	r0, r3
 8003846:	3714      	adds	r7, #20
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr
 8003850:	40012c00 	.word	0x40012c00
 8003854:	40000400 	.word	0x40000400
 8003858:	40000800 	.word	0x40000800
 800385c:	40013400 	.word	0x40013400
 8003860:	40014000 	.word	0x40014000
 8003864:	40015000 	.word	0x40015000
 8003868:	00010007 	.word	0x00010007

0800386c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800386c:	b480      	push	{r7}
 800386e:	b085      	sub	sp, #20
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4a48      	ldr	r2, [pc, #288]	; (80039a0 <TIM_Base_SetConfig+0x134>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d013      	beq.n	80038ac <TIM_Base_SetConfig+0x40>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800388a:	d00f      	beq.n	80038ac <TIM_Base_SetConfig+0x40>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	4a45      	ldr	r2, [pc, #276]	; (80039a4 <TIM_Base_SetConfig+0x138>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d00b      	beq.n	80038ac <TIM_Base_SetConfig+0x40>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	4a44      	ldr	r2, [pc, #272]	; (80039a8 <TIM_Base_SetConfig+0x13c>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d007      	beq.n	80038ac <TIM_Base_SetConfig+0x40>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	4a43      	ldr	r2, [pc, #268]	; (80039ac <TIM_Base_SetConfig+0x140>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d003      	beq.n	80038ac <TIM_Base_SetConfig+0x40>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	4a42      	ldr	r2, [pc, #264]	; (80039b0 <TIM_Base_SetConfig+0x144>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d108      	bne.n	80038be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	68fa      	ldr	r2, [r7, #12]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a37      	ldr	r2, [pc, #220]	; (80039a0 <TIM_Base_SetConfig+0x134>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d01f      	beq.n	8003906 <TIM_Base_SetConfig+0x9a>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038cc:	d01b      	beq.n	8003906 <TIM_Base_SetConfig+0x9a>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a34      	ldr	r2, [pc, #208]	; (80039a4 <TIM_Base_SetConfig+0x138>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d017      	beq.n	8003906 <TIM_Base_SetConfig+0x9a>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a33      	ldr	r2, [pc, #204]	; (80039a8 <TIM_Base_SetConfig+0x13c>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d013      	beq.n	8003906 <TIM_Base_SetConfig+0x9a>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a32      	ldr	r2, [pc, #200]	; (80039ac <TIM_Base_SetConfig+0x140>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d00f      	beq.n	8003906 <TIM_Base_SetConfig+0x9a>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a32      	ldr	r2, [pc, #200]	; (80039b4 <TIM_Base_SetConfig+0x148>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d00b      	beq.n	8003906 <TIM_Base_SetConfig+0x9a>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a31      	ldr	r2, [pc, #196]	; (80039b8 <TIM_Base_SetConfig+0x14c>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d007      	beq.n	8003906 <TIM_Base_SetConfig+0x9a>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a30      	ldr	r2, [pc, #192]	; (80039bc <TIM_Base_SetConfig+0x150>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d003      	beq.n	8003906 <TIM_Base_SetConfig+0x9a>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a2b      	ldr	r2, [pc, #172]	; (80039b0 <TIM_Base_SetConfig+0x144>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d108      	bne.n	8003918 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800390c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	68fa      	ldr	r2, [r7, #12]
 8003914:	4313      	orrs	r3, r2
 8003916:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	695b      	ldr	r3, [r3, #20]
 8003922:	4313      	orrs	r3, r2
 8003924:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	68fa      	ldr	r2, [r7, #12]
 800392a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	689a      	ldr	r2, [r3, #8]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	4a18      	ldr	r2, [pc, #96]	; (80039a0 <TIM_Base_SetConfig+0x134>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d013      	beq.n	800396c <TIM_Base_SetConfig+0x100>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	4a19      	ldr	r2, [pc, #100]	; (80039ac <TIM_Base_SetConfig+0x140>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d00f      	beq.n	800396c <TIM_Base_SetConfig+0x100>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	4a19      	ldr	r2, [pc, #100]	; (80039b4 <TIM_Base_SetConfig+0x148>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d00b      	beq.n	800396c <TIM_Base_SetConfig+0x100>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4a18      	ldr	r2, [pc, #96]	; (80039b8 <TIM_Base_SetConfig+0x14c>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d007      	beq.n	800396c <TIM_Base_SetConfig+0x100>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4a17      	ldr	r2, [pc, #92]	; (80039bc <TIM_Base_SetConfig+0x150>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d003      	beq.n	800396c <TIM_Base_SetConfig+0x100>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4a12      	ldr	r2, [pc, #72]	; (80039b0 <TIM_Base_SetConfig+0x144>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d103      	bne.n	8003974 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	691a      	ldr	r2, [r3, #16]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	f003 0301 	and.w	r3, r3, #1
 8003982:	2b01      	cmp	r3, #1
 8003984:	d105      	bne.n	8003992 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	f023 0201 	bic.w	r2, r3, #1
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	611a      	str	r2, [r3, #16]
  }
}
 8003992:	bf00      	nop
 8003994:	3714      	adds	r7, #20
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr
 800399e:	bf00      	nop
 80039a0:	40012c00 	.word	0x40012c00
 80039a4:	40000400 	.word	0x40000400
 80039a8:	40000800 	.word	0x40000800
 80039ac:	40013400 	.word	0x40013400
 80039b0:	40015000 	.word	0x40015000
 80039b4:	40014000 	.word	0x40014000
 80039b8:	40014400 	.word	0x40014400
 80039bc:	40014800 	.word	0x40014800

080039c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d101      	bne.n	80039d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e042      	b.n	8003a58 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d106      	bne.n	80039ea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f7fe f88d 	bl	8001b04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2224      	movs	r2, #36	; 0x24
 80039ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f022 0201 	bic.w	r2, r2, #1
 8003a00:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d002      	beq.n	8003a10 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f000 ff42 	bl	8004894 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f000 fc43 	bl	800429c <UART_SetConfig>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d101      	bne.n	8003a20 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e01b      	b.n	8003a58 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	685a      	ldr	r2, [r3, #4]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a2e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	689a      	ldr	r2, [r3, #8]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a3e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f042 0201 	orr.w	r2, r2, #1
 8003a4e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f000 ffc1 	bl	80049d8 <UART_CheckIdleState>
 8003a56:	4603      	mov	r3, r0
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3708      	adds	r7, #8
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b08a      	sub	sp, #40	; 0x28
 8003a64:	af02      	add	r7, sp, #8
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	603b      	str	r3, [r7, #0]
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a76:	2b20      	cmp	r3, #32
 8003a78:	d17b      	bne.n	8003b72 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d002      	beq.n	8003a86 <HAL_UART_Transmit+0x26>
 8003a80:	88fb      	ldrh	r3, [r7, #6]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d101      	bne.n	8003a8a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e074      	b.n	8003b74 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2221      	movs	r2, #33	; 0x21
 8003a96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a9a:	f7fe fa55 	bl	8001f48 <HAL_GetTick>
 8003a9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	88fa      	ldrh	r2, [r7, #6]
 8003aa4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	88fa      	ldrh	r2, [r7, #6]
 8003aac:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ab8:	d108      	bne.n	8003acc <HAL_UART_Transmit+0x6c>
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d104      	bne.n	8003acc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	61bb      	str	r3, [r7, #24]
 8003aca:	e003      	b.n	8003ad4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003ad4:	e030      	b.n	8003b38 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	9300      	str	r3, [sp, #0]
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	2200      	movs	r2, #0
 8003ade:	2180      	movs	r1, #128	; 0x80
 8003ae0:	68f8      	ldr	r0, [r7, #12]
 8003ae2:	f001 f823 	bl	8004b2c <UART_WaitOnFlagUntilTimeout>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d005      	beq.n	8003af8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2220      	movs	r2, #32
 8003af0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	e03d      	b.n	8003b74 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d10b      	bne.n	8003b16 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	881b      	ldrh	r3, [r3, #0]
 8003b02:	461a      	mov	r2, r3
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b0c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	3302      	adds	r3, #2
 8003b12:	61bb      	str	r3, [r7, #24]
 8003b14:	e007      	b.n	8003b26 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	781a      	ldrb	r2, [r3, #0]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	3301      	adds	r3, #1
 8003b24:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	3b01      	subs	r3, #1
 8003b30:	b29a      	uxth	r2, r3
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d1c8      	bne.n	8003ad6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	9300      	str	r3, [sp, #0]
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	2140      	movs	r1, #64	; 0x40
 8003b4e:	68f8      	ldr	r0, [r7, #12]
 8003b50:	f000 ffec 	bl	8004b2c <UART_WaitOnFlagUntilTimeout>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d005      	beq.n	8003b66 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2220      	movs	r2, #32
 8003b5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e006      	b.n	8003b74 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2220      	movs	r2, #32
 8003b6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	e000      	b.n	8003b74 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8003b72:	2302      	movs	r3, #2
  }
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3720      	adds	r7, #32
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b08a      	sub	sp, #40	; 0x28
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	60f8      	str	r0, [r7, #12]
 8003b84:	60b9      	str	r1, [r7, #8]
 8003b86:	4613      	mov	r3, r2
 8003b88:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b90:	2b20      	cmp	r3, #32
 8003b92:	d137      	bne.n	8003c04 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d002      	beq.n	8003ba0 <HAL_UART_Receive_IT+0x24>
 8003b9a:	88fb      	ldrh	r3, [r7, #6]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d101      	bne.n	8003ba4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e030      	b.n	8003c06 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a18      	ldr	r2, [pc, #96]	; (8003c10 <HAL_UART_Receive_IT+0x94>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d01f      	beq.n	8003bf4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d018      	beq.n	8003bf4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	e853 3f00 	ldrex	r3, [r3]
 8003bce:	613b      	str	r3, [r7, #16]
   return(result);
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003bd6:	627b      	str	r3, [r7, #36]	; 0x24
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	461a      	mov	r2, r3
 8003bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be0:	623b      	str	r3, [r7, #32]
 8003be2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be4:	69f9      	ldr	r1, [r7, #28]
 8003be6:	6a3a      	ldr	r2, [r7, #32]
 8003be8:	e841 2300 	strex	r3, r2, [r1]
 8003bec:	61bb      	str	r3, [r7, #24]
   return(result);
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d1e6      	bne.n	8003bc2 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003bf4:	88fb      	ldrh	r3, [r7, #6]
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	68b9      	ldr	r1, [r7, #8]
 8003bfa:	68f8      	ldr	r0, [r7, #12]
 8003bfc:	f001 f804 	bl	8004c08 <UART_Start_Receive_IT>
 8003c00:	4603      	mov	r3, r0
 8003c02:	e000      	b.n	8003c06 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003c04:	2302      	movs	r3, #2
  }
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3728      	adds	r7, #40	; 0x28
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	40008000 	.word	0x40008000

08003c14 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b0ba      	sub	sp, #232	; 0xe8
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	69db      	ldr	r3, [r3, #28]
 8003c22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003c3a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003c3e:	f640 030f 	movw	r3, #2063	; 0x80f
 8003c42:	4013      	ands	r3, r2
 8003c44:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003c48:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d11b      	bne.n	8003c88 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003c50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c54:	f003 0320 	and.w	r3, r3, #32
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d015      	beq.n	8003c88 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003c5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c60:	f003 0320 	and.w	r3, r3, #32
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d105      	bne.n	8003c74 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003c68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d009      	beq.n	8003c88 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	f000 82e3 	beq.w	8004244 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	4798      	blx	r3
      }
      return;
 8003c86:	e2dd      	b.n	8004244 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003c88:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	f000 8123 	beq.w	8003ed8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003c92:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003c96:	4b8d      	ldr	r3, [pc, #564]	; (8003ecc <HAL_UART_IRQHandler+0x2b8>)
 8003c98:	4013      	ands	r3, r2
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d106      	bne.n	8003cac <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003c9e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003ca2:	4b8b      	ldr	r3, [pc, #556]	; (8003ed0 <HAL_UART_IRQHandler+0x2bc>)
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	f000 8116 	beq.w	8003ed8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003cac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cb0:	f003 0301 	and.w	r3, r3, #1
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d011      	beq.n	8003cdc <HAL_UART_IRQHandler+0xc8>
 8003cb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d00b      	beq.n	8003cdc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	2201      	movs	r2, #1
 8003cca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cd2:	f043 0201 	orr.w	r2, r3, #1
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003cdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ce0:	f003 0302 	and.w	r3, r3, #2
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d011      	beq.n	8003d0c <HAL_UART_IRQHandler+0xf8>
 8003ce8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cec:	f003 0301 	and.w	r3, r3, #1
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d00b      	beq.n	8003d0c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	2202      	movs	r2, #2
 8003cfa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d02:	f043 0204 	orr.w	r2, r3, #4
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003d0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d10:	f003 0304 	and.w	r3, r3, #4
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d011      	beq.n	8003d3c <HAL_UART_IRQHandler+0x128>
 8003d18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d1c:	f003 0301 	and.w	r3, r3, #1
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d00b      	beq.n	8003d3c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	2204      	movs	r2, #4
 8003d2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d32:	f043 0202 	orr.w	r2, r3, #2
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003d3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d40:	f003 0308 	and.w	r3, r3, #8
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d017      	beq.n	8003d78 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003d48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d4c:	f003 0320 	and.w	r3, r3, #32
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d105      	bne.n	8003d60 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003d54:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003d58:	4b5c      	ldr	r3, [pc, #368]	; (8003ecc <HAL_UART_IRQHandler+0x2b8>)
 8003d5a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d00b      	beq.n	8003d78 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2208      	movs	r2, #8
 8003d66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d6e:	f043 0208 	orr.w	r2, r3, #8
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003d78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d012      	beq.n	8003daa <HAL_UART_IRQHandler+0x196>
 8003d84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d88:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d00c      	beq.n	8003daa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d98:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003da0:	f043 0220 	orr.w	r2, r3, #32
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	f000 8249 	beq.w	8004248 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003db6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dba:	f003 0320 	and.w	r3, r3, #32
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d013      	beq.n	8003dea <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003dc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dc6:	f003 0320 	and.w	r3, r3, #32
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d105      	bne.n	8003dda <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003dce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d007      	beq.n	8003dea <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d003      	beq.n	8003dea <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003df0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dfe:	2b40      	cmp	r3, #64	; 0x40
 8003e00:	d005      	beq.n	8003e0e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003e02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003e06:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d054      	beq.n	8003eb8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f001 f81c 	bl	8004e4c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e1e:	2b40      	cmp	r3, #64	; 0x40
 8003e20:	d146      	bne.n	8003eb0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	3308      	adds	r3, #8
 8003e28:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003e30:	e853 3f00 	ldrex	r3, [r3]
 8003e34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003e38:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003e3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	3308      	adds	r3, #8
 8003e4a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003e4e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003e52:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e56:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003e5a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003e5e:	e841 2300 	strex	r3, r2, [r1]
 8003e62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003e66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d1d9      	bne.n	8003e22 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d017      	beq.n	8003ea8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e7e:	4a15      	ldr	r2, [pc, #84]	; (8003ed4 <HAL_UART_IRQHandler+0x2c0>)
 8003e80:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f7fe f9d1 	bl	8002230 <HAL_DMA_Abort_IT>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d019      	beq.n	8003ec8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8003ea2:	4610      	mov	r0, r2
 8003ea4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ea6:	e00f      	b.n	8003ec8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f000 f9e1 	bl	8004270 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003eae:	e00b      	b.n	8003ec8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f000 f9dd 	bl	8004270 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003eb6:	e007      	b.n	8003ec8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f000 f9d9 	bl	8004270 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8003ec6:	e1bf      	b.n	8004248 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ec8:	bf00      	nop
    return;
 8003eca:	e1bd      	b.n	8004248 <HAL_UART_IRQHandler+0x634>
 8003ecc:	10000001 	.word	0x10000001
 8003ed0:	04000120 	.word	0x04000120
 8003ed4:	08004f19 	.word	0x08004f19

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	f040 8153 	bne.w	8004188 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003ee2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ee6:	f003 0310 	and.w	r3, r3, #16
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	f000 814c 	beq.w	8004188 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003ef0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ef4:	f003 0310 	and.w	r3, r3, #16
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	f000 8145 	beq.w	8004188 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2210      	movs	r2, #16
 8003f04:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f10:	2b40      	cmp	r3, #64	; 0x40
 8003f12:	f040 80bb 	bne.w	800408c <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003f24:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	f000 818f 	beq.w	800424c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003f34:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	f080 8187 	bcs.w	800424c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003f44:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0320 	and.w	r3, r3, #32
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	f040 8087 	bne.w	800406a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f64:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003f68:	e853 3f00 	ldrex	r3, [r3]
 8003f6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003f70:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	461a      	mov	r2, r3
 8003f82:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003f86:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003f8a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f8e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003f92:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003f96:	e841 2300 	strex	r3, r2, [r1]
 8003f9a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003f9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d1da      	bne.n	8003f5c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	3308      	adds	r3, #8
 8003fac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fb0:	e853 3f00 	ldrex	r3, [r3]
 8003fb4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003fb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003fb8:	f023 0301 	bic.w	r3, r3, #1
 8003fbc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	3308      	adds	r3, #8
 8003fc6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003fca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003fce:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003fd2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003fd6:	e841 2300 	strex	r3, r2, [r1]
 8003fda:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003fdc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d1e1      	bne.n	8003fa6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	3308      	adds	r3, #8
 8003fe8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003fec:	e853 3f00 	ldrex	r3, [r3]
 8003ff0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003ff2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ff4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ff8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	3308      	adds	r3, #8
 8004002:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004006:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004008:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800400a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800400c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800400e:	e841 2300 	strex	r3, r2, [r1]
 8004012:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004014:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004016:	2b00      	cmp	r3, #0
 8004018:	d1e3      	bne.n	8003fe2 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2220      	movs	r2, #32
 800401e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800402e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004030:	e853 3f00 	ldrex	r3, [r3]
 8004034:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004036:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004038:	f023 0310 	bic.w	r3, r3, #16
 800403c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	461a      	mov	r2, r3
 8004046:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800404a:	65bb      	str	r3, [r7, #88]	; 0x58
 800404c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800404e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004050:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004052:	e841 2300 	strex	r3, r2, [r1]
 8004056:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004058:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800405a:	2b00      	cmp	r3, #0
 800405c:	d1e4      	bne.n	8004028 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004064:	4618      	mov	r0, r3
 8004066:	f7fe f88a 	bl	800217e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2202      	movs	r2, #2
 800406e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800407c:	b29b      	uxth	r3, r3
 800407e:	1ad3      	subs	r3, r2, r3
 8004080:	b29b      	uxth	r3, r3
 8004082:	4619      	mov	r1, r3
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f000 f8fd 	bl	8004284 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800408a:	e0df      	b.n	800424c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004098:	b29b      	uxth	r3, r3
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	f000 80d1 	beq.w	8004250 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80040ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	f000 80cc 	beq.w	8004250 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040c0:	e853 3f00 	ldrex	r3, [r3]
 80040c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80040c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80040cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	461a      	mov	r2, r3
 80040d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80040da:	647b      	str	r3, [r7, #68]	; 0x44
 80040dc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80040e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80040e2:	e841 2300 	strex	r3, r2, [r1]
 80040e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80040e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d1e4      	bne.n	80040b8 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	3308      	adds	r3, #8
 80040f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f8:	e853 3f00 	ldrex	r3, [r3]
 80040fc:	623b      	str	r3, [r7, #32]
   return(result);
 80040fe:	6a3b      	ldr	r3, [r7, #32]
 8004100:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004104:	f023 0301 	bic.w	r3, r3, #1
 8004108:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	3308      	adds	r3, #8
 8004112:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004116:	633a      	str	r2, [r7, #48]	; 0x30
 8004118:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800411a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800411c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800411e:	e841 2300 	strex	r3, r2, [r1]
 8004122:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004126:	2b00      	cmp	r3, #0
 8004128:	d1e1      	bne.n	80040ee <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2220      	movs	r2, #32
 800412e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	e853 3f00 	ldrex	r3, [r3]
 800414a:	60fb      	str	r3, [r7, #12]
   return(result);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f023 0310 	bic.w	r3, r3, #16
 8004152:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	461a      	mov	r2, r3
 800415c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004160:	61fb      	str	r3, [r7, #28]
 8004162:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004164:	69b9      	ldr	r1, [r7, #24]
 8004166:	69fa      	ldr	r2, [r7, #28]
 8004168:	e841 2300 	strex	r3, r2, [r1]
 800416c:	617b      	str	r3, [r7, #20]
   return(result);
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d1e4      	bne.n	800413e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2202      	movs	r2, #2
 8004178:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800417a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800417e:	4619      	mov	r1, r3
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f000 f87f 	bl	8004284 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004186:	e063      	b.n	8004250 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004188:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800418c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004190:	2b00      	cmp	r3, #0
 8004192:	d00e      	beq.n	80041b2 <HAL_UART_IRQHandler+0x59e>
 8004194:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004198:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800419c:	2b00      	cmp	r3, #0
 800419e:	d008      	beq.n	80041b2 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80041a8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f001 fc12 	bl	80059d4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80041b0:	e051      	b.n	8004256 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80041b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d014      	beq.n	80041e8 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80041be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d105      	bne.n	80041d6 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80041ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d008      	beq.n	80041e8 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d03a      	beq.n	8004254 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	4798      	blx	r3
    }
    return;
 80041e6:	e035      	b.n	8004254 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80041e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d009      	beq.n	8004208 <HAL_UART_IRQHandler+0x5f4>
 80041f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d003      	beq.n	8004208 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f000 fe9f 	bl	8004f44 <UART_EndTransmit_IT>
    return;
 8004206:	e026      	b.n	8004256 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004208:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800420c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004210:	2b00      	cmp	r3, #0
 8004212:	d009      	beq.n	8004228 <HAL_UART_IRQHandler+0x614>
 8004214:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004218:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800421c:	2b00      	cmp	r3, #0
 800421e:	d003      	beq.n	8004228 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f001 fbeb 	bl	80059fc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004226:	e016      	b.n	8004256 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004228:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800422c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d010      	beq.n	8004256 <HAL_UART_IRQHandler+0x642>
 8004234:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004238:	2b00      	cmp	r3, #0
 800423a:	da0c      	bge.n	8004256 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f001 fbd3 	bl	80059e8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004242:	e008      	b.n	8004256 <HAL_UART_IRQHandler+0x642>
      return;
 8004244:	bf00      	nop
 8004246:	e006      	b.n	8004256 <HAL_UART_IRQHandler+0x642>
    return;
 8004248:	bf00      	nop
 800424a:	e004      	b.n	8004256 <HAL_UART_IRQHandler+0x642>
      return;
 800424c:	bf00      	nop
 800424e:	e002      	b.n	8004256 <HAL_UART_IRQHandler+0x642>
      return;
 8004250:	bf00      	nop
 8004252:	e000      	b.n	8004256 <HAL_UART_IRQHandler+0x642>
    return;
 8004254:	bf00      	nop
  }
}
 8004256:	37e8      	adds	r7, #232	; 0xe8
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}

0800425c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004264:	bf00      	nop
 8004266:	370c      	adds	r7, #12
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr

08004270 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004270:	b480      	push	{r7}
 8004272:	b083      	sub	sp, #12
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004278:	bf00      	nop
 800427a:	370c      	adds	r7, #12
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	460b      	mov	r3, r1
 800428e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004290:	bf00      	nop
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr

0800429c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800429c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042a0:	b08c      	sub	sp, #48	; 0x30
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80042a6:	2300      	movs	r3, #0
 80042a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	689a      	ldr	r2, [r3, #8]
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	691b      	ldr	r3, [r3, #16]
 80042b4:	431a      	orrs	r2, r3
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	695b      	ldr	r3, [r3, #20]
 80042ba:	431a      	orrs	r2, r3
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	69db      	ldr	r3, [r3, #28]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	4baa      	ldr	r3, [pc, #680]	; (8004574 <UART_SetConfig+0x2d8>)
 80042cc:	4013      	ands	r3, r2
 80042ce:	697a      	ldr	r2, [r7, #20]
 80042d0:	6812      	ldr	r2, [r2, #0]
 80042d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80042d4:	430b      	orrs	r3, r1
 80042d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	68da      	ldr	r2, [r3, #12]
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	430a      	orrs	r2, r1
 80042ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	699b      	ldr	r3, [r3, #24]
 80042f2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a9f      	ldr	r2, [pc, #636]	; (8004578 <UART_SetConfig+0x2dc>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d004      	beq.n	8004308 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	6a1b      	ldr	r3, [r3, #32]
 8004302:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004304:	4313      	orrs	r3, r2
 8004306:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004312:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004316:	697a      	ldr	r2, [r7, #20]
 8004318:	6812      	ldr	r2, [r2, #0]
 800431a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800431c:	430b      	orrs	r3, r1
 800431e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004326:	f023 010f 	bic.w	r1, r3, #15
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	430a      	orrs	r2, r1
 8004334:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a90      	ldr	r2, [pc, #576]	; (800457c <UART_SetConfig+0x2e0>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d125      	bne.n	800438c <UART_SetConfig+0xf0>
 8004340:	4b8f      	ldr	r3, [pc, #572]	; (8004580 <UART_SetConfig+0x2e4>)
 8004342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004346:	f003 0303 	and.w	r3, r3, #3
 800434a:	2b03      	cmp	r3, #3
 800434c:	d81a      	bhi.n	8004384 <UART_SetConfig+0xe8>
 800434e:	a201      	add	r2, pc, #4	; (adr r2, 8004354 <UART_SetConfig+0xb8>)
 8004350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004354:	08004365 	.word	0x08004365
 8004358:	08004375 	.word	0x08004375
 800435c:	0800436d 	.word	0x0800436d
 8004360:	0800437d 	.word	0x0800437d
 8004364:	2301      	movs	r3, #1
 8004366:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800436a:	e116      	b.n	800459a <UART_SetConfig+0x2fe>
 800436c:	2302      	movs	r3, #2
 800436e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004372:	e112      	b.n	800459a <UART_SetConfig+0x2fe>
 8004374:	2304      	movs	r3, #4
 8004376:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800437a:	e10e      	b.n	800459a <UART_SetConfig+0x2fe>
 800437c:	2308      	movs	r3, #8
 800437e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004382:	e10a      	b.n	800459a <UART_SetConfig+0x2fe>
 8004384:	2310      	movs	r3, #16
 8004386:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800438a:	e106      	b.n	800459a <UART_SetConfig+0x2fe>
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a7c      	ldr	r2, [pc, #496]	; (8004584 <UART_SetConfig+0x2e8>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d138      	bne.n	8004408 <UART_SetConfig+0x16c>
 8004396:	4b7a      	ldr	r3, [pc, #488]	; (8004580 <UART_SetConfig+0x2e4>)
 8004398:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800439c:	f003 030c 	and.w	r3, r3, #12
 80043a0:	2b0c      	cmp	r3, #12
 80043a2:	d82d      	bhi.n	8004400 <UART_SetConfig+0x164>
 80043a4:	a201      	add	r2, pc, #4	; (adr r2, 80043ac <UART_SetConfig+0x110>)
 80043a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043aa:	bf00      	nop
 80043ac:	080043e1 	.word	0x080043e1
 80043b0:	08004401 	.word	0x08004401
 80043b4:	08004401 	.word	0x08004401
 80043b8:	08004401 	.word	0x08004401
 80043bc:	080043f1 	.word	0x080043f1
 80043c0:	08004401 	.word	0x08004401
 80043c4:	08004401 	.word	0x08004401
 80043c8:	08004401 	.word	0x08004401
 80043cc:	080043e9 	.word	0x080043e9
 80043d0:	08004401 	.word	0x08004401
 80043d4:	08004401 	.word	0x08004401
 80043d8:	08004401 	.word	0x08004401
 80043dc:	080043f9 	.word	0x080043f9
 80043e0:	2300      	movs	r3, #0
 80043e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80043e6:	e0d8      	b.n	800459a <UART_SetConfig+0x2fe>
 80043e8:	2302      	movs	r3, #2
 80043ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80043ee:	e0d4      	b.n	800459a <UART_SetConfig+0x2fe>
 80043f0:	2304      	movs	r3, #4
 80043f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80043f6:	e0d0      	b.n	800459a <UART_SetConfig+0x2fe>
 80043f8:	2308      	movs	r3, #8
 80043fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80043fe:	e0cc      	b.n	800459a <UART_SetConfig+0x2fe>
 8004400:	2310      	movs	r3, #16
 8004402:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004406:	e0c8      	b.n	800459a <UART_SetConfig+0x2fe>
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a5e      	ldr	r2, [pc, #376]	; (8004588 <UART_SetConfig+0x2ec>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d125      	bne.n	800445e <UART_SetConfig+0x1c2>
 8004412:	4b5b      	ldr	r3, [pc, #364]	; (8004580 <UART_SetConfig+0x2e4>)
 8004414:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004418:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800441c:	2b30      	cmp	r3, #48	; 0x30
 800441e:	d016      	beq.n	800444e <UART_SetConfig+0x1b2>
 8004420:	2b30      	cmp	r3, #48	; 0x30
 8004422:	d818      	bhi.n	8004456 <UART_SetConfig+0x1ba>
 8004424:	2b20      	cmp	r3, #32
 8004426:	d00a      	beq.n	800443e <UART_SetConfig+0x1a2>
 8004428:	2b20      	cmp	r3, #32
 800442a:	d814      	bhi.n	8004456 <UART_SetConfig+0x1ba>
 800442c:	2b00      	cmp	r3, #0
 800442e:	d002      	beq.n	8004436 <UART_SetConfig+0x19a>
 8004430:	2b10      	cmp	r3, #16
 8004432:	d008      	beq.n	8004446 <UART_SetConfig+0x1aa>
 8004434:	e00f      	b.n	8004456 <UART_SetConfig+0x1ba>
 8004436:	2300      	movs	r3, #0
 8004438:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800443c:	e0ad      	b.n	800459a <UART_SetConfig+0x2fe>
 800443e:	2302      	movs	r3, #2
 8004440:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004444:	e0a9      	b.n	800459a <UART_SetConfig+0x2fe>
 8004446:	2304      	movs	r3, #4
 8004448:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800444c:	e0a5      	b.n	800459a <UART_SetConfig+0x2fe>
 800444e:	2308      	movs	r3, #8
 8004450:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004454:	e0a1      	b.n	800459a <UART_SetConfig+0x2fe>
 8004456:	2310      	movs	r3, #16
 8004458:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800445c:	e09d      	b.n	800459a <UART_SetConfig+0x2fe>
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a4a      	ldr	r2, [pc, #296]	; (800458c <UART_SetConfig+0x2f0>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d125      	bne.n	80044b4 <UART_SetConfig+0x218>
 8004468:	4b45      	ldr	r3, [pc, #276]	; (8004580 <UART_SetConfig+0x2e4>)
 800446a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800446e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004472:	2bc0      	cmp	r3, #192	; 0xc0
 8004474:	d016      	beq.n	80044a4 <UART_SetConfig+0x208>
 8004476:	2bc0      	cmp	r3, #192	; 0xc0
 8004478:	d818      	bhi.n	80044ac <UART_SetConfig+0x210>
 800447a:	2b80      	cmp	r3, #128	; 0x80
 800447c:	d00a      	beq.n	8004494 <UART_SetConfig+0x1f8>
 800447e:	2b80      	cmp	r3, #128	; 0x80
 8004480:	d814      	bhi.n	80044ac <UART_SetConfig+0x210>
 8004482:	2b00      	cmp	r3, #0
 8004484:	d002      	beq.n	800448c <UART_SetConfig+0x1f0>
 8004486:	2b40      	cmp	r3, #64	; 0x40
 8004488:	d008      	beq.n	800449c <UART_SetConfig+0x200>
 800448a:	e00f      	b.n	80044ac <UART_SetConfig+0x210>
 800448c:	2300      	movs	r3, #0
 800448e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004492:	e082      	b.n	800459a <UART_SetConfig+0x2fe>
 8004494:	2302      	movs	r3, #2
 8004496:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800449a:	e07e      	b.n	800459a <UART_SetConfig+0x2fe>
 800449c:	2304      	movs	r3, #4
 800449e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044a2:	e07a      	b.n	800459a <UART_SetConfig+0x2fe>
 80044a4:	2308      	movs	r3, #8
 80044a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044aa:	e076      	b.n	800459a <UART_SetConfig+0x2fe>
 80044ac:	2310      	movs	r3, #16
 80044ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044b2:	e072      	b.n	800459a <UART_SetConfig+0x2fe>
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a35      	ldr	r2, [pc, #212]	; (8004590 <UART_SetConfig+0x2f4>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d12a      	bne.n	8004514 <UART_SetConfig+0x278>
 80044be:	4b30      	ldr	r3, [pc, #192]	; (8004580 <UART_SetConfig+0x2e4>)
 80044c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044cc:	d01a      	beq.n	8004504 <UART_SetConfig+0x268>
 80044ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044d2:	d81b      	bhi.n	800450c <UART_SetConfig+0x270>
 80044d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044d8:	d00c      	beq.n	80044f4 <UART_SetConfig+0x258>
 80044da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044de:	d815      	bhi.n	800450c <UART_SetConfig+0x270>
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d003      	beq.n	80044ec <UART_SetConfig+0x250>
 80044e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044e8:	d008      	beq.n	80044fc <UART_SetConfig+0x260>
 80044ea:	e00f      	b.n	800450c <UART_SetConfig+0x270>
 80044ec:	2300      	movs	r3, #0
 80044ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044f2:	e052      	b.n	800459a <UART_SetConfig+0x2fe>
 80044f4:	2302      	movs	r3, #2
 80044f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044fa:	e04e      	b.n	800459a <UART_SetConfig+0x2fe>
 80044fc:	2304      	movs	r3, #4
 80044fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004502:	e04a      	b.n	800459a <UART_SetConfig+0x2fe>
 8004504:	2308      	movs	r3, #8
 8004506:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800450a:	e046      	b.n	800459a <UART_SetConfig+0x2fe>
 800450c:	2310      	movs	r3, #16
 800450e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004512:	e042      	b.n	800459a <UART_SetConfig+0x2fe>
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a17      	ldr	r2, [pc, #92]	; (8004578 <UART_SetConfig+0x2dc>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d13a      	bne.n	8004594 <UART_SetConfig+0x2f8>
 800451e:	4b18      	ldr	r3, [pc, #96]	; (8004580 <UART_SetConfig+0x2e4>)
 8004520:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004524:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004528:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800452c:	d01a      	beq.n	8004564 <UART_SetConfig+0x2c8>
 800452e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004532:	d81b      	bhi.n	800456c <UART_SetConfig+0x2d0>
 8004534:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004538:	d00c      	beq.n	8004554 <UART_SetConfig+0x2b8>
 800453a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800453e:	d815      	bhi.n	800456c <UART_SetConfig+0x2d0>
 8004540:	2b00      	cmp	r3, #0
 8004542:	d003      	beq.n	800454c <UART_SetConfig+0x2b0>
 8004544:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004548:	d008      	beq.n	800455c <UART_SetConfig+0x2c0>
 800454a:	e00f      	b.n	800456c <UART_SetConfig+0x2d0>
 800454c:	2300      	movs	r3, #0
 800454e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004552:	e022      	b.n	800459a <UART_SetConfig+0x2fe>
 8004554:	2302      	movs	r3, #2
 8004556:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800455a:	e01e      	b.n	800459a <UART_SetConfig+0x2fe>
 800455c:	2304      	movs	r3, #4
 800455e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004562:	e01a      	b.n	800459a <UART_SetConfig+0x2fe>
 8004564:	2308      	movs	r3, #8
 8004566:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800456a:	e016      	b.n	800459a <UART_SetConfig+0x2fe>
 800456c:	2310      	movs	r3, #16
 800456e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004572:	e012      	b.n	800459a <UART_SetConfig+0x2fe>
 8004574:	cfff69f3 	.word	0xcfff69f3
 8004578:	40008000 	.word	0x40008000
 800457c:	40013800 	.word	0x40013800
 8004580:	40021000 	.word	0x40021000
 8004584:	40004400 	.word	0x40004400
 8004588:	40004800 	.word	0x40004800
 800458c:	40004c00 	.word	0x40004c00
 8004590:	40005000 	.word	0x40005000
 8004594:	2310      	movs	r3, #16
 8004596:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4aae      	ldr	r2, [pc, #696]	; (8004858 <UART_SetConfig+0x5bc>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	f040 8097 	bne.w	80046d4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80045a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80045aa:	2b08      	cmp	r3, #8
 80045ac:	d823      	bhi.n	80045f6 <UART_SetConfig+0x35a>
 80045ae:	a201      	add	r2, pc, #4	; (adr r2, 80045b4 <UART_SetConfig+0x318>)
 80045b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045b4:	080045d9 	.word	0x080045d9
 80045b8:	080045f7 	.word	0x080045f7
 80045bc:	080045e1 	.word	0x080045e1
 80045c0:	080045f7 	.word	0x080045f7
 80045c4:	080045e7 	.word	0x080045e7
 80045c8:	080045f7 	.word	0x080045f7
 80045cc:	080045f7 	.word	0x080045f7
 80045d0:	080045f7 	.word	0x080045f7
 80045d4:	080045ef 	.word	0x080045ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045d8:	f7fe fdda 	bl	8003190 <HAL_RCC_GetPCLK1Freq>
 80045dc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80045de:	e010      	b.n	8004602 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045e0:	4b9e      	ldr	r3, [pc, #632]	; (800485c <UART_SetConfig+0x5c0>)
 80045e2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80045e4:	e00d      	b.n	8004602 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045e6:	f7fe fd65 	bl	80030b4 <HAL_RCC_GetSysClockFreq>
 80045ea:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80045ec:	e009      	b.n	8004602 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045f2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80045f4:	e005      	b.n	8004602 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80045f6:	2300      	movs	r3, #0
 80045f8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004600:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004604:	2b00      	cmp	r3, #0
 8004606:	f000 8130 	beq.w	800486a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460e:	4a94      	ldr	r2, [pc, #592]	; (8004860 <UART_SetConfig+0x5c4>)
 8004610:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004614:	461a      	mov	r2, r3
 8004616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004618:	fbb3 f3f2 	udiv	r3, r3, r2
 800461c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	685a      	ldr	r2, [r3, #4]
 8004622:	4613      	mov	r3, r2
 8004624:	005b      	lsls	r3, r3, #1
 8004626:	4413      	add	r3, r2
 8004628:	69ba      	ldr	r2, [r7, #24]
 800462a:	429a      	cmp	r2, r3
 800462c:	d305      	bcc.n	800463a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004634:	69ba      	ldr	r2, [r7, #24]
 8004636:	429a      	cmp	r2, r3
 8004638:	d903      	bls.n	8004642 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004640:	e113      	b.n	800486a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004644:	2200      	movs	r2, #0
 8004646:	60bb      	str	r3, [r7, #8]
 8004648:	60fa      	str	r2, [r7, #12]
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464e:	4a84      	ldr	r2, [pc, #528]	; (8004860 <UART_SetConfig+0x5c4>)
 8004650:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004654:	b29b      	uxth	r3, r3
 8004656:	2200      	movs	r2, #0
 8004658:	603b      	str	r3, [r7, #0]
 800465a:	607a      	str	r2, [r7, #4]
 800465c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004660:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004664:	f7fc fb78 	bl	8000d58 <__aeabi_uldivmod>
 8004668:	4602      	mov	r2, r0
 800466a:	460b      	mov	r3, r1
 800466c:	4610      	mov	r0, r2
 800466e:	4619      	mov	r1, r3
 8004670:	f04f 0200 	mov.w	r2, #0
 8004674:	f04f 0300 	mov.w	r3, #0
 8004678:	020b      	lsls	r3, r1, #8
 800467a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800467e:	0202      	lsls	r2, r0, #8
 8004680:	6979      	ldr	r1, [r7, #20]
 8004682:	6849      	ldr	r1, [r1, #4]
 8004684:	0849      	lsrs	r1, r1, #1
 8004686:	2000      	movs	r0, #0
 8004688:	460c      	mov	r4, r1
 800468a:	4605      	mov	r5, r0
 800468c:	eb12 0804 	adds.w	r8, r2, r4
 8004690:	eb43 0905 	adc.w	r9, r3, r5
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	469a      	mov	sl, r3
 800469c:	4693      	mov	fp, r2
 800469e:	4652      	mov	r2, sl
 80046a0:	465b      	mov	r3, fp
 80046a2:	4640      	mov	r0, r8
 80046a4:	4649      	mov	r1, r9
 80046a6:	f7fc fb57 	bl	8000d58 <__aeabi_uldivmod>
 80046aa:	4602      	mov	r2, r0
 80046ac:	460b      	mov	r3, r1
 80046ae:	4613      	mov	r3, r2
 80046b0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80046b2:	6a3b      	ldr	r3, [r7, #32]
 80046b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046b8:	d308      	bcc.n	80046cc <UART_SetConfig+0x430>
 80046ba:	6a3b      	ldr	r3, [r7, #32]
 80046bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046c0:	d204      	bcs.n	80046cc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	6a3a      	ldr	r2, [r7, #32]
 80046c8:	60da      	str	r2, [r3, #12]
 80046ca:	e0ce      	b.n	800486a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80046d2:	e0ca      	b.n	800486a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	69db      	ldr	r3, [r3, #28]
 80046d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046dc:	d166      	bne.n	80047ac <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80046de:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80046e2:	2b08      	cmp	r3, #8
 80046e4:	d827      	bhi.n	8004736 <UART_SetConfig+0x49a>
 80046e6:	a201      	add	r2, pc, #4	; (adr r2, 80046ec <UART_SetConfig+0x450>)
 80046e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ec:	08004711 	.word	0x08004711
 80046f0:	08004719 	.word	0x08004719
 80046f4:	08004721 	.word	0x08004721
 80046f8:	08004737 	.word	0x08004737
 80046fc:	08004727 	.word	0x08004727
 8004700:	08004737 	.word	0x08004737
 8004704:	08004737 	.word	0x08004737
 8004708:	08004737 	.word	0x08004737
 800470c:	0800472f 	.word	0x0800472f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004710:	f7fe fd3e 	bl	8003190 <HAL_RCC_GetPCLK1Freq>
 8004714:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004716:	e014      	b.n	8004742 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004718:	f7fe fd50 	bl	80031bc <HAL_RCC_GetPCLK2Freq>
 800471c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800471e:	e010      	b.n	8004742 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004720:	4b4e      	ldr	r3, [pc, #312]	; (800485c <UART_SetConfig+0x5c0>)
 8004722:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004724:	e00d      	b.n	8004742 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004726:	f7fe fcc5 	bl	80030b4 <HAL_RCC_GetSysClockFreq>
 800472a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800472c:	e009      	b.n	8004742 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800472e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004732:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004734:	e005      	b.n	8004742 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004736:	2300      	movs	r3, #0
 8004738:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004740:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004744:	2b00      	cmp	r3, #0
 8004746:	f000 8090 	beq.w	800486a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474e:	4a44      	ldr	r2, [pc, #272]	; (8004860 <UART_SetConfig+0x5c4>)
 8004750:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004754:	461a      	mov	r2, r3
 8004756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004758:	fbb3 f3f2 	udiv	r3, r3, r2
 800475c:	005a      	lsls	r2, r3, #1
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	085b      	lsrs	r3, r3, #1
 8004764:	441a      	add	r2, r3
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	fbb2 f3f3 	udiv	r3, r2, r3
 800476e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004770:	6a3b      	ldr	r3, [r7, #32]
 8004772:	2b0f      	cmp	r3, #15
 8004774:	d916      	bls.n	80047a4 <UART_SetConfig+0x508>
 8004776:	6a3b      	ldr	r3, [r7, #32]
 8004778:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800477c:	d212      	bcs.n	80047a4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800477e:	6a3b      	ldr	r3, [r7, #32]
 8004780:	b29b      	uxth	r3, r3
 8004782:	f023 030f 	bic.w	r3, r3, #15
 8004786:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004788:	6a3b      	ldr	r3, [r7, #32]
 800478a:	085b      	lsrs	r3, r3, #1
 800478c:	b29b      	uxth	r3, r3
 800478e:	f003 0307 	and.w	r3, r3, #7
 8004792:	b29a      	uxth	r2, r3
 8004794:	8bfb      	ldrh	r3, [r7, #30]
 8004796:	4313      	orrs	r3, r2
 8004798:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	8bfa      	ldrh	r2, [r7, #30]
 80047a0:	60da      	str	r2, [r3, #12]
 80047a2:	e062      	b.n	800486a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80047aa:	e05e      	b.n	800486a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80047ac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80047b0:	2b08      	cmp	r3, #8
 80047b2:	d828      	bhi.n	8004806 <UART_SetConfig+0x56a>
 80047b4:	a201      	add	r2, pc, #4	; (adr r2, 80047bc <UART_SetConfig+0x520>)
 80047b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ba:	bf00      	nop
 80047bc:	080047e1 	.word	0x080047e1
 80047c0:	080047e9 	.word	0x080047e9
 80047c4:	080047f1 	.word	0x080047f1
 80047c8:	08004807 	.word	0x08004807
 80047cc:	080047f7 	.word	0x080047f7
 80047d0:	08004807 	.word	0x08004807
 80047d4:	08004807 	.word	0x08004807
 80047d8:	08004807 	.word	0x08004807
 80047dc:	080047ff 	.word	0x080047ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047e0:	f7fe fcd6 	bl	8003190 <HAL_RCC_GetPCLK1Freq>
 80047e4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80047e6:	e014      	b.n	8004812 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047e8:	f7fe fce8 	bl	80031bc <HAL_RCC_GetPCLK2Freq>
 80047ec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80047ee:	e010      	b.n	8004812 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047f0:	4b1a      	ldr	r3, [pc, #104]	; (800485c <UART_SetConfig+0x5c0>)
 80047f2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80047f4:	e00d      	b.n	8004812 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047f6:	f7fe fc5d 	bl	80030b4 <HAL_RCC_GetSysClockFreq>
 80047fa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80047fc:	e009      	b.n	8004812 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004802:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004804:	e005      	b.n	8004812 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004806:	2300      	movs	r3, #0
 8004808:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004810:	bf00      	nop
    }

    if (pclk != 0U)
 8004812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004814:	2b00      	cmp	r3, #0
 8004816:	d028      	beq.n	800486a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481c:	4a10      	ldr	r2, [pc, #64]	; (8004860 <UART_SetConfig+0x5c4>)
 800481e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004822:	461a      	mov	r2, r3
 8004824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004826:	fbb3 f2f2 	udiv	r2, r3, r2
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	085b      	lsrs	r3, r3, #1
 8004830:	441a      	add	r2, r3
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	fbb2 f3f3 	udiv	r3, r2, r3
 800483a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800483c:	6a3b      	ldr	r3, [r7, #32]
 800483e:	2b0f      	cmp	r3, #15
 8004840:	d910      	bls.n	8004864 <UART_SetConfig+0x5c8>
 8004842:	6a3b      	ldr	r3, [r7, #32]
 8004844:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004848:	d20c      	bcs.n	8004864 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800484a:	6a3b      	ldr	r3, [r7, #32]
 800484c:	b29a      	uxth	r2, r3
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	60da      	str	r2, [r3, #12]
 8004854:	e009      	b.n	800486a <UART_SetConfig+0x5ce>
 8004856:	bf00      	nop
 8004858:	40008000 	.word	0x40008000
 800485c:	00f42400 	.word	0x00f42400
 8004860:	08069fd4 	.word	0x08069fd4
      }
      else
      {
        ret = HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	2201      	movs	r2, #1
 800486e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	2201      	movs	r2, #1
 8004876:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	2200      	movs	r2, #0
 800487e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	2200      	movs	r2, #0
 8004884:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004886:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800488a:	4618      	mov	r0, r3
 800488c:	3730      	adds	r7, #48	; 0x30
 800488e:	46bd      	mov	sp, r7
 8004890:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004894 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048a0:	f003 0308 	and.w	r3, r3, #8
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d00a      	beq.n	80048be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	430a      	orrs	r2, r1
 80048bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048c2:	f003 0301 	and.w	r3, r3, #1
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d00a      	beq.n	80048e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	430a      	orrs	r2, r1
 80048de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e4:	f003 0302 	and.w	r3, r3, #2
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d00a      	beq.n	8004902 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	430a      	orrs	r2, r1
 8004900:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004906:	f003 0304 	and.w	r3, r3, #4
 800490a:	2b00      	cmp	r3, #0
 800490c:	d00a      	beq.n	8004924 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	430a      	orrs	r2, r1
 8004922:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004928:	f003 0310 	and.w	r3, r3, #16
 800492c:	2b00      	cmp	r3, #0
 800492e:	d00a      	beq.n	8004946 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	430a      	orrs	r2, r1
 8004944:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800494a:	f003 0320 	and.w	r3, r3, #32
 800494e:	2b00      	cmp	r3, #0
 8004950:	d00a      	beq.n	8004968 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	430a      	orrs	r2, r1
 8004966:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800496c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004970:	2b00      	cmp	r3, #0
 8004972:	d01a      	beq.n	80049aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	430a      	orrs	r2, r1
 8004988:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800498e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004992:	d10a      	bne.n	80049aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	430a      	orrs	r2, r1
 80049a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d00a      	beq.n	80049cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	430a      	orrs	r2, r1
 80049ca:	605a      	str	r2, [r3, #4]
  }
}
 80049cc:	bf00      	nop
 80049ce:	370c      	adds	r7, #12
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr

080049d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b098      	sub	sp, #96	; 0x60
 80049dc:	af02      	add	r7, sp, #8
 80049de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2200      	movs	r2, #0
 80049e4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80049e8:	f7fd faae 	bl	8001f48 <HAL_GetTick>
 80049ec:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 0308 	and.w	r3, r3, #8
 80049f8:	2b08      	cmp	r3, #8
 80049fa:	d12f      	bne.n	8004a5c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a00:	9300      	str	r3, [sp, #0]
 8004a02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a04:	2200      	movs	r2, #0
 8004a06:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f000 f88e 	bl	8004b2c <UART_WaitOnFlagUntilTimeout>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d022      	beq.n	8004a5c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a1e:	e853 3f00 	ldrex	r3, [r3]
 8004a22:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a2a:	653b      	str	r3, [r7, #80]	; 0x50
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	461a      	mov	r2, r3
 8004a32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a34:	647b      	str	r3, [r7, #68]	; 0x44
 8004a36:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a38:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004a3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a3c:	e841 2300 	strex	r3, r2, [r1]
 8004a40:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004a42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d1e6      	bne.n	8004a16 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2220      	movs	r2, #32
 8004a4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a58:	2303      	movs	r3, #3
 8004a5a:	e063      	b.n	8004b24 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 0304 	and.w	r3, r3, #4
 8004a66:	2b04      	cmp	r3, #4
 8004a68:	d149      	bne.n	8004afe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a6a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a6e:	9300      	str	r3, [sp, #0]
 8004a70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a72:	2200      	movs	r2, #0
 8004a74:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f000 f857 	bl	8004b2c <UART_WaitOnFlagUntilTimeout>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d03c      	beq.n	8004afe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8c:	e853 3f00 	ldrex	r3, [r3]
 8004a90:	623b      	str	r3, [r7, #32]
   return(result);
 8004a92:	6a3b      	ldr	r3, [r7, #32]
 8004a94:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a98:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004aa2:	633b      	str	r3, [r7, #48]	; 0x30
 8004aa4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004aa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004aaa:	e841 2300 	strex	r3, r2, [r1]
 8004aae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d1e6      	bne.n	8004a84 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	3308      	adds	r3, #8
 8004abc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	e853 3f00 	ldrex	r3, [r3]
 8004ac4:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f023 0301 	bic.w	r3, r3, #1
 8004acc:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	3308      	adds	r3, #8
 8004ad4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ad6:	61fa      	str	r2, [r7, #28]
 8004ad8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ada:	69b9      	ldr	r1, [r7, #24]
 8004adc:	69fa      	ldr	r2, [r7, #28]
 8004ade:	e841 2300 	strex	r3, r2, [r1]
 8004ae2:	617b      	str	r3, [r7, #20]
   return(result);
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d1e5      	bne.n	8004ab6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2220      	movs	r2, #32
 8004aee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	e012      	b.n	8004b24 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2220      	movs	r2, #32
 8004b02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2220      	movs	r2, #32
 8004b0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004b22:	2300      	movs	r3, #0
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3758      	adds	r7, #88	; 0x58
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b084      	sub	sp, #16
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	603b      	str	r3, [r7, #0]
 8004b38:	4613      	mov	r3, r2
 8004b3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b3c:	e04f      	b.n	8004bde <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b3e:	69bb      	ldr	r3, [r7, #24]
 8004b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b44:	d04b      	beq.n	8004bde <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b46:	f7fd f9ff 	bl	8001f48 <HAL_GetTick>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	69ba      	ldr	r2, [r7, #24]
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d302      	bcc.n	8004b5c <UART_WaitOnFlagUntilTimeout+0x30>
 8004b56:	69bb      	ldr	r3, [r7, #24]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d101      	bne.n	8004b60 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004b5c:	2303      	movs	r3, #3
 8004b5e:	e04e      	b.n	8004bfe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 0304 	and.w	r3, r3, #4
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d037      	beq.n	8004bde <UART_WaitOnFlagUntilTimeout+0xb2>
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	2b80      	cmp	r3, #128	; 0x80
 8004b72:	d034      	beq.n	8004bde <UART_WaitOnFlagUntilTimeout+0xb2>
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	2b40      	cmp	r3, #64	; 0x40
 8004b78:	d031      	beq.n	8004bde <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	69db      	ldr	r3, [r3, #28]
 8004b80:	f003 0308 	and.w	r3, r3, #8
 8004b84:	2b08      	cmp	r3, #8
 8004b86:	d110      	bne.n	8004baa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	2208      	movs	r2, #8
 8004b8e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004b90:	68f8      	ldr	r0, [r7, #12]
 8004b92:	f000 f95b 	bl	8004e4c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2208      	movs	r2, #8
 8004b9a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e029      	b.n	8004bfe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	69db      	ldr	r3, [r3, #28]
 8004bb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bb8:	d111      	bne.n	8004bde <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004bc2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004bc4:	68f8      	ldr	r0, [r7, #12]
 8004bc6:	f000 f941 	bl	8004e4c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2220      	movs	r2, #32
 8004bce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	e00f      	b.n	8004bfe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	69da      	ldr	r2, [r3, #28]
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	4013      	ands	r3, r2
 8004be8:	68ba      	ldr	r2, [r7, #8]
 8004bea:	429a      	cmp	r2, r3
 8004bec:	bf0c      	ite	eq
 8004bee:	2301      	moveq	r3, #1
 8004bf0:	2300      	movne	r3, #0
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	79fb      	ldrb	r3, [r7, #7]
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d0a0      	beq.n	8004b3e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3710      	adds	r7, #16
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
	...

08004c08 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b0a3      	sub	sp, #140	; 0x8c
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	60b9      	str	r1, [r7, #8]
 8004c12:	4613      	mov	r3, r2
 8004c14:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	68ba      	ldr	r2, [r7, #8]
 8004c1a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	88fa      	ldrh	r2, [r7, #6]
 8004c20:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	88fa      	ldrh	r2, [r7, #6]
 8004c28:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c3a:	d10e      	bne.n	8004c5a <UART_Start_Receive_IT+0x52>
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	691b      	ldr	r3, [r3, #16]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d105      	bne.n	8004c50 <UART_Start_Receive_IT+0x48>
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004c4a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004c4e:	e02d      	b.n	8004cac <UART_Start_Receive_IT+0xa4>
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	22ff      	movs	r2, #255	; 0xff
 8004c54:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004c58:	e028      	b.n	8004cac <UART_Start_Receive_IT+0xa4>
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d10d      	bne.n	8004c7e <UART_Start_Receive_IT+0x76>
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d104      	bne.n	8004c74 <UART_Start_Receive_IT+0x6c>
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	22ff      	movs	r2, #255	; 0xff
 8004c6e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004c72:	e01b      	b.n	8004cac <UART_Start_Receive_IT+0xa4>
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	227f      	movs	r2, #127	; 0x7f
 8004c78:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004c7c:	e016      	b.n	8004cac <UART_Start_Receive_IT+0xa4>
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c86:	d10d      	bne.n	8004ca4 <UART_Start_Receive_IT+0x9c>
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	691b      	ldr	r3, [r3, #16]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d104      	bne.n	8004c9a <UART_Start_Receive_IT+0x92>
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	227f      	movs	r2, #127	; 0x7f
 8004c94:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004c98:	e008      	b.n	8004cac <UART_Start_Receive_IT+0xa4>
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	223f      	movs	r2, #63	; 0x3f
 8004c9e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004ca2:	e003      	b.n	8004cac <UART_Start_Receive_IT+0xa4>
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2222      	movs	r2, #34	; 0x22
 8004cb8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	3308      	adds	r3, #8
 8004cc2:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004cc6:	e853 3f00 	ldrex	r3, [r3]
 8004cca:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8004ccc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004cce:	f043 0301 	orr.w	r3, r3, #1
 8004cd2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	3308      	adds	r3, #8
 8004cdc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004ce0:	673a      	str	r2, [r7, #112]	; 0x70
 8004ce2:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8004ce6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004ce8:	e841 2300 	strex	r3, r2, [r1]
 8004cec:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8004cee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d1e3      	bne.n	8004cbc <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004cf8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cfc:	d14f      	bne.n	8004d9e <UART_Start_Receive_IT+0x196>
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004d04:	88fa      	ldrh	r2, [r7, #6]
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d349      	bcc.n	8004d9e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d12:	d107      	bne.n	8004d24 <UART_Start_Receive_IT+0x11c>
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	691b      	ldr	r3, [r3, #16]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d103      	bne.n	8004d24 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	4a47      	ldr	r2, [pc, #284]	; (8004e3c <UART_Start_Receive_IT+0x234>)
 8004d20:	675a      	str	r2, [r3, #116]	; 0x74
 8004d22:	e002      	b.n	8004d2a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	4a46      	ldr	r2, [pc, #280]	; (8004e40 <UART_Start_Receive_IT+0x238>)
 8004d28:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d01a      	beq.n	8004d68 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d3a:	e853 3f00 	ldrex	r3, [r3]
 8004d3e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004d40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d46:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	461a      	mov	r2, r3
 8004d50:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004d54:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d56:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d58:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004d5a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004d5c:	e841 2300 	strex	r3, r2, [r1]
 8004d60:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004d62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d1e4      	bne.n	8004d32 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	3308      	adds	r3, #8
 8004d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d72:	e853 3f00 	ldrex	r3, [r3]
 8004d76:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d7e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	3308      	adds	r3, #8
 8004d86:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004d88:	64ba      	str	r2, [r7, #72]	; 0x48
 8004d8a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d8c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004d8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d90:	e841 2300 	strex	r3, r2, [r1]
 8004d94:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004d96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d1e5      	bne.n	8004d68 <UART_Start_Receive_IT+0x160>
 8004d9c:	e046      	b.n	8004e2c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004da6:	d107      	bne.n	8004db8 <UART_Start_Receive_IT+0x1b0>
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	691b      	ldr	r3, [r3, #16]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d103      	bne.n	8004db8 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	4a24      	ldr	r2, [pc, #144]	; (8004e44 <UART_Start_Receive_IT+0x23c>)
 8004db4:	675a      	str	r2, [r3, #116]	; 0x74
 8004db6:	e002      	b.n	8004dbe <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	4a23      	ldr	r2, [pc, #140]	; (8004e48 <UART_Start_Receive_IT+0x240>)
 8004dbc:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d019      	beq.n	8004dfa <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dce:	e853 3f00 	ldrex	r3, [r3]
 8004dd2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004dda:	677b      	str	r3, [r7, #116]	; 0x74
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	461a      	mov	r2, r3
 8004de2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004de4:	637b      	str	r3, [r7, #52]	; 0x34
 8004de6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004dea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004dec:	e841 2300 	strex	r3, r2, [r1]
 8004df0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d1e6      	bne.n	8004dc6 <UART_Start_Receive_IT+0x1be>
 8004df8:	e018      	b.n	8004e2c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	e853 3f00 	ldrex	r3, [r3]
 8004e06:	613b      	str	r3, [r7, #16]
   return(result);
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	f043 0320 	orr.w	r3, r3, #32
 8004e0e:	67bb      	str	r3, [r7, #120]	; 0x78
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	461a      	mov	r2, r3
 8004e16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e18:	623b      	str	r3, [r7, #32]
 8004e1a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e1c:	69f9      	ldr	r1, [r7, #28]
 8004e1e:	6a3a      	ldr	r2, [r7, #32]
 8004e20:	e841 2300 	strex	r3, r2, [r1]
 8004e24:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d1e6      	bne.n	8004dfa <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8004e2c:	2300      	movs	r3, #0
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	378c      	adds	r7, #140	; 0x8c
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr
 8004e3a:	bf00      	nop
 8004e3c:	0800566d 	.word	0x0800566d
 8004e40:	0800530d 	.word	0x0800530d
 8004e44:	08005155 	.word	0x08005155
 8004e48:	08004f9d 	.word	0x08004f9d

08004e4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b095      	sub	sp, #84	; 0x54
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e5c:	e853 3f00 	ldrex	r3, [r3]
 8004e60:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e68:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	461a      	mov	r2, r3
 8004e70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e72:	643b      	str	r3, [r7, #64]	; 0x40
 8004e74:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e76:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004e78:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004e7a:	e841 2300 	strex	r3, r2, [r1]
 8004e7e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d1e6      	bne.n	8004e54 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	3308      	adds	r3, #8
 8004e8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e8e:	6a3b      	ldr	r3, [r7, #32]
 8004e90:	e853 3f00 	ldrex	r3, [r3]
 8004e94:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e96:	69fb      	ldr	r3, [r7, #28]
 8004e98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e9c:	f023 0301 	bic.w	r3, r3, #1
 8004ea0:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	3308      	adds	r3, #8
 8004ea8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004eaa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004eac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004eb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004eb2:	e841 2300 	strex	r3, r2, [r1]
 8004eb6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d1e3      	bne.n	8004e86 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d118      	bne.n	8004ef8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	e853 3f00 	ldrex	r3, [r3]
 8004ed2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	f023 0310 	bic.w	r3, r3, #16
 8004eda:	647b      	str	r3, [r7, #68]	; 0x44
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	461a      	mov	r2, r3
 8004ee2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ee4:	61bb      	str	r3, [r7, #24]
 8004ee6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee8:	6979      	ldr	r1, [r7, #20]
 8004eea:	69ba      	ldr	r2, [r7, #24]
 8004eec:	e841 2300 	strex	r3, r2, [r1]
 8004ef0:	613b      	str	r3, [r7, #16]
   return(result);
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d1e6      	bne.n	8004ec6 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2220      	movs	r2, #32
 8004efc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004f0c:	bf00      	nop
 8004f0e:	3754      	adds	r7, #84	; 0x54
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr

08004f18 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b084      	sub	sp, #16
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f24:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f36:	68f8      	ldr	r0, [r7, #12]
 8004f38:	f7ff f99a 	bl	8004270 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f3c:	bf00      	nop
 8004f3e:	3710      	adds	r7, #16
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}

08004f44 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b088      	sub	sp, #32
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	e853 3f00 	ldrex	r3, [r3]
 8004f58:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f60:	61fb      	str	r3, [r7, #28]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	461a      	mov	r2, r3
 8004f68:	69fb      	ldr	r3, [r7, #28]
 8004f6a:	61bb      	str	r3, [r7, #24]
 8004f6c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f6e:	6979      	ldr	r1, [r7, #20]
 8004f70:	69ba      	ldr	r2, [r7, #24]
 8004f72:	e841 2300 	strex	r3, r2, [r1]
 8004f76:	613b      	str	r3, [r7, #16]
   return(result);
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d1e6      	bne.n	8004f4c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2220      	movs	r2, #32
 8004f82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f7ff f965 	bl	800425c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f92:	bf00      	nop
 8004f94:	3720      	adds	r7, #32
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
	...

08004f9c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b09c      	sub	sp, #112	; 0x70
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004faa:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fb4:	2b22      	cmp	r3, #34	; 0x22
 8004fb6:	f040 80be 	bne.w	8005136 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004fc4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004fc8:	b2d9      	uxtb	r1, r3
 8004fca:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004fce:	b2da      	uxtb	r2, r3
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fd4:	400a      	ands	r2, r1
 8004fd6:	b2d2      	uxtb	r2, r2
 8004fd8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fde:	1c5a      	adds	r2, r3, #1
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	3b01      	subs	r3, #1
 8004fee:	b29a      	uxth	r2, r3
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	f040 80a1 	bne.w	8005146 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800500a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800500c:	e853 3f00 	ldrex	r3, [r3]
 8005010:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005012:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005014:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005018:	66bb      	str	r3, [r7, #104]	; 0x68
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	461a      	mov	r2, r3
 8005020:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005022:	65bb      	str	r3, [r7, #88]	; 0x58
 8005024:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005026:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005028:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800502a:	e841 2300 	strex	r3, r2, [r1]
 800502e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005030:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005032:	2b00      	cmp	r3, #0
 8005034:	d1e6      	bne.n	8005004 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	3308      	adds	r3, #8
 800503c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800503e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005040:	e853 3f00 	ldrex	r3, [r3]
 8005044:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005048:	f023 0301 	bic.w	r3, r3, #1
 800504c:	667b      	str	r3, [r7, #100]	; 0x64
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	3308      	adds	r3, #8
 8005054:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005056:	647a      	str	r2, [r7, #68]	; 0x44
 8005058:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800505a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800505c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800505e:	e841 2300 	strex	r3, r2, [r1]
 8005062:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005064:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005066:	2b00      	cmp	r3, #0
 8005068:	d1e5      	bne.n	8005036 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2220      	movs	r2, #32
 800506e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2200      	movs	r2, #0
 800507c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a33      	ldr	r2, [pc, #204]	; (8005150 <UART_RxISR_8BIT+0x1b4>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d01f      	beq.n	80050c8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005092:	2b00      	cmp	r3, #0
 8005094:	d018      	beq.n	80050c8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800509c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509e:	e853 3f00 	ldrex	r3, [r3]
 80050a2:	623b      	str	r3, [r7, #32]
   return(result);
 80050a4:	6a3b      	ldr	r3, [r7, #32]
 80050a6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80050aa:	663b      	str	r3, [r7, #96]	; 0x60
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	461a      	mov	r2, r3
 80050b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80050b4:	633b      	str	r3, [r7, #48]	; 0x30
 80050b6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80050ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050bc:	e841 2300 	strex	r3, r2, [r1]
 80050c0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80050c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d1e6      	bne.n	8005096 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d12e      	bne.n	800512e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	e853 3f00 	ldrex	r3, [r3]
 80050e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f023 0310 	bic.w	r3, r3, #16
 80050ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	461a      	mov	r2, r3
 80050f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050f4:	61fb      	str	r3, [r7, #28]
 80050f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f8:	69b9      	ldr	r1, [r7, #24]
 80050fa:	69fa      	ldr	r2, [r7, #28]
 80050fc:	e841 2300 	strex	r3, r2, [r1]
 8005100:	617b      	str	r3, [r7, #20]
   return(result);
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d1e6      	bne.n	80050d6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	69db      	ldr	r3, [r3, #28]
 800510e:	f003 0310 	and.w	r3, r3, #16
 8005112:	2b10      	cmp	r3, #16
 8005114:	d103      	bne.n	800511e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	2210      	movs	r2, #16
 800511c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005124:	4619      	mov	r1, r3
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f7ff f8ac 	bl	8004284 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800512c:	e00b      	b.n	8005146 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f7fc fca2 	bl	8001a78 <HAL_UART_RxCpltCallback>
}
 8005134:	e007      	b.n	8005146 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	699a      	ldr	r2, [r3, #24]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f042 0208 	orr.w	r2, r2, #8
 8005144:	619a      	str	r2, [r3, #24]
}
 8005146:	bf00      	nop
 8005148:	3770      	adds	r7, #112	; 0x70
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	40008000 	.word	0x40008000

08005154 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b09c      	sub	sp, #112	; 0x70
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005162:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800516c:	2b22      	cmp	r3, #34	; 0x22
 800516e:	f040 80be 	bne.w	80052ee <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005178:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005180:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8005182:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8005186:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800518a:	4013      	ands	r3, r2
 800518c:	b29a      	uxth	r2, r3
 800518e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005190:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005196:	1c9a      	adds	r2, r3, #2
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	3b01      	subs	r3, #1
 80051a6:	b29a      	uxth	r2, r3
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	f040 80a1 	bne.w	80052fe <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051c4:	e853 3f00 	ldrex	r3, [r3]
 80051c8:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80051ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80051d0:	667b      	str	r3, [r7, #100]	; 0x64
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	461a      	mov	r2, r3
 80051d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051da:	657b      	str	r3, [r7, #84]	; 0x54
 80051dc:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051de:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80051e0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80051e2:	e841 2300 	strex	r3, r2, [r1]
 80051e6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80051e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d1e6      	bne.n	80051bc <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	3308      	adds	r3, #8
 80051f4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051f8:	e853 3f00 	ldrex	r3, [r3]
 80051fc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80051fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005200:	f023 0301 	bic.w	r3, r3, #1
 8005204:	663b      	str	r3, [r7, #96]	; 0x60
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	3308      	adds	r3, #8
 800520c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800520e:	643a      	str	r2, [r7, #64]	; 0x40
 8005210:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005212:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005214:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005216:	e841 2300 	strex	r3, r2, [r1]
 800521a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800521c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800521e:	2b00      	cmp	r3, #0
 8005220:	d1e5      	bne.n	80051ee <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2220      	movs	r2, #32
 8005226:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a33      	ldr	r2, [pc, #204]	; (8005308 <UART_RxISR_16BIT+0x1b4>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d01f      	beq.n	8005280 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800524a:	2b00      	cmp	r3, #0
 800524c:	d018      	beq.n	8005280 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005254:	6a3b      	ldr	r3, [r7, #32]
 8005256:	e853 3f00 	ldrex	r3, [r3]
 800525a:	61fb      	str	r3, [r7, #28]
   return(result);
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005262:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	461a      	mov	r2, r3
 800526a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800526c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800526e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005270:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005272:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005274:	e841 2300 	strex	r3, r2, [r1]
 8005278:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800527a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527c:	2b00      	cmp	r3, #0
 800527e:	d1e6      	bne.n	800524e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005284:	2b01      	cmp	r3, #1
 8005286:	d12e      	bne.n	80052e6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	e853 3f00 	ldrex	r3, [r3]
 800529a:	60bb      	str	r3, [r7, #8]
   return(result);
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	f023 0310 	bic.w	r3, r3, #16
 80052a2:	65bb      	str	r3, [r7, #88]	; 0x58
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	461a      	mov	r2, r3
 80052aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80052ac:	61bb      	str	r3, [r7, #24]
 80052ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b0:	6979      	ldr	r1, [r7, #20]
 80052b2:	69ba      	ldr	r2, [r7, #24]
 80052b4:	e841 2300 	strex	r3, r2, [r1]
 80052b8:	613b      	str	r3, [r7, #16]
   return(result);
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d1e6      	bne.n	800528e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	69db      	ldr	r3, [r3, #28]
 80052c6:	f003 0310 	and.w	r3, r3, #16
 80052ca:	2b10      	cmp	r3, #16
 80052cc:	d103      	bne.n	80052d6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2210      	movs	r2, #16
 80052d4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80052dc:	4619      	mov	r1, r3
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f7fe ffd0 	bl	8004284 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80052e4:	e00b      	b.n	80052fe <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f7fc fbc6 	bl	8001a78 <HAL_UART_RxCpltCallback>
}
 80052ec:	e007      	b.n	80052fe <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	699a      	ldr	r2, [r3, #24]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f042 0208 	orr.w	r2, r2, #8
 80052fc:	619a      	str	r2, [r3, #24]
}
 80052fe:	bf00      	nop
 8005300:	3770      	adds	r7, #112	; 0x70
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop
 8005308:	40008000 	.word	0x40008000

0800530c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b0ac      	sub	sp, #176	; 0xb0
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800531a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	69db      	ldr	r3, [r3, #28]
 8005324:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005342:	2b22      	cmp	r3, #34	; 0x22
 8005344:	f040 8182 	bne.w	800564c <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800534e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005352:	e125      	b.n	80055a0 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800535e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8005362:	b2d9      	uxtb	r1, r3
 8005364:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005368:	b2da      	uxtb	r2, r3
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800536e:	400a      	ands	r2, r1
 8005370:	b2d2      	uxtb	r2, r2
 8005372:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005378:	1c5a      	adds	r2, r3, #1
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005384:	b29b      	uxth	r3, r3
 8005386:	3b01      	subs	r3, #1
 8005388:	b29a      	uxth	r2, r3
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	69db      	ldr	r3, [r3, #28]
 8005396:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800539a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800539e:	f003 0307 	and.w	r3, r3, #7
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d053      	beq.n	800544e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80053a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80053aa:	f003 0301 	and.w	r3, r3, #1
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d011      	beq.n	80053d6 <UART_RxISR_8BIT_FIFOEN+0xca>
 80053b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80053b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d00b      	beq.n	80053d6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	2201      	movs	r2, #1
 80053c4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053cc:	f043 0201 	orr.w	r2, r3, #1
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80053d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80053da:	f003 0302 	and.w	r3, r3, #2
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d011      	beq.n	8005406 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80053e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80053e6:	f003 0301 	and.w	r3, r3, #1
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d00b      	beq.n	8005406 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	2202      	movs	r2, #2
 80053f4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053fc:	f043 0204 	orr.w	r2, r3, #4
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005406:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800540a:	f003 0304 	and.w	r3, r3, #4
 800540e:	2b00      	cmp	r3, #0
 8005410:	d011      	beq.n	8005436 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8005412:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005416:	f003 0301 	and.w	r3, r3, #1
 800541a:	2b00      	cmp	r3, #0
 800541c:	d00b      	beq.n	8005436 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	2204      	movs	r2, #4
 8005424:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800542c:	f043 0202 	orr.w	r2, r3, #2
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800543c:	2b00      	cmp	r3, #0
 800543e:	d006      	beq.n	800544e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f7fe ff15 	bl	8004270 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005454:	b29b      	uxth	r3, r3
 8005456:	2b00      	cmp	r3, #0
 8005458:	f040 80a2 	bne.w	80055a0 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005462:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005464:	e853 3f00 	ldrex	r3, [r3]
 8005468:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800546a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800546c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005470:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	461a      	mov	r2, r3
 800547a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800547e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005480:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005482:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8005484:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005486:	e841 2300 	strex	r3, r2, [r1]
 800548a:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800548c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800548e:	2b00      	cmp	r3, #0
 8005490:	d1e4      	bne.n	800545c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	3308      	adds	r3, #8
 8005498:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800549a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800549c:	e853 3f00 	ldrex	r3, [r3]
 80054a0:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80054a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054a8:	f023 0301 	bic.w	r3, r3, #1
 80054ac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	3308      	adds	r3, #8
 80054b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80054ba:	66ba      	str	r2, [r7, #104]	; 0x68
 80054bc:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054be:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80054c0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80054c2:	e841 2300 	strex	r3, r2, [r1]
 80054c6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80054c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d1e1      	bne.n	8005492 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2220      	movs	r2, #32
 80054d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a5f      	ldr	r2, [pc, #380]	; (8005664 <UART_RxISR_8BIT_FIFOEN+0x358>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d021      	beq.n	8005530 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d01a      	beq.n	8005530 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005500:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005502:	e853 3f00 	ldrex	r3, [r3]
 8005506:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005508:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800550a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800550e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	461a      	mov	r2, r3
 8005518:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800551c:	657b      	str	r3, [r7, #84]	; 0x54
 800551e:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005520:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005522:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005524:	e841 2300 	strex	r3, r2, [r1]
 8005528:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800552a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800552c:	2b00      	cmp	r3, #0
 800552e:	d1e4      	bne.n	80054fa <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005534:	2b01      	cmp	r3, #1
 8005536:	d130      	bne.n	800559a <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2200      	movs	r2, #0
 800553c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005546:	e853 3f00 	ldrex	r3, [r3]
 800554a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800554c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800554e:	f023 0310 	bic.w	r3, r3, #16
 8005552:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	461a      	mov	r2, r3
 800555c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005560:	643b      	str	r3, [r7, #64]	; 0x40
 8005562:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005564:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005566:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005568:	e841 2300 	strex	r3, r2, [r1]
 800556c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800556e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005570:	2b00      	cmp	r3, #0
 8005572:	d1e4      	bne.n	800553e <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	69db      	ldr	r3, [r3, #28]
 800557a:	f003 0310 	and.w	r3, r3, #16
 800557e:	2b10      	cmp	r3, #16
 8005580:	d103      	bne.n	800558a <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	2210      	movs	r2, #16
 8005588:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005590:	4619      	mov	r1, r3
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f7fe fe76 	bl	8004284 <HAL_UARTEx_RxEventCallback>
 8005598:	e002      	b.n	80055a0 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f7fc fa6c 	bl	8001a78 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80055a0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d006      	beq.n	80055b6 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 80055a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80055ac:	f003 0320 	and.w	r3, r3, #32
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	f47f aecf 	bne.w	8005354 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80055bc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80055c0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d049      	beq.n	800565c <UART_RxISR_8BIT_FIFOEN+0x350>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80055ce:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d242      	bcs.n	800565c <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	3308      	adds	r3, #8
 80055dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055de:	6a3b      	ldr	r3, [r7, #32]
 80055e0:	e853 3f00 	ldrex	r3, [r3]
 80055e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80055e6:	69fb      	ldr	r3, [r7, #28]
 80055e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	3308      	adds	r3, #8
 80055f6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80055fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80055fc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005600:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005602:	e841 2300 	strex	r3, r2, [r1]
 8005606:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560a:	2b00      	cmp	r3, #0
 800560c:	d1e3      	bne.n	80055d6 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a15      	ldr	r2, [pc, #84]	; (8005668 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8005612:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	e853 3f00 	ldrex	r3, [r3]
 8005620:	60bb      	str	r3, [r7, #8]
   return(result);
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	f043 0320 	orr.w	r3, r3, #32
 8005628:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	461a      	mov	r2, r3
 8005632:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005636:	61bb      	str	r3, [r7, #24]
 8005638:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800563a:	6979      	ldr	r1, [r7, #20]
 800563c:	69ba      	ldr	r2, [r7, #24]
 800563e:	e841 2300 	strex	r3, r2, [r1]
 8005642:	613b      	str	r3, [r7, #16]
   return(result);
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d1e4      	bne.n	8005614 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800564a:	e007      	b.n	800565c <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	699a      	ldr	r2, [r3, #24]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f042 0208 	orr.w	r2, r2, #8
 800565a:	619a      	str	r2, [r3, #24]
}
 800565c:	bf00      	nop
 800565e:	37b0      	adds	r7, #176	; 0xb0
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}
 8005664:	40008000 	.word	0x40008000
 8005668:	08004f9d 	.word	0x08004f9d

0800566c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b0ae      	sub	sp, #184	; 0xb8
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800567a:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	69db      	ldr	r3, [r3, #28]
 8005684:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056a2:	2b22      	cmp	r3, #34	; 0x22
 80056a4:	f040 8186 	bne.w	80059b4 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80056ae:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80056b2:	e129      	b.n	8005908 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ba:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80056c6:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80056ca:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80056ce:	4013      	ands	r3, r2
 80056d0:	b29a      	uxth	r2, r3
 80056d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80056d6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056dc:	1c9a      	adds	r2, r3, #2
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	3b01      	subs	r3, #1
 80056ec:	b29a      	uxth	r2, r3
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	69db      	ldr	r3, [r3, #28]
 80056fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80056fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005702:	f003 0307 	and.w	r3, r3, #7
 8005706:	2b00      	cmp	r3, #0
 8005708:	d053      	beq.n	80057b2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800570a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800570e:	f003 0301 	and.w	r3, r3, #1
 8005712:	2b00      	cmp	r3, #0
 8005714:	d011      	beq.n	800573a <UART_RxISR_16BIT_FIFOEN+0xce>
 8005716:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800571a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800571e:	2b00      	cmp	r3, #0
 8005720:	d00b      	beq.n	800573a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	2201      	movs	r2, #1
 8005728:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005730:	f043 0201 	orr.w	r2, r3, #1
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800573a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800573e:	f003 0302 	and.w	r3, r3, #2
 8005742:	2b00      	cmp	r3, #0
 8005744:	d011      	beq.n	800576a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8005746:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800574a:	f003 0301 	and.w	r3, r3, #1
 800574e:	2b00      	cmp	r3, #0
 8005750:	d00b      	beq.n	800576a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	2202      	movs	r2, #2
 8005758:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005760:	f043 0204 	orr.w	r2, r3, #4
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800576a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800576e:	f003 0304 	and.w	r3, r3, #4
 8005772:	2b00      	cmp	r3, #0
 8005774:	d011      	beq.n	800579a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8005776:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800577a:	f003 0301 	and.w	r3, r3, #1
 800577e:	2b00      	cmp	r3, #0
 8005780:	d00b      	beq.n	800579a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	2204      	movs	r2, #4
 8005788:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005790:	f043 0202 	orr.w	r2, r3, #2
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d006      	beq.n	80057b2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f7fe fd63 	bl	8004270 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	f040 80a4 	bne.w	8005908 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057c8:	e853 3f00 	ldrex	r3, [r3]
 80057cc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80057ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80057d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	461a      	mov	r2, r3
 80057de:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80057e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80057e6:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80057ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80057ee:	e841 2300 	strex	r3, r2, [r1]
 80057f2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80057f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d1e2      	bne.n	80057c0 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	3308      	adds	r3, #8
 8005800:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005802:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005804:	e853 3f00 	ldrex	r3, [r3]
 8005808:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800580a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800580c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005810:	f023 0301 	bic.w	r3, r3, #1
 8005814:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	3308      	adds	r3, #8
 800581e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8005822:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005824:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005826:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005828:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800582a:	e841 2300 	strex	r3, r2, [r1]
 800582e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005830:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005832:	2b00      	cmp	r3, #0
 8005834:	d1e1      	bne.n	80057fa <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2220      	movs	r2, #32
 800583a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2200      	movs	r2, #0
 8005842:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2200      	movs	r2, #0
 8005848:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a5f      	ldr	r2, [pc, #380]	; (80059cc <UART_RxISR_16BIT_FIFOEN+0x360>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d021      	beq.n	8005898 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800585e:	2b00      	cmp	r3, #0
 8005860:	d01a      	beq.n	8005898 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005868:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800586a:	e853 3f00 	ldrex	r3, [r3]
 800586e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005870:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005872:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005876:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	461a      	mov	r2, r3
 8005880:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005884:	65bb      	str	r3, [r7, #88]	; 0x58
 8005886:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005888:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800588a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800588c:	e841 2300 	strex	r3, r2, [r1]
 8005890:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005892:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005894:	2b00      	cmp	r3, #0
 8005896:	d1e4      	bne.n	8005862 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800589c:	2b01      	cmp	r3, #1
 800589e:	d130      	bne.n	8005902 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2200      	movs	r2, #0
 80058a4:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ae:	e853 3f00 	ldrex	r3, [r3]
 80058b2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80058b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058b6:	f023 0310 	bic.w	r3, r3, #16
 80058ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	461a      	mov	r2, r3
 80058c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80058c8:	647b      	str	r3, [r7, #68]	; 0x44
 80058ca:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058cc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80058ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80058d0:	e841 2300 	strex	r3, r2, [r1]
 80058d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80058d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d1e4      	bne.n	80058a6 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	69db      	ldr	r3, [r3, #28]
 80058e2:	f003 0310 	and.w	r3, r3, #16
 80058e6:	2b10      	cmp	r3, #16
 80058e8:	d103      	bne.n	80058f2 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	2210      	movs	r2, #16
 80058f0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80058f8:	4619      	mov	r1, r3
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f7fe fcc2 	bl	8004284 <HAL_UARTEx_RxEventCallback>
 8005900:	e002      	b.n	8005908 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f7fc f8b8 	bl	8001a78 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005908:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800590c:	2b00      	cmp	r3, #0
 800590e:	d006      	beq.n	800591e <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8005910:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005914:	f003 0320 	and.w	r3, r3, #32
 8005918:	2b00      	cmp	r3, #0
 800591a:	f47f aecb 	bne.w	80056b4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005924:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005928:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800592c:	2b00      	cmp	r3, #0
 800592e:	d049      	beq.n	80059c4 <UART_RxISR_16BIT_FIFOEN+0x358>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005936:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800593a:	429a      	cmp	r2, r3
 800593c:	d242      	bcs.n	80059c4 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	3308      	adds	r3, #8
 8005944:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005948:	e853 3f00 	ldrex	r3, [r3]
 800594c:	623b      	str	r3, [r7, #32]
   return(result);
 800594e:	6a3b      	ldr	r3, [r7, #32]
 8005950:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005954:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	3308      	adds	r3, #8
 800595e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8005962:	633a      	str	r2, [r7, #48]	; 0x30
 8005964:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005966:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005968:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800596a:	e841 2300 	strex	r3, r2, [r1]
 800596e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005972:	2b00      	cmp	r3, #0
 8005974:	d1e3      	bne.n	800593e <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4a15      	ldr	r2, [pc, #84]	; (80059d0 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800597a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	e853 3f00 	ldrex	r3, [r3]
 8005988:	60fb      	str	r3, [r7, #12]
   return(result);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	f043 0320 	orr.w	r3, r3, #32
 8005990:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	461a      	mov	r2, r3
 800599a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800599e:	61fb      	str	r3, [r7, #28]
 80059a0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a2:	69b9      	ldr	r1, [r7, #24]
 80059a4:	69fa      	ldr	r2, [r7, #28]
 80059a6:	e841 2300 	strex	r3, r2, [r1]
 80059aa:	617b      	str	r3, [r7, #20]
   return(result);
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d1e4      	bne.n	800597c <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80059b2:	e007      	b.n	80059c4 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	699a      	ldr	r2, [r3, #24]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f042 0208 	orr.w	r2, r2, #8
 80059c2:	619a      	str	r2, [r3, #24]
}
 80059c4:	bf00      	nop
 80059c6:	37b8      	adds	r7, #184	; 0xb8
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}
 80059cc:	40008000 	.word	0x40008000
 80059d0:	08005155 	.word	0x08005155

080059d4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80059dc:	bf00      	nop
 80059de:	370c      	adds	r7, #12
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b083      	sub	sp, #12
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80059f0:	bf00      	nop
 80059f2:	370c      	adds	r7, #12
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr

080059fc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b083      	sub	sp, #12
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005a04:	bf00      	nop
 8005a06:	370c      	adds	r7, #12
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr

08005a10 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b085      	sub	sp, #20
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d101      	bne.n	8005a26 <HAL_UARTEx_DisableFifoMode+0x16>
 8005a22:	2302      	movs	r3, #2
 8005a24:	e027      	b.n	8005a76 <HAL_UARTEx_DisableFifoMode+0x66>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2201      	movs	r2, #1
 8005a2a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2224      	movs	r2, #36	; 0x24
 8005a32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f022 0201 	bic.w	r2, r2, #1
 8005a4c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005a54:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	68fa      	ldr	r2, [r7, #12]
 8005a62:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2220      	movs	r2, #32
 8005a68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005a74:	2300      	movs	r3, #0
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3714      	adds	r7, #20
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr

08005a82 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005a82:	b580      	push	{r7, lr}
 8005a84:	b084      	sub	sp, #16
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]
 8005a8a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d101      	bne.n	8005a9a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005a96:	2302      	movs	r3, #2
 8005a98:	e02d      	b.n	8005af6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2224      	movs	r2, #36	; 0x24
 8005aa6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f022 0201 	bic.w	r2, r2, #1
 8005ac0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	683a      	ldr	r2, [r7, #0]
 8005ad2:	430a      	orrs	r2, r1
 8005ad4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f000 f850 	bl	8005b7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	68fa      	ldr	r2, [r7, #12]
 8005ae2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2220      	movs	r2, #32
 8005ae8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2200      	movs	r2, #0
 8005af0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005af4:	2300      	movs	r3, #0
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3710      	adds	r7, #16
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}

08005afe <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005afe:	b580      	push	{r7, lr}
 8005b00:	b084      	sub	sp, #16
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	6078      	str	r0, [r7, #4]
 8005b06:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d101      	bne.n	8005b16 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005b12:	2302      	movs	r3, #2
 8005b14:	e02d      	b.n	8005b72 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2201      	movs	r2, #1
 8005b1a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2224      	movs	r2, #36	; 0x24
 8005b22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f022 0201 	bic.w	r2, r2, #1
 8005b3c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	683a      	ldr	r2, [r7, #0]
 8005b4e:	430a      	orrs	r2, r1
 8005b50:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f000 f812 	bl	8005b7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	68fa      	ldr	r2, [r7, #12]
 8005b5e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2220      	movs	r2, #32
 8005b64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005b70:	2300      	movs	r3, #0
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3710      	adds	r7, #16
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
	...

08005b7c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b085      	sub	sp, #20
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d108      	bne.n	8005b9e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2201      	movs	r2, #1
 8005b98:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005b9c:	e031      	b.n	8005c02 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005b9e:	2308      	movs	r3, #8
 8005ba0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005ba2:	2308      	movs	r3, #8
 8005ba4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	0e5b      	lsrs	r3, r3, #25
 8005bae:	b2db      	uxtb	r3, r3
 8005bb0:	f003 0307 	and.w	r3, r3, #7
 8005bb4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	0f5b      	lsrs	r3, r3, #29
 8005bbe:	b2db      	uxtb	r3, r3
 8005bc0:	f003 0307 	and.w	r3, r3, #7
 8005bc4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005bc6:	7bbb      	ldrb	r3, [r7, #14]
 8005bc8:	7b3a      	ldrb	r2, [r7, #12]
 8005bca:	4911      	ldr	r1, [pc, #68]	; (8005c10 <UARTEx_SetNbDataToProcess+0x94>)
 8005bcc:	5c8a      	ldrb	r2, [r1, r2]
 8005bce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005bd2:	7b3a      	ldrb	r2, [r7, #12]
 8005bd4:	490f      	ldr	r1, [pc, #60]	; (8005c14 <UARTEx_SetNbDataToProcess+0x98>)
 8005bd6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005bd8:	fb93 f3f2 	sdiv	r3, r3, r2
 8005bdc:	b29a      	uxth	r2, r3
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005be4:	7bfb      	ldrb	r3, [r7, #15]
 8005be6:	7b7a      	ldrb	r2, [r7, #13]
 8005be8:	4909      	ldr	r1, [pc, #36]	; (8005c10 <UARTEx_SetNbDataToProcess+0x94>)
 8005bea:	5c8a      	ldrb	r2, [r1, r2]
 8005bec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005bf0:	7b7a      	ldrb	r2, [r7, #13]
 8005bf2:	4908      	ldr	r1, [pc, #32]	; (8005c14 <UARTEx_SetNbDataToProcess+0x98>)
 8005bf4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005bf6:	fb93 f3f2 	sdiv	r3, r3, r2
 8005bfa:	b29a      	uxth	r2, r3
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005c02:	bf00      	nop
 8005c04:	3714      	adds	r7, #20
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr
 8005c0e:	bf00      	nop
 8005c10:	08069fec 	.word	0x08069fec
 8005c14:	08069ff4 	.word	0x08069ff4

08005c18 <_ZN6tflite13ErrorReporter6ReportEPKcz>:
#include "tensorflow/lite/core/api/error_reporter.h"
#include <cstdarg>

namespace tflite {

int ErrorReporter::Report(const char* format, ...) {
 8005c18:	b40e      	push	{r1, r2, r3}
 8005c1a:	b500      	push	{lr}
 8005c1c:	b082      	sub	sp, #8
 8005c1e:	aa03      	add	r2, sp, #12
  va_list args;
  va_start(args, format);
  int code = Report(format, args);
 8005c20:	6803      	ldr	r3, [r0, #0]
int ErrorReporter::Report(const char* format, ...) {
 8005c22:	f852 1b04 	ldr.w	r1, [r2], #4
  int code = Report(format, args);
 8005c26:	689b      	ldr	r3, [r3, #8]
  va_start(args, format);
 8005c28:	9201      	str	r2, [sp, #4]
  int code = Report(format, args);
 8005c2a:	4798      	blx	r3
  va_end(args);
  return code;
}
 8005c2c:	b002      	add	sp, #8
 8005c2e:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c32:	b003      	add	sp, #12
 8005c34:	4770      	bx	lr
 8005c36:	bf00      	nop

08005c38 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>:
}  // NOLINT[readability/fn_size]
#endif  // !defined(TF_LITE_STATIC_MEMORY)
}  // namespace

TfLiteStatus ConvertTensorType(TensorType tensor_type, TfLiteType* type,
                               ErrorReporter* error_reporter) {
 8005c38:	b508      	push	{r3, lr}
 8005c3a:	468c      	mov	ip, r1
 8005c3c:	4613      	mov	r3, r2
  switch (tensor_type) {
 8005c3e:	2811      	cmp	r0, #17
 8005c40:	d852      	bhi.n	8005ce8 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xb0>
 8005c42:	e8df f000 	tbb	[pc, r0]
 8005c46:	110d      	.short	0x110d
 8005c48:	211d1915 	.word	0x211d1915
 8005c4c:	312d2925 	.word	0x312d2925
 8005c50:	413d3935 	.word	0x413d3935
 8005c54:	094d4945 	.word	0x094d4945
      return kTfLiteOk;
    case TensorType_VARIANT:
      *type = kTfLiteVariant;
      return kTfLiteOk;
    case TensorType_INT4:
      *type = kTfLiteInt4;
 8005c58:	2312      	movs	r3, #18
 8005c5a:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
 8005c5c:	2000      	movs	r0, #0
      *type = kTfLiteNoType;
      TF_LITE_REPORT_ERROR(error_reporter,
                           "Unsupported data type %d in tensor\n", tensor_type);
      return kTfLiteError;
  }
}
 8005c5e:	bd08      	pop	{r3, pc}
      *type = kTfLiteFloat32;
 8005c60:	2301      	movs	r3, #1
 8005c62:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
 8005c64:	2000      	movs	r0, #0
}
 8005c66:	bd08      	pop	{r3, pc}
      *type = kTfLiteFloat16;
 8005c68:	230a      	movs	r3, #10
 8005c6a:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
 8005c6c:	2000      	movs	r0, #0
}
 8005c6e:	bd08      	pop	{r3, pc}
      *type = kTfLiteInt32;
 8005c70:	2302      	movs	r3, #2
 8005c72:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
 8005c74:	2000      	movs	r0, #0
}
 8005c76:	bd08      	pop	{r3, pc}
      *type = kTfLiteUInt8;
 8005c78:	2303      	movs	r3, #3
 8005c7a:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
 8005c7c:	2000      	movs	r0, #0
}
 8005c7e:	bd08      	pop	{r3, pc}
      *type = kTfLiteInt64;
 8005c80:	2304      	movs	r3, #4
 8005c82:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
 8005c84:	2000      	movs	r0, #0
}
 8005c86:	bd08      	pop	{r3, pc}
      *type = kTfLiteString;
 8005c88:	2305      	movs	r3, #5
 8005c8a:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
 8005c8c:	2000      	movs	r0, #0
}
 8005c8e:	bd08      	pop	{r3, pc}
      *type = kTfLiteBool;
 8005c90:	2306      	movs	r3, #6
 8005c92:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
 8005c94:	2000      	movs	r0, #0
}
 8005c96:	bd08      	pop	{r3, pc}
      *type = kTfLiteInt16;
 8005c98:	2307      	movs	r3, #7
 8005c9a:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
 8005c9c:	2000      	movs	r0, #0
}
 8005c9e:	bd08      	pop	{r3, pc}
      *type = kTfLiteComplex64;
 8005ca0:	2308      	movs	r3, #8
 8005ca2:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
 8005ca4:	2000      	movs	r0, #0
}
 8005ca6:	bd08      	pop	{r3, pc}
      *type = kTfLiteInt8;
 8005ca8:	2309      	movs	r3, #9
 8005caa:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
 8005cac:	2000      	movs	r0, #0
}
 8005cae:	bd08      	pop	{r3, pc}
      *type = kTfLiteFloat64;
 8005cb0:	230b      	movs	r3, #11
 8005cb2:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
 8005cb4:	2000      	movs	r0, #0
}
 8005cb6:	bd08      	pop	{r3, pc}
      *type = kTfLiteComplex128;
 8005cb8:	230c      	movs	r3, #12
 8005cba:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
 8005cbc:	2000      	movs	r0, #0
}
 8005cbe:	bd08      	pop	{r3, pc}
      *type = kTfLiteUInt64;
 8005cc0:	230d      	movs	r3, #13
 8005cc2:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
 8005cc4:	2000      	movs	r0, #0
}
 8005cc6:	bd08      	pop	{r3, pc}
      *type = kTfLiteResource;
 8005cc8:	230e      	movs	r3, #14
 8005cca:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
 8005ccc:	2000      	movs	r0, #0
}
 8005cce:	bd08      	pop	{r3, pc}
      *type = kTfLiteVariant;
 8005cd0:	230f      	movs	r3, #15
 8005cd2:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
 8005cd4:	2000      	movs	r0, #0
}
 8005cd6:	bd08      	pop	{r3, pc}
      *type = kTfLiteUInt32;
 8005cd8:	2310      	movs	r3, #16
 8005cda:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
 8005cdc:	2000      	movs	r0, #0
}
 8005cde:	bd08      	pop	{r3, pc}
      *type = kTfLiteUInt16;
 8005ce0:	2311      	movs	r3, #17
 8005ce2:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
 8005ce4:	2000      	movs	r0, #0
}
 8005ce6:	bd08      	pop	{r3, pc}
      *type = kTfLiteNoType;
 8005ce8:	2200      	movs	r2, #0
 8005cea:	f88c 2000 	strb.w	r2, [ip]
      TF_LITE_REPORT_ERROR(error_reporter,
 8005cee:	4903      	ldr	r1, [pc, #12]	; (8005cfc <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xc4>)
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f7ff ff90 	bl	8005c18 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
 8005cf8:	2001      	movs	r0, #1
}
 8005cfa:	bd08      	pop	{r3, pc}
 8005cfc:	08069ffc 	.word	0x08069ffc

08005d00 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
  *builtin_data = params.release();
  return kTfLiteOk;
}

TfLiteStatus ParseConv2D(const Operator* op, ErrorReporter* error_reporter,
                         BuiltinDataAllocator* allocator, void** builtin_data) {
 8005d00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TFLITE_DCHECK(op != nullptr);
 8005d04:	2800      	cmp	r0, #0
 8005d06:	f000 808b 	beq.w	8005e20 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x120>
  TFLITE_DCHECK(error_reporter != nullptr);
 8005d0a:	4689      	mov	r9, r1
 8005d0c:	2900      	cmp	r1, #0
 8005d0e:	f000 8087 	beq.w	8005e20 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x120>
  TFLITE_DCHECK(allocator != nullptr);
 8005d12:	4616      	mov	r6, r2
 8005d14:	2a00      	cmp	r2, #0
 8005d16:	f000 8083 	beq.w	8005e20 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x120>
  TFLITE_DCHECK(builtin_data != nullptr);
 8005d1a:	4698      	mov	r8, r3
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d07f      	beq.n	8005e20 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x120>
  template <typename T>
  T* AllocatePOD() {
    // TODO(b/154346074): Change this to is_trivially_destructible when all
    // platform targets support that properly.
    static_assert(std::is_pod<T>::value, "Builtin data structure must be POD.");
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 8005d20:	6813      	ldr	r3, [r2, #0]
 8005d22:	4607      	mov	r7, r0
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	2204      	movs	r2, #4
 8005d28:	211c      	movs	r1, #28
 8005d2a:	4630      	mov	r0, r6
 8005d2c:	4798      	blx	r3
// "tables" use an offset table (possibly shared) that allows fields to be
// omitted and added at will, but uses an extra indirection to read.
class Table {
 public:
  const uint8_t *GetVTable() const {
    return data_ - ReadScalar<soffset_t>(data_);
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	1afb      	subs	r3, r7, r3
    return new (allocated_memory) T();
 8005d32:	2500      	movs	r5, #0

template<typename T>
// UBSAN: C++ aliasing type rules, see std::bit_cast<> for details.
FLATBUFFERS_SUPPRESS_UBSAN("alignment")
T ReadScalar(const void *p) {
  return EndianScalar(*reinterpret_cast<const T *>(p));
 8005d34:	881a      	ldrh	r2, [r3, #0]
 8005d36:	6185      	str	r5, [r0, #24]
    auto vtable = GetVTable();
    // The first element is the size of the vtable (fields + type id + itself).
    auto vtsize = ReadScalar<voffset_t>(vtable);
    // If the field we're accessing is outside the vtable, we're reading older
    // data, so it's the same as if the offset was 0 (not present).
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8005d38:	2a0a      	cmp	r2, #10
 8005d3a:	e9c0 5500 	strd	r5, r5, [r0]
 8005d3e:	e9c0 5502 	strd	r5, r5, [r0, #8]
 8005d42:	e9c0 5504 	strd	r5, r5, [r0, #16]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 8005d46:	4604      	mov	r4, r0
 8005d48:	d901      	bls.n	8005d4e <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x4e>
 8005d4a:	8959      	ldrh	r1, [r3, #10]
  }

  template<typename T> T GetField(voffset_t field, T defaultval) const {
    auto field_offset = GetOptionalFieldOffset(field);
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8005d4c:	b929      	cbnz	r1, 8005d5a <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x5a>
    // reasonable defaults in the params struct. We are not doing so until we
    // better understand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
  return kTfLiteOk;
 8005d4e:	2500      	movs	r5, #0
  *builtin_data = params.release();
 8005d50:	f8c8 4000 	str.w	r4, [r8]
}
 8005d54:	4628      	mov	r0, r5
 8005d56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d5a:	5c7d      	ldrb	r5, [r7, r1]
  const void *builtin_options() const {
    return GetPointer<const void *>(VT_BUILTIN_OPTIONS);
  }
  template<typename T> const T *builtin_options_as() const;
  const tflite::Conv2DOptions *builtin_options_as_Conv2DOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_Conv2DOptions ? static_cast<const tflite::Conv2DOptions *>(builtin_options()) : nullptr;
 8005d5c:	2d01      	cmp	r5, #1
 8005d5e:	d1f6      	bne.n	8005d4e <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x4e>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8005d60:	2a0c      	cmp	r2, #12
 8005d62:	d9f4      	bls.n	8005d4e <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x4e>
 8005d64:	899b      	ldrh	r3, [r3, #12]
  }

  template<typename P, typename OffsetSize = uoffset_t>
  P GetPointer(voffset_t field) {
    auto field_offset = GetOptionalFieldOffset(field);
    auto p = data_ + field_offset;
 8005d66:	18fa      	adds	r2, r7, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d0f0      	beq.n	8005d4e <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x4e>
 8005d6c:	58fb      	ldr	r3, [r7, r3]
    return data_ - ReadScalar<soffset_t>(data_);
 8005d6e:	58d0      	ldr	r0, [r2, r3]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8005d70:	441a      	add	r2, r3
    return data_ - ReadScalar<soffset_t>(data_);
 8005d72:	1a10      	subs	r0, r2, r0
 8005d74:	8801      	ldrh	r1, [r0, #0]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8005d76:	2904      	cmp	r1, #4
 8005d78:	d940      	bls.n	8005dfc <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xfc>
 8005d7a:	8883      	ldrh	r3, [r0, #4]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8005d7c:	b13b      	cbz	r3, 8005d8e <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x8e>
 8005d7e:	56d3      	ldrsb	r3, [r2, r3]
  switch (padding) {
 8005d80:	b12b      	cbz	r3, 8005d8e <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x8e>
 8005d82:	f1a3 0301 	sub.w	r3, r3, #1
 8005d86:	fab3 f383 	clz	r3, r3
 8005d8a:	095b      	lsrs	r3, r3, #5
 8005d8c:	005d      	lsls	r5, r3, #1
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8005d8e:	2906      	cmp	r1, #6
    params->padding = ConvertPadding(schema_params->padding());
 8005d90:	7025      	strb	r5, [r4, #0]
 8005d92:	d935      	bls.n	8005e00 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x100>
 8005d94:	88c3      	ldrh	r3, [r0, #6]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8005d96:	b103      	cbz	r3, 8005d9a <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x9a>
 8005d98:	58d3      	ldr	r3, [r2, r3]
    params->stride_width = schema_params->stride_w();
 8005d9a:	6063      	str	r3, [r4, #4]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8005d9c:	2908      	cmp	r1, #8
 8005d9e:	d92f      	bls.n	8005e00 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x100>
 8005da0:	8903      	ldrh	r3, [r0, #8]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8005da2:	b103      	cbz	r3, 8005da6 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa6>
 8005da4:	58d3      	ldr	r3, [r2, r3]
    params->stride_height = schema_params->stride_h();
 8005da6:	60a3      	str	r3, [r4, #8]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8005da8:	290a      	cmp	r1, #10
 8005daa:	d929      	bls.n	8005e00 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x100>
 8005dac:	8943      	ldrh	r3, [r0, #10]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8005dae:	b33b      	cbz	r3, 8005e00 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x100>
  switch (activation) {
 8005db0:	5cd3      	ldrb	r3, [r2, r3]
 8005db2:	1e5d      	subs	r5, r3, #1
 8005db4:	2d04      	cmp	r5, #4
 8005db6:	d823      	bhi.n	8005e00 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x100>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8005db8:	290c      	cmp	r1, #12
    params->activation =
 8005dba:	7323      	strb	r3, [r4, #12]
 8005dbc:	d924      	bls.n	8005e08 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x108>
 8005dbe:	8983      	ldrh	r3, [r0, #12]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8005dc0:	b343      	cbz	r3, 8005e14 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x114>
 8005dc2:	58d3      	ldr	r3, [r2, r3]
    params->dilation_width_factor = schema_params->dilation_w_factor();
 8005dc4:	6123      	str	r3, [r4, #16]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8005dc6:	290e      	cmp	r1, #14
 8005dc8:	d920      	bls.n	8005e0c <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x10c>
 8005dca:	89c3      	ldrh	r3, [r0, #14]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8005dcc:	b323      	cbz	r3, 8005e18 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x118>
 8005dce:	58d3      	ldr	r3, [r2, r3]
    params->dilation_height_factor = schema_params->dilation_h_factor();
 8005dd0:	6163      	str	r3, [r4, #20]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8005dd2:	2910      	cmp	r1, #16
 8005dd4:	d922      	bls.n	8005e1c <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x11c>
 8005dd6:	8a00      	ldrh	r0, [r0, #16]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8005dd8:	b100      	cbz	r0, 8005ddc <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xdc>
 8005dda:	5610      	ldrsb	r0, [r2, r0]
    TF_LITE_ENSURE_STATUS(
 8005ddc:	464a      	mov	r2, r9
 8005dde:	f104 0118 	add.w	r1, r4, #24
 8005de2:	f7ff ff29 	bl	8005c38 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
 8005de6:	4605      	mov	r5, r0
 8005de8:	2800      	cmp	r0, #0
 8005dea:	d0b0      	beq.n	8005d4e <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x4e>
    void operator()(void* data) { allocator_->Deallocate(data); }
 8005dec:	6833      	ldr	r3, [r6, #0]
 8005dee:	4630      	mov	r0, r6
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	4621      	mov	r1, r4
 8005df4:	4798      	blx	r3
}
 8005df6:	4628      	mov	r0, r5
 8005df8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    params->padding = ConvertPadding(schema_params->padding());
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	7023      	strb	r3, [r4, #0]
 8005e00:	2300      	movs	r3, #0
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8005e02:	290c      	cmp	r1, #12
    params->activation =
 8005e04:	7323      	strb	r3, [r4, #12]
 8005e06:	d8da      	bhi.n	8005dbe <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xbe>
    params->dilation_width_factor = schema_params->dilation_w_factor();
 8005e08:	2301      	movs	r3, #1
 8005e0a:	6123      	str	r3, [r4, #16]
    params->dilation_height_factor = schema_params->dilation_h_factor();
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	6163      	str	r3, [r4, #20]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8005e10:	2000      	movs	r0, #0
 8005e12:	e7e3      	b.n	8005ddc <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xdc>
 8005e14:	2301      	movs	r3, #1
 8005e16:	e7d5      	b.n	8005dc4 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc4>
 8005e18:	2301      	movs	r3, #1
 8005e1a:	e7d9      	b.n	8005dd0 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd0>
 8005e1c:	2000      	movs	r0, #0
 8005e1e:	e7dd      	b.n	8005ddc <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xdc>
  TFLITE_DCHECK(op != nullptr);
 8005e20:	f010 fea4 	bl	8016b6c <abort>

08005e24 <_ZN6tflite15ParseDequantizeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
 8005e24:	2000      	movs	r0, #0
 8005e26:	4770      	bx	lr

08005e28 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
}

TfLiteStatus ParseFullyConnected(const Operator* op,
                                 ErrorReporter* error_reporter,
                                 BuiltinDataAllocator* allocator,
                                 void** builtin_data) {
 8005e28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TFLITE_DCHECK(op != nullptr);
 8005e2c:	2800      	cmp	r0, #0
 8005e2e:	f000 8081 	beq.w	8005f34 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x10c>
  TFLITE_DCHECK(error_reporter != nullptr);
 8005e32:	460f      	mov	r7, r1
 8005e34:	2900      	cmp	r1, #0
 8005e36:	d07d      	beq.n	8005f34 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x10c>
  TFLITE_DCHECK(allocator != nullptr);
 8005e38:	4615      	mov	r5, r2
 8005e3a:	2a00      	cmp	r2, #0
 8005e3c:	d07a      	beq.n	8005f34 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x10c>
  TFLITE_DCHECK(builtin_data != nullptr);
 8005e3e:	4698      	mov	r8, r3
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d077      	beq.n	8005f34 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x10c>
 8005e44:	6813      	ldr	r3, [r2, #0]
 8005e46:	4606      	mov	r6, r0
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	2105      	movs	r1, #5
 8005e4e:	4628      	mov	r0, r5
 8005e50:	4798      	blx	r3
    return data_ - ReadScalar<soffset_t>(data_);
 8005e52:	6833      	ldr	r3, [r6, #0]
 8005e54:	1af3      	subs	r3, r6, r3
    return new (allocated_memory) T();
 8005e56:	2200      	movs	r2, #0
 8005e58:	6002      	str	r2, [r0, #0]
 8005e5a:	7102      	strb	r2, [r0, #4]
 8005e5c:	881a      	ldrh	r2, [r3, #0]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8005e5e:	2a0a      	cmp	r2, #10
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 8005e60:	4604      	mov	r4, r0
 8005e62:	d901      	bls.n	8005e68 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x40>
 8005e64:	8959      	ldrh	r1, [r3, #10]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8005e66:	b929      	cbnz	r1, 8005e74 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x4c>
    // reasonable defaults in the params struct. We are not doing so until we
    // better understand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
  return kTfLiteOk;
 8005e68:	2600      	movs	r6, #0
  *builtin_data = params.release();
 8005e6a:	f8c8 4000 	str.w	r4, [r8]
}
 8005e6e:	4630      	mov	r0, r6
 8005e70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  }
  const tflite::RNNOptions *builtin_options_as_RNNOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_RNNOptions ? static_cast<const tflite::RNNOptions *>(builtin_options()) : nullptr;
  }
  const tflite::FullyConnectedOptions *builtin_options_as_FullyConnectedOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_FullyConnectedOptions ? static_cast<const tflite::FullyConnectedOptions *>(builtin_options()) : nullptr;
 8005e74:	5c71      	ldrb	r1, [r6, r1]
 8005e76:	2908      	cmp	r1, #8
 8005e78:	d1f6      	bne.n	8005e68 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x40>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8005e7a:	2a0c      	cmp	r2, #12
 8005e7c:	d9f4      	bls.n	8005e68 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x40>
 8005e7e:	899b      	ldrh	r3, [r3, #12]
    auto p = data_ + field_offset;
 8005e80:	eb06 0a03 	add.w	sl, r6, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d0ef      	beq.n	8005e68 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x40>
 8005e88:	f856 b003 	ldr.w	fp, [r6, r3]
    return data_ - ReadScalar<soffset_t>(data_);
 8005e8c:	f85a 300b 	ldr.w	r3, [sl, fp]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8005e90:	eb0a 090b 	add.w	r9, sl, fp
    return data_ - ReadScalar<soffset_t>(data_);
 8005e94:	eba9 0303 	sub.w	r3, r9, r3
 8005e98:	8819      	ldrh	r1, [r3, #0]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8005e9a:	2904      	cmp	r1, #4
 8005e9c:	d943      	bls.n	8005f26 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xfe>
 8005e9e:	889a      	ldrh	r2, [r3, #4]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8005ea0:	b12a      	cbz	r2, 8005eae <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x86>
  switch (activation) {
 8005ea2:	f819 2002 	ldrb.w	r2, [r9, r2]
 8005ea6:	1e50      	subs	r0, r2, #1
 8005ea8:	2804      	cmp	r0, #4
 8005eaa:	bf88      	it	hi
 8005eac:	2200      	movhi	r2, #0
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8005eae:	2908      	cmp	r1, #8
    params->activation =
 8005eb0:	7022      	strb	r2, [r4, #0]
 8005eb2:	d938      	bls.n	8005f26 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xfe>
 8005eb4:	891a      	ldrh	r2, [r3, #8]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8005eb6:	b122      	cbz	r2, 8005ec2 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x9a>
    return GetField<uint8_t>(VT_KEEP_NUM_DIMS, 0) != 0;
 8005eb8:	f819 2002 	ldrb.w	r2, [r9, r2]
 8005ebc:	3a00      	subs	r2, #0
 8005ebe:	bf18      	it	ne
 8005ec0:	2201      	movne	r2, #1
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8005ec2:	290a      	cmp	r1, #10
    params->keep_num_dims = schema_params->keep_num_dims();
 8005ec4:	70a2      	strb	r2, [r4, #2]
 8005ec6:	d92e      	bls.n	8005f26 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xfe>
 8005ec8:	895a      	ldrh	r2, [r3, #10]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8005eca:	b122      	cbz	r2, 8005ed6 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xae>
    return GetField<uint8_t>(VT_ASYMMETRIC_QUANTIZE_INPUTS, 0) != 0;
 8005ecc:	f819 2002 	ldrb.w	r2, [r9, r2]
 8005ed0:	3a00      	subs	r2, #0
 8005ed2:	bf18      	it	ne
 8005ed4:	2201      	movne	r2, #1
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8005ed6:	290c      	cmp	r1, #12
    params->asymmetric_quantize_inputs =
 8005ed8:	70e2      	strb	r2, [r4, #3]
 8005eda:	d924      	bls.n	8005f26 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xfe>
 8005edc:	899b      	ldrh	r3, [r3, #12]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8005ede:	b313      	cbz	r3, 8005f26 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xfe>
 8005ee0:	f919 0003 	ldrsb.w	r0, [r9, r3]
    TF_LITE_ENSURE_STATUS(
 8005ee4:	463a      	mov	r2, r7
 8005ee6:	1d21      	adds	r1, r4, #4
 8005ee8:	f7ff fea6 	bl	8005c38 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
 8005eec:	4606      	mov	r6, r0
 8005eee:	b990      	cbnz	r0, 8005f16 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xee>
    return data_ - ReadScalar<soffset_t>(data_);
 8005ef0:	f85a 300b 	ldr.w	r3, [sl, fp]
 8005ef4:	eba9 0303 	sub.w	r3, r9, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8005ef8:	881a      	ldrh	r2, [r3, #0]
 8005efa:	2a06      	cmp	r2, #6
 8005efc:	d915      	bls.n	8005f2a <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x102>
 8005efe:	88db      	ldrh	r3, [r3, #6]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8005f00:	b19b      	cbz	r3, 8005f2a <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x102>
 8005f02:	f919 3003 	ldrsb.w	r3, [r9, r3]
    switch (schema_params->weights_format()) {
 8005f06:	b183      	cbz	r3, 8005f2a <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x102>
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d011      	beq.n	8005f30 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x108>
        TF_LITE_REPORT_ERROR(error_reporter,
 8005f0c:	490a      	ldr	r1, [pc, #40]	; (8005f38 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x110>)
 8005f0e:	4638      	mov	r0, r7
 8005f10:	f7ff fe82 	bl	8005c18 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        return kTfLiteError;
 8005f14:	2601      	movs	r6, #1
    void operator()(void* data) { allocator_->Deallocate(data); }
 8005f16:	682b      	ldr	r3, [r5, #0]
 8005f18:	4628      	mov	r0, r5
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	4621      	mov	r1, r4
 8005f1e:	4798      	blx	r3
}
 8005f20:	4630      	mov	r0, r6
 8005f22:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f26:	2000      	movs	r0, #0
 8005f28:	e7dc      	b.n	8005ee4 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xbc>
        params->weights_format = kTfLiteFullyConnectedWeightsFormatDefault;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	7063      	strb	r3, [r4, #1]
        break;
 8005f2e:	e79b      	b.n	8005e68 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x40>
        params->weights_format =
 8005f30:	7063      	strb	r3, [r4, #1]
        break;
 8005f32:	e799      	b.n	8005e68 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x40>
  TFLITE_DCHECK(op != nullptr);
 8005f34:	f010 fe1a 	bl	8016b6c <abort>
 8005f38:	0806a020 	.word	0x0806a020

08005f3c <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                        void**) {
  return kTfLiteOk;
}

TfLiteStatus ParsePool(const Operator* op, ErrorReporter* error_reporter,
                       BuiltinDataAllocator* allocator, void** builtin_data) {
 8005f3c:	b570      	push	{r4, r5, r6, lr}
  TFLITE_DCHECK(op != nullptr);
 8005f3e:	2800      	cmp	r0, #0
 8005f40:	d062      	beq.n	8006008 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xcc>
  TFLITE_DCHECK(error_reporter != nullptr);
 8005f42:	2900      	cmp	r1, #0
 8005f44:	d060      	beq.n	8006008 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xcc>
  TFLITE_DCHECK(allocator != nullptr);
 8005f46:	4615      	mov	r5, r2
 8005f48:	2a00      	cmp	r2, #0
 8005f4a:	d05d      	beq.n	8006008 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xcc>
  TFLITE_DCHECK(builtin_data != nullptr);
 8005f4c:	461e      	mov	r6, r3
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d05a      	beq.n	8006008 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xcc>
 8005f52:	6813      	ldr	r3, [r2, #0]
 8005f54:	4604      	mov	r4, r0
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	2204      	movs	r2, #4
 8005f5a:	4628      	mov	r0, r5
 8005f5c:	2128      	movs	r1, #40	; 0x28
 8005f5e:	4798      	blx	r3
    return new (allocated_memory) T();
 8005f60:	2228      	movs	r2, #40	; 0x28
 8005f62:	2100      	movs	r1, #0
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 8005f64:	4605      	mov	r5, r0
    return new (allocated_memory) T();
 8005f66:	f011 fcc1 	bl	80178ec <memset>
    return data_ - ReadScalar<soffset_t>(data_);
 8005f6a:	6823      	ldr	r3, [r4, #0]
 8005f6c:	1ae3      	subs	r3, r4, r3
 8005f6e:	881a      	ldrh	r2, [r3, #0]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8005f70:	2a0a      	cmp	r2, #10
 8005f72:	d93f      	bls.n	8005ff4 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb8>
 8005f74:	8959      	ldrh	r1, [r3, #10]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8005f76:	2900      	cmp	r1, #0
 8005f78:	d03c      	beq.n	8005ff4 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb8>
    return builtin_options_type() == tflite::BuiltinOptions_Pool2DOptions ? static_cast<const tflite::Pool2DOptions *>(builtin_options()) : nullptr;
 8005f7a:	5c61      	ldrb	r1, [r4, r1]
 8005f7c:	2905      	cmp	r1, #5
 8005f7e:	d139      	bne.n	8005ff4 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb8>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8005f80:	2a0c      	cmp	r2, #12
 8005f82:	d937      	bls.n	8005ff4 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb8>
 8005f84:	899b      	ldrh	r3, [r3, #12]
    auto p = data_ + field_offset;
 8005f86:	18e2      	adds	r2, r4, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d033      	beq.n	8005ff4 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb8>
 8005f8c:	58e3      	ldr	r3, [r4, r3]
 8005f8e:	18d1      	adds	r1, r2, r3
    return data_ - ReadScalar<soffset_t>(data_);
 8005f90:	58d3      	ldr	r3, [r2, r3]
 8005f92:	1acb      	subs	r3, r1, r3
 8005f94:	881a      	ldrh	r2, [r3, #0]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8005f96:	2a04      	cmp	r2, #4
 8005f98:	d92f      	bls.n	8005ffa <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xbe>
 8005f9a:	8898      	ldrh	r0, [r3, #4]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8005f9c:	2800      	cmp	r0, #0
 8005f9e:	d031      	beq.n	8006004 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc8>
 8005fa0:	5608      	ldrsb	r0, [r1, r0]
  switch (padding) {
 8005fa2:	b378      	cbz	r0, 8006004 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc8>
 8005fa4:	f1a0 0001 	sub.w	r0, r0, #1
 8005fa8:	fab0 f080 	clz	r0, r0
 8005fac:	0940      	lsrs	r0, r0, #5
 8005fae:	0040      	lsls	r0, r0, #1
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8005fb0:	2a06      	cmp	r2, #6
  TF_LITE_ENSURE(error_reporter, params != nullptr);

  const Pool2DOptions* schema_params = op->builtin_options_as_Pool2DOptions();

  if (schema_params != nullptr) {
    params->padding = ConvertPadding(schema_params->padding());
 8005fb2:	7028      	strb	r0, [r5, #0]
 8005fb4:	d923      	bls.n	8005ffe <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc2>
 8005fb6:	88d8      	ldrh	r0, [r3, #6]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8005fb8:	b100      	cbz	r0, 8005fbc <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x80>
 8005fba:	5808      	ldr	r0, [r1, r0]
    params->stride_width = schema_params->stride_w();
 8005fbc:	6068      	str	r0, [r5, #4]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8005fbe:	2a08      	cmp	r2, #8
 8005fc0:	d91d      	bls.n	8005ffe <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc2>
 8005fc2:	8918      	ldrh	r0, [r3, #8]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8005fc4:	b100      	cbz	r0, 8005fc8 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x8c>
 8005fc6:	5808      	ldr	r0, [r1, r0]
    params->stride_height = schema_params->stride_h();
 8005fc8:	60a8      	str	r0, [r5, #8]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8005fca:	2a0a      	cmp	r2, #10
 8005fcc:	d917      	bls.n	8005ffe <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc2>
 8005fce:	8958      	ldrh	r0, [r3, #10]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8005fd0:	b100      	cbz	r0, 8005fd4 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x98>
 8005fd2:	5808      	ldr	r0, [r1, r0]
    params->filter_width = schema_params->filter_width();
 8005fd4:	60e8      	str	r0, [r5, #12]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8005fd6:	2a0c      	cmp	r2, #12
 8005fd8:	d911      	bls.n	8005ffe <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc2>
 8005fda:	8998      	ldrh	r0, [r3, #12]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8005fdc:	b100      	cbz	r0, 8005fe0 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa4>
 8005fde:	5808      	ldr	r0, [r1, r0]
    params->filter_height = schema_params->filter_height();
 8005fe0:	6128      	str	r0, [r5, #16]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8005fe2:	2a0e      	cmp	r2, #14
 8005fe4:	d90b      	bls.n	8005ffe <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc2>
 8005fe6:	89db      	ldrh	r3, [r3, #14]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8005fe8:	b14b      	cbz	r3, 8005ffe <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc2>
  switch (activation) {
 8005fea:	5ccb      	ldrb	r3, [r1, r3]
 8005fec:	1e5a      	subs	r2, r3, #1
 8005fee:	2a04      	cmp	r2, #4
 8005ff0:	d805      	bhi.n	8005ffe <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc2>
    params->activation =
 8005ff2:	752b      	strb	r3, [r5, #20]
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better understand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 8005ff4:	6035      	str	r5, [r6, #0]
  return kTfLiteOk;
}
 8005ff6:	2000      	movs	r0, #0
 8005ff8:	bd70      	pop	{r4, r5, r6, pc}
    params->padding = ConvertPadding(schema_params->padding());
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	702b      	strb	r3, [r5, #0]
 8005ffe:	2300      	movs	r3, #0
    params->activation =
 8006000:	752b      	strb	r3, [r5, #20]
 8006002:	e7f7      	b.n	8005ff4 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb8>
      return kTfLitePaddingSame;
 8006004:	2001      	movs	r0, #1
 8006006:	e7d3      	b.n	8005fb0 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x74>
  TFLITE_DCHECK(op != nullptr);
 8006008:	f010 fdb0 	bl	8016b6c <abort>

0800600c <_ZN6tflite13ParseQuantizeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
 800600c:	2000      	movs	r0, #0
 800600e:	4770      	bx	lr

08006010 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
  return kTfLiteOk;
}

TfLiteStatus ParseReshape(const Operator* op, ErrorReporter* error_reporter,
                          BuiltinDataAllocator* allocator,
                          void** builtin_data) {
 8006010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TFLITE_DCHECK(op != nullptr);
 8006014:	2800      	cmp	r0, #0
 8006016:	f000 8085 	beq.w	8006124 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x114>
  TFLITE_DCHECK(error_reporter != nullptr);
 800601a:	4688      	mov	r8, r1
 800601c:	2900      	cmp	r1, #0
 800601e:	f000 8081 	beq.w	8006124 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x114>
  TFLITE_DCHECK(allocator != nullptr);
 8006022:	4614      	mov	r4, r2
 8006024:	2a00      	cmp	r2, #0
 8006026:	d07d      	beq.n	8006124 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x114>
  TFLITE_DCHECK(builtin_data != nullptr);
 8006028:	461f      	mov	r7, r3
 800602a:	2b00      	cmp	r3, #0
 800602c:	d07a      	beq.n	8006124 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x114>
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 800602e:	6813      	ldr	r3, [r2, #0]
 8006030:	4605      	mov	r5, r0
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	2204      	movs	r2, #4
 8006036:	2124      	movs	r1, #36	; 0x24
 8006038:	4620      	mov	r0, r4
 800603a:	4798      	blx	r3
    return new (allocated_memory) T();
 800603c:	2224      	movs	r2, #36	; 0x24
 800603e:	2100      	movs	r1, #0
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 8006040:	4606      	mov	r6, r0
    return new (allocated_memory) T();
 8006042:	f011 fc53 	bl	80178ec <memset>
    return data_ - ReadScalar<soffset_t>(data_);
 8006046:	682a      	ldr	r2, [r5, #0]
 8006048:	1aaa      	subs	r2, r5, r2
 800604a:	8813      	ldrh	r3, [r2, #0]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 800604c:	2b0a      	cmp	r3, #10
 800604e:	d901      	bls.n	8006054 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x44>
 8006050:	8951      	ldrh	r1, [r2, #10]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8006052:	b919      	cbnz	r1, 800605c <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x4c>
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better understand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 8006054:	603e      	str	r6, [r7, #0]
  return kTfLiteOk;
 8006056:	2000      	movs	r0, #0
}
 8006058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  const tflite::CallOptions *builtin_options_as_CallOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_CallOptions ? static_cast<const tflite::CallOptions *>(builtin_options()) : nullptr;
  }
  const tflite::ReshapeOptions *builtin_options_as_ReshapeOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_ReshapeOptions ? static_cast<const tflite::ReshapeOptions *>(builtin_options()) : nullptr;
 800605c:	5c69      	ldrb	r1, [r5, r1]
 800605e:	2911      	cmp	r1, #17
 8006060:	d1f8      	bne.n	8006054 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x44>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8006062:	2b0c      	cmp	r3, #12
 8006064:	d9f6      	bls.n	8006054 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x44>
 8006066:	8993      	ldrh	r3, [r2, #12]
    auto p = data_ + field_offset;
 8006068:	18ea      	adds	r2, r5, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 800606a:	2b00      	cmp	r3, #0
 800606c:	d0f2      	beq.n	8006054 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x44>
 800606e:	58e9      	ldr	r1, [r5, r3]
    return data_ - ReadScalar<soffset_t>(data_);
 8006070:	5853      	ldr	r3, [r2, r1]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8006072:	440a      	add	r2, r1
    return data_ - ReadScalar<soffset_t>(data_);
 8006074:	1ad3      	subs	r3, r2, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8006076:	8819      	ldrh	r1, [r3, #0]
 8006078:	2904      	cmp	r1, #4
 800607a:	d9eb      	bls.n	8006054 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x44>
 800607c:	889b      	ldrh	r3, [r3, #4]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 800607e:	2b00      	cmp	r3, #0
 8006080:	d0e8      	beq.n	8006054 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x44>
 8006082:	58d1      	ldr	r1, [r2, r3]
    auto p = data_ + field_offset;
 8006084:	441a      	add	r2, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8006086:	1850      	adds	r0, r2, r1
      scalar_tag;

  static FLATBUFFERS_CONSTEXPR bool is_span_observable =
      scalar_tag::value && (FLATBUFFERS_LITTLEENDIAN || sizeof(T) == 1);

  SizeT size() const { return EndianScalar(length_); }
 8006088:	5853      	ldr	r3, [r2, r1]
    if (num_dimensions > max_size_of_buffer / sizeof(DataType)) {
 800608a:	2b08      	cmp	r3, #8
 800608c:	d837      	bhi.n	80060fe <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xee>
      for (size_t i = 0; i < num_dimensions; ++i) {
 800608e:	2b00      	cmp	r3, #0
 8006090:	d033      	beq.n	80060fa <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xea>
  typedef T return_type;
  typedef T mutable_return_type;
  static const size_t element_stride = sizeof(T);

  static return_type Read(const uint8_t *p, const size_t i) {
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 8006092:	6844      	ldr	r4, [r0, #4]
        buffer[i] = flat_vector->Get(i);
 8006094:	6034      	str	r4, [r6, #0]
      for (size_t i = 0; i < num_dimensions; ++i) {
 8006096:	2b01      	cmp	r3, #1
 8006098:	d02e      	beq.n	80060f8 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xe8>
  typedef typename IndirectHelper<T>::return_type return_type;
  typedef typename IndirectHelper<T>::mutable_return_type mutable_return_type;
  typedef return_type value_type;

  return_type Get(SizeT i) const {
    FLATBUFFERS_ASSERT(i < size());
 800609a:	5854      	ldr	r4, [r2, r1]
 800609c:	2c01      	cmp	r4, #1
 800609e:	d93b      	bls.n	8006118 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x108>
 80060a0:	6884      	ldr	r4, [r0, #8]
        buffer[i] = flat_vector->Get(i);
 80060a2:	6074      	str	r4, [r6, #4]
      for (size_t i = 0; i < num_dimensions; ++i) {
 80060a4:	2b02      	cmp	r3, #2
 80060a6:	d027      	beq.n	80060f8 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xe8>
 80060a8:	5854      	ldr	r4, [r2, r1]
 80060aa:	2c02      	cmp	r4, #2
 80060ac:	d934      	bls.n	8006118 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x108>
 80060ae:	68c4      	ldr	r4, [r0, #12]
        buffer[i] = flat_vector->Get(i);
 80060b0:	60b4      	str	r4, [r6, #8]
      for (size_t i = 0; i < num_dimensions; ++i) {
 80060b2:	2b03      	cmp	r3, #3
 80060b4:	d020      	beq.n	80060f8 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xe8>
 80060b6:	5854      	ldr	r4, [r2, r1]
 80060b8:	2c03      	cmp	r4, #3
 80060ba:	d92d      	bls.n	8006118 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x108>
 80060bc:	6904      	ldr	r4, [r0, #16]
        buffer[i] = flat_vector->Get(i);
 80060be:	60f4      	str	r4, [r6, #12]
      for (size_t i = 0; i < num_dimensions; ++i) {
 80060c0:	2b04      	cmp	r3, #4
 80060c2:	d019      	beq.n	80060f8 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xe8>
 80060c4:	5854      	ldr	r4, [r2, r1]
 80060c6:	2c04      	cmp	r4, #4
 80060c8:	d926      	bls.n	8006118 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x108>
 80060ca:	6944      	ldr	r4, [r0, #20]
        buffer[i] = flat_vector->Get(i);
 80060cc:	6134      	str	r4, [r6, #16]
      for (size_t i = 0; i < num_dimensions; ++i) {
 80060ce:	2b05      	cmp	r3, #5
 80060d0:	d012      	beq.n	80060f8 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xe8>
 80060d2:	5854      	ldr	r4, [r2, r1]
 80060d4:	2c05      	cmp	r4, #5
 80060d6:	d91f      	bls.n	8006118 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x108>
 80060d8:	6984      	ldr	r4, [r0, #24]
        buffer[i] = flat_vector->Get(i);
 80060da:	6174      	str	r4, [r6, #20]
      for (size_t i = 0; i < num_dimensions; ++i) {
 80060dc:	2b06      	cmp	r3, #6
 80060de:	d00b      	beq.n	80060f8 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xe8>
 80060e0:	5854      	ldr	r4, [r2, r1]
 80060e2:	2c06      	cmp	r4, #6
 80060e4:	d918      	bls.n	8006118 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x108>
 80060e6:	69c4      	ldr	r4, [r0, #28]
        buffer[i] = flat_vector->Get(i);
 80060e8:	61b4      	str	r4, [r6, #24]
      for (size_t i = 0; i < num_dimensions; ++i) {
 80060ea:	2b08      	cmp	r3, #8
 80060ec:	d104      	bne.n	80060f8 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xe8>
 80060ee:	5853      	ldr	r3, [r2, r1]
 80060f0:	2b07      	cmp	r3, #7
 80060f2:	d911      	bls.n	8006118 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x108>
 80060f4:	6a03      	ldr	r3, [r0, #32]
        buffer[i] = flat_vector->Get(i);
 80060f6:	61f3      	str	r3, [r6, #28]
  SizeT size() const { return EndianScalar(length_); }
 80060f8:	5853      	ldr	r3, [r2, r1]
      params->num_dimensions = new_shape->size();
 80060fa:	6233      	str	r3, [r6, #32]
 80060fc:	e7aa      	b.n	8006054 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x44>
      TF_LITE_REPORT_ERROR(
 80060fe:	4a0a      	ldr	r2, [pc, #40]	; (8006128 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x118>)
 8006100:	490a      	ldr	r1, [pc, #40]	; (800612c <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x11c>)
 8006102:	4640      	mov	r0, r8
 8006104:	f7ff fd88 	bl	8005c18 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    void operator()(void* data) { allocator_->Deallocate(data); }
 8006108:	6823      	ldr	r3, [r4, #0]
 800610a:	4620      	mov	r0, r4
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	4631      	mov	r1, r6
 8006110:	4798      	blx	r3
 8006112:	2001      	movs	r0, #1
}
 8006114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FLATBUFFERS_ASSERT(i < size());
 8006118:	4b05      	ldr	r3, [pc, #20]	; (8006130 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x120>)
 800611a:	4a06      	ldr	r2, [pc, #24]	; (8006134 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x124>)
 800611c:	4806      	ldr	r0, [pc, #24]	; (8006138 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x128>)
 800611e:	21b0      	movs	r1, #176	; 0xb0
 8006120:	f010 fd2c 	bl	8016b7c <__assert_func>
  TFLITE_DCHECK(op != nullptr);
 8006124:	f010 fd22 	bl	8016b6c <abort>
 8006128:	0806a04c 	.word	0x0806a04c
 800612c:	0806a054 	.word	0x0806a054
 8006130:	0806a098 	.word	0x0806a098
 8006134:	0806a0a4 	.word	0x0806a0a4
 8006138:	0806a168 	.word	0x0806a168

0800613c <TfLiteIntArrayGetSizeInBytes>:
namespace {

template <class T>
size_t TfLiteVarArrayGetSizeInBytes(const int size) {
  constexpr size_t data_size = sizeof(std::declval<T>().data[0]);
  size_t computed_size = sizeof(T) + data_size * size;
 800613c:	3001      	adds	r0, #1

extern "C" {

size_t TfLiteIntArrayGetSizeInBytes(int size) {
  return TfLiteVarArrayGetSizeInBytes<TfLiteIntArray>(size);
}
 800613e:	0080      	lsls	r0, r0, #2
 8006140:	4770      	bx	lr
 8006142:	bf00      	nop

08006144 <TfLiteTypeGetName>:
  return TfLiteTensorResizeMaybeCopy(num_bytes, tensor, true);
}
#endif  // TF_LITE_STATIC_MEMORY

const char* TfLiteTypeGetName(TfLiteType type) {
  switch (type) {
 8006144:	2812      	cmp	r0, #18
 8006146:	bf9a      	itte	ls
 8006148:	4b02      	ldrls	r3, [pc, #8]	; (8006154 <TfLiteTypeGetName+0x10>)
 800614a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
const char* TfLiteTypeGetName(TfLiteType type) {
 800614e:	4802      	ldrhi	r0, [pc, #8]	; (8006158 <TfLiteTypeGetName+0x14>)
      return "VARIANT";
    case kTfLiteInt4:
      return "INT4";
  }
  return "Unknown type";
}
 8006150:	4770      	bx	lr
 8006152:	bf00      	nop
 8006154:	0806a294 	.word	0x0806a294
 8006158:	0806a1e0 	.word	0x0806a1e0

0800615c <_ZN6tflite29MultiplyByQuantizedMultiplierElli>:
  return static_cast<int32_t>(result);
}
// Double-rounding MultiplyByQuantizedMultiplier
#else
int32_t MultiplyByQuantizedMultiplier(int32_t x, int32_t quantized_multiplier,
                                      int shift) {
 800615c:	b508      	push	{r3, lr}
  using gemmlowp::RoundingDivideByPOT;
  using gemmlowp::SaturatingRoundingDoublingHighMul;
  int left_shift = shift > 0 ? shift : 0;
  int right_shift = shift > 0 ? 0 : -shift;
 800615e:	2a00      	cmp	r2, #0
  int left_shift = shift > 0 ? shift : 0;
 8006160:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
 8006164:	fa00 f003 	lsl.w	r0, r0, r3
  int right_shift = shift > 0 ? 0 : -shift;
 8006168:	dd26      	ble.n	80061b8 <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x5c>
// This function implements the same computation as the ARMv7 NEON VQRDMULH
// instruction.
template <>
inline std::int32_t SaturatingRoundingDoublingHighMul(std::int32_t a,
                                                      std::int32_t b) {
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 800616a:	4281      	cmp	r1, r0
 800616c:	d01a      	beq.n	80061a4 <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x48>
 800616e:	2200      	movs	r2, #0
  std::int64_t a_64(a);
  std::int64_t b_64(b);
  std::int64_t ab_64 = a_64 * b_64;
 8006170:	fb80 3c01 	smull	r3, ip, r0, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 8006174:	f1bc 0f00 	cmp.w	ip, #0
 8006178:	db2a      	blt.n	80061d0 <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x74>
  std::int32_t ab_x2_high32 =
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 800617a:	f113 4080 	adds.w	r0, r3, #1073741824	; 0x40000000
 800617e:	f14c 0c00 	adc.w	ip, ip, #0
 8006182:	0fc0      	lsrs	r0, r0, #31
 8006184:	ea40 004c 	orr.w	r0, r0, ip, lsl #1
// Correctly-rounded-to-nearest division by a power-of-two.
// Also known as a rounding arithmetic right shift.
template <typename IntegerType>
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
  assert(exponent >= 0);
  assert(exponent <= 31);
 8006188:	2a1f      	cmp	r2, #31
 800618a:	dc3b      	bgt.n	8006204 <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0xa8>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
 800618c:	2301      	movs	r3, #1
 800618e:	4093      	lsls	r3, r2
 8006190:	3b01      	subs	r3, #1
  return a >> offset;
 8006192:	1059      	asrs	r1, r3, #1
  return a + b;
 8006194:	eb01 71d0 	add.w	r1, r1, r0, lsr #31
  return a & b;
 8006198:	4003      	ands	r3, r0
  return a >> offset;
 800619a:	4110      	asrs	r0, r2
  return a + b;
 800619c:	428b      	cmp	r3, r1
 800619e:	bfc8      	it	gt
 80061a0:	3001      	addgt	r0, #1
                                 x * (1 << left_shift), quantized_multiplier),
                             right_shift);
}
 80061a2:	bd08      	pop	{r3, pc}
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 80061a4:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
  std::int64_t ab_64 = a_64 * b_64;
 80061a8:	fb81 3c01 	smull	r3, ip, r1, r1
  int right_shift = shift > 0 ? 0 : -shift;
 80061ac:	f04f 0200 	mov.w	r2, #0
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 80061b0:	d124      	bne.n	80061fc <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0xa0>
 80061b2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 80061b6:	e7e9      	b.n	800618c <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x30>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 80061b8:	4288      	cmp	r0, r1
 80061ba:	f1c2 0200 	rsb	r2, r2, #0
 80061be:	d1d7      	bne.n	8006170 <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x14>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 80061c0:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
  std::int64_t ab_64 = a_64 * b_64;
 80061c4:	fb80 3c00 	smull	r3, ip, r0, r0
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 80061c8:	d118      	bne.n	80061fc <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0xa0>
 80061ca:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 80061ce:	e7db      	b.n	8006188 <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x2c>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 80061d0:	4910      	ldr	r1, [pc, #64]	; (8006214 <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0xb8>)
 80061d2:	f04f 30ff 	mov.w	r0, #4294967295
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 80061d6:	18cb      	adds	r3, r1, r3
 80061d8:	eb4c 0c00 	adc.w	ip, ip, r0
 80061dc:	f1bc 0f00 	cmp.w	ip, #0
 80061e0:	db03      	blt.n	80061ea <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x8e>
 80061e2:	0fd8      	lsrs	r0, r3, #31
 80061e4:	ea40 004c 	orr.w	r0, r0, ip, lsl #1
 80061e8:	e7ce      	b.n	8006188 <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x2c>
 80061ea:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80061ee:	185b      	adds	r3, r3, r1
 80061f0:	f14c 0c00 	adc.w	ip, ip, #0
 80061f4:	0fd8      	lsrs	r0, r3, #31
 80061f6:	ea40 004c 	orr.w	r0, r0, ip, lsl #1
 80061fa:	e7c5      	b.n	8006188 <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x2c>
 80061fc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006200:	2000      	movs	r0, #0
 8006202:	e7e8      	b.n	80061d6 <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x7a>
  assert(exponent <= 31);
 8006204:	4b04      	ldr	r3, [pc, #16]	; (8006218 <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0xbc>)
 8006206:	4a05      	ldr	r2, [pc, #20]	; (800621c <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0xc0>)
 8006208:	4805      	ldr	r0, [pc, #20]	; (8006220 <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0xc4>)
 800620a:	f240 1167 	movw	r1, #359	; 0x167
 800620e:	f010 fcb5 	bl	8016b7c <__assert_func>
 8006212:	bf00      	nop
 8006214:	c0000001 	.word	0xc0000001
 8006218:	0806a2e0 	.word	0x0806a2e0
 800621c:	0806a2f0 	.word	0x0806a2f0
 8006220:	0806a34c 	.word	0x0806a34c

08006224 <_ZN6tflite18QuantizeMultiplierEdPlPi>:
constexpr uint32_t kFractionRoundingMask = 0x003fffff;
constexpr uint32_t kFractionRoundingThreshold = 0x00200000;
}  // namespace

void QuantizeMultiplier(double double_multiplier, int32_t* quantized_multiplier,
                        int* shift) {
 8006224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006228:	ec57 6b10 	vmov	r6, r7, d0
 800622c:	4680      	mov	r8, r0
 800622e:	460d      	mov	r5, r1
#if TFLITE_SINGLE_ROUNDING
  // Single-rounding MultiplyByQuantizedMultiplier only supports positive
  // multipliers.
  // TFLITE_DCHECK(double_multiplier >= 0);
#endif
  if (double_multiplier == 0.) {
 8006230:	ee10 0a10 	vmov	r0, s0
 8006234:	2200      	movs	r2, #0
 8006236:	2300      	movs	r3, #0
 8006238:	4639      	mov	r1, r7
 800623a:	f7fa fc7d 	bl	8000b38 <__aeabi_dcmpeq>
 800623e:	b128      	cbz	r0, 800624c <_ZN6tflite18QuantizeMultiplierEdPlPi+0x28>
    *quantized_multiplier = 0;
 8006240:	2300      	movs	r3, #0
 8006242:	f8c8 3000 	str.w	r3, [r8]
    *shift = 0;
 8006246:	602b      	str	r3, [r5, #0]
    *shift = 30;
    q_fixed = (1LL << 31) - 1;
  }
#endif
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
}
 8006248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  const double q = std::frexp(double_multiplier, shift);
 800624c:	ec47 6b10 	vmov	d0, r6, r7
 8006250:	4604      	mov	r4, r0
 8006252:	4628      	mov	r0, r5
 8006254:	f010 fab2 	bl	80167bc <frexp>
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1LL << 31)));
 8006258:	4b13      	ldr	r3, [pc, #76]	; (80062a8 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x84>)
 800625a:	2200      	movs	r2, #0
  const double q = std::frexp(double_multiplier, shift);
 800625c:	ec51 0b10 	vmov	r0, r1, d0
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1LL << 31)));
 8006260:	f7fa fa02 	bl	8000668 <__aeabi_dmul>
  template <class T>                                  \
  inline T tf_name(const T x) {                       \
    return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  }

DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round)
 8006264:	ec41 0b10 	vmov	d0, r0, r1
 8006268:	f010 fb46 	bl	80168f8 <round>
 800626c:	ec51 0b10 	vmov	r0, r1, d0
 8006270:	f7fa fd8a 	bl	8000d88 <__aeabi_d2lz>
  TFLITE_CHECK(q_fixed <= (1LL << 31));
 8006274:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006278:	4282      	cmp	r2, r0
 800627a:	eb74 0601 	sbcs.w	r6, r4, r1
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1LL << 31)));
 800627e:	4603      	mov	r3, r0
  TFLITE_CHECK(q_fixed <= (1LL << 31));
 8006280:	db10      	blt.n	80062a4 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x80>
  if (q_fixed == (1LL << 31)) {
 8006282:	42a1      	cmp	r1, r4
 8006284:	bf08      	it	eq
 8006286:	4290      	cmpeq	r0, r2
    ++*shift;
 8006288:	682a      	ldr	r2, [r5, #0]
 800628a:	bf02      	ittt	eq
 800628c:	3201      	addeq	r2, #1
    q_fixed /= 2;
 800628e:	f04f 4380 	moveq.w	r3, #1073741824	; 0x40000000
    ++*shift;
 8006292:	602a      	streq	r2, [r5, #0]
  if (*shift < -31) {
 8006294:	321f      	adds	r2, #31
    *shift = 0;
 8006296:	bfbc      	itt	lt
 8006298:	2300      	movlt	r3, #0
 800629a:	602b      	strlt	r3, [r5, #0]
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
 800629c:	f8c8 3000 	str.w	r3, [r8]
}
 80062a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  TFLITE_CHECK(q_fixed <= (1LL << 31));
 80062a4:	f010 fc62 	bl	8016b6c <abort>
 80062a8:	41e00000 	.word	0x41e00000

080062ac <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>:

#include <vector>

namespace tflite {

RuntimeShape GetTensorShape(const TfLiteTensor* tensor) {
 80062ac:	b510      	push	{r4, lr}
 80062ae:	4604      	mov	r4, r0
  if (tensor == nullptr) {
 80062b0:	b159      	cbz	r1, 80062ca <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x1e>
    return RuntimeShape();
  }

  TfLiteIntArray* dims = tensor->dims;
  const int dims_size = dims->size;
 80062b2:	6949      	ldr	r1, [r1, #20]
 80062b4:	f851 2b04 	ldr.w	r2, [r1], #4
      SetDim(i, value);
    }
  }

  RuntimeShape(int dimensions_count, const int32_t* dims_data)
      : size_(dimensions_count) {
 80062b8:	6002      	str	r2, [r0, #0]
  int32_t* DimsData() { return dims_; }
  const int32_t* DimsData() const { return dims_; }
  const int32_t* DimsDataUpTo5D() const { return dims_; }

  void ReplaceWith(int dimensions_count, const int32_t* dims_data) {
    TFLITE_DCHECK_LE(dimensions_count, kMaxSmallSize);
 80062ba:	2a06      	cmp	r2, #6
 80062bc:	dc08      	bgt.n	80062d0 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x24>
    size_ = dimensions_count;
    int32_t* dst_dims = DimsData();
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
 80062be:	0092      	lsls	r2, r2, #2
 80062c0:	3004      	adds	r0, #4
 80062c2:	f011 fbf8 	bl	8017ab6 <memcpy>
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
  return RuntimeShape(dims_size, dims_data);
}
 80062c6:	4620      	mov	r0, r4
 80062c8:	bd10      	pop	{r4, pc}
  RuntimeShape() : size_(0) {}
 80062ca:	6001      	str	r1, [r0, #0]
 80062cc:	4620      	mov	r0, r4
 80062ce:	bd10      	pop	{r4, pc}
    TFLITE_DCHECK_LE(dimensions_count, kMaxSmallSize);
 80062d0:	f010 fc4c 	bl	8016b6c <abort>
 80062d4:	0000      	movs	r0, r0
	...

080062d8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>:
TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              const TfLiteTensor* bias,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 80062d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062dc:	ed2d 8b02 	vpush	{d8}
 80062e0:	b082      	sub	sp, #8
  const double input_product_scale = static_cast<double>(input->params.scale) *
 80062e2:	ed91 8a02 	vldr	s16, [r1, #8]
                                              double* multiplier) {
 80062e6:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
                                     static_cast<double>(filter->params.scale);
 80062ea:	edd2 8a02 	vldr	s17, [r2, #8]
                                              double* multiplier) {
 80062ee:	4605      	mov	r5, r0
  // The following conditions must be guaranteed by the training pipeline.
  if (bias) {
 80062f0:	b373      	cbz	r3, 8006350 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x78>
  const double input_product_scale = static_cast<double>(input->params.scale) *
 80062f2:	ee18 0a10 	vmov	r0, s16
 80062f6:	461c      	mov	r4, r3
 80062f8:	f7fa f95e 	bl	80005b8 <__aeabi_f2d>
 80062fc:	4606      	mov	r6, r0
                                     static_cast<double>(filter->params.scale);
 80062fe:	ee18 0a90 	vmov	r0, s17
  const double input_product_scale = static_cast<double>(input->params.scale) *
 8006302:	460f      	mov	r7, r1
                                     static_cast<double>(filter->params.scale);
 8006304:	f7fa f958 	bl	80005b8 <__aeabi_f2d>
 8006308:	4602      	mov	r2, r0
 800630a:	460b      	mov	r3, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
 800630c:	4630      	mov	r0, r6
 800630e:	4639      	mov	r1, r7
 8006310:	f7fa f9aa 	bl	8000668 <__aeabi_dmul>
 8006314:	4606      	mov	r6, r0
    const double bias_scale = static_cast<double>(bias->params.scale);
 8006316:	68a0      	ldr	r0, [r4, #8]
  const double input_product_scale = static_cast<double>(input->params.scale) *
 8006318:	460f      	mov	r7, r1
    const double bias_scale = static_cast<double>(bias->params.scale);
 800631a:	f7fa f94d 	bl	80005b8 <__aeabi_f2d>
 800631e:	4602      	mov	r2, r0
 8006320:	460b      	mov	r3, r1
    // bias * (bias_scale - input_product_scale) / output_scale should be
    // a small number for an integer.
    // Since normally bias should be within a small range.
    // We should expect (bias_scale - input_product_scale) / output_scale to
    // be a small number like 0.02.
    const double scale_diff = std::abs(input_product_scale - bias_scale);
 8006322:	4630      	mov	r0, r6
 8006324:	4639      	mov	r1, r7
 8006326:	f7f9 ffe7 	bl	80002f8 <__aeabi_dsub>
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
 800632a:	4606      	mov	r6, r0
    const double output_scale = static_cast<double>(output->params.scale);
 800632c:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8006330:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8006334:	f7fa f940 	bl	80005b8 <__aeabi_f2d>
 8006338:	4602      	mov	r2, r0
 800633a:	460b      	mov	r3, r1

    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
 800633c:	4630      	mov	r0, r6
 800633e:	4639      	mov	r1, r7
 8006340:	f7fa fabc 	bl	80008bc <__aeabi_ddiv>
 8006344:	a326      	add	r3, pc, #152	; (adr r3, 80063e0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x108>)
 8006346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800634a:	f7fa fc1d 	bl	8000b88 <__aeabi_dcmpgt>
 800634e:	bb08      	cbnz	r0, 8006394 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xbc>
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              TfLiteTensor* output,
                                              double* multiplier) {
  const double input_product_scale =
      static_cast<double>(input->params.scale * filter->params.scale);
 8006350:	ee28 8a28 	vmul.f32	s16, s16, s17
  TF_LITE_ENSURE(context, input_product_scale >= 0);
 8006354:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8006358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800635c:	d429      	bmi.n	80063b2 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xda>
  const double input_product_scale =
 800635e:	ee18 0a10 	vmov	r0, s16
 8006362:	f7fa f929 	bl	80005b8 <__aeabi_f2d>
 8006366:	4604      	mov	r4, r0
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
 8006368:	f8d8 0008 	ldr.w	r0, [r8, #8]
  const double input_product_scale =
 800636c:	460d      	mov	r5, r1
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
 800636e:	f7fa f923 	bl	80005b8 <__aeabi_f2d>
 8006372:	4602      	mov	r2, r0
 8006374:	460b      	mov	r3, r1
 8006376:	4620      	mov	r0, r4
 8006378:	4629      	mov	r1, r5
 800637a:	f7fa fa9f 	bl	80008bc <__aeabi_ddiv>
 800637e:	460b      	mov	r3, r1
 8006380:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006382:	4602      	mov	r2, r0

  return kTfLiteOk;
 8006384:	2000      	movs	r0, #0
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
 8006386:	e9c1 2300 	strd	r2, r3, [r1]
}
 800638a:	b002      	add	sp, #8
 800638c:	ecbd 8b02 	vpop	{d8}
 8006390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
 8006394:	4b0e      	ldr	r3, [pc, #56]	; (80063d0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xf8>)
 8006396:	696c      	ldr	r4, [r5, #20]
 8006398:	4a0e      	ldr	r2, [pc, #56]	; (80063d4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xfc>)
 800639a:	9300      	str	r3, [sp, #0]
 800639c:	4628      	mov	r0, r5
 800639e:	490e      	ldr	r1, [pc, #56]	; (80063d8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x100>)
 80063a0:	f240 1343 	movw	r3, #323	; 0x143
 80063a4:	47a0      	blx	r4
 80063a6:	2001      	movs	r0, #1
}
 80063a8:	b002      	add	sp, #8
 80063aa:	ecbd 8b02 	vpop	{d8}
 80063ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  TF_LITE_ENSURE(context, input_product_scale >= 0);
 80063b2:	4b0a      	ldr	r3, [pc, #40]	; (80063dc <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x104>)
 80063b4:	696c      	ldr	r4, [r5, #20]
 80063b6:	4a07      	ldr	r2, [pc, #28]	; (80063d4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xfc>)
 80063b8:	9300      	str	r3, [sp, #0]
 80063ba:	4628      	mov	r0, r5
 80063bc:	4906      	ldr	r1, [pc, #24]	; (80063d8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x100>)
 80063be:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80063c2:	47a0      	blx	r4
 80063c4:	2001      	movs	r0, #1
}
 80063c6:	b002      	add	sp, #8
 80063c8:	ecbd 8b02 	vpop	{d8}
 80063cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063d0:	0806a408 	.word	0x0806a408
 80063d4:	0806a3bc 	.word	0x0806a3bc
 80063d8:	0806a3f0 	.word	0x0806a3f0
 80063dc:	0806a42c 	.word	0x0806a42c
 80063e0:	47ae147b 	.word	0x47ae147b
 80063e4:	3f947ae1 	.word	0x3f947ae1

080063e8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
 80063e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  int32_t qmin = 0;
  int32_t qmax = 0;
  if (output->type == kTfLiteUInt8) {
 80063ec:	f892 c01c 	ldrb.w	ip, [r2, #28]
                                               int32_t* act_max) {
 80063f0:	ed2d 8b04 	vpush	{d8-d9}
  if (output->type == kTfLiteUInt8) {
 80063f4:	f1bc 0f03 	cmp.w	ip, #3
                                               int32_t* act_max) {
 80063f8:	b082      	sub	sp, #8
 80063fa:	4605      	mov	r5, r0
 80063fc:	461c      	mov	r4, r3
  if (output->type == kTfLiteUInt8) {
 80063fe:	d052      	beq.n	80064a6 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xbe>
    qmin = std::numeric_limits<uint8_t>::min();
    qmax = std::numeric_limits<uint8_t>::max();
  } else if (output->type == kTfLiteInt8) {
 8006400:	f1bc 0f09 	cmp.w	ip, #9
 8006404:	d026      	beq.n	8006454 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x6c>
    qmin = std::numeric_limits<int8_t>::min();
    qmax = std::numeric_limits<int8_t>::max();
  } else if (output->type == kTfLiteInt16) {
 8006406:	f1bc 0f07 	cmp.w	ip, #7
 800640a:	d115      	bne.n	8006438 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x50>
    qmin = std::numeric_limits<int16_t>::min();
 800640c:	4e61      	ldr	r6, [pc, #388]	; (8006594 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x1ac>)
    qmax = std::numeric_limits<int16_t>::max();
 800640e:	f647 77ff 	movw	r7, #32767	; 0x7fff
  if (activation == kTfLiteActRelu) {
 8006412:	2901      	cmp	r1, #1
 8006414:	ed92 8a02 	vldr	s16, [r2, #8]
 8006418:	f8d2 800c 	ldr.w	r8, [r2, #12]
 800641c:	d024      	beq.n	8006468 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x80>
  } else if (activation == kTfLiteActRelu6) {
 800641e:	2903      	cmp	r1, #3
 8006420:	d06b      	beq.n	80064fa <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x112>
  } else if (activation == kTfLiteActReluN1To1) {
 8006422:	2902      	cmp	r1, #2
 8006424:	d042      	beq.n	80064ac <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xc4>
    *act_max = qmax;
 8006426:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    *act_min = qmin;
 8006428:	6026      	str	r6, [r4, #0]
  return kTfLiteOk;
 800642a:	2000      	movs	r0, #0
    *act_max = qmax;
 800642c:	601f      	str	r7, [r3, #0]
    TF_LITE_ENSURE(context, false);
  }

  return CalculateActivationRangeQuantizedImpl(context, activation, qmin, qmax,
                                               output, act_min, act_max);
}
 800642e:	b002      	add	sp, #8
 8006430:	ecbd 8b04 	vpop	{d8-d9}
 8006434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    TF_LITE_ENSURE(context, false);
 8006438:	4b57      	ldr	r3, [pc, #348]	; (8006598 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x1b0>)
 800643a:	6944      	ldr	r4, [r0, #20]
 800643c:	4a57      	ldr	r2, [pc, #348]	; (800659c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x1b4>)
 800643e:	9300      	str	r3, [sp, #0]
 8006440:	4957      	ldr	r1, [pc, #348]	; (80065a0 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x1b8>)
 8006442:	f44f 73cb 	mov.w	r3, #406	; 0x196
 8006446:	47a0      	blx	r4
 8006448:	2001      	movs	r0, #1
}
 800644a:	b002      	add	sp, #8
 800644c:	ecbd 8b04 	vpop	{d8-d9}
 8006450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (activation == kTfLiteActRelu) {
 8006454:	2901      	cmp	r1, #1
 8006456:	ed92 8a02 	vldr	s16, [r2, #8]
 800645a:	f8d2 800c 	ldr.w	r8, [r2, #12]
    qmax = std::numeric_limits<int8_t>::max();
 800645e:	f04f 077f 	mov.w	r7, #127	; 0x7f
    qmin = std::numeric_limits<int8_t>::min();
 8006462:	f06f 067f 	mvn.w	r6, #127	; 0x7f
  if (activation == kTfLiteActRelu) {
 8006466:	d1da      	bne.n	800641e <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x36>
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 8006468:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 80065a4 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x1bc>
 800646c:	f010 fa8c 	bl	8016988 <roundf>
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
 8006470:	eddf 7a4d 	vldr	s15, [pc, #308]	; 80065a8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x1c0>
 8006474:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8006478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800647c:	db2e      	blt.n	80064dc <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xf4>
 800647e:	eddf 7a4b 	vldr	s15, [pc, #300]	; 80065ac <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x1c4>
 8006482:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8006486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800648a:	d827      	bhi.n	80064dc <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xf4>
  q = zero_point + static_cast<int32_t>(tmp);
 800648c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
  return kTfLiteOk;
 8006490:	2000      	movs	r0, #0
  q = zero_point + static_cast<int32_t>(tmp);
 8006492:	ee17 3a90 	vmov	r3, s15
 8006496:	4443      	add	r3, r8
    *act_min = std::max(qmin, tmp_q);
 8006498:	42b3      	cmp	r3, r6
 800649a:	bfb8      	it	lt
 800649c:	4633      	movlt	r3, r6
 800649e:	6023      	str	r3, [r4, #0]
    *act_max = qmax;
 80064a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80064a2:	601f      	str	r7, [r3, #0]
 80064a4:	e7d1      	b.n	800644a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x62>
    qmax = std::numeric_limits<uint8_t>::max();
 80064a6:	27ff      	movs	r7, #255	; 0xff
    qmin = std::numeric_limits<uint8_t>::min();
 80064a8:	2600      	movs	r6, #0
 80064aa:	e7b2      	b.n	8006412 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x2a>
  const float tmp = TfLiteRound(f / scale);
 80064ac:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 80064b0:	eec7 8a88 	vdiv.f32	s17, s15, s16
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
 80064b4:	ed9f 8a3c 	vldr	s16, [pc, #240]	; 80065a8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x1c0>
 80064b8:	eeb0 0a68 	vmov.f32	s0, s17
 80064bc:	f010 fa64 	bl	8016988 <roundf>
 80064c0:	eeb4 0ac8 	vcmpe.f32	s0, s16
 80064c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064c8:	eef0 7a40 	vmov.f32	s15, s0
 80064cc:	db06      	blt.n	80064dc <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xf4>
 80064ce:	ed9f 9a37 	vldr	s18, [pc, #220]	; 80065ac <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x1c4>
 80064d2:	eeb4 0ac9 	vcmpe.f32	s0, s18
 80064d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064da:	d947      	bls.n	800656c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x184>
  TF_LITE_ENSURE(context, no_integer_overflow_from_quantization);
 80064dc:	4b34      	ldr	r3, [pc, #208]	; (80065b0 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x1c8>)
 80064de:	696c      	ldr	r4, [r5, #20]
 80064e0:	4a2e      	ldr	r2, [pc, #184]	; (800659c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x1b4>)
 80064e2:	9300      	str	r3, [sp, #0]
 80064e4:	4628      	mov	r0, r5
 80064e6:	492e      	ldr	r1, [pc, #184]	; (80065a0 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x1b8>)
 80064e8:	f44f 73af 	mov.w	r3, #350	; 0x15e
 80064ec:	47a0      	blx	r4
 80064ee:	2001      	movs	r0, #1
}
 80064f0:	b002      	add	sp, #8
 80064f2:	ecbd 8b04 	vpop	{d8-d9}
 80064f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064fa:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 80065a4 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x1bc>
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
 80064fe:	eddf 8a2a 	vldr	s17, [pc, #168]	; 80065a8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x1c0>
 8006502:	f010 fa41 	bl	8016988 <roundf>
 8006506:	eeb4 0ae8 	vcmpe.f32	s0, s17
 800650a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800650e:	eef0 7a40 	vmov.f32	s15, s0
 8006512:	dbe3      	blt.n	80064dc <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xf4>
 8006514:	ed9f 9a25 	vldr	s18, [pc, #148]	; 80065ac <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x1c4>
 8006518:	eeb4 0ac9 	vcmpe.f32	s0, s18
 800651c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006520:	d8dc      	bhi.n	80064dc <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xf4>
  q = zero_point + static_cast<int32_t>(tmp);
 8006522:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  const float tmp = TfLiteRound(f / scale);
 8006526:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
  q = zero_point + static_cast<int32_t>(tmp);
 800652a:	ee17 3a90 	vmov	r3, s15
 800652e:	4443      	add	r3, r8
    *act_min = std::max(qmin, tmp_q);
 8006530:	42b3      	cmp	r3, r6
 8006532:	bfb8      	it	lt
 8006534:	4633      	movlt	r3, r6
 8006536:	ee80 0a08 	vdiv.f32	s0, s0, s16
 800653a:	6023      	str	r3, [r4, #0]
 800653c:	f010 fa24 	bl	8016988 <roundf>
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
 8006540:	eeb4 0ae8 	vcmpe.f32	s0, s17
 8006544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006548:	dbc8      	blt.n	80064dc <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xf4>
 800654a:	eeb4 0ac9 	vcmpe.f32	s0, s18
 800654e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006552:	d8c3      	bhi.n	80064dc <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xf4>
  q = zero_point + static_cast<int32_t>(tmp);
 8006554:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    *act_max = std::min(qmax, tmp_q);
 8006558:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  q = zero_point + static_cast<int32_t>(tmp);
 800655a:	ee17 3a90 	vmov	r3, s15
 800655e:	4443      	add	r3, r8
    *act_max = std::min(qmax, tmp_q);
 8006560:	42bb      	cmp	r3, r7
 8006562:	bfa8      	it	ge
 8006564:	463b      	movge	r3, r7
  return kTfLiteOk;
 8006566:	2000      	movs	r0, #0
    *act_max = std::min(qmax, tmp_q);
 8006568:	6013      	str	r3, [r2, #0]
 800656a:	e76e      	b.n	800644a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x62>
  q = zero_point + static_cast<int32_t>(tmp);
 800656c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006570:	eeb1 0a68 	vneg.f32	s0, s17
 8006574:	ee17 3a90 	vmov	r3, s15
 8006578:	4443      	add	r3, r8
    *act_min = std::max(qmin, tmp_q);
 800657a:	42b3      	cmp	r3, r6
 800657c:	bfb8      	it	lt
 800657e:	4633      	movlt	r3, r6
 8006580:	6023      	str	r3, [r4, #0]
 8006582:	f010 fa01 	bl	8016988 <roundf>
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
 8006586:	eeb4 0ac8 	vcmpe.f32	s0, s16
 800658a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800658e:	dadc      	bge.n	800654a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x162>
 8006590:	e7a4      	b.n	80064dc <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xf4>
 8006592:	bf00      	nop
 8006594:	ffff8000 	.word	0xffff8000
 8006598:	0806a448 	.word	0x0806a448
 800659c:	0806a3bc 	.word	0x0806a3bc
 80065a0:	0806a3f0 	.word	0x0806a3f0
 80065a4:	00000000 	.word	0x00000000
 80065a8:	cf000000 	.word	0xcf000000
 80065ac:	4f000000 	.word	0x4f000000
 80065b0:	0806a450 	.word	0x0806a450
 80065b4:	00000000 	.word	0x00000000

080065b8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i>:
    int num_channels) {
 80065b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065bc:	ed2d 8b04 	vpush	{d8-d9}
 80065c0:	b095      	sub	sp, #84	; 0x54
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
 80065c2:	780f      	ldrb	r7, [r1, #0]
    int num_channels) {
 80065c4:	9309      	str	r3, [sp, #36]	; 0x24
 80065c6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80065c8:	9305      	str	r3, [sp, #20]
 80065ca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80065cc:	9306      	str	r3, [sp, #24]
 80065ce:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80065d0:	930a      	str	r3, [sp, #40]	; 0x28
 80065d2:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80065d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80065d6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80065d8:	9307      	str	r3, [sp, #28]
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
 80065da:	2f01      	cmp	r7, #1
    int num_channels) {
 80065dc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80065de:	f8dd b0a8 	ldr.w	fp, [sp, #168]	; 0xa8
 80065e2:	9308      	str	r3, [sp, #32]
 80065e4:	4692      	mov	sl, r2
 80065e6:	4605      	mov	r5, r0
 80065e8:	e9dd 2628 	ldrd	r2, r6, [sp, #160]	; 0xa0
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
 80065ec:	d012      	beq.n	8006614 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x5c>
 80065ee:	4bac      	ldr	r3, [pc, #688]	; (80068a0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2e8>)
 80065f0:	9702      	str	r7, [sp, #8]
 80065f2:	6944      	ldr	r4, [r0, #20]
 80065f4:	9301      	str	r3, [sp, #4]
 80065f6:	2101      	movs	r1, #1
 80065f8:	4baa      	ldr	r3, [pc, #680]	; (80068a4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2ec>)
 80065fa:	9103      	str	r1, [sp, #12]
 80065fc:	9300      	str	r3, [sp, #0]
 80065fe:	460f      	mov	r7, r1
 8006600:	4aa9      	ldr	r2, [pc, #676]	; (80068a8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2f0>)
 8006602:	49aa      	ldr	r1, [pc, #680]	; (80068ac <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2f4>)
 8006604:	23de      	movs	r3, #222	; 0xde
 8006606:	47a0      	blx	r4
}
 8006608:	4638      	mov	r0, r7
 800660a:	b015      	add	sp, #84	; 0x54
 800660c:	ecbd 8b04 	vpop	{d8-d9}
 8006610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TF_LITE_ENSURE_EQ(context, filter->quantization.type,
 8006614:	f89a 3000 	ldrb.w	r3, [sl]
 8006618:	2b01      	cmp	r3, #1
 800661a:	d010      	beq.n	800663e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x86>
 800661c:	6944      	ldr	r4, [r0, #20]
 800661e:	4aa0      	ldr	r2, [pc, #640]	; (80068a0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2e8>)
 8006620:	9201      	str	r2, [sp, #4]
 8006622:	e9cd 3702 	strd	r3, r7, [sp, #8]
 8006626:	4ba2      	ldr	r3, [pc, #648]	; (80068b0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2f8>)
 8006628:	9300      	str	r3, [sp, #0]
 800662a:	4a9f      	ldr	r2, [pc, #636]	; (80068a8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2f0>)
 800662c:	499f      	ldr	r1, [pc, #636]	; (80068ac <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2f4>)
 800662e:	23e0      	movs	r3, #224	; 0xe0
 8006630:	47a0      	blx	r4
}
 8006632:	4638      	mov	r0, r7
 8006634:	b015      	add	sp, #84	; 0x54
 8006636:	ecbd 8b04 	vpop	{d8-d9}
 800663a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  const auto* affine_quantization =
 800663e:	f8da 3004 	ldr.w	r3, [sl, #4]
  TF_LITE_ENSURE(context, affine_quantization);
 8006642:	2b00      	cmp	r3, #0
 8006644:	f000 8108 	beq.w	8006858 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2a0>
  TF_LITE_ENSURE(context, affine_quantization->scale);
 8006648:	f8d3 9000 	ldr.w	r9, [r3]
 800664c:	f1b9 0f00 	cmp.w	r9, #0
 8006650:	f000 80ea 	beq.w	8006828 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x270>
 8006654:	460c      	mov	r4, r1
  const bool is_per_channel = affine_quantization->scale->size > 1;
 8006656:	f8d9 1000 	ldr.w	r1, [r9]
  if (is_per_channel) {
 800665a:	2901      	cmp	r1, #1
 800665c:	dd21      	ble.n	80066a2 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0xea>
    TF_LITE_ENSURE(context,
 800665e:	f894 c01c 	ldrb.w	ip, [r4, #28]
 8006662:	f1bc 0f09 	cmp.w	ip, #9
 8006666:	d00a      	beq.n	800667e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0xc6>
 8006668:	f1bc 0f07 	cmp.w	ip, #7
 800666c:	d007      	beq.n	800667e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0xc6>
 800666e:	4b91      	ldr	r3, [pc, #580]	; (80068b4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2fc>)
 8006670:	6944      	ldr	r4, [r0, #20]
 8006672:	4a8d      	ldr	r2, [pc, #564]	; (80068a8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2f0>)
 8006674:	9300      	str	r3, [sp, #0]
 8006676:	4990      	ldr	r1, [pc, #576]	; (80068b8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x300>)
 8006678:	23f0      	movs	r3, #240	; 0xf0
 800667a:	47a0      	blx	r4
 800667c:	e7c4      	b.n	8006608 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x50>
    TF_LITE_ENSURE(context,
 800667e:	f89a 001c 	ldrb.w	r0, [sl, #28]
 8006682:	2809      	cmp	r0, #9
 8006684:	f000 80d8 	beq.w	8006838 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x280>
 8006688:	2812      	cmp	r0, #18
 800668a:	f000 80d5 	beq.w	8006838 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x280>
 800668e:	4b8b      	ldr	r3, [pc, #556]	; (80068bc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x304>)
 8006690:	696c      	ldr	r4, [r5, #20]
 8006692:	4a85      	ldr	r2, [pc, #532]	; (80068a8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2f0>)
 8006694:	9300      	str	r3, [sp, #0]
 8006696:	4988      	ldr	r1, [pc, #544]	; (80068b8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x300>)
 8006698:	23f2      	movs	r3, #242	; 0xf2
 800669a:	4628      	mov	r0, r5
 800669c:	47a0      	blx	r4
 800669e:	2701      	movs	r7, #1
 80066a0:	e7b2      	b.n	8006608 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x50>
  const float input_scale = input->params.scale;
 80066a2:	edd4 7a02 	vldr	s15, [r4, #8]
  const float output_scale = output->params.scale;
 80066a6:	9b05      	ldr	r3, [sp, #20]
  const float input_scale = input->params.scale;
 80066a8:	edcd 7a0c 	vstr	s15, [sp, #48]	; 0x30
  for (int i = 0; i < num_channels; ++i) {
 80066ac:	f1bb 0f00 	cmp.w	fp, #0
  const float output_scale = output->params.scale;
 80066b0:	6898      	ldr	r0, [r3, #8]
  for (int i = 0; i < num_channels; ++i) {
 80066b2:	dd42      	ble.n	800673a <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x182>
 80066b4:	f1a2 0804 	sub.w	r8, r2, #4
                                          static_cast<double>(output_scale);
 80066b8:	f7f9 ff7e 	bl	80005b8 <__aeabi_f2d>
 80066bc:	4602      	mov	r2, r0
 80066be:	460b      	mov	r3, r1
 80066c0:	a812      	add	r0, sp, #72	; 0x48
 80066c2:	a913      	add	r1, sp, #76	; 0x4c
 80066c4:	910e      	str	r1, [sp, #56]	; 0x38
 80066c6:	900d      	str	r0, [sp, #52]	; 0x34
 80066c8:	497d      	ldr	r1, [pc, #500]	; (80068c0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x308>)
 80066ca:	2000      	movs	r0, #0
 80066cc:	f7fa f8f6 	bl	80008bc <__aeabi_ddiv>
 80066d0:	4602      	mov	r2, r0
 80066d2:	460b      	mov	r3, r1
    const double effective_output_scale = static_cast<double>(input_scale) *
 80066d4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80066d6:	ec43 2b18 	vmov	d8, r2, r3
 80066da:	f7f9 ff6d 	bl	80005b8 <__aeabi_f2d>
 80066de:	e9cd 540f 	strd	r5, r4, [sp, #60]	; 0x3c
 80066e2:	e9dd 450d 	ldrd	r4, r5, [sp, #52]	; 0x34
 80066e6:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 80066ea:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 80066ee:	ec41 0b19 	vmov	d9, r0, r1
 80066f2:	ec5b ab18 	vmov	sl, fp, d8
 80066f6:	3e04      	subs	r6, #4
 80066f8:	2700      	movs	r7, #0
    const double filter_scale = static_cast<double>(scale);
 80066fa:	f8d9 0004 	ldr.w	r0, [r9, #4]
 80066fe:	f7f9 ff5b 	bl	80005b8 <__aeabi_f2d>
    const double effective_output_scale = static_cast<double>(input_scale) *
 8006702:	ec53 2b19 	vmov	r2, r3, d9
 8006706:	f7f9 ffaf 	bl	8000668 <__aeabi_dmul>
 800670a:	465b      	mov	r3, fp
 800670c:	4652      	mov	r2, sl
 800670e:	f7f9 ffab 	bl	8000668 <__aeabi_dmul>
 8006712:	ec41 0b10 	vmov	d0, r0, r1
    QuantizeMultiplier(effective_output_scale, &significand, &channel_shift);
 8006716:	4629      	mov	r1, r5
 8006718:	4620      	mov	r0, r4
 800671a:	f7ff fd83 	bl	8006224 <_ZN6tflite18QuantizeMultiplierEdPlPi>
    per_channel_multiplier[i] = significand;
 800671e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006720:	f848 3f04 	str.w	r3, [r8, #4]!
    per_channel_shift[i] = channel_shift;
 8006724:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006726:	f846 3f04 	str.w	r3, [r6, #4]!
  for (int i = 0; i < num_channels; ++i) {
 800672a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800672c:	3701      	adds	r7, #1
 800672e:	42bb      	cmp	r3, r7
 8006730:	dce3      	bgt.n	80066fa <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x142>
 8006732:	e9dd 540f 	ldrd	r5, r4, [sp, #60]	; 0x3c
 8006736:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
  if (input->type == kTfLiteUInt8) {
 800673a:	7f23      	ldrb	r3, [r4, #28]
 800673c:	2b03      	cmp	r3, #3
 800673e:	d005      	beq.n	800674c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x194>
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
 8006740:	2b09      	cmp	r3, #9
 8006742:	d063      	beq.n	800680c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x254>
 8006744:	2b07      	cmp	r3, #7
 8006746:	d061      	beq.n	800680c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x254>
  return kTfLiteOk;
 8006748:	2700      	movs	r7, #0
 800674a:	e75d      	b.n	8006608 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x50>
  if (bias) {
 800674c:	9b09      	ldr	r3, [sp, #36]	; 0x24
                                     static_cast<double>(filter->params.scale);
 800674e:	edda 8a02 	vldr	s17, [sl, #8]
  const double input_product_scale = static_cast<double>(input->params.scale) *
 8006752:	ed94 8a02 	vldr	s16, [r4, #8]
  if (bias) {
 8006756:	b393      	cbz	r3, 80067be <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x206>
  const double input_product_scale = static_cast<double>(input->params.scale) *
 8006758:	ee18 0a10 	vmov	r0, s16
 800675c:	f7f9 ff2c 	bl	80005b8 <__aeabi_f2d>
 8006760:	4606      	mov	r6, r0
                                     static_cast<double>(filter->params.scale);
 8006762:	ee18 0a90 	vmov	r0, s17
  const double input_product_scale = static_cast<double>(input->params.scale) *
 8006766:	460f      	mov	r7, r1
                                     static_cast<double>(filter->params.scale);
 8006768:	f7f9 ff26 	bl	80005b8 <__aeabi_f2d>
 800676c:	4602      	mov	r2, r0
 800676e:	460b      	mov	r3, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
 8006770:	4630      	mov	r0, r6
 8006772:	4639      	mov	r1, r7
 8006774:	f7f9 ff78 	bl	8000668 <__aeabi_dmul>
    const double bias_scale = static_cast<double>(bias->params.scale);
 8006778:	9b09      	ldr	r3, [sp, #36]	; 0x24
  const double input_product_scale = static_cast<double>(input->params.scale) *
 800677a:	4606      	mov	r6, r0
    const double bias_scale = static_cast<double>(bias->params.scale);
 800677c:	6898      	ldr	r0, [r3, #8]
  const double input_product_scale = static_cast<double>(input->params.scale) *
 800677e:	460f      	mov	r7, r1
    const double bias_scale = static_cast<double>(bias->params.scale);
 8006780:	f7f9 ff1a 	bl	80005b8 <__aeabi_f2d>
 8006784:	4602      	mov	r2, r0
 8006786:	460b      	mov	r3, r1
    const double scale_diff = std::abs(input_product_scale - bias_scale);
 8006788:	4630      	mov	r0, r6
 800678a:	4639      	mov	r1, r7
 800678c:	f7f9 fdb4 	bl	80002f8 <__aeabi_dsub>
 8006790:	460b      	mov	r3, r1
    const double output_scale = static_cast<double>(output->params.scale);
 8006792:	9905      	ldr	r1, [sp, #20]
    const double scale_diff = std::abs(input_product_scale - bias_scale);
 8006794:	4602      	mov	r2, r0
    const double output_scale = static_cast<double>(output->params.scale);
 8006796:	6888      	ldr	r0, [r1, #8]
 8006798:	4616      	mov	r6, r2
 800679a:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
 800679e:	f7f9 ff0b 	bl	80005b8 <__aeabi_f2d>
 80067a2:	4602      	mov	r2, r0
 80067a4:	460b      	mov	r3, r1
    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
 80067a6:	4630      	mov	r0, r6
 80067a8:	4639      	mov	r1, r7
 80067aa:	f7fa f887 	bl	80008bc <__aeabi_ddiv>
 80067ae:	a33a      	add	r3, pc, #232	; (adr r3, 8006898 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2e0>)
 80067b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067b4:	f7fa f9e8 	bl	8000b88 <__aeabi_dcmpgt>
 80067b8:	2800      	cmp	r0, #0
 80067ba:	f040 80da 	bne.w	8006972 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x3ba>
      static_cast<double>(input->params.scale * filter->params.scale);
 80067be:	ee28 8a28 	vmul.f32	s16, s16, s17
  TF_LITE_ENSURE(context, input_product_scale >= 0);
 80067c2:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80067c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067ca:	f100 80dd 	bmi.w	8006988 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x3d0>
  const double input_product_scale =
 80067ce:	ee18 0a10 	vmov	r0, s16
 80067d2:	f7f9 fef1 	bl	80005b8 <__aeabi_f2d>
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
 80067d6:	9b05      	ldr	r3, [sp, #20]
  const double input_product_scale =
 80067d8:	4606      	mov	r6, r0
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
 80067da:	6898      	ldr	r0, [r3, #8]
  const double input_product_scale =
 80067dc:	460f      	mov	r7, r1
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
 80067de:	f7f9 feeb 	bl	80005b8 <__aeabi_f2d>
 80067e2:	4602      	mov	r2, r0
 80067e4:	460b      	mov	r3, r1
 80067e6:	4630      	mov	r0, r6
 80067e8:	4639      	mov	r1, r7
 80067ea:	f7fa f867 	bl	80008bc <__aeabi_ddiv>
 80067ee:	ec41 0b10 	vmov	d0, r0, r1
    QuantizeMultiplier(real_multiplier, multiplier, &exponent);
 80067f2:	a913      	add	r1, sp, #76	; 0x4c
 80067f4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80067f6:	f7ff fd15 	bl	8006224 <_ZN6tflite18QuantizeMultiplierEdPlPi>
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
 80067fa:	7f23      	ldrb	r3, [r4, #28]
    *shift = -exponent;
 80067fc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80067fe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006800:	4252      	negs	r2, r2
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
 8006802:	2b09      	cmp	r3, #9
    *shift = -exponent;
 8006804:	600a      	str	r2, [r1, #0]
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
 8006806:	d001      	beq.n	800680c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x254>
 8006808:	2b03      	cmp	r3, #3
 800680a:	d19b      	bne.n	8006744 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x18c>
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
 800680c:	9b06      	ldr	r3, [sp, #24]
 800680e:	9a05      	ldr	r2, [sp, #20]
 8006810:	7819      	ldrb	r1, [r3, #0]
 8006812:	9b08      	ldr	r3, [sp, #32]
 8006814:	9322      	str	r3, [sp, #136]	; 0x88
 8006816:	9b07      	ldr	r3, [sp, #28]
 8006818:	4628      	mov	r0, r5
}
 800681a:	b015      	add	sp, #84	; 0x54
 800681c:	ecbd 8b04 	vpop	{d8-d9}
 8006820:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
 8006824:	f7ff bde0 	b.w	80063e8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
  TF_LITE_ENSURE(context, affine_quantization->scale);
 8006828:	4b26      	ldr	r3, [pc, #152]	; (80068c4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x30c>)
 800682a:	6944      	ldr	r4, [r0, #20]
 800682c:	4a1e      	ldr	r2, [pc, #120]	; (80068a8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2f0>)
 800682e:	9300      	str	r3, [sp, #0]
 8006830:	4921      	ldr	r1, [pc, #132]	; (80068b8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x300>)
 8006832:	23ec      	movs	r3, #236	; 0xec
 8006834:	47a0      	blx	r4
 8006836:	e6e7      	b.n	8006608 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x50>
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size, num_channels);
 8006838:	458b      	cmp	fp, r1
 800683a:	d015      	beq.n	8006868 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2b0>
 800683c:	e9cd 1b02 	strd	r1, fp, [sp, #8]
 8006840:	4a21      	ldr	r2, [pc, #132]	; (80068c8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x310>)
 8006842:	4b22      	ldr	r3, [pc, #136]	; (80068cc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x314>)
 8006844:	696c      	ldr	r4, [r5, #20]
 8006846:	4919      	ldr	r1, [pc, #100]	; (80068ac <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2f4>)
 8006848:	e9cd 3200 	strd	r3, r2, [sp]
 800684c:	4628      	mov	r0, r5
 800684e:	4a16      	ldr	r2, [pc, #88]	; (80068a8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2f0>)
 8006850:	23f4      	movs	r3, #244	; 0xf4
 8006852:	47a0      	blx	r4
 8006854:	2701      	movs	r7, #1
 8006856:	e6d7      	b.n	8006608 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x50>
  TF_LITE_ENSURE(context, affine_quantization);
 8006858:	4b1d      	ldr	r3, [pc, #116]	; (80068d0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x318>)
 800685a:	6944      	ldr	r4, [r0, #20]
 800685c:	4a12      	ldr	r2, [pc, #72]	; (80068a8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2f0>)
 800685e:	9300      	str	r3, [sp, #0]
 8006860:	4915      	ldr	r1, [pc, #84]	; (80068b8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x300>)
 8006862:	23eb      	movs	r3, #235	; 0xeb
 8006864:	47a0      	blx	r4
 8006866:	e6cf      	b.n	8006608 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x50>
    TF_LITE_ENSURE_EQ(
 8006868:	6899      	ldr	r1, [r3, #8]
 800686a:	f8da 3014 	ldr.w	r3, [sl, #20]
 800686e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	459b      	cmp	fp, r3
 8006876:	d02f      	beq.n	80068d8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x320>
 8006878:	e9cd b302 	strd	fp, r3, [sp, #8]
 800687c:	4915      	ldr	r1, [pc, #84]	; (80068d4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x31c>)
 800687e:	4a12      	ldr	r2, [pc, #72]	; (80068c8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x310>)
 8006880:	696c      	ldr	r4, [r5, #20]
 8006882:	23f5      	movs	r3, #245	; 0xf5
 8006884:	e9cd 2100 	strd	r2, r1, [sp]
 8006888:	4628      	mov	r0, r5
 800688a:	4a07      	ldr	r2, [pc, #28]	; (80068a8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2f0>)
 800688c:	4907      	ldr	r1, [pc, #28]	; (80068ac <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2f4>)
 800688e:	47a0      	blx	r4
 8006890:	2701      	movs	r7, #1
 8006892:	e6b9      	b.n	8006608 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x50>
 8006894:	f3af 8000 	nop.w
 8006898:	47ae147b 	.word	0x47ae147b
 800689c:	3f947ae1 	.word	0x3f947ae1
 80068a0:	0806a494 	.word	0x0806a494
 80068a4:	0806a4b0 	.word	0x0806a4b0
 80068a8:	0806a3bc 	.word	0x0806a3bc
 80068ac:	0806a478 	.word	0x0806a478
 80068b0:	0806a4cc 	.word	0x0806a4cc
 80068b4:	0806a518 	.word	0x0806a518
 80068b8:	0806a3f0 	.word	0x0806a3f0
 80068bc:	0806a554 	.word	0x0806a554
 80068c0:	3ff00000 	.word	0x3ff00000
 80068c4:	0806a4fc 	.word	0x0806a4fc
 80068c8:	0806a590 	.word	0x0806a590
 80068cc:	0806a5a0 	.word	0x0806a5a0
 80068d0:	0806a4e8 	.word	0x0806a4e8
 80068d4:	0806a5c4 	.word	0x0806a5c4
                                          static_cast<double>(output_scale);
 80068d8:	9905      	ldr	r1, [sp, #20]
  const float* filter_scales = affine_quantization->scale->data;
 80068da:	f109 0304 	add.w	r3, r9, #4
 80068de:	3a04      	subs	r2, #4
                                          static_cast<double>(output_scale);
 80068e0:	6888      	ldr	r0, [r1, #8]
  const float* filter_scales = affine_quantization->scale->data;
 80068e2:	930f      	str	r3, [sp, #60]	; 0x3c
 80068e4:	920c      	str	r2, [sp, #48]	; 0x30
                                          static_cast<double>(output_scale);
 80068e6:	f7f9 fe67 	bl	80005b8 <__aeabi_f2d>
 80068ea:	4602      	mov	r2, r0
 80068ec:	460b      	mov	r3, r1
 80068ee:	a812      	add	r0, sp, #72	; 0x48
 80068f0:	a913      	add	r1, sp, #76	; 0x4c
 80068f2:	910e      	str	r1, [sp, #56]	; 0x38
 80068f4:	900d      	str	r0, [sp, #52]	; 0x34
 80068f6:	4929      	ldr	r1, [pc, #164]	; (800699c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x3e4>)
 80068f8:	2000      	movs	r0, #0
 80068fa:	f7f9 ffdf 	bl	80008bc <__aeabi_ddiv>
 80068fe:	ec41 0b18 	vmov	d8, r0, r1
    const double effective_output_scale = static_cast<double>(input_scale) *
 8006902:	68a0      	ldr	r0, [r4, #8]
 8006904:	f7f9 fe58 	bl	80005b8 <__aeabi_f2d>
 8006908:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800690c:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 8006910:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8006914:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8006918:	e9cd 540f 	strd	r5, r4, [sp, #60]	; 0x3c
 800691c:	e9dd ba0d 	ldrd	fp, sl, [sp, #52]	; 0x34
 8006920:	ec41 0b19 	vmov	d9, r0, r1
 8006924:	3e04      	subs	r6, #4
 8006926:	2700      	movs	r7, #0
 8006928:	ec53 2b19 	vmov	r2, r3, d9
 800692c:	ec51 0b18 	vmov	r0, r1, d8
 8006930:	f7f9 fe9a 	bl	8000668 <__aeabi_dmul>
    const float scale = is_per_channel ? filter_scales[i] : filter_scales[0];
 8006934:	f859 5b04 	ldr.w	r5, [r9], #4
    const double effective_output_scale = static_cast<double>(input_scale) *
 8006938:	4602      	mov	r2, r0
    const double filter_scale = static_cast<double>(scale);
 800693a:	4628      	mov	r0, r5
    const double effective_output_scale = static_cast<double>(input_scale) *
 800693c:	4614      	mov	r4, r2
 800693e:	460d      	mov	r5, r1
    const double filter_scale = static_cast<double>(scale);
 8006940:	f7f9 fe3a 	bl	80005b8 <__aeabi_f2d>
 8006944:	460b      	mov	r3, r1
 8006946:	4602      	mov	r2, r0
    const double effective_output_scale = static_cast<double>(input_scale) *
 8006948:	4629      	mov	r1, r5
 800694a:	4620      	mov	r0, r4
 800694c:	f7f9 fe8c 	bl	8000668 <__aeabi_dmul>
 8006950:	ec41 0b10 	vmov	d0, r0, r1
    QuantizeMultiplier(effective_output_scale, &significand, &channel_shift);
 8006954:	4651      	mov	r1, sl
 8006956:	4658      	mov	r0, fp
 8006958:	f7ff fc64 	bl	8006224 <_ZN6tflite18QuantizeMultiplierEdPlPi>
    per_channel_multiplier[i] = significand;
 800695c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800695e:	f848 3f04 	str.w	r3, [r8, #4]!
    per_channel_shift[i] = channel_shift;
 8006962:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006964:	f846 3f04 	str.w	r3, [r6, #4]!
  for (int i = 0; i < num_channels; ++i) {
 8006968:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800696a:	3701      	adds	r7, #1
 800696c:	42bb      	cmp	r3, r7
 800696e:	dcdb      	bgt.n	8006928 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x370>
 8006970:	e6df      	b.n	8006732 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x17a>
    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
 8006972:	4b0b      	ldr	r3, [pc, #44]	; (80069a0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x3e8>)
 8006974:	696c      	ldr	r4, [r5, #20]
 8006976:	4a0b      	ldr	r2, [pc, #44]	; (80069a4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x3ec>)
 8006978:	9300      	str	r3, [sp, #0]
 800697a:	490b      	ldr	r1, [pc, #44]	; (80069a8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x3f0>)
 800697c:	f240 1343 	movw	r3, #323	; 0x143
 8006980:	4628      	mov	r0, r5
 8006982:	47a0      	blx	r4
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 8006984:	2701      	movs	r7, #1
 8006986:	e63f      	b.n	8006608 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x50>
  TF_LITE_ENSURE(context, input_product_scale >= 0);
 8006988:	4b08      	ldr	r3, [pc, #32]	; (80069ac <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x3f4>)
 800698a:	696c      	ldr	r4, [r5, #20]
 800698c:	4a05      	ldr	r2, [pc, #20]	; (80069a4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x3ec>)
 800698e:	9300      	str	r3, [sp, #0]
 8006990:	4905      	ldr	r1, [pc, #20]	; (80069a8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x3f0>)
 8006992:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8006996:	4628      	mov	r0, r5
 8006998:	47a0      	blx	r4
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 800699a:	e7f3      	b.n	8006984 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x3cc>
 800699c:	3ff00000 	.word	0x3ff00000
 80069a0:	0806a408 	.word	0x0806a408
 80069a4:	0806a3bc 	.word	0x0806a3bc
 80069a8:	0806a3f0 	.word	0x0806a3f0
 80069ac:	0806a42c 	.word	0x0806a42c

080069b0 <_ZN6tflite26SingleArenaBufferAllocatorD0Ev>:
      sizeof(SingleArenaBufferAllocator), alignof(SingleArenaBufferAllocator));
  // Use the default copy constructor to populate internal states.
  return new (allocator_buffer) SingleArenaBufferAllocator(tmp);
}

SingleArenaBufferAllocator::~SingleArenaBufferAllocator() {}
 80069b0:	4770      	bx	lr
 80069b2:	bf00      	nop

080069b4 <_ZN6tflite26SingleArenaBufferAllocator14DeallocateTempEPh>:
  return aligned_result;
}

void SingleArenaBufferAllocator::DeallocateTemp(uint8_t* temp_buf) {
  temp_buffer_ptr_check_sum_ ^= (reinterpret_cast<intptr_t>(temp_buf));
  temp_buffer_count_--;
 80069b4:	e9d0 2307 	ldrd	r2, r3, [r0, #28]
  temp_buffer_ptr_check_sum_ ^= (reinterpret_cast<intptr_t>(temp_buf));
 80069b8:	4051      	eors	r1, r2
  temp_buffer_count_--;
 80069ba:	3b01      	subs	r3, #1
 80069bc:	e9c0 1307 	strd	r1, r3, [r0, #28]
}
 80069c0:	4770      	bx	lr
 80069c2:	bf00      	nop

080069c4 <_ZNK6tflite26SingleArenaBufferAllocator23GetOverlayMemoryAddressEv>:
  return kTfLiteOk;
}

uint8_t* SingleArenaBufferAllocator::GetOverlayMemoryAddress() const {
  return buffer_head_;
}
 80069c4:	6880      	ldr	r0, [r0, #8]
 80069c6:	4770      	bx	lr

080069c8 <_ZNK6tflite26SingleArenaBufferAllocator25GetNonPersistentUsedBytesEv>:

size_t SingleArenaBufferAllocator::GetNonPersistentUsedBytes() const {
  return std::max(head_ - buffer_head_, temp_ - buffer_head_);
 80069c8:	6903      	ldr	r3, [r0, #16]
 80069ca:	6982      	ldr	r2, [r0, #24]
 80069cc:	6880      	ldr	r0, [r0, #8]
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	bf34      	ite	cc
 80069d2:	1a10      	subcc	r0, r2, r0
 80069d4:	1a18      	subcs	r0, r3, r0
}
 80069d6:	4770      	bx	lr

080069d8 <_ZNK6tflite26SingleArenaBufferAllocator22GetPersistentUsedBytesEv>:

size_t SingleArenaBufferAllocator::GetPersistentUsedBytes() const {
  return buffer_tail_ - tail_;
 80069d8:	68c2      	ldr	r2, [r0, #12]
 80069da:	6940      	ldr	r0, [r0, #20]
}
 80069dc:	1a10      	subs	r0, r2, r0
 80069de:	4770      	bx	lr

080069e0 <_ZN6tflite26SingleArenaBufferAllocator12AllocateTempEjj>:
                                                  size_t alignment) {
 80069e0:	b538      	push	{r3, r4, r5, lr}
 80069e2:	4604      	mov	r4, r0
 80069e4:	460d      	mov	r5, r1
  uint8_t* const aligned_result = AlignPointerUp(temp_, alignment);
 80069e6:	6980      	ldr	r0, [r0, #24]
 80069e8:	4611      	mov	r1, r2
 80069ea:	f000 f9e5 	bl	8006db8 <_ZN6tflite14AlignPointerUpEPhj>
  const size_t available_memory = tail_ - aligned_result;
 80069ee:	6962      	ldr	r2, [r4, #20]
 80069f0:	1a12      	subs	r2, r2, r0
  if (available_memory < size) {
 80069f2:	42aa      	cmp	r2, r5
 80069f4:	d308      	bcc.n	8006a08 <_ZN6tflite26SingleArenaBufferAllocator12AllocateTempEjj+0x28>
  temp_buffer_count_++;
 80069f6:	e9d4 2307 	ldrd	r2, r3, [r4, #28]
  temp_ = aligned_result + size;
 80069fa:	4405      	add	r5, r0
  temp_buffer_ptr_check_sum_ ^= (reinterpret_cast<intptr_t>(aligned_result));
 80069fc:	4042      	eors	r2, r0
  temp_buffer_count_++;
 80069fe:	3301      	adds	r3, #1
  temp_buffer_ptr_check_sum_ ^= (reinterpret_cast<intptr_t>(aligned_result));
 8006a00:	e9c4 5206 	strd	r5, r2, [r4, #24]
  temp_buffer_count_++;
 8006a04:	6223      	str	r3, [r4, #32]
}
 8006a06:	bd38      	pop	{r3, r4, r5, pc}
    MicroPrintf(
 8006a08:	4803      	ldr	r0, [pc, #12]	; (8006a18 <_ZN6tflite26SingleArenaBufferAllocator12AllocateTempEjj+0x38>)
 8006a0a:	1aab      	subs	r3, r5, r2
 8006a0c:	4629      	mov	r1, r5
 8006a0e:	f002 fee5 	bl	80097dc <_Z11MicroPrintfPKcz>
    return nullptr;
 8006a12:	2000      	movs	r0, #0
}
 8006a14:	bd38      	pop	{r3, r4, r5, pc}
 8006a16:	bf00      	nop
 8006a18:	0806a604 	.word	0x0806a604

08006a1c <_ZN6tflite26SingleArenaBufferAllocator20IsAllTempDeallocatedEv>:
  if (temp_buffer_count_ != 0 || temp_buffer_ptr_check_sum_ != 0) {
 8006a1c:	e9d0 2107 	ldrd	r2, r1, [r0, #28]
 8006a20:	b911      	cbnz	r1, 8006a28 <_ZN6tflite26SingleArenaBufferAllocator20IsAllTempDeallocatedEv+0xc>
 8006a22:	b90a      	cbnz	r2, 8006a28 <_ZN6tflite26SingleArenaBufferAllocator20IsAllTempDeallocatedEv+0xc>
  return true;
 8006a24:	2001      	movs	r0, #1
}
 8006a26:	4770      	bx	lr
bool SingleArenaBufferAllocator::IsAllTempDeallocated() {
 8006a28:	b508      	push	{r3, lr}
    MicroPrintf(
 8006a2a:	fab2 f282 	clz	r2, r2
 8006a2e:	4803      	ldr	r0, [pc, #12]	; (8006a3c <_ZN6tflite26SingleArenaBufferAllocator20IsAllTempDeallocatedEv+0x20>)
 8006a30:	0952      	lsrs	r2, r2, #5
 8006a32:	f002 fed3 	bl	80097dc <_Z11MicroPrintfPKcz>
    return false;
 8006a36:	2000      	movs	r0, #0
}
 8006a38:	bd08      	pop	{r3, pc}
 8006a3a:	bf00      	nop
 8006a3c:	0806a650 	.word	0x0806a650

08006a40 <_ZN6tflite26SingleArenaBufferAllocator24AllocatePersistentBufferEjj>:
    size_t size, size_t alignment) {
 8006a40:	b538      	push	{r3, r4, r5, lr}
 8006a42:	4604      	mov	r4, r0
  uint8_t* const aligned_result = AlignPointerDown(tail_ - size, alignment);
 8006a44:	6940      	ldr	r0, [r0, #20]
    size_t size, size_t alignment) {
 8006a46:	460d      	mov	r5, r1
  uint8_t* const aligned_result = AlignPointerDown(tail_ - size, alignment);
 8006a48:	1b40      	subs	r0, r0, r5
 8006a4a:	4611      	mov	r1, r2
 8006a4c:	f000 f9bc 	bl	8006dc8 <_ZN6tflite16AlignPointerDownEPhj>
  if (aligned_result < head_) {
 8006a50:	6923      	ldr	r3, [r4, #16]
 8006a52:	4283      	cmp	r3, r0
  tail_ = aligned_result;
 8006a54:	bf98      	it	ls
 8006a56:	6160      	strls	r0, [r4, #20]
  if (aligned_result < head_) {
 8006a58:	d800      	bhi.n	8006a5c <_ZN6tflite26SingleArenaBufferAllocator24AllocatePersistentBufferEjj+0x1c>
}
 8006a5a:	bd38      	pop	{r3, r4, r5, pc}
    const size_t missing_memory = head_ - aligned_result;
 8006a5c:	1a1b      	subs	r3, r3, r0
    MicroPrintf(
 8006a5e:	1aea      	subs	r2, r5, r3
 8006a60:	4802      	ldr	r0, [pc, #8]	; (8006a6c <_ZN6tflite26SingleArenaBufferAllocator24AllocatePersistentBufferEjj+0x2c>)
 8006a62:	4629      	mov	r1, r5
 8006a64:	f002 feba 	bl	80097dc <_Z11MicroPrintfPKcz>
    return nullptr;
 8006a68:	2000      	movs	r0, #0
}
 8006a6a:	bd38      	pop	{r3, r4, r5, pc}
 8006a6c:	0806a694 	.word	0x0806a694

08006a70 <_ZNK6tflite26SingleArenaBufferAllocator18GetAvailableMemoryEj>:

size_t SingleArenaBufferAllocator::GetAvailableMemory(size_t alignment) const {
 8006a70:	b538      	push	{r3, r4, r5, lr}
 8006a72:	4604      	mov	r4, r0
  uint8_t* const aligned_temp = AlignPointerUp(temp_, alignment);
 8006a74:	6980      	ldr	r0, [r0, #24]
size_t SingleArenaBufferAllocator::GetAvailableMemory(size_t alignment) const {
 8006a76:	460d      	mov	r5, r1
  uint8_t* const aligned_temp = AlignPointerUp(temp_, alignment);
 8006a78:	f000 f99e 	bl	8006db8 <_ZN6tflite14AlignPointerUpEPhj>
  uint8_t* const aligned_tail = AlignPointerDown(tail_, alignment);
 8006a7c:	4629      	mov	r1, r5
  uint8_t* const aligned_temp = AlignPointerUp(temp_, alignment);
 8006a7e:	4603      	mov	r3, r0
  uint8_t* const aligned_tail = AlignPointerDown(tail_, alignment);
 8006a80:	6960      	ldr	r0, [r4, #20]
  uint8_t* const aligned_temp = AlignPointerUp(temp_, alignment);
 8006a82:	461c      	mov	r4, r3
  uint8_t* const aligned_tail = AlignPointerDown(tail_, alignment);
 8006a84:	f000 f9a0 	bl	8006dc8 <_ZN6tflite16AlignPointerDownEPhj>
  return aligned_tail - aligned_temp;
}
 8006a88:	1b00      	subs	r0, r0, r4
 8006a8a:	bd38      	pop	{r3, r4, r5, pc}

08006a8c <_ZN6tflite26SingleArenaBufferAllocator12ResizeBufferEPhjj>:
                                                      size_t alignment) {
 8006a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a8e:	4604      	mov	r4, r0
 8006a90:	460e      	mov	r6, r1
  uint8_t* expect_resizable_buf = AlignPointerUp(buffer_head_, alignment);
 8006a92:	6880      	ldr	r0, [r0, #8]
 8006a94:	4619      	mov	r1, r3
                                                      size_t alignment) {
 8006a96:	461d      	mov	r5, r3
 8006a98:	4617      	mov	r7, r2
  uint8_t* expect_resizable_buf = AlignPointerUp(buffer_head_, alignment);
 8006a9a:	f000 f98d 	bl	8006db8 <_ZN6tflite14AlignPointerUpEPhj>
  if (head_ != temp_ || resizable_buf != expect_resizable_buf) {
 8006a9e:	69a3      	ldr	r3, [r4, #24]
 8006aa0:	6922      	ldr	r2, [r4, #16]
 8006aa2:	429a      	cmp	r2, r3
 8006aa4:	d101      	bne.n	8006aaa <_ZN6tflite26SingleArenaBufferAllocator12ResizeBufferEPhjj+0x1e>
 8006aa6:	42b0      	cmp	r0, r6
 8006aa8:	d004      	beq.n	8006ab4 <_ZN6tflite26SingleArenaBufferAllocator12ResizeBufferEPhjj+0x28>
    MicroPrintf(
 8006aaa:	480c      	ldr	r0, [pc, #48]	; (8006adc <_ZN6tflite26SingleArenaBufferAllocator12ResizeBufferEPhjj+0x50>)
 8006aac:	f002 fe96 	bl	80097dc <_Z11MicroPrintfPKcz>
    return kTfLiteError;
 8006ab0:	2001      	movs	r0, #1
}
 8006ab2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  uint8_t* const aligned_result = AlignPointerUp(buffer_head_, alignment);
 8006ab4:	68a0      	ldr	r0, [r4, #8]
 8006ab6:	4629      	mov	r1, r5
 8006ab8:	f000 f97e 	bl	8006db8 <_ZN6tflite14AlignPointerUpEPhj>
  const size_t available_memory = tail_ - aligned_result;
 8006abc:	6962      	ldr	r2, [r4, #20]
 8006abe:	1a12      	subs	r2, r2, r0
  if (available_memory < size) {
 8006ac0:	4297      	cmp	r7, r2
 8006ac2:	d804      	bhi.n	8006ace <_ZN6tflite26SingleArenaBufferAllocator12ResizeBufferEPhjj+0x42>
  head_ = aligned_result + size;
 8006ac4:	4438      	add	r0, r7
 8006ac6:	6120      	str	r0, [r4, #16]
  temp_ = head_;
 8006ac8:	61a0      	str	r0, [r4, #24]
  return kTfLiteOk;
 8006aca:	2000      	movs	r0, #0
}
 8006acc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    MicroPrintf(
 8006ace:	4804      	ldr	r0, [pc, #16]	; (8006ae0 <_ZN6tflite26SingleArenaBufferAllocator12ResizeBufferEPhjj+0x54>)
 8006ad0:	1abb      	subs	r3, r7, r2
 8006ad2:	4639      	mov	r1, r7
 8006ad4:	f002 fe82 	bl	80097dc <_Z11MicroPrintfPKcz>
    return kTfLiteError;
 8006ad8:	2001      	movs	r0, #1
}
 8006ada:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006adc:	0806a6e0 	.word	0x0806a6e0
 8006ae0:	0806a750 	.word	0x0806a750

08006ae4 <_ZThn4_N6tflite26SingleArenaBufferAllocatorD1Ev>:
 8006ae4:	3804      	subs	r0, #4
 8006ae6:	4770      	bx	lr

08006ae8 <_ZThn4_N6tflite26SingleArenaBufferAllocatorD0Ev>:
 8006ae8:	3804      	subs	r0, #4
 8006aea:	4770      	bx	lr

08006aec <_ZThn4_NK6tflite26SingleArenaBufferAllocator22GetPersistentUsedBytesEv>:
 8006aec:	6882      	ldr	r2, [r0, #8]
 8006aee:	6900      	ldr	r0, [r0, #16]
 8006af0:	1a10      	subs	r0, r2, r0
 8006af2:	4770      	bx	lr

08006af4 <_ZN6tflite26SingleArenaBufferAllocator20ResetTempAllocationsEv>:
  if (!IsAllTempDeallocated()) {
 8006af4:	6803      	ldr	r3, [r0, #0]
 8006af6:	4a10      	ldr	r2, [pc, #64]	; (8006b38 <_ZN6tflite26SingleArenaBufferAllocator20ResetTempAllocationsEv+0x44>)
 8006af8:	691b      	ldr	r3, [r3, #16]
 8006afa:	4293      	cmp	r3, r2
TfLiteStatus SingleArenaBufferAllocator::ResetTempAllocations() {
 8006afc:	b510      	push	{r4, lr}
 8006afe:	4604      	mov	r4, r0
 8006b00:	d112      	bne.n	8006b28 <_ZN6tflite26SingleArenaBufferAllocator20ResetTempAllocationsEv+0x34>
  if (temp_buffer_count_ != 0 || temp_buffer_ptr_check_sum_ != 0) {
 8006b02:	e9d0 2107 	ldrd	r2, r1, [r0, #28]
 8006b06:	b921      	cbnz	r1, 8006b12 <_ZN6tflite26SingleArenaBufferAllocator20ResetTempAllocationsEv+0x1e>
 8006b08:	b91a      	cbnz	r2, 8006b12 <_ZN6tflite26SingleArenaBufferAllocator20ResetTempAllocationsEv+0x1e>
  temp_ = head_;
 8006b0a:	6923      	ldr	r3, [r4, #16]
 8006b0c:	61a3      	str	r3, [r4, #24]
  return kTfLiteOk;
 8006b0e:	2000      	movs	r0, #0
}
 8006b10:	bd10      	pop	{r4, pc}
    MicroPrintf(
 8006b12:	fab2 f282 	clz	r2, r2
 8006b16:	4809      	ldr	r0, [pc, #36]	; (8006b3c <_ZN6tflite26SingleArenaBufferAllocator20ResetTempAllocationsEv+0x48>)
 8006b18:	0952      	lsrs	r2, r2, #5
 8006b1a:	f002 fe5f 	bl	80097dc <_Z11MicroPrintfPKcz>
    MicroPrintf(
 8006b1e:	4808      	ldr	r0, [pc, #32]	; (8006b40 <_ZN6tflite26SingleArenaBufferAllocator20ResetTempAllocationsEv+0x4c>)
 8006b20:	f002 fe5c 	bl	80097dc <_Z11MicroPrintfPKcz>
    return kTfLiteError;
 8006b24:	2001      	movs	r0, #1
}
 8006b26:	bd10      	pop	{r4, pc}
  if (!IsAllTempDeallocated()) {
 8006b28:	4798      	blx	r3
 8006b2a:	2800      	cmp	r0, #0
 8006b2c:	d0f7      	beq.n	8006b1e <_ZN6tflite26SingleArenaBufferAllocator20ResetTempAllocationsEv+0x2a>
  temp_ = head_;
 8006b2e:	6923      	ldr	r3, [r4, #16]
 8006b30:	61a3      	str	r3, [r4, #24]
  return kTfLiteOk;
 8006b32:	2000      	movs	r0, #0
 8006b34:	e7ec      	b.n	8006b10 <_ZN6tflite26SingleArenaBufferAllocator20ResetTempAllocationsEv+0x1c>
 8006b36:	bf00      	nop
 8006b38:	08006a1d 	.word	0x08006a1d
 8006b3c:	0806a650 	.word	0x0806a650
 8006b40:	0806a794 	.word	0x0806a794

08006b44 <_ZThn4_N6tflite26SingleArenaBufferAllocator24AllocatePersistentBufferEjj>:
 8006b44:	b538      	push	{r3, r4, r5, lr}
 8006b46:	4604      	mov	r4, r0
 8006b48:	6900      	ldr	r0, [r0, #16]
 8006b4a:	460d      	mov	r5, r1
 8006b4c:	1b40      	subs	r0, r0, r5
 8006b4e:	4611      	mov	r1, r2
 8006b50:	f000 f93a 	bl	8006dc8 <_ZN6tflite16AlignPointerDownEPhj>
 8006b54:	68e3      	ldr	r3, [r4, #12]
 8006b56:	4298      	cmp	r0, r3
 8006b58:	bf28      	it	cs
 8006b5a:	6120      	strcs	r0, [r4, #16]
 8006b5c:	d300      	bcc.n	8006b60 <_ZThn4_N6tflite26SingleArenaBufferAllocator24AllocatePersistentBufferEjj+0x1c>
 8006b5e:	bd38      	pop	{r3, r4, r5, pc}
 8006b60:	1a1b      	subs	r3, r3, r0
 8006b62:	1aea      	subs	r2, r5, r3
 8006b64:	4802      	ldr	r0, [pc, #8]	; (8006b70 <_ZThn4_N6tflite26SingleArenaBufferAllocator24AllocatePersistentBufferEjj+0x2c>)
 8006b66:	4629      	mov	r1, r5
 8006b68:	f002 fe38 	bl	80097dc <_Z11MicroPrintfPKcz>
 8006b6c:	2000      	movs	r0, #0
 8006b6e:	bd38      	pop	{r3, r4, r5, pc}
 8006b70:	0806a694 	.word	0x0806a694

08006b74 <_ZN6tflite26SingleArenaBufferAllocator25DeallocateResizableBufferEPh>:
  return ResizeBuffer(resizable_buf, 0, 1);
 8006b74:	6803      	ldr	r3, [r0, #0]
    uint8_t* resizable_buf) {
 8006b76:	b570      	push	{r4, r5, r6, lr}
  return ResizeBuffer(resizable_buf, 0, 1);
 8006b78:	69dd      	ldr	r5, [r3, #28]
 8006b7a:	4b11      	ldr	r3, [pc, #68]	; (8006bc0 <_ZN6tflite26SingleArenaBufferAllocator25DeallocateResizableBufferEPh+0x4c>)
 8006b7c:	429d      	cmp	r5, r3
 8006b7e:	d110      	bne.n	8006ba2 <_ZN6tflite26SingleArenaBufferAllocator25DeallocateResizableBufferEPh+0x2e>
  uint8_t* expect_resizable_buf = AlignPointerUp(buffer_head_, alignment);
 8006b80:	4604      	mov	r4, r0
 8006b82:	460e      	mov	r6, r1
 8006b84:	6880      	ldr	r0, [r0, #8]
 8006b86:	2101      	movs	r1, #1
 8006b88:	f000 f916 	bl	8006db8 <_ZN6tflite14AlignPointerUpEPhj>
  if (head_ != temp_ || resizable_buf != expect_resizable_buf) {
 8006b8c:	6922      	ldr	r2, [r4, #16]
 8006b8e:	69a3      	ldr	r3, [r4, #24]
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d101      	bne.n	8006b98 <_ZN6tflite26SingleArenaBufferAllocator25DeallocateResizableBufferEPh+0x24>
 8006b94:	4286      	cmp	r6, r0
 8006b96:	d00a      	beq.n	8006bae <_ZN6tflite26SingleArenaBufferAllocator25DeallocateResizableBufferEPh+0x3a>
    MicroPrintf(
 8006b98:	480a      	ldr	r0, [pc, #40]	; (8006bc4 <_ZN6tflite26SingleArenaBufferAllocator25DeallocateResizableBufferEPh+0x50>)
 8006b9a:	f002 fe1f 	bl	80097dc <_Z11MicroPrintfPKcz>
    return kTfLiteError;
 8006b9e:	2001      	movs	r0, #1
}
 8006ba0:	bd70      	pop	{r4, r5, r6, pc}
  return ResizeBuffer(resizable_buf, 0, 1);
 8006ba2:	46ac      	mov	ip, r5
 8006ba4:	2301      	movs	r3, #1
}
 8006ba6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return ResizeBuffer(resizable_buf, 0, 1);
 8006baa:	2200      	movs	r2, #0
 8006bac:	4760      	bx	ip
  uint8_t* const aligned_result = AlignPointerUp(buffer_head_, alignment);
 8006bae:	68a0      	ldr	r0, [r4, #8]
 8006bb0:	2101      	movs	r1, #1
 8006bb2:	f000 f901 	bl	8006db8 <_ZN6tflite14AlignPointerUpEPhj>
  head_ = aligned_result + size;
 8006bb6:	6120      	str	r0, [r4, #16]
  temp_ = head_;
 8006bb8:	61a0      	str	r0, [r4, #24]
 8006bba:	2000      	movs	r0, #0
}
 8006bbc:	bd70      	pop	{r4, r5, r6, pc}
 8006bbe:	bf00      	nop
 8006bc0:	08006a8d 	.word	0x08006a8d
 8006bc4:	0806a6e0 	.word	0x0806a6e0

08006bc8 <_ZN6tflite26SingleArenaBufferAllocator33ReserveNonPersistentOverlayMemoryEjj>:
    size_t size, size_t alignment) {
 8006bc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bcc:	4604      	mov	r4, r0
 8006bce:	460f      	mov	r7, r1
  uint8_t* expect_resizable_buf = AlignPointerUp(buffer_head_, alignment);
 8006bd0:	6880      	ldr	r0, [r0, #8]
 8006bd2:	4611      	mov	r1, r2
    size_t size, size_t alignment) {
 8006bd4:	4615      	mov	r5, r2
  uint8_t* expect_resizable_buf = AlignPointerUp(buffer_head_, alignment);
 8006bd6:	f000 f8ef 	bl	8006db8 <_ZN6tflite14AlignPointerUpEPhj>
  return ResizeBuffer(expect_resizable_buf, size, alignment);
 8006bda:	6823      	ldr	r3, [r4, #0]
 8006bdc:	f8d3 e01c 	ldr.w	lr, [r3, #28]
 8006be0:	4b18      	ldr	r3, [pc, #96]	; (8006c44 <_ZN6tflite26SingleArenaBufferAllocator33ReserveNonPersistentOverlayMemoryEjj+0x7c>)
 8006be2:	459e      	cmp	lr, r3
  uint8_t* expect_resizable_buf = AlignPointerUp(buffer_head_, alignment);
 8006be4:	4606      	mov	r6, r0
  return ResizeBuffer(expect_resizable_buf, size, alignment);
 8006be6:	d10f      	bne.n	8006c08 <_ZN6tflite26SingleArenaBufferAllocator33ReserveNonPersistentOverlayMemoryEjj+0x40>
  uint8_t* expect_resizable_buf = AlignPointerUp(buffer_head_, alignment);
 8006be8:	68a0      	ldr	r0, [r4, #8]
 8006bea:	4629      	mov	r1, r5
 8006bec:	f000 f8e4 	bl	8006db8 <_ZN6tflite14AlignPointerUpEPhj>
  if (head_ != temp_ || resizable_buf != expect_resizable_buf) {
 8006bf0:	6922      	ldr	r2, [r4, #16]
 8006bf2:	69a3      	ldr	r3, [r4, #24]
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d101      	bne.n	8006bfc <_ZN6tflite26SingleArenaBufferAllocator33ReserveNonPersistentOverlayMemoryEjj+0x34>
 8006bf8:	4286      	cmp	r6, r0
 8006bfa:	d00d      	beq.n	8006c18 <_ZN6tflite26SingleArenaBufferAllocator33ReserveNonPersistentOverlayMemoryEjj+0x50>
    MicroPrintf(
 8006bfc:	4812      	ldr	r0, [pc, #72]	; (8006c48 <_ZN6tflite26SingleArenaBufferAllocator33ReserveNonPersistentOverlayMemoryEjj+0x80>)
 8006bfe:	f002 fded 	bl	80097dc <_Z11MicroPrintfPKcz>
    return kTfLiteError;
 8006c02:	2001      	movs	r0, #1
}
 8006c04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return ResizeBuffer(expect_resizable_buf, size, alignment);
 8006c08:	462b      	mov	r3, r5
 8006c0a:	463a      	mov	r2, r7
 8006c0c:	4601      	mov	r1, r0
 8006c0e:	46f4      	mov	ip, lr
 8006c10:	4620      	mov	r0, r4
}
 8006c12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return ResizeBuffer(expect_resizable_buf, size, alignment);
 8006c16:	4760      	bx	ip
  uint8_t* const aligned_result = AlignPointerUp(buffer_head_, alignment);
 8006c18:	68a0      	ldr	r0, [r4, #8]
 8006c1a:	4629      	mov	r1, r5
 8006c1c:	f000 f8cc 	bl	8006db8 <_ZN6tflite14AlignPointerUpEPhj>
  const size_t available_memory = tail_ - aligned_result;
 8006c20:	6962      	ldr	r2, [r4, #20]
 8006c22:	1a12      	subs	r2, r2, r0
  if (available_memory < size) {
 8006c24:	4297      	cmp	r7, r2
 8006c26:	d805      	bhi.n	8006c34 <_ZN6tflite26SingleArenaBufferAllocator33ReserveNonPersistentOverlayMemoryEjj+0x6c>
  head_ = aligned_result + size;
 8006c28:	4438      	add	r0, r7
 8006c2a:	6120      	str	r0, [r4, #16]
  temp_ = head_;
 8006c2c:	61a0      	str	r0, [r4, #24]
  return kTfLiteOk;
 8006c2e:	2000      	movs	r0, #0
}
 8006c30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MicroPrintf(
 8006c34:	4805      	ldr	r0, [pc, #20]	; (8006c4c <_ZN6tflite26SingleArenaBufferAllocator33ReserveNonPersistentOverlayMemoryEjj+0x84>)
 8006c36:	1abb      	subs	r3, r7, r2
 8006c38:	4639      	mov	r1, r7
 8006c3a:	f002 fdcf 	bl	80097dc <_Z11MicroPrintfPKcz>
    return kTfLiteError;
 8006c3e:	2001      	movs	r0, #1
 8006c40:	e7e0      	b.n	8006c04 <_ZN6tflite26SingleArenaBufferAllocator33ReserveNonPersistentOverlayMemoryEjj+0x3c>
 8006c42:	bf00      	nop
 8006c44:	08006a8d 	.word	0x08006a8d
 8006c48:	0806a6e0 	.word	0x0806a6e0
 8006c4c:	0806a750 	.word	0x0806a750

08006c50 <_ZN6tflite26SingleArenaBufferAllocator23AllocateResizableBufferEjj>:
                                                             size_t alignment) {
 8006c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c54:	4604      	mov	r4, r0
 8006c56:	460f      	mov	r7, r1
  uint8_t* expect_resizable_buf = AlignPointerUp(buffer_head_, alignment);
 8006c58:	6880      	ldr	r0, [r0, #8]
 8006c5a:	4611      	mov	r1, r2
                                                             size_t alignment) {
 8006c5c:	4616      	mov	r6, r2
  uint8_t* expect_resizable_buf = AlignPointerUp(buffer_head_, alignment);
 8006c5e:	f000 f8ab 	bl	8006db8 <_ZN6tflite14AlignPointerUpEPhj>
  if (ResizeBuffer(expect_resizable_buf, size, alignment) == kTfLiteOk) {
 8006c62:	6823      	ldr	r3, [r4, #0]
 8006c64:	f8d3 801c 	ldr.w	r8, [r3, #28]
 8006c68:	4b1a      	ldr	r3, [pc, #104]	; (8006cd4 <_ZN6tflite26SingleArenaBufferAllocator23AllocateResizableBufferEjj+0x84>)
 8006c6a:	4598      	cmp	r8, r3
  uint8_t* expect_resizable_buf = AlignPointerUp(buffer_head_, alignment);
 8006c6c:	4605      	mov	r5, r0
  if (ResizeBuffer(expect_resizable_buf, size, alignment) == kTfLiteOk) {
 8006c6e:	d110      	bne.n	8006c92 <_ZN6tflite26SingleArenaBufferAllocator23AllocateResizableBufferEjj+0x42>
  uint8_t* expect_resizable_buf = AlignPointerUp(buffer_head_, alignment);
 8006c70:	68a0      	ldr	r0, [r4, #8]
 8006c72:	4631      	mov	r1, r6
 8006c74:	f000 f8a0 	bl	8006db8 <_ZN6tflite14AlignPointerUpEPhj>
  if (head_ != temp_ || resizable_buf != expect_resizable_buf) {
 8006c78:	6922      	ldr	r2, [r4, #16]
 8006c7a:	69a3      	ldr	r3, [r4, #24]
 8006c7c:	429a      	cmp	r2, r3
 8006c7e:	d101      	bne.n	8006c84 <_ZN6tflite26SingleArenaBufferAllocator23AllocateResizableBufferEjj+0x34>
 8006c80:	4285      	cmp	r5, r0
 8006c82:	d011      	beq.n	8006ca8 <_ZN6tflite26SingleArenaBufferAllocator23AllocateResizableBufferEjj+0x58>
    MicroPrintf(
 8006c84:	4814      	ldr	r0, [pc, #80]	; (8006cd8 <_ZN6tflite26SingleArenaBufferAllocator23AllocateResizableBufferEjj+0x88>)
 8006c86:	f002 fda9 	bl	80097dc <_Z11MicroPrintfPKcz>
  return nullptr;
 8006c8a:	2500      	movs	r5, #0
}
 8006c8c:	4628      	mov	r0, r5
 8006c8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (ResizeBuffer(expect_resizable_buf, size, alignment) == kTfLiteOk) {
 8006c92:	4629      	mov	r1, r5
 8006c94:	4633      	mov	r3, r6
 8006c96:	463a      	mov	r2, r7
 8006c98:	4620      	mov	r0, r4
 8006c9a:	47c0      	blx	r8
  return nullptr;
 8006c9c:	2800      	cmp	r0, #0
 8006c9e:	bf18      	it	ne
 8006ca0:	2500      	movne	r5, #0
}
 8006ca2:	4628      	mov	r0, r5
 8006ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint8_t* const aligned_result = AlignPointerUp(buffer_head_, alignment);
 8006ca8:	68a0      	ldr	r0, [r4, #8]
 8006caa:	4631      	mov	r1, r6
 8006cac:	f000 f884 	bl	8006db8 <_ZN6tflite14AlignPointerUpEPhj>
  const size_t available_memory = tail_ - aligned_result;
 8006cb0:	6962      	ldr	r2, [r4, #20]
 8006cb2:	1a12      	subs	r2, r2, r0
  if (available_memory < size) {
 8006cb4:	4297      	cmp	r7, r2
 8006cb6:	d805      	bhi.n	8006cc4 <_ZN6tflite26SingleArenaBufferAllocator23AllocateResizableBufferEjj+0x74>
  head_ = aligned_result + size;
 8006cb8:	4438      	add	r0, r7
 8006cba:	6120      	str	r0, [r4, #16]
  temp_ = head_;
 8006cbc:	61a0      	str	r0, [r4, #24]
}
 8006cbe:	4628      	mov	r0, r5
 8006cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MicroPrintf(
 8006cc4:	4805      	ldr	r0, [pc, #20]	; (8006cdc <_ZN6tflite26SingleArenaBufferAllocator23AllocateResizableBufferEjj+0x8c>)
 8006cc6:	1abb      	subs	r3, r7, r2
 8006cc8:	4639      	mov	r1, r7
 8006cca:	f002 fd87 	bl	80097dc <_Z11MicroPrintfPKcz>
  return nullptr;
 8006cce:	2500      	movs	r5, #0
 8006cd0:	e7dc      	b.n	8006c8c <_ZN6tflite26SingleArenaBufferAllocator23AllocateResizableBufferEjj+0x3c>
 8006cd2:	bf00      	nop
 8006cd4:	08006a8d 	.word	0x08006a8d
 8006cd8:	0806a6e0 	.word	0x0806a6e0
 8006cdc:	0806a750 	.word	0x0806a750

08006ce0 <_ZN6tflite26SingleArenaBufferAllocator6CreateEPhj>:
    uint8_t* buffer_head, size_t buffer_size) {
 8006ce0:	b538      	push	{r3, r4, r5, lr}
  TFLITE_DCHECK(buffer_head != nullptr);
 8006ce2:	b1a8      	cbz	r0, 8006d10 <_ZN6tflite26SingleArenaBufferAllocator6CreateEPhj+0x30>
    : SingleArenaBufferAllocator(buffer, buffer + buffer_size) {}
 8006ce4:	1845      	adds	r5, r0, r1
 8006ce6:	4604      	mov	r4, r0
  uint8_t* const aligned_result = AlignPointerDown(tail_ - size, alignment);
 8006ce8:	2104      	movs	r1, #4
 8006cea:	f1a5 0024 	sub.w	r0, r5, #36	; 0x24
 8006cee:	f000 f86b 	bl	8006dc8 <_ZN6tflite16AlignPointerDownEPhj>
  if (aligned_result < head_) {
 8006cf2:	4284      	cmp	r4, r0
 8006cf4:	d80e      	bhi.n	8006d14 <_ZN6tflite26SingleArenaBufferAllocator6CreateEPhj+0x34>
namespace tflite {

// TODO(petewarden): This allocator never frees up or reuses  any memory, even
// though we have enough information about lifetimes of the tensors to do so.
// This makes it pretty wasteful, so we should use a more intelligent method.
class SingleArenaBufferAllocator : public INonPersistentBufferAllocator,
 8006cf6:	4a0d      	ldr	r2, [pc, #52]	; (8006d2c <_ZN6tflite26SingleArenaBufferAllocator6CreateEPhj+0x4c>)
 8006cf8:	6002      	str	r2, [r0, #0]
 8006cfa:	3244      	adds	r2, #68	; 0x44
 8006cfc:	6042      	str	r2, [r0, #4]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	e9c0 4004 	strd	r4, r0, [r0, #16]
 8006d04:	e9c0 4206 	strd	r4, r2, [r0, #24]
 8006d08:	60c5      	str	r5, [r0, #12]
 8006d0a:	6084      	str	r4, [r0, #8]
 8006d0c:	6202      	str	r2, [r0, #32]
}
 8006d0e:	bd38      	pop	{r3, r4, r5, pc}
  TFLITE_DCHECK(buffer_head != nullptr);
 8006d10:	f00f ff2c 	bl	8016b6c <abort>
    const size_t missing_memory = head_ - aligned_result;
 8006d14:	1a23      	subs	r3, r4, r0
    MicroPrintf(
 8006d16:	f1c3 0224 	rsb	r2, r3, #36	; 0x24
 8006d1a:	4805      	ldr	r0, [pc, #20]	; (8006d30 <_ZN6tflite26SingleArenaBufferAllocator6CreateEPhj+0x50>)
 8006d1c:	2124      	movs	r1, #36	; 0x24
 8006d1e:	f002 fd5d 	bl	80097dc <_Z11MicroPrintfPKcz>
 8006d22:	2300      	movs	r3, #0
 8006d24:	4a01      	ldr	r2, [pc, #4]	; (8006d2c <_ZN6tflite26SingleArenaBufferAllocator6CreateEPhj+0x4c>)
 8006d26:	601a      	str	r2, [r3, #0]
 8006d28:	deff      	udf	#255	; 0xff
 8006d2a:	bf00      	nop
 8006d2c:	0806a7e4 	.word	0x0806a7e4
 8006d30:	0806a694 	.word	0x0806a694

08006d34 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>:
    return data_ - ReadScalar<soffset_t>(data_);
 8006d34:	6803      	ldr	r3, [r0, #0]
 8006d36:	1ac3      	subs	r3, r0, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8006d38:	881a      	ldrh	r2, [r3, #0]
 8006d3a:	2a0a      	cmp	r2, #10
 8006d3c:	d905      	bls.n	8006d4a <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE+0x16>
 8006d3e:	895b      	ldrh	r3, [r3, #10]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8006d40:	b11b      	cbz	r3, 8006d4a <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE+0x16>
  SizeT size() const { return EndianScalar(length_); }
 8006d42:	58c2      	ldr	r2, [r0, r3]
    auto p = data_ + field_offset;
 8006d44:	4418      	add	r0, r3
 8006d46:	5880      	ldr	r0, [r0, r2]
}

// TODO(b/192589496): Ops must always be there. Remove this function when fixed
uint32_t NumSubgraphOperators(const SubGraph* subgraph) {
  if (subgraph->operators() != nullptr) {
    return subgraph->operators()->size();
 8006d48:	4770      	bx	lr
  } else {
    return 0;
 8006d4a:	2000      	movs	r0, #0
 8006d4c:	4770      	bx	lr
 8006d4e:	bf00      	nop

08006d50 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>:
    return data_ - ReadScalar<soffset_t>(data_);
 8006d50:	6803      	ldr	r3, [r0, #0]
 8006d52:	1ac3      	subs	r3, r0, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8006d54:	881a      	ldrh	r2, [r3, #0]
 8006d56:	2a08      	cmp	r2, #8
 8006d58:	d921      	bls.n	8006d9e <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x4e>
 8006d5a:	891b      	ldrh	r3, [r3, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8006d5c:	b1fb      	cbz	r3, 8006d9e <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x4e>
  }
}
// TODO(b/192589496): Ops must always be there. Remove this function when fixed
uint32_t NumSubgraphOperators(const Model* model, int subgraph_idx) {
 8006d5e:	b510      	push	{r4, lr}
 8006d60:	58c4      	ldr	r4, [r0, r3]
    auto p = data_ + field_offset;
 8006d62:	4418      	add	r0, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8006d64:	1902      	adds	r2, r0, r4
    FLATBUFFERS_ASSERT(i < size());
 8006d66:	5903      	ldr	r3, [r0, r4]
 8006d68:	4299      	cmp	r1, r3
 8006d6a:	d212      	bcs.n	8006d92 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x42>
    return const_cast<mutable_return_type>(IndirectHelper<T>::Read(Data(), i));
  }

  // The raw data in little endian format. Use with care.
  const uint8_t *Data() const {
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8006d6c:	3204      	adds	r2, #4
  static const offset_type element_stride = sizeof(offset_type);

  static return_type Read(const uint8_t *const p, const offset_type i) {
    // Offsets are relative to themselves, so first update the pointer to
    // point to the offset location.
    const uint8_t *const offset_location = p + i * element_stride;
 8006d6e:	eb02 0381 	add.w	r3, r2, r1, lsl #2

    // Then read the scalar value of the offset (which may be 32 or 64-bits) and
    // then determine the relative location from the offset location.
    return reinterpret_cast<return_type>(
        offset_location + ReadScalar<offset_type>(offset_location));
 8006d72:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    return data_ - ReadScalar<soffset_t>(data_);
 8006d76:	585a      	ldr	r2, [r3, r1]
 8006d78:	440b      	add	r3, r1
 8006d7a:	1a9a      	subs	r2, r3, r2
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8006d7c:	8811      	ldrh	r1, [r2, #0]
 8006d7e:	290a      	cmp	r1, #10
 8006d80:	d905      	bls.n	8006d8e <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x3e>
 8006d82:	8950      	ldrh	r0, [r2, #10]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8006d84:	b110      	cbz	r0, 8006d8c <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x3c>
  SizeT size() const { return EndianScalar(length_); }
 8006d86:	581a      	ldr	r2, [r3, r0]
    auto p = data_ + field_offset;
 8006d88:	4403      	add	r3, r0
 8006d8a:	5898      	ldr	r0, [r3, r2]
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
  return NumSubgraphOperators(subgraph);
}
 8006d8c:	bd10      	pop	{r4, pc}
    return 0;
 8006d8e:	2000      	movs	r0, #0
}
 8006d90:	bd10      	pop	{r4, pc}
    FLATBUFFERS_ASSERT(i < size());
 8006d92:	4b04      	ldr	r3, [pc, #16]	; (8006da4 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x54>)
 8006d94:	4a04      	ldr	r2, [pc, #16]	; (8006da8 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x58>)
 8006d96:	4805      	ldr	r0, [pc, #20]	; (8006dac <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x5c>)
 8006d98:	21b0      	movs	r1, #176	; 0xb0
 8006d9a:	f00f feef 	bl	8016b7c <__assert_func>
  SizeT size() const { return EndianScalar(length_); }
 8006d9e:	2300      	movs	r3, #0
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	deff      	udf	#255	; 0xff
 8006da4:	0806a098 	.word	0x0806a098
 8006da8:	0806a838 	.word	0x0806a838
 8006dac:	0806a168 	.word	0x0806a168

08006db0 <_ZN6tflite33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIlmEE>:
  // layout as flatbuffers:Vector<int32_t>, so we can reinterpret_cast the
  // flatbuffer vector and avoid a copy and malloc.
  // TODO(b/188459715): audit this usage of const_cast.
  return const_cast<TfLiteIntArray*>(
      reinterpret_cast<const TfLiteIntArray*>(flatbuffer_array));
}
 8006db0:	4770      	bx	lr
 8006db2:	bf00      	nop

08006db4 <_ZN6tflite33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIfmEE>:
 8006db4:	4770      	bx	lr
 8006db6:	bf00      	nop

08006db8 <_ZN6tflite14AlignPointerUpEPhj>:
namespace tflite {

uint8_t* AlignPointerUp(uint8_t* data, size_t alignment) {
  std::uintptr_t data_as_uintptr_t = reinterpret_cast<std::uintptr_t>(data);
  uint8_t* aligned_result = reinterpret_cast<uint8_t*>(
      ((data_as_uintptr_t + (alignment - 1)) / alignment) * alignment);
 8006db8:	1e4b      	subs	r3, r1, #1
 8006dba:	4418      	add	r0, r3
 8006dbc:	fbb0 f0f1 	udiv	r0, r0, r1
  return aligned_result;
}
 8006dc0:	fb01 f000 	mul.w	r0, r1, r0
 8006dc4:	4770      	bx	lr
 8006dc6:	bf00      	nop

08006dc8 <_ZN6tflite16AlignPointerDownEPhj>:

uint8_t* AlignPointerDown(uint8_t* data, size_t alignment) {
  std::uintptr_t data_as_uintptr_t = reinterpret_cast<std::uintptr_t>(data);
  uint8_t* aligned_result =
      reinterpret_cast<uint8_t*>((data_as_uintptr_t / alignment) * alignment);
 8006dc8:	fbb0 f0f1 	udiv	r0, r0, r1
  return aligned_result;
}
 8006dcc:	fb01 f000 	mul.w	r0, r1, r0
 8006dd0:	4770      	bx	lr
 8006dd2:	bf00      	nop

08006dd4 <_ZN6tflite11AlignSizeUpEjj>:

size_t AlignSizeUp(size_t size, size_t alignment) {
  size_t aligned_size = (((size + (alignment - 1)) / alignment) * alignment);
 8006dd4:	1e43      	subs	r3, r0, #1
 8006dd6:	440b      	add	r3, r1
 8006dd8:	fbb3 f3f1 	udiv	r3, r3, r1
  return aligned_size;
}
 8006ddc:	fb01 f003 	mul.w	r0, r1, r3
 8006de0:	4770      	bx	lr
 8006de2:	bf00      	nop

08006de4 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>:

TfLiteStatus TfLiteTypeSizeOf(TfLiteType type, size_t* size) {
  switch (type) {
 8006de4:	2812      	cmp	r0, #18
 8006de6:	d80e      	bhi.n	8006e06 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x22>
 8006de8:	2809      	cmp	r0, #9
 8006dea:	d814      	bhi.n	8006e16 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x32>
 8006dec:	2802      	cmp	r0, #2
 8006dee:	d90c      	bls.n	8006e0a <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x26>
 8006df0:	2301      	movs	r3, #1
 8006df2:	fa03 f200 	lsl.w	r2, r3, r0
 8006df6:	f412 7f12 	tst.w	r2, #584	; 0x248
 8006dfa:	d129      	bne.n	8006e50 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x6c>
 8006dfc:	f412 7f88 	tst.w	r2, #272	; 0x110
 8006e00:	d122      	bne.n	8006e48 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x64>
 8006e02:	2807      	cmp	r0, #7
 8006e04:	d028      	beq.n	8006e58 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x74>
 8006e06:	2001      	movs	r0, #1
      break;
    default:
      return kTfLiteError;
  }
  return kTfLiteOk;
}
 8006e08:	4770      	bx	lr
  switch (type) {
 8006e0a:	2800      	cmp	r0, #0
 8006e0c:	d0fb      	beq.n	8006e06 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x22>
      *size = sizeof(float);
 8006e0e:	2304      	movs	r3, #4
 8006e10:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
 8006e12:	2000      	movs	r0, #0
      break;
 8006e14:	4770      	bx	lr
  switch (type) {
 8006e16:	380a      	subs	r0, #10
 8006e18:	2808      	cmp	r0, #8
 8006e1a:	d8f4      	bhi.n	8006e06 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x22>
 8006e1c:	a301      	add	r3, pc, #4	; (adr r3, 8006e24 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x40>)
 8006e1e:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 8006e22:	bf00      	nop
 8006e24:	08006e59 	.word	0x08006e59
 8006e28:	08006e49 	.word	0x08006e49
 8006e2c:	08006e61 	.word	0x08006e61
 8006e30:	08006e49 	.word	0x08006e49
 8006e34:	08006e0f 	.word	0x08006e0f
 8006e38:	08006e07 	.word	0x08006e07
 8006e3c:	08006e0f 	.word	0x08006e0f
 8006e40:	08006e07 	.word	0x08006e07
 8006e44:	08006e51 	.word	0x08006e51
      *size = sizeof(double);
 8006e48:	2308      	movs	r3, #8
 8006e4a:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
 8006e4c:	2000      	movs	r0, #0
      break;
 8006e4e:	4770      	bx	lr
      *size = sizeof(uint8_t);
 8006e50:	2301      	movs	r3, #1
 8006e52:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
 8006e54:	2000      	movs	r0, #0
      break;
 8006e56:	4770      	bx	lr
      *size = sizeof(int16_t);
 8006e58:	2302      	movs	r3, #2
 8006e5a:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
 8006e5c:	2000      	movs	r0, #0
      break;
 8006e5e:	4770      	bx	lr
      *size = sizeof(double) * 2;
 8006e60:	2310      	movs	r3, #16
 8006e62:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
 8006e64:	2000      	movs	r0, #0
      break;
 8006e66:	4770      	bx	lr

08006e68 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_>:
    return data_ - ReadScalar<soffset_t>(data_);
 8006e68:	6803      	ldr	r3, [r0, #0]

TfLiteStatus BytesRequiredForTensor(const tflite::Tensor& flatbuffer_tensor,
                                    size_t* bytes, size_t* type_size) {
 8006e6a:	b570      	push	{r4, r5, r6, lr}
 8006e6c:	eba0 0c03 	sub.w	ip, r0, r3
 8006e70:	b082      	sub	sp, #8
 8006e72:	f8bc e000 	ldrh.w	lr, [ip]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8006e76:	f1be 0f04 	cmp.w	lr, #4
 8006e7a:	460e      	mov	r6, r1
 8006e7c:	4615      	mov	r5, r2
 8006e7e:	d928      	bls.n	8006ed2 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_+0x6a>
 8006e80:	f8bc 2004 	ldrh.w	r2, [ip, #4]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8006e84:	b38a      	cbz	r2, 8006eea <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_+0x82>
 8006e86:	5881      	ldr	r1, [r0, r2]
    auto p = data_ + field_offset;
 8006e88:	4402      	add	r2, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8006e8a:	1853      	adds	r3, r2, r1
 8006e8c:	5851      	ldr	r1, [r2, r1]
  int element_count = 1;
  // If flatbuffer_tensor.shape == nullptr, then flatbuffer_tensor is a scalar
  // so has 1 element.
  if (flatbuffer_tensor.shape() != nullptr) {
    for (size_t n = 0; n < flatbuffer_tensor.shape()->size(); ++n) {
 8006e8e:	b361      	cbz	r1, 8006eea <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_+0x82>
 8006e90:	eb03 0181 	add.w	r1, r3, r1, lsl #2
  int element_count = 1;
 8006e94:	2401      	movs	r4, #1
      element_count *= flatbuffer_tensor.shape()->Get(n);
 8006e96:	f853 2f04 	ldr.w	r2, [r3, #4]!
    for (size_t n = 0; n < flatbuffer_tensor.shape()->size(); ++n) {
 8006e9a:	4299      	cmp	r1, r3
      element_count *= flatbuffer_tensor.shape()->Get(n);
 8006e9c:	fb02 f404 	mul.w	r4, r2, r4
    for (size_t n = 0; n < flatbuffer_tensor.shape()->size(); ++n) {
 8006ea0:	d1f9      	bne.n	8006e96 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_+0x2e>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8006ea2:	f1be 0f06 	cmp.w	lr, #6
 8006ea6:	d922      	bls.n	8006eee <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_+0x86>
 8006ea8:	f8bc 3006 	ldrh.w	r3, [ip, #6]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8006eac:	b1db      	cbz	r3, 8006ee6 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_+0x7e>
 8006eae:	56c0      	ldrsb	r0, [r0, r3]
    }
  }

  TfLiteType tf_lite_type;
  TF_LITE_ENSURE_STATUS(
 8006eb0:	f10d 0107 	add.w	r1, sp, #7
 8006eb4:	f005 fae8 	bl	800c488 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteType>
 8006eb8:	b998      	cbnz	r0, 8006ee2 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_+0x7a>
      ConvertTensorType(flatbuffer_tensor.type(), &tf_lite_type));
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(tf_lite_type, type_size));
 8006eba:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8006ebe:	4629      	mov	r1, r5
 8006ec0:	f7ff ff90 	bl	8006de4 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
 8006ec4:	b968      	cbnz	r0, 8006ee2 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_+0x7a>
  *bytes = element_count * (*type_size);
 8006ec6:	682b      	ldr	r3, [r5, #0]
 8006ec8:	fb04 f303 	mul.w	r3, r4, r3
 8006ecc:	6033      	str	r3, [r6, #0]
  return kTfLiteOk;
}
 8006ece:	b002      	add	sp, #8
 8006ed0:	bd70      	pop	{r4, r5, r6, pc}
  int element_count = 1;
 8006ed2:	2401      	movs	r4, #1
 8006ed4:	2000      	movs	r0, #0
  TF_LITE_ENSURE_STATUS(
 8006ed6:	f10d 0107 	add.w	r1, sp, #7
 8006eda:	f005 fad5 	bl	800c488 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteType>
 8006ede:	2800      	cmp	r0, #0
 8006ee0:	d0eb      	beq.n	8006eba <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_+0x52>
}
 8006ee2:	b002      	add	sp, #8
 8006ee4:	bd70      	pop	{r4, r5, r6, pc}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	e7f5      	b.n	8006ed6 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_+0x6e>
  int element_count = 1;
 8006eea:	2401      	movs	r4, #1
 8006eec:	e7d9      	b.n	8006ea2 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_+0x3a>
 8006eee:	2000      	movs	r0, #0
 8006ef0:	e7f1      	b.n	8006ed6 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_+0x6e>
 8006ef2:	bf00      	nop

08006ef4 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>:

TfLiteStatus TfLiteEvalTensorByteLength(const TfLiteEvalTensor* eval_tensor,
                                        size_t* out_bytes) {
 8006ef4:	b538      	push	{r3, r4, r5, lr}
  TFLITE_DCHECK(out_bytes != nullptr);
 8006ef6:	2900      	cmp	r1, #0
 8006ef8:	d04d      	beq.n	8006f96 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0xa2>

  int element_count = 1;
  // If eval_tensor->dims == nullptr, then tensor is a scalar so has 1 element.
  if (eval_tensor->dims != nullptr) {
 8006efa:	6842      	ldr	r2, [r0, #4]
 8006efc:	2a00      	cmp	r2, #0
 8006efe:	d043      	beq.n	8006f88 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x94>
    for (int n = 0; n < eval_tensor->dims->size; ++n) {
 8006f00:	6815      	ldr	r5, [r2, #0]
 8006f02:	2d00      	cmp	r5, #0
 8006f04:	dd40      	ble.n	8006f88 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x94>
 8006f06:	2300      	movs	r3, #0
  int element_count = 1;
 8006f08:	f04f 0c01 	mov.w	ip, #1
      element_count *= eval_tensor->dims->data[n];
 8006f0c:	f852 4f04 	ldr.w	r4, [r2, #4]!
    for (int n = 0; n < eval_tensor->dims->size; ++n) {
 8006f10:	3301      	adds	r3, #1
 8006f12:	42ab      	cmp	r3, r5
      element_count *= eval_tensor->dims->data[n];
 8006f14:	fb04 fc0c 	mul.w	ip, r4, ip
    for (int n = 0; n < eval_tensor->dims->size; ++n) {
 8006f18:	d1f8      	bne.n	8006f0c <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x18>
    }
  }
  size_t type_size;
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(eval_tensor->type, &type_size));
 8006f1a:	7a03      	ldrb	r3, [r0, #8]
  switch (type) {
 8006f1c:	2b12      	cmp	r3, #18
 8006f1e:	d813      	bhi.n	8006f48 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x54>
 8006f20:	2b09      	cmp	r3, #9
 8006f22:	d813      	bhi.n	8006f4c <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x58>
 8006f24:	2b02      	cmp	r3, #2
 8006f26:	d90e      	bls.n	8006f46 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x52>
 8006f28:	2001      	movs	r0, #1
 8006f2a:	fa00 f203 	lsl.w	r2, r0, r3
 8006f2e:	f412 7f12 	tst.w	r2, #584	; 0x248
 8006f32:	d103      	bne.n	8006f3c <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x48>
 8006f34:	f412 7f88 	tst.w	r2, #272	; 0x110
 8006f38:	d020      	beq.n	8006f7c <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x88>
      *size = sizeof(float) * 2;
 8006f3a:	2008      	movs	r0, #8
  *out_bytes = element_count * type_size;
 8006f3c:	fb00 f00c 	mul.w	r0, r0, ip
 8006f40:	6008      	str	r0, [r1, #0]
  return kTfLiteOk;
 8006f42:	2000      	movs	r0, #0
}
 8006f44:	bd38      	pop	{r3, r4, r5, pc}
  switch (type) {
 8006f46:	b9eb      	cbnz	r3, 8006f84 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x90>
 8006f48:	2001      	movs	r0, #1
}
 8006f4a:	bd38      	pop	{r3, r4, r5, pc}
  switch (type) {
 8006f4c:	3b0a      	subs	r3, #10
 8006f4e:	2b08      	cmp	r3, #8
 8006f50:	d8fa      	bhi.n	8006f48 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x54>
 8006f52:	a201      	add	r2, pc, #4	; (adr r2, 8006f58 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x64>)
 8006f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f58:	08006f81 	.word	0x08006f81
 8006f5c:	08006f3b 	.word	0x08006f3b
 8006f60:	08006f93 	.word	0x08006f93
 8006f64:	08006f3b 	.word	0x08006f3b
 8006f68:	08006f85 	.word	0x08006f85
 8006f6c:	08006f49 	.word	0x08006f49
 8006f70:	08006f85 	.word	0x08006f85
 8006f74:	08006f49 	.word	0x08006f49
 8006f78:	08006f8f 	.word	0x08006f8f
 8006f7c:	2b07      	cmp	r3, #7
 8006f7e:	d1e1      	bne.n	8006f44 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x50>
      *size = sizeof(int16_t);
 8006f80:	2002      	movs	r0, #2
 8006f82:	e7db      	b.n	8006f3c <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x48>
      *size = sizeof(int32_t);
 8006f84:	2004      	movs	r0, #4
 8006f86:	e7d9      	b.n	8006f3c <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x48>
  int element_count = 1;
 8006f88:	f04f 0c01 	mov.w	ip, #1
 8006f8c:	e7c5      	b.n	8006f1a <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x26>
      *size = sizeof(int8_t);
 8006f8e:	2001      	movs	r0, #1
 8006f90:	e7d4      	b.n	8006f3c <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x48>
  switch (type) {
 8006f92:	2010      	movs	r0, #16
 8006f94:	e7d2      	b.n	8006f3c <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x48>
  TFLITE_DCHECK(out_bytes != nullptr);
 8006f96:	f00f fde9 	bl	8016b6c <abort>
 8006f9a:	bf00      	nop

08006f9c <_ZN6tflite21AllocationInfoBuilder20CreateAllocationInfoEi>:
  return kTfLiteOk;
}

TfLiteStatus AllocationInfoBuilder::CreateAllocationInfo(
    int scratch_buffer_request_count) {
  size_t subgraph_offsets_length = model_->subgraphs()->size() * sizeof(size_t);
 8006f9c:	6802      	ldr	r2, [r0, #0]
    return data_ - ReadScalar<soffset_t>(data_);
 8006f9e:	6813      	ldr	r3, [r2, #0]
    int scratch_buffer_request_count) {
 8006fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006fa2:	1ad3      	subs	r3, r2, r3
 8006fa4:	460d      	mov	r5, r1
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8006fa6:	8819      	ldrh	r1, [r3, #0]
 8006fa8:	2908      	cmp	r1, #8
 8006faa:	b083      	sub	sp, #12
 8006fac:	d916      	bls.n	8006fdc <_ZN6tflite21AllocationInfoBuilder20CreateAllocationInfoEi+0x40>
 8006fae:	891b      	ldrh	r3, [r3, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8006fb0:	b1a3      	cbz	r3, 8006fdc <_ZN6tflite21AllocationInfoBuilder20CreateAllocationInfoEi+0x40>
    auto p = data_ + field_offset;
 8006fb2:	18d1      	adds	r1, r2, r3
 8006fb4:	58d3      	ldr	r3, [r2, r3]
 8006fb6:	4604      	mov	r4, r0
  info_.subgraph_offsets =
      reinterpret_cast<size_t*>(non_persistent_allocator_->AllocateTemp(
 8006fb8:	6840      	ldr	r0, [r0, #4]
  size_t subgraph_offsets_length = model_->subgraphs()->size() * sizeof(size_t);
 8006fba:	58c9      	ldr	r1, [r1, r3]
      reinterpret_cast<size_t*>(non_persistent_allocator_->AllocateTemp(
 8006fbc:	6803      	ldr	r3, [r0, #0]
  size_t subgraph_offsets_length = model_->subgraphs()->size() * sizeof(size_t);
 8006fbe:	0089      	lsls	r1, r1, #2
      reinterpret_cast<size_t*>(non_persistent_allocator_->AllocateTemp(
 8006fc0:	9101      	str	r1, [sp, #4]
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	2204      	movs	r2, #4
 8006fc6:	4798      	blx	r3
          subgraph_offsets_length, alignof(size_t)));
  if (info_.subgraph_offsets == nullptr) {
 8006fc8:	9901      	ldr	r1, [sp, #4]
  info_.subgraph_offsets =
 8006fca:	6120      	str	r0, [r4, #16]
  if (info_.subgraph_offsets == nullptr) {
 8006fcc:	2800      	cmp	r0, #0
 8006fce:	d032      	beq.n	8007036 <_ZN6tflite21AllocationInfoBuilder20CreateAllocationInfoEi+0x9a>
        "Failed to allocate memory for memory planning, %d bytes required",
        subgraph_offsets_length);
    return kTfLiteError;
  }
  size_t tensor_count = 0;
  for (size_t subgraph_idx = 0; subgraph_idx < model_->subgraphs()->size();
 8006fd0:	6822      	ldr	r2, [r4, #0]
    return data_ - ReadScalar<soffset_t>(data_);
 8006fd2:	6813      	ldr	r3, [r2, #0]
 8006fd4:	1ad3      	subs	r3, r2, r3
 8006fd6:	8819      	ldrh	r1, [r3, #0]
 8006fd8:	2908      	cmp	r1, #8
 8006fda:	d802      	bhi.n	8006fe2 <_ZN6tflite21AllocationInfoBuilder20CreateAllocationInfoEi+0x46>
 8006fdc:	2300      	movs	r3, #0
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	deff      	udf	#255	; 0xff
 8006fe2:	891f      	ldrh	r7, [r3, #8]
    auto p = data_ + field_offset;
 8006fe4:	eb02 0c07 	add.w	ip, r2, r7
 8006fe8:	2200      	movs	r2, #0
 8006fea:	3804      	subs	r0, #4
  size_t tensor_count = 0;
 8006fec:	4616      	mov	r6, r2
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8006fee:	b307      	cbz	r7, 8007032 <_ZN6tflite21AllocationInfoBuilder20CreateAllocationInfoEi+0x96>
 8006ff0:	f8dc 3000 	ldr.w	r3, [ip]
  for (size_t subgraph_idx = 0; subgraph_idx < model_->subgraphs()->size();
 8006ff4:	f85c 1003 	ldr.w	r1, [ip, r3]
 8006ff8:	428a      	cmp	r2, r1
 8006ffa:	4463      	add	r3, ip
 8006ffc:	d221      	bcs.n	8007042 <_ZN6tflite21AllocationInfoBuilder20CreateAllocationInfoEi+0xa6>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8006ffe:	3304      	adds	r3, #4
    const uint8_t *const offset_location = p + i * element_stride;
 8007000:	eb03 0182 	add.w	r1, r3, r2, lsl #2
        offset_location + ReadScalar<offset_type>(offset_location));
 8007004:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
       subgraph_idx++) {
    // Add all tensors in each subgraph to the AllocationInfo array. Even weight
    // tensors are added but marked with needs_allocating = false. Including all
    // tensors in the graph here simplifies logic.
    info_.subgraph_offsets[subgraph_idx] = tensor_count;
 8007008:	f840 6f04 	str.w	r6, [r0, #4]!
 800700c:	eb01 0e03 	add.w	lr, r1, r3
    return data_ - ReadScalar<soffset_t>(data_);
 8007010:	58cb      	ldr	r3, [r1, r3]
 8007012:	ebae 0303 	sub.w	r3, lr, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8007016:	8819      	ldrh	r1, [r3, #0]
 8007018:	2904      	cmp	r1, #4
 800701a:	d9df      	bls.n	8006fdc <_ZN6tflite21AllocationInfoBuilder20CreateAllocationInfoEi+0x40>
 800701c:	889b      	ldrh	r3, [r3, #4]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 800701e:	2b00      	cmp	r3, #0
 8007020:	d0dc      	beq.n	8006fdc <_ZN6tflite21AllocationInfoBuilder20CreateAllocationInfoEi+0x40>
  SizeT size() const { return EndianScalar(length_); }
 8007022:	f85e 1003 	ldr.w	r1, [lr, r3]
    auto p = data_ + field_offset;
 8007026:	4473      	add	r3, lr
  for (size_t subgraph_idx = 0; subgraph_idx < model_->subgraphs()->size();
 8007028:	3201      	adds	r2, #1
    tensor_count += model_->subgraphs()->Get(subgraph_idx)->tensors()->size();
 800702a:	585b      	ldr	r3, [r3, r1]
 800702c:	441e      	add	r6, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 800702e:	2f00      	cmp	r7, #0
 8007030:	d1de      	bne.n	8006ff0 <_ZN6tflite21AllocationInfoBuilder20CreateAllocationInfoEi+0x54>
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	deff      	udf	#255	; 0xff
    MicroPrintf(
 8007036:	480f      	ldr	r0, [pc, #60]	; (8007074 <_ZN6tflite21AllocationInfoBuilder20CreateAllocationInfoEi+0xd8>)
 8007038:	f002 fbd0 	bl	80097dc <_Z11MicroPrintfPKcz>
    return kTfLiteError;
 800703c:	2001      	movs	r0, #1
        "Failed to allocate memory for memory planning, %d bytes required",
        bytes);
    return kTfLiteError;
  }
  return kTfLiteOk;
}
 800703e:	b003      	add	sp, #12
 8007040:	bdf0      	pop	{r4, r5, r6, r7, pc}
      non_persistent_allocator_->AllocateTemp(bytes, alignof(AllocationInfo)));
 8007042:	6860      	ldr	r0, [r4, #4]
  info_.scratch_buffer_count = scratch_buffer_request_count;
 8007044:	61e5      	str	r5, [r4, #28]
  info_.allocation_info_count = tensor_count + scratch_buffer_request_count;
 8007046:	19ab      	adds	r3, r5, r6
  size_t bytes = sizeof(AllocationInfo) * info_.allocation_info_count;
 8007048:	eb03 0743 	add.w	r7, r3, r3, lsl #1
  info_.allocation_info_count = tensor_count + scratch_buffer_request_count;
 800704c:	60e3      	str	r3, [r4, #12]
      non_persistent_allocator_->AllocateTemp(bytes, alignof(AllocationInfo)));
 800704e:	6803      	ldr	r3, [r0, #0]
  size_t bytes = sizeof(AllocationInfo) * info_.allocation_info_count;
 8007050:	00ff      	lsls	r7, r7, #3
  info_.scratch_offset = tensor_count;
 8007052:	e9c4 6605 	strd	r6, r6, [r4, #20]
      non_persistent_allocator_->AllocateTemp(bytes, alignof(AllocationInfo)));
 8007056:	689b      	ldr	r3, [r3, #8]
 8007058:	2204      	movs	r2, #4
 800705a:	4639      	mov	r1, r7
 800705c:	4798      	blx	r3
  info_.allocation_info = reinterpret_cast<AllocationInfo*>(
 800705e:	60a0      	str	r0, [r4, #8]
  if (info_.allocation_info == nullptr) {
 8007060:	b110      	cbz	r0, 8007068 <_ZN6tflite21AllocationInfoBuilder20CreateAllocationInfoEi+0xcc>
  return kTfLiteOk;
 8007062:	2000      	movs	r0, #0
}
 8007064:	b003      	add	sp, #12
 8007066:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MicroPrintf(
 8007068:	4802      	ldr	r0, [pc, #8]	; (8007074 <_ZN6tflite21AllocationInfoBuilder20CreateAllocationInfoEi+0xd8>)
 800706a:	4639      	mov	r1, r7
 800706c:	f002 fbb6 	bl	80097dc <_Z11MicroPrintfPKcz>
    return kTfLiteError;
 8007070:	2001      	movs	r0, #1
 8007072:	e7e4      	b.n	800703e <_ZN6tflite21AllocationInfoBuilder20CreateAllocationInfoEi+0xa2>
 8007074:	0806a928 	.word	0x0806a928

08007078 <_ZN6tflite21AllocationInfoBuilder18FreeAllocationInfoEv>:

TfLiteStatus AllocationInfoBuilder::FreeAllocationInfo() {
 8007078:	b510      	push	{r4, lr}
 800707a:	4604      	mov	r4, r0
  non_persistent_allocator_->DeallocateTemp(
 800707c:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 8007080:	6803      	ldr	r3, [r0, #0]
 8007082:	68db      	ldr	r3, [r3, #12]
 8007084:	4798      	blx	r3
      reinterpret_cast<uint8_t*>(info_.allocation_info));
  non_persistent_allocator_->DeallocateTemp(
 8007086:	6860      	ldr	r0, [r4, #4]
 8007088:	6921      	ldr	r1, [r4, #16]
 800708a:	6803      	ldr	r3, [r0, #0]
 800708c:	68db      	ldr	r3, [r3, #12]
 800708e:	4798      	blx	r3
      reinterpret_cast<uint8_t*>(info_.subgraph_offsets));
  return kTfLiteOk;
}
 8007090:	2000      	movs	r0, #0
 8007092:	bd10      	pop	{r4, pc}

08007094 <_ZN6tflite21AllocationInfoBuilder16ValidateSubgraphEPKNS_8SubGraphEP16TfLiteEvalTensor>:

TfLiteStatus AllocationInfoBuilder::ValidateSubgraph(
    const SubGraph* subgraph, TfLiteEvalTensor* eval_tensors) {
 8007094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t operators_size = NumSubgraphOperators(subgraph);
 8007098:	4608      	mov	r0, r1
    const SubGraph* subgraph, TfLiteEvalTensor* eval_tensors) {
 800709a:	b082      	sub	sp, #8
 800709c:	4688      	mov	r8, r1
 800709e:	4616      	mov	r6, r2
  uint32_t operators_size = NumSubgraphOperators(subgraph);
 80070a0:	f7ff fe48 	bl	8006d34 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>

  for (uint32_t i = 0; i < operators_size; i++) {
 80070a4:	2800      	cmp	r0, #0
 80070a6:	d041      	beq.n	800712c <_ZN6tflite21AllocationInfoBuilder16ValidateSubgraphEPKNS_8SubGraphEP16TfLiteEvalTensor+0x98>
 80070a8:	4681      	mov	r9, r0
 80070aa:	2500      	movs	r5, #0
    const auto op = subgraph->operators()->Get(i);
    for (size_t n = 0;
         op->intermediates() != nullptr && n < op->intermediates()->size();
         n++) {
      const int tensor_index = op->intermediates()->Get(n);
      size_t tensor_size = -1;
 80070ac:	f04f 37ff 	mov.w	r7, #4294967295
    return data_ - ReadScalar<soffset_t>(data_);
 80070b0:	f8d8 3000 	ldr.w	r3, [r8]
 80070b4:	eba8 0303 	sub.w	r3, r8, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 80070b8:	881a      	ldrh	r2, [r3, #0]
 80070ba:	2a0a      	cmp	r2, #10
 80070bc:	d947      	bls.n	800714e <_ZN6tflite21AllocationInfoBuilder16ValidateSubgraphEPKNS_8SubGraphEP16TfLiteEvalTensor+0xba>
 80070be:	895a      	ldrh	r2, [r3, #10]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 80070c0:	2a00      	cmp	r2, #0
 80070c2:	d044      	beq.n	800714e <_ZN6tflite21AllocationInfoBuilder16ValidateSubgraphEPKNS_8SubGraphEP16TfLiteEvalTensor+0xba>
 80070c4:	f858 1002 	ldr.w	r1, [r8, r2]
    auto p = data_ + field_offset;
 80070c8:	4442      	add	r2, r8
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 80070ca:	1853      	adds	r3, r2, r1
    FLATBUFFERS_ASSERT(i < size());
 80070cc:	5852      	ldr	r2, [r2, r1]
 80070ce:	42aa      	cmp	r2, r5
 80070d0:	d937      	bls.n	8007142 <_ZN6tflite21AllocationInfoBuilder16ValidateSubgraphEPKNS_8SubGraphEP16TfLiteEvalTensor+0xae>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 80070d2:	3304      	adds	r3, #4
    const uint8_t *const offset_location = p + i * element_stride;
 80070d4:	eb03 0485 	add.w	r4, r3, r5, lsl #2
        offset_location + ReadScalar<offset_type>(offset_location));
 80070d8:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
    return data_ - ReadScalar<soffset_t>(data_);
 80070dc:	58a3      	ldr	r3, [r4, r2]
 80070de:	4414      	add	r4, r2
 80070e0:	1ae3      	subs	r3, r4, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 80070e2:	881a      	ldrh	r2, [r3, #0]
 80070e4:	2a14      	cmp	r2, #20
 80070e6:	d91e      	bls.n	8007126 <_ZN6tflite21AllocationInfoBuilder16ValidateSubgraphEPKNS_8SubGraphEP16TfLiteEvalTensor+0x92>
    for (size_t n = 0;
 80070e8:	f04f 0a00 	mov.w	sl, #0
 80070ec:	8a9b      	ldrh	r3, [r3, #20]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 80070ee:	b1d3      	cbz	r3, 8007126 <_ZN6tflite21AllocationInfoBuilder16ValidateSubgraphEPKNS_8SubGraphEP16TfLiteEvalTensor+0x92>
 80070f0:	58e1      	ldr	r1, [r4, r3]
    auto p = data_ + field_offset;
 80070f2:	4423      	add	r3, r4
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 80070f4:	185a      	adds	r2, r3, r1
         op->intermediates() != nullptr && n < op->intermediates()->size();
 80070f6:	585b      	ldr	r3, [r3, r1]
 80070f8:	4553      	cmp	r3, sl
 80070fa:	d914      	bls.n	8007126 <_ZN6tflite21AllocationInfoBuilder16ValidateSubgraphEPKNS_8SubGraphEP16TfLiteEvalTensor+0x92>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 80070fc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
      TF_LITE_ENSURE_STATUS(TfLiteEvalTensorByteLength(
 8007100:	a901      	add	r1, sp, #4
 8007102:	6850      	ldr	r0, [r2, #4]
      size_t tensor_size = -1;
 8007104:	9701      	str	r7, [sp, #4]
      TF_LITE_ENSURE_STATUS(TfLiteEvalTensorByteLength(
 8007106:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800710a:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 800710e:	f7ff fef1 	bl	8006ef4 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
 8007112:	b960      	cbnz	r0, 800712e <_ZN6tflite21AllocationInfoBuilder16ValidateSubgraphEPKNS_8SubGraphEP16TfLiteEvalTensor+0x9a>
          &eval_tensors[tensor_index], &tensor_size));
      if (tensor_size != 0) {
 8007114:	9901      	ldr	r1, [sp, #4]
 8007116:	b969      	cbnz	r1, 8007134 <_ZN6tflite21AllocationInfoBuilder16ValidateSubgraphEPKNS_8SubGraphEP16TfLiteEvalTensor+0xa0>
    return data_ - ReadScalar<soffset_t>(data_);
 8007118:	6823      	ldr	r3, [r4, #0]
 800711a:	1ae3      	subs	r3, r4, r3
    for (size_t n = 0;
 800711c:	f10a 0a01 	add.w	sl, sl, #1
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8007120:	881a      	ldrh	r2, [r3, #0]
 8007122:	2a14      	cmp	r2, #20
 8007124:	d8e2      	bhi.n	80070ec <_ZN6tflite21AllocationInfoBuilder16ValidateSubgraphEPKNS_8SubGraphEP16TfLiteEvalTensor+0x58>
  for (uint32_t i = 0; i < operators_size; i++) {
 8007126:	3501      	adds	r5, #1
 8007128:	45a9      	cmp	r9, r5
 800712a:	d1c1      	bne.n	80070b0 <_ZN6tflite21AllocationInfoBuilder16ValidateSubgraphEPKNS_8SubGraphEP16TfLiteEvalTensor+0x1c>
            tensor_size);
        return kTfLiteError;
      }
    }
  }
  return kTfLiteOk;
 800712c:	2000      	movs	r0, #0
}
 800712e:	b002      	add	sp, #8
 8007130:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        MicroPrintf(
 8007134:	4807      	ldr	r0, [pc, #28]	; (8007154 <_ZN6tflite21AllocationInfoBuilder16ValidateSubgraphEPKNS_8SubGraphEP16TfLiteEvalTensor+0xc0>)
 8007136:	f002 fb51 	bl	80097dc <_Z11MicroPrintfPKcz>
        return kTfLiteError;
 800713a:	2001      	movs	r0, #1
}
 800713c:	b002      	add	sp, #8
 800713e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    FLATBUFFERS_ASSERT(i < size());
 8007142:	4b05      	ldr	r3, [pc, #20]	; (8007158 <_ZN6tflite21AllocationInfoBuilder16ValidateSubgraphEPKNS_8SubGraphEP16TfLiteEvalTensor+0xc4>)
 8007144:	4a05      	ldr	r2, [pc, #20]	; (800715c <_ZN6tflite21AllocationInfoBuilder16ValidateSubgraphEPKNS_8SubGraphEP16TfLiteEvalTensor+0xc8>)
 8007146:	4806      	ldr	r0, [pc, #24]	; (8007160 <_ZN6tflite21AllocationInfoBuilder16ValidateSubgraphEPKNS_8SubGraphEP16TfLiteEvalTensor+0xcc>)
 8007148:	21b0      	movs	r1, #176	; 0xb0
 800714a:	f00f fd17 	bl	8016b7c <__assert_func>
  SizeT size() const { return EndianScalar(length_); }
 800714e:	2300      	movs	r3, #0
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	deff      	udf	#255	; 0xff
 8007154:	0806aa5c 	.word	0x0806aa5c
 8007158:	0806a098 	.word	0x0806a098
 800715c:	0806a96c 	.word	0x0806a96c
 8007160:	0806a168 	.word	0x0806a168

08007164 <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE>:

TfLiteStatus AllocationInfoBuilder::InitializeAllocationInfo(
    const int32_t* offline_offsets, SubgraphAllocations* allocations) {
 8007164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007168:	b085      	sub	sp, #20
  AllocationInfo* allocation_info = info_.allocation_info;
 800716a:	6883      	ldr	r3, [r0, #8]
 800716c:	9303      	str	r3, [sp, #12]
  // Initialize allocation info for every tensor in every subgraph.
  int offline_index = 0;
  for (size_t subgraph_idx = 0; subgraph_idx < model_->subgraphs()->size();
 800716e:	f04f 0900 	mov.w	r9, #0
       subgraph_idx++) {
    const SubGraph* subgraph = model_->subgraphs()->Get(subgraph_idx);
    TfLiteEvalTensor* eval_tensors = allocations[subgraph_idx].tensors;
 8007172:	1d13      	adds	r3, r2, #4
    const int32_t* offline_offsets, SubgraphAllocations* allocations) {
 8007174:	9000      	str	r0, [sp, #0]
 8007176:	4688      	mov	r8, r1
    TfLiteEvalTensor* eval_tensors = allocations[subgraph_idx].tensors;
 8007178:	9302      	str	r3, [sp, #8]
  int offline_index = 0;
 800717a:	46cb      	mov	fp, r9
      current->output_ptr = &(eval_tensors[i].data.data);

      TF_LITE_ENSURE_STATUS(
          TfLiteEvalTensorByteLength(&eval_tensors[i], &current->bytes));

      current->first_created = kUninitializedLifetime;
 800717c:	f04f 3aff 	mov.w	sl, #4294967295
  for (size_t subgraph_idx = 0; subgraph_idx < model_->subgraphs()->size();
 8007180:	9b00      	ldr	r3, [sp, #0]
 8007182:	681b      	ldr	r3, [r3, #0]
    return data_ - ReadScalar<soffset_t>(data_);
 8007184:	681a      	ldr	r2, [r3, #0]
 8007186:	1a9a      	subs	r2, r3, r2
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8007188:	8811      	ldrh	r1, [r2, #0]
 800718a:	2908      	cmp	r1, #8
 800718c:	f240 80c8 	bls.w	8007320 <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0x1bc>
 8007190:	8912      	ldrh	r2, [r2, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8007192:	2a00      	cmp	r2, #0
 8007194:	f000 80ca 	beq.w	800732c <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0x1c8>
 8007198:	5899      	ldr	r1, [r3, r2]
    auto p = data_ + field_offset;
 800719a:	4413      	add	r3, r2
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 800719c:	185a      	adds	r2, r3, r1
 800719e:	585b      	ldr	r3, [r3, r1]
 80071a0:	4599      	cmp	r9, r3
 80071a2:	f080 80a1 	bcs.w	80072e8 <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0x184>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 80071a6:	3204      	adds	r2, #4
    const uint8_t *const offset_location = p + i * element_stride;
 80071a8:	eb02 0389 	add.w	r3, r2, r9, lsl #2
        offset_location + ReadScalar<offset_type>(offset_location));
 80071ac:	f852 6029 	ldr.w	r6, [r2, r9, lsl #2]
        &allocation_info[info_.subgraph_offsets[subgraph_idx]];
 80071b0:	9800      	ldr	r0, [sp, #0]
    TfLiteEvalTensor* eval_tensors = allocations[subgraph_idx].tensors;
 80071b2:	9a02      	ldr	r2, [sp, #8]
 80071b4:	9301      	str	r3, [sp, #4]
 80071b6:	f852 5039 	ldr.w	r5, [r2, r9, lsl #3]
        &allocation_info[info_.subgraph_offsets[subgraph_idx]];
 80071ba:	6902      	ldr	r2, [r0, #16]
 80071bc:	199f      	adds	r7, r3, r6
 80071be:	f852 4029 	ldr.w	r4, [r2, r9, lsl #2]
    TF_LITE_ENSURE_STATUS(ValidateSubgraph(subgraph, eval_tensors));
 80071c2:	4639      	mov	r1, r7
 80071c4:	462a      	mov	r2, r5
 80071c6:	f7ff ff65 	bl	8007094 <_ZN6tflite21AllocationInfoBuilder16ValidateSubgraphEPKNS_8SubGraphEP16TfLiteEvalTensor>
 80071ca:	2800      	cmp	r0, #0
 80071cc:	f040 80a5 	bne.w	800731a <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0x1b6>
 80071d0:	9b01      	ldr	r3, [sp, #4]
 80071d2:	9a03      	ldr	r2, [sp, #12]
 80071d4:	599b      	ldr	r3, [r3, r6]
    return data_ - ReadScalar<soffset_t>(data_);
 80071d6:	1afb      	subs	r3, r7, r3
 80071d8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80071dc:	8819      	ldrh	r1, [r3, #0]
 80071de:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
    for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 80071e2:	4606      	mov	r6, r0
 80071e4:	e03c      	b.n	8007260 <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0xfc>
      current->last_used = kUninitializedLifetime;
      current->needs_allocating =
 80071e6:	7520      	strb	r0, [r4, #20]
          (eval_tensors[i].data.data == nullptr) &&
          (!subgraph->tensors()->Get(i)->is_variable()) &&
          (current->bytes != 0);
      if (offline_offsets) {
 80071e8:	f1b8 0f00 	cmp.w	r8, #0
 80071ec:	d070      	beq.n	80072d0 <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0x16c>
        current->offline_offset = offline_offsets[offline_index++];
 80071ee:	f858 c02b 	ldr.w	ip, [r8, fp, lsl #2]
 80071f2:	f8c4 c010 	str.w	ip, [r4, #16]
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	1afb      	subs	r3, r7, r3
 80071fa:	f10b 0001 	add.w	r0, fp, #1
 80071fe:	8819      	ldrh	r1, [r3, #0]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8007200:	2904      	cmp	r1, #4
 8007202:	f240 808d 	bls.w	8007320 <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0x1bc>
 8007206:	889a      	ldrh	r2, [r3, #4]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8007208:	2a00      	cmp	r2, #0
 800720a:	f000 8089 	beq.w	8007320 <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0x1bc>
 800720e:	f857 e002 	ldr.w	lr, [r7, r2]
    auto p = data_ + field_offset;
 8007212:	eb07 0b02 	add.w	fp, r7, r2
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8007216:	eb0b 020e 	add.w	r2, fp, lr
    FLATBUFFERS_ASSERT(i < size());
 800721a:	f85b e00e 	ldr.w	lr, [fp, lr]
 800721e:	4576      	cmp	r6, lr
 8007220:	f080 8086 	bcs.w	8007330 <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0x1cc>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8007224:	3204      	adds	r2, #4
    const uint8_t *const offset_location = p + i * element_stride;
 8007226:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
        offset_location + ReadScalar<offset_type>(offset_location));
 800722a:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
    return data_ - ReadScalar<soffset_t>(data_);
 800722e:	f85e b002 	ldr.w	fp, [lr, r2]
 8007232:	4496      	add	lr, r2
 8007234:	ebae 020b 	sub.w	r2, lr, fp
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8007238:	f8b2 b000 	ldrh.w	fp, [r2]
 800723c:	f1bb 0f0e 	cmp.w	fp, #14
 8007240:	d90a      	bls.n	8007258 <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0xf4>
 8007242:	89d2      	ldrh	r2, [r2, #14]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8007244:	b142      	cbz	r2, 8007258 <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0xf4>

        // Mark offline planned variable tensors so they can get an offline
        // offset and be handled offline.
        if (subgraph->tensors()->Get(i)->is_variable() &&
 8007246:	f81e 2002 	ldrb.w	r2, [lr, r2]
 800724a:	b12a      	cbz	r2, 8007258 <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0xf4>
 800724c:	f1bc 3fff 	cmp.w	ip, #4294967295
 8007250:	d002      	beq.n	8007258 <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0xf4>
            current->offline_offset != kOnlinePlannedBuffer) {
          current->needs_allocating = true;
 8007252:	f04f 0201 	mov.w	r2, #1
 8007256:	7522      	strb	r2, [r4, #20]
    for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 8007258:	3601      	adds	r6, #1
 800725a:	3418      	adds	r4, #24
 800725c:	350c      	adds	r5, #12
 800725e:	4683      	mov	fp, r0
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8007260:	2904      	cmp	r1, #4
 8007262:	d95d      	bls.n	8007320 <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0x1bc>
 8007264:	889b      	ldrh	r3, [r3, #4]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8007266:	2b00      	cmp	r3, #0
 8007268:	d05a      	beq.n	8007320 <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0x1bc>
  SizeT size() const { return EndianScalar(length_); }
 800726a:	58fa      	ldr	r2, [r7, r3]
    auto p = data_ + field_offset;
 800726c:	443b      	add	r3, r7
 800726e:	589b      	ldr	r3, [r3, r2]
 8007270:	429e      	cmp	r6, r3
 8007272:	d258      	bcs.n	8007326 <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0x1c2>
      current->output_ptr = &(eval_tensors[i].data.data);
 8007274:	6065      	str	r5, [r4, #4]
      TF_LITE_ENSURE_STATUS(
 8007276:	4621      	mov	r1, r4
 8007278:	4628      	mov	r0, r5
 800727a:	f7ff fe3b 	bl	8006ef4 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
 800727e:	2800      	cmp	r0, #0
 8007280:	d14b      	bne.n	800731a <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0x1b6>
          (!subgraph->tensors()->Get(i)->is_variable()) &&
 8007282:	682b      	ldr	r3, [r5, #0]
      current->last_used = kUninitializedLifetime;
 8007284:	e9c4 aa02 	strd	sl, sl, [r4, #8]
          (!subgraph->tensors()->Get(i)->is_variable()) &&
 8007288:	2b00      	cmp	r3, #0
 800728a:	d1ac      	bne.n	80071e6 <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0x82>
    return data_ - ReadScalar<soffset_t>(data_);
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	1afb      	subs	r3, r7, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8007290:	881a      	ldrh	r2, [r3, #0]
 8007292:	2a04      	cmp	r2, #4
 8007294:	d944      	bls.n	8007320 <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0x1bc>
 8007296:	889b      	ldrh	r3, [r3, #4]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8007298:	2b00      	cmp	r3, #0
 800729a:	d041      	beq.n	8007320 <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0x1bc>
 800729c:	58f9      	ldr	r1, [r7, r3]
    auto p = data_ + field_offset;
 800729e:	443b      	add	r3, r7
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 80072a0:	185a      	adds	r2, r3, r1
    FLATBUFFERS_ASSERT(i < size());
 80072a2:	585b      	ldr	r3, [r3, r1]
 80072a4:	429e      	cmp	r6, r3
 80072a6:	d243      	bcs.n	8007330 <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0x1cc>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 80072a8:	3204      	adds	r2, #4
    const uint8_t *const offset_location = p + i * element_stride;
 80072aa:	eb02 0386 	add.w	r3, r2, r6, lsl #2
        offset_location + ReadScalar<offset_type>(offset_location));
 80072ae:	f852 1026 	ldr.w	r1, [r2, r6, lsl #2]
    return data_ - ReadScalar<soffset_t>(data_);
 80072b2:	585a      	ldr	r2, [r3, r1]
 80072b4:	440b      	add	r3, r1
 80072b6:	1a9a      	subs	r2, r3, r2
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 80072b8:	8811      	ldrh	r1, [r2, #0]
 80072ba:	290e      	cmp	r1, #14
 80072bc:	d90f      	bls.n	80072de <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0x17a>
 80072be:	89d2      	ldrh	r2, [r2, #14]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 80072c0:	b16a      	cbz	r2, 80072de <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0x17a>
          (eval_tensors[i].data.data == nullptr) &&
 80072c2:	5c9b      	ldrb	r3, [r3, r2]
 80072c4:	b15b      	cbz	r3, 80072de <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0x17a>
          (!subgraph->tensors()->Get(i)->is_variable()) &&
 80072c6:	2000      	movs	r0, #0
      current->needs_allocating =
 80072c8:	7520      	strb	r0, [r4, #20]
      if (offline_offsets) {
 80072ca:	f1b8 0f00 	cmp.w	r8, #0
 80072ce:	d18e      	bne.n	80071ee <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0x8a>
        }
      } else {
        current->offline_offset = kOnlinePlannedBuffer;
 80072d0:	f8c4 a010 	str.w	sl, [r4, #16]
 80072d4:	683b      	ldr	r3, [r7, #0]
    return data_ - ReadScalar<soffset_t>(data_);
 80072d6:	1afb      	subs	r3, r7, r3
 80072d8:	4658      	mov	r0, fp
 80072da:	8819      	ldrh	r1, [r3, #0]
 80072dc:	e7bc      	b.n	8007258 <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0xf4>
          (!subgraph->tensors()->Get(i)->is_variable()) &&
 80072de:	6820      	ldr	r0, [r4, #0]
 80072e0:	3800      	subs	r0, #0
 80072e2:	bf18      	it	ne
 80072e4:	2001      	movne	r0, #1
 80072e6:	e77e      	b.n	80071e6 <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0x82>
    }
  }
  // Initialize allocation info for every scratch buffer.
  AllocationInfo* scratch_allocation_info =
      &allocation_info[info_.scratch_offset];
  for (size_t i = 0; i < info_.scratch_buffer_count; i++) {
 80072e8:	9b00      	ldr	r3, [sp, #0]
 80072ea:	69da      	ldr	r2, [r3, #28]
      &allocation_info[info_.scratch_offset];
 80072ec:	695b      	ldr	r3, [r3, #20]
  for (size_t i = 0; i < info_.scratch_buffer_count; i++) {
 80072ee:	b19a      	cbz	r2, 8007318 <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0x1b4>
 80072f0:	9903      	ldr	r1, [sp, #12]
 80072f2:	441a      	add	r2, r3
 80072f4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80072f8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80072fc:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8007300:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
    AllocationInfo* current = &scratch_allocation_info[i];
    current->first_created = kUninitializedLifetime;
    current->last_used = kUninitializedLifetime;
    current->needs_allocating = true;
 8007304:	2001      	movs	r0, #1
    current->first_created = kUninitializedLifetime;
 8007306:	f04f 31ff 	mov.w	r1, #4294967295
    current->needs_allocating = true;
 800730a:	7518      	strb	r0, [r3, #20]
    current->offline_offset = kOnlinePlannedBuffer;
 800730c:	6119      	str	r1, [r3, #16]
    current->last_used = kUninitializedLifetime;
 800730e:	e9c3 1102 	strd	r1, r1, [r3, #8]
  for (size_t i = 0; i < info_.scratch_buffer_count; i++) {
 8007312:	3318      	adds	r3, #24
 8007314:	4293      	cmp	r3, r2
 8007316:	d1f8      	bne.n	800730a <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0x1a6>
  }
  return kTfLiteOk;
 8007318:	2000      	movs	r0, #0
}
 800731a:	b005      	add	sp, #20
 800731c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  SizeT size() const { return EndianScalar(length_); }
 8007320:	2300      	movs	r3, #0
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	deff      	udf	#255	; 0xff
  for (size_t subgraph_idx = 0; subgraph_idx < model_->subgraphs()->size();
 8007326:	f109 0901 	add.w	r9, r9, #1
 800732a:	e729      	b.n	8007180 <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0x1c>
 800732c:	6813      	ldr	r3, [r2, #0]
 800732e:	deff      	udf	#255	; 0xff
    FLATBUFFERS_ASSERT(i < size());
 8007330:	4b02      	ldr	r3, [pc, #8]	; (800733c <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0x1d8>)
 8007332:	4a03      	ldr	r2, [pc, #12]	; (8007340 <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0x1dc>)
 8007334:	4803      	ldr	r0, [pc, #12]	; (8007344 <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0x1e0>)
 8007336:	21b0      	movs	r1, #176	; 0xb0
 8007338:	f00f fc20 	bl	8016b7c <__assert_func>
 800733c:	0806a098 	.word	0x0806a098
 8007340:	0806aa98 	.word	0x0806aa98
 8007344:	0806a168 	.word	0x0806a168

08007348 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE>:

TfLiteStatus AllocationInfoBuilder::MarkAllocationLifetimes(
    int subgraph_idx, internal::ScratchBufferRequest* scratch_buffer_requests,
    ScratchBufferHandle* scratch_buffer_handles,
    SubgraphAllocations* allocations) {
 8007348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800734c:	ed2d 8b02 	vpush	{d8}
 8007350:	ee08 3a90 	vmov	s17, r3
  const SubGraph* subgraph = model_->subgraphs()->Get(subgraph_idx);
 8007354:	6803      	ldr	r3, [r0, #0]
    SubgraphAllocations* allocations) {
 8007356:	ee08 2a10 	vmov	s16, r2
 800735a:	681a      	ldr	r2, [r3, #0]
 800735c:	1a9a      	subs	r2, r3, r2
 800735e:	4689      	mov	r9, r1
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8007360:	8811      	ldrh	r1, [r2, #0]
 8007362:	2908      	cmp	r1, #8
 8007364:	b089      	sub	sp, #36	; 0x24
 8007366:	f240 816d 	bls.w	8007644 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x2fc>
 800736a:	8912      	ldrh	r2, [r2, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 800736c:	2a00      	cmp	r2, #0
 800736e:	f000 8169 	beq.w	8007644 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x2fc>
 8007372:	5899      	ldr	r1, [r3, r2]
    auto p = data_ + field_offset;
 8007374:	4413      	add	r3, r2
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8007376:	185a      	adds	r2, r3, r1
 8007378:	585b      	ldr	r3, [r3, r1]
 800737a:	4599      	cmp	r9, r3
 800737c:	f080 815c 	bcs.w	8007638 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x2f0>

  AllocationInfo* allocation_info = info_.allocation_info;
  // Each subgraph's tensor allocations are in a contiguous block starting at
  // subgraph_offsets_[subgraph index] with one entry per tensor.
  AllocationInfo* subgraph_allocation_info =
      &allocation_info[info_.subgraph_offsets[subgraph_idx]];
 8007380:	6903      	ldr	r3, [r0, #16]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8007382:	3204      	adds	r2, #4
 8007384:	f853 3029 	ldr.w	r3, [r3, r9, lsl #2]
 8007388:	f852 1029 	ldr.w	r1, [r2, r9, lsl #2]
 800738c:	9107      	str	r1, [sp, #28]
    const uint8_t *const offset_location = p + i * element_stride;
 800738e:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 8007392:	4605      	mov	r5, r0
  AllocationInfo* allocation_info = info_.allocation_info;
 8007394:	6880      	ldr	r0, [r0, #8]
 8007396:	9005      	str	r0, [sp, #20]
        offset_location + ReadScalar<offset_type>(offset_location));
 8007398:	eb02 0a01 	add.w	sl, r2, r1
 800739c:	460c      	mov	r4, r1
    const uint8_t *const offset_location = p + i * element_stride;
 800739e:	4616      	mov	r6, r2
      &allocation_info[info_.subgraph_offsets[subgraph_idx]];
 80073a0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  AllocationInfo* subgraph_allocation_info =
 80073a4:	eb00 03c3 	add.w	r3, r0, r3, lsl #3

  uint32_t operators_size = NumSubgraphOperators(subgraph);
 80073a8:	4650      	mov	r0, sl
  AllocationInfo* subgraph_allocation_info =
 80073aa:	9304      	str	r3, [sp, #16]
 80073ac:	9206      	str	r2, [sp, #24]
  uint32_t operators_size = NumSubgraphOperators(subgraph);
 80073ae:	f7ff fcc1 	bl	8006d34 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
 80073b2:	5933      	ldr	r3, [r6, r4]
 80073b4:	9003      	str	r0, [sp, #12]
    return data_ - ReadScalar<soffset_t>(data_);
 80073b6:	ebaa 0303 	sub.w	r3, sl, r3
 80073ba:	4618      	mov	r0, r3
 80073bc:	8819      	ldrh	r1, [r3, #0]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 80073be:	2906      	cmp	r1, #6
 80073c0:	f200 8102 	bhi.w	80075c8 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x280>
    // This will ensure that the tensors that are inputs to the subgraphs
    // but not used in any ops also have a reasonable lifetime.
    UpdateLastUsed(current, allocation_scope_count_);
  }

  for (uint32_t i = 0; i < operators_size; i++) {
 80073c4:	9a03      	ldr	r2, [sp, #12]
 80073c6:	2400      	movs	r4, #0
 80073c8:	2a00      	cmp	r2, #0
 80073ca:	f000 80d4 	beq.w	8007576 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x22e>
    // Each operator has a new allocation scope.
    allocation_scope_count_++;
 80073ce:	6a2f      	ldr	r7, [r5, #32]
 80073d0:	290a      	cmp	r1, #10
 80073d2:	f107 0701 	add.w	r7, r7, #1
 80073d6:	622f      	str	r7, [r5, #32]
 80073d8:	f240 8134 	bls.w	8007644 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x2fc>
 80073dc:	895a      	ldrh	r2, [r3, #10]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 80073de:	2a00      	cmp	r2, #0
 80073e0:	f000 8130 	beq.w	8007644 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x2fc>
 80073e4:	f85a 1002 	ldr.w	r1, [sl, r2]
    auto p = data_ + field_offset;
 80073e8:	4452      	add	r2, sl
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 80073ea:	1853      	adds	r3, r2, r1
    FLATBUFFERS_ASSERT(i < size());
 80073ec:	5852      	ldr	r2, [r2, r1]
 80073ee:	42a2      	cmp	r2, r4
 80073f0:	f240 811c 	bls.w	800762c <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x2e4>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 80073f4:	3304      	adds	r3, #4
 80073f6:	eb03 0884 	add.w	r8, r3, r4, lsl #2
        offset_location + ReadScalar<offset_type>(offset_location));
 80073fa:	f853 b024 	ldr.w	fp, [r3, r4, lsl #2]
    return data_ - ReadScalar<soffset_t>(data_);
 80073fe:	f858 300b 	ldr.w	r3, [r8, fp]
 8007402:	eb08 060b 	add.w	r6, r8, fp
 8007406:	1af3      	subs	r3, r6, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8007408:	881a      	ldrh	r2, [r3, #0]
 800740a:	2a08      	cmp	r2, #8
 800740c:	d91d      	bls.n	800744a <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x102>
 800740e:	891a      	ldrh	r2, [r3, #8]
    auto p = data_ + field_offset;
 8007410:	18b3      	adds	r3, r6, r2
 8007412:	b1d2      	cbz	r2, 800744a <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x102>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8007414:	58b0      	ldr	r0, [r6, r2]
  SizeT size() const { return EndianScalar(length_); }
 8007416:	f853 c000 	ldr.w	ip, [r3, r0]
    const auto* op = subgraph->operators()->Get(i);
    // Figure out when the first creation and use of each tensor is.
    for (size_t n = 0; op->outputs() != nullptr && n < op->outputs()->size();
 800741a:	2200      	movs	r2, #0
 800741c:	1819      	adds	r1, r3, r0
 800741e:	4594      	cmp	ip, r2
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8007420:	f101 0104 	add.w	r1, r1, #4
 8007424:	d911      	bls.n	800744a <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x102>
         ++n) {
      const int tensor_index = op->outputs()->Get(n);
      AllocationInfo* current = &subgraph_allocation_info[tensor_index];
 8007426:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 800742a:	9804      	ldr	r0, [sp, #16]
 800742c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8007430:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
  TFLITE_DCHECK(current->first_created <= allocation_scope_count);
 8007434:	6898      	ldr	r0, [r3, #8]
 8007436:	4287      	cmp	r7, r0
 8007438:	f2c0 80f1 	blt.w	800761e <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x2d6>
  if (current->first_created == kUninitializedLifetime) {
 800743c:	3001      	adds	r0, #1
    for (size_t n = 0; op->outputs() != nullptr && n < op->outputs()->size();
 800743e:	f102 0201 	add.w	r2, r2, #1
    current->first_created = allocation_scope_count;
 8007442:	bf08      	it	eq
 8007444:	609f      	streq	r7, [r3, #8]
    for (size_t n = 0; op->outputs() != nullptr && n < op->outputs()->size();
 8007446:	4594      	cmp	ip, r2
 8007448:	d8ed      	bhi.n	8007426 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0xde>
    // lifetime within a control flow op properly overlaps with all subgraphs.
    int start_allocation_scope_count = allocation_scope_count_;

    // Control flow operators can invoke subgraphs. Plan these subgraphs
    // before continuing on to the rest of the graph.
    MarkSubgraphLifetimesIfNecessary(op, scratch_buffer_requests,
 800744a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800744c:	9300      	str	r3, [sp, #0]
 800744e:	ee18 2a10 	vmov	r2, s16
 8007452:	ee18 3a90 	vmov	r3, s17
 8007456:	4631      	mov	r1, r6
 8007458:	4628      	mov	r0, r5
 800745a:	f000 f8ff 	bl	800765c <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE>
    return data_ - ReadScalar<soffset_t>(data_);
 800745e:	f858 300b 	ldr.w	r3, [r8, fp]
 8007462:	1af3      	subs	r3, r6, r3
 8007464:	881a      	ldrh	r2, [r3, #0]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8007466:	2a06      	cmp	r2, #6
 8007468:	d942      	bls.n	80074f0 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x1a8>
 800746a:	88d8      	ldrh	r0, [r3, #6]
    auto p = data_ + field_offset;
 800746c:	1831      	adds	r1, r6, r0
 800746e:	b300      	cbz	r0, 80074b2 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x16a>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8007470:	5830      	ldr	r0, [r6, r0]
 8007472:	eb01 0e00 	add.w	lr, r1, r0
  SizeT size() const { return EndianScalar(length_); }
 8007476:	5809      	ldr	r1, [r1, r0]
                                     scratch_buffer_handles, allocations);

    // Figure out when the last use of each tensor is.
    for (size_t n = 0; op->inputs() != nullptr && n < op->inputs()->size();
 8007478:	f04f 0c00 	mov.w	ip, #0
 800747c:	4561      	cmp	r1, ip
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800747e:	f10e 0e04 	add.w	lr, lr, #4
 8007482:	469b      	mov	fp, r3
 8007484:	d914      	bls.n	80074b0 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x168>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 8007486:	f85e 002c 	ldr.w	r0, [lr, ip, lsl #2]
         ++n) {
      const int tensor_index = op->inputs()->Get(n);
      // Optional bias tensors can have an index of -1 when they are omitted.
      if (tensor_index >= 0) {
 800748a:	2800      	cmp	r0, #0
 800748c:	db0c      	blt.n	80074a8 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x160>
        AllocationInfo* current = &subgraph_allocation_info[tensor_index];
 800748e:	9b04      	ldr	r3, [sp, #16]
        // No need to update creation since it is either marked by the subgraph
        // or producer op, or it is not part of the memory plan (weight, bias
        // tensor).
        UpdateLastUsed(current, allocation_scope_count_);
 8007490:	f8d5 8020 	ldr.w	r8, [r5, #32]
        AllocationInfo* current = &subgraph_allocation_info[tensor_index];
 8007494:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8007498:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
  TFLITE_DCHECK(current->last_used <= allocation_scope_count);
 800749c:	68c3      	ldr	r3, [r0, #12]
 800749e:	4598      	cmp	r8, r3
 80074a0:	f2c0 80bd 	blt.w	800761e <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x2d6>
  current->last_used = allocation_scope_count;
 80074a4:	f8c0 800c 	str.w	r8, [r0, #12]
    for (size_t n = 0; op->inputs() != nullptr && n < op->inputs()->size();
 80074a8:	f10c 0c01 	add.w	ip, ip, #1
 80074ac:	4561      	cmp	r1, ip
 80074ae:	d8ea      	bhi.n	8007486 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x13e>
 80074b0:	465b      	mov	r3, fp
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 80074b2:	2a08      	cmp	r2, #8
 80074b4:	d91c      	bls.n	80074f0 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x1a8>
 80074b6:	891b      	ldrh	r3, [r3, #8]
    auto p = data_ + field_offset;
 80074b8:	18f2      	adds	r2, r6, r3
 80074ba:	b1cb      	cbz	r3, 80074f0 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x1a8>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 80074bc:	58f3      	ldr	r3, [r6, r3]
 80074be:	18d0      	adds	r0, r2, r3
  SizeT size() const { return EndianScalar(length_); }
 80074c0:	58d2      	ldr	r2, [r2, r3]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 80074c2:	2100      	movs	r1, #0
      }
    }
    for (size_t n = 0; op->outputs() != nullptr && n < op->outputs()->size();
 80074c4:	428a      	cmp	r2, r1
 80074c6:	f100 0004 	add.w	r0, r0, #4
 80074ca:	46a4      	mov	ip, r4
 80074cc:	d90f      	bls.n	80074ee <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x1a6>
         ++n) {
      const int tensor_index = op->outputs()->Get(n);
      AllocationInfo* current = &subgraph_allocation_info[tensor_index];
 80074ce:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 80074d2:	9e04      	ldr	r6, [sp, #16]
 80074d4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80074d8:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
      UpdateLastUsed(current, allocation_scope_count_);
 80074dc:	6a2e      	ldr	r6, [r5, #32]
  TFLITE_DCHECK(current->last_used <= allocation_scope_count);
 80074de:	68dc      	ldr	r4, [r3, #12]
 80074e0:	42a6      	cmp	r6, r4
 80074e2:	f2c0 809c 	blt.w	800761e <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x2d6>
    for (size_t n = 0; op->outputs() != nullptr && n < op->outputs()->size();
 80074e6:	3101      	adds	r1, #1
 80074e8:	428a      	cmp	r2, r1
  current->last_used = allocation_scope_count;
 80074ea:	60de      	str	r6, [r3, #12]
    for (size_t n = 0; op->outputs() != nullptr && n < op->outputs()->size();
 80074ec:	d8ef      	bhi.n	80074ce <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x186>
 80074ee:	4664      	mov	r4, ip
    // operation is O(N * M) where N is the total number of visited nodes and M
    // is the total number of scratch buffers.
    // TODO(b/217794030): Optimize this memory planning code.
    AllocationInfo* scratch_allocation_info =
        &allocation_info[info_.scratch_offset];
    for (size_t scratch_idx = 0; scratch_idx < info_.scratch_buffer_count;
 80074f0:	f8d5 e01c 	ldr.w	lr, [r5, #28]
        &allocation_info[info_.scratch_offset];
 80074f4:	696a      	ldr	r2, [r5, #20]
    for (size_t scratch_idx = 0; scratch_idx < info_.scratch_buffer_count;
 80074f6:	f1be 0f00 	cmp.w	lr, #0
 80074fa:	d02c      	beq.n	8007556 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x20e>
 80074fc:	9b05      	ldr	r3, [sp, #20]
 80074fe:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8007502:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8007506:	ee18 6a90 	vmov	r6, s17
 800750a:	ee18 3a10 	vmov	r3, s16
 800750e:	2000      	movs	r0, #0
 8007510:	46b8      	mov	r8, r7
 8007512:	46a4      	mov	ip, r4
 8007514:	e008      	b.n	8007528 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x1e0>
 8007516:	3001      	adds	r0, #1
 8007518:	4570      	cmp	r0, lr
 800751a:	f103 030c 	add.w	r3, r3, #12
 800751e:	f102 0218 	add.w	r2, r2, #24
 8007522:	f106 0604 	add.w	r6, r6, #4
 8007526:	d015      	beq.n	8007554 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x20c>
         scratch_idx++) {
      internal::ScratchBufferRequest request =
 8007528:	e9d3 4100 	ldrd	r4, r1, [r3]
          scratch_buffer_requests[scratch_idx];
      AllocationInfo* current = &scratch_allocation_info[scratch_idx];
      if (request.node_idx == static_cast<int>(i) &&
 800752c:	4561      	cmp	r1, ip
      internal::ScratchBufferRequest request =
 800752e:	689f      	ldr	r7, [r3, #8]
      if (request.node_idx == static_cast<int>(i) &&
 8007530:	d1f1      	bne.n	8007516 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x1ce>
 8007532:	45b9      	cmp	r9, r7
 8007534:	d1ef      	bne.n	8007516 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x1ce>
  TFLITE_DCHECK(current->first_created <= allocation_scope_count);
 8007536:	6891      	ldr	r1, [r2, #8]
 8007538:	4588      	cmp	r8, r1
          request.subgraph_idx == static_cast<int>(subgraph_idx)) {
        ScratchBufferHandle* current_handle =
            &(scratch_buffer_handles[scratch_idx]);
        current->output_ptr = reinterpret_cast<void**>(&current_handle->data);
 800753a:	e9c2 4600 	strd	r4, r6, [r2]
  TFLITE_DCHECK(current->first_created <= allocation_scope_count);
 800753e:	db6e      	blt.n	800761e <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x2d6>
  if (current->first_created == kUninitializedLifetime) {
 8007540:	3101      	adds	r1, #1
    current->first_created = allocation_scope_count;
 8007542:	bf08      	it	eq
 8007544:	f8c2 8008 	streq.w	r8, [r2, #8]
        current->bytes = request.bytes;
        UpdateFirstCreated(current, start_allocation_scope_count);
        UpdateLastUsed(current, allocation_scope_count_);
 8007548:	6a2c      	ldr	r4, [r5, #32]
  TFLITE_DCHECK(current->last_used <= allocation_scope_count);
 800754a:	68d1      	ldr	r1, [r2, #12]
 800754c:	428c      	cmp	r4, r1
 800754e:	db66      	blt.n	800761e <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x2d6>
  current->last_used = allocation_scope_count;
 8007550:	60d4      	str	r4, [r2, #12]
}
 8007552:	e7e0      	b.n	8007516 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x1ce>
 8007554:	4664      	mov	r4, ip
  for (uint32_t i = 0; i < operators_size; i++) {
 8007556:	9b03      	ldr	r3, [sp, #12]
 8007558:	3401      	adds	r4, #1
 800755a:	42a3      	cmp	r3, r4
 800755c:	d005      	beq.n	800756a <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x222>
 800755e:	f8da 3000 	ldr.w	r3, [sl]
    return data_ - ReadScalar<soffset_t>(data_);
 8007562:	ebaa 0303 	sub.w	r3, sl, r3
 8007566:	8819      	ldrh	r1, [r3, #0]
 8007568:	e731      	b.n	80073ce <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x86>
 800756a:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800756e:	5898      	ldr	r0, [r3, r2]
 8007570:	ebaa 0000 	sub.w	r0, sl, r0
 8007574:	8801      	ldrh	r1, [r0, #0]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8007576:	2908      	cmp	r1, #8
 8007578:	d920      	bls.n	80075bc <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x274>
 800757a:	8903      	ldrh	r3, [r0, #8]
    auto p = data_ + field_offset;
 800757c:	eb0a 0203 	add.w	r2, sl, r3
 8007580:	b1e3      	cbz	r3, 80075bc <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x274>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8007582:	f85a 3003 	ldr.w	r3, [sl, r3]
 8007586:	9f04      	ldr	r7, [sp, #16]
  SizeT size() const { return EndianScalar(length_); }
 8007588:	58d6      	ldr	r6, [r2, r3]
 800758a:	18d0      	adds	r0, r2, r3
      }
    }
  }

  // Mark all outputs as persistent to the end of the subgraph invocation.
  for (size_t i = 0;
 800758c:	2200      	movs	r2, #0
       subgraph->outputs() != nullptr && i < subgraph->outputs()->size(); ++i) {
 800758e:	4296      	cmp	r6, r2
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8007590:	f100 0004 	add.w	r0, r0, #4
 8007594:	d912      	bls.n	80075bc <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x274>
    const int tensor_index = subgraph->outputs()->Get(i);
    AllocationInfo* current = &subgraph_allocation_info[tensor_index];
 8007596:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
    // Make sure to assign the First created value of the subgraph output
    // This will handle the case where the subgraph is empty. This helps
    // ensure all tensors have valid lifetimes before those are used by the
    // memory planner.
    UpdateFirstCreated(current, allocation_scope_count_);
 800759a:	6a29      	ldr	r1, [r5, #32]
    AllocationInfo* current = &subgraph_allocation_info[tensor_index];
 800759c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80075a0:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
  TFLITE_DCHECK(current->first_created <= allocation_scope_count);
 80075a4:	689c      	ldr	r4, [r3, #8]
 80075a6:	42a1      	cmp	r1, r4
 80075a8:	db39      	blt.n	800761e <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x2d6>
  if (current->first_created == kUninitializedLifetime) {
 80075aa:	3401      	adds	r4, #1
 80075ac:	d033      	beq.n	8007616 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x2ce>
  TFLITE_DCHECK(current->last_used <= allocation_scope_count);
 80075ae:	68dc      	ldr	r4, [r3, #12]
 80075b0:	42a1      	cmp	r1, r4
 80075b2:	db34      	blt.n	800761e <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x2d6>
  for (size_t i = 0;
 80075b4:	3201      	adds	r2, #1
       subgraph->outputs() != nullptr && i < subgraph->outputs()->size(); ++i) {
 80075b6:	4296      	cmp	r6, r2
  current->last_used = allocation_scope_count;
 80075b8:	60d9      	str	r1, [r3, #12]
       subgraph->outputs() != nullptr && i < subgraph->outputs()->size(); ++i) {
 80075ba:	d8ec      	bhi.n	8007596 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x24e>
    UpdateLastUsed(current, allocation_scope_count_);
  }
  return kTfLiteOk;
}
 80075bc:	2000      	movs	r0, #0
 80075be:	b009      	add	sp, #36	; 0x24
 80075c0:	ecbd 8b02 	vpop	{d8}
 80075c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075c8:	88dc      	ldrh	r4, [r3, #6]
    auto p = data_ + field_offset;
 80075ca:	eb0a 0204 	add.w	r2, sl, r4
 80075ce:	2c00      	cmp	r4, #0
 80075d0:	f43f aef8 	beq.w	80073c4 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x7c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 80075d4:	f85a 4004 	ldr.w	r4, [sl, r4]
 80075d8:	f8dd 8010 	ldr.w	r8, [sp, #16]
  SizeT size() const { return EndianScalar(length_); }
 80075dc:	f852 e004 	ldr.w	lr, [r2, r4]
  for (size_t i = 0;
 80075e0:	2600      	movs	r6, #0
 80075e2:	1917      	adds	r7, r2, r4
       subgraph->inputs() != nullptr && i < subgraph->inputs()->size(); ++i) {
 80075e4:	45b6      	cmp	lr, r6
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 80075e6:	f107 0c04 	add.w	ip, r7, #4
 80075ea:	f67f aeeb 	bls.w	80073c4 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x7c>
    AllocationInfo* current = &subgraph_allocation_info[tensor_index];
 80075ee:	f85c 2026 	ldr.w	r2, [ip, r6, lsl #2]
    UpdateFirstCreated(current, allocation_scope_count_);
 80075f2:	6a2f      	ldr	r7, [r5, #32]
    AllocationInfo* current = &subgraph_allocation_info[tensor_index];
 80075f4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80075f8:	eb08 02c2 	add.w	r2, r8, r2, lsl #3
  TFLITE_DCHECK(current->first_created <= allocation_scope_count);
 80075fc:	6894      	ldr	r4, [r2, #8]
 80075fe:	42a7      	cmp	r7, r4
 8007600:	db0d      	blt.n	800761e <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x2d6>
  if (current->first_created == kUninitializedLifetime) {
 8007602:	3401      	adds	r4, #1
 8007604:	d00d      	beq.n	8007622 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x2da>
  TFLITE_DCHECK(current->last_used <= allocation_scope_count);
 8007606:	68d4      	ldr	r4, [r2, #12]
 8007608:	42a7      	cmp	r7, r4
 800760a:	db08      	blt.n	800761e <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x2d6>
  for (size_t i = 0;
 800760c:	3601      	adds	r6, #1
       subgraph->inputs() != nullptr && i < subgraph->inputs()->size(); ++i) {
 800760e:	45b6      	cmp	lr, r6
  current->last_used = allocation_scope_count;
 8007610:	60d7      	str	r7, [r2, #12]
       subgraph->inputs() != nullptr && i < subgraph->inputs()->size(); ++i) {
 8007612:	d8ec      	bhi.n	80075ee <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x2a6>
 8007614:	e6d6      	b.n	80073c4 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x7c>
  TFLITE_DCHECK(current->last_used <= allocation_scope_count);
 8007616:	68dc      	ldr	r4, [r3, #12]
    current->first_created = allocation_scope_count;
 8007618:	6099      	str	r1, [r3, #8]
  TFLITE_DCHECK(current->last_used <= allocation_scope_count);
 800761a:	428c      	cmp	r4, r1
 800761c:	ddca      	ble.n	80075b4 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x26c>
  TFLITE_DCHECK(current->first_created <= allocation_scope_count);
 800761e:	f00f faa5 	bl	8016b6c <abort>
  TFLITE_DCHECK(current->last_used <= allocation_scope_count);
 8007622:	68d4      	ldr	r4, [r2, #12]
    current->first_created = allocation_scope_count;
 8007624:	6097      	str	r7, [r2, #8]
  TFLITE_DCHECK(current->last_used <= allocation_scope_count);
 8007626:	42a7      	cmp	r7, r4
 8007628:	daf0      	bge.n	800760c <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x2c4>
 800762a:	e7f8      	b.n	800761e <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x2d6>
    FLATBUFFERS_ASSERT(i < size());
 800762c:	4b07      	ldr	r3, [pc, #28]	; (800764c <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x304>)
 800762e:	4a08      	ldr	r2, [pc, #32]	; (8007650 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x308>)
 8007630:	4808      	ldr	r0, [pc, #32]	; (8007654 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x30c>)
 8007632:	21b0      	movs	r1, #176	; 0xb0
 8007634:	f00f faa2 	bl	8016b7c <__assert_func>
 8007638:	4b04      	ldr	r3, [pc, #16]	; (800764c <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x304>)
 800763a:	4a07      	ldr	r2, [pc, #28]	; (8007658 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x310>)
 800763c:	4805      	ldr	r0, [pc, #20]	; (8007654 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x30c>)
 800763e:	21b0      	movs	r1, #176	; 0xb0
 8007640:	f00f fa9c 	bl	8016b7c <__assert_func>
  SizeT size() const { return EndianScalar(length_); }
 8007644:	2300      	movs	r3, #0
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	deff      	udf	#255	; 0xff
 800764a:	bf00      	nop
 800764c:	0806a098 	.word	0x0806a098
 8007650:	0806a96c 	.word	0x0806a96c
 8007654:	0806a168 	.word	0x0806a168
 8007658:	0806a838 	.word	0x0806a838

0800765c <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE>:
    SubgraphAllocations* allocations) {
 800765c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
      model_->operator_codes()->Get(op->opcode_index());
 8007660:	6807      	ldr	r7, [r0, #0]
    SubgraphAllocations* allocations) {
 8007662:	4605      	mov	r5, r0
    return data_ - ReadScalar<soffset_t>(data_);
 8007664:	6838      	ldr	r0, [r7, #0]
 8007666:	1a38      	subs	r0, r7, r0
 8007668:	b083      	sub	sp, #12
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 800766a:	8804      	ldrh	r4, [r0, #0]
 800766c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800766e:	2c06      	cmp	r4, #6
 8007670:	4690      	mov	r8, r2
 8007672:	4699      	mov	r9, r3
 8007674:	d92e      	bls.n	80076d4 <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x78>
 8007676:	88c4      	ldrh	r4, [r0, #6]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8007678:	2c00      	cmp	r4, #0
 800767a:	d03a      	beq.n	80076f2 <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x96>
 800767c:	5938      	ldr	r0, [r7, r4]
    auto p = data_ + field_offset;
 800767e:	4427      	add	r7, r4
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8007680:	eb07 0c00 	add.w	ip, r7, r0
    return data_ - ReadScalar<soffset_t>(data_);
 8007684:	6808      	ldr	r0, [r1, #0]
 8007686:	eba1 0e00 	sub.w	lr, r1, r0
 800768a:	f8be 7000 	ldrh.w	r7, [lr]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 800768e:	2f04      	cmp	r7, #4
 8007690:	d829      	bhi.n	80076e6 <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x8a>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8007692:	2000      	movs	r0, #0
    FLATBUFFERS_ASSERT(i < size());
 8007694:	f8dc 4000 	ldr.w	r4, [ip]
 8007698:	42a0      	cmp	r0, r4
 800769a:	f080 80e6 	bcs.w	800786a <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x20e>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800769e:	f10c 0c04 	add.w	ip, ip, #4
    const uint8_t *const offset_location = p + i * element_stride;
 80076a2:	eb0c 0480 	add.w	r4, ip, r0, lsl #2
        offset_location + ReadScalar<offset_type>(offset_location));
 80076a6:	f85c 3020 	ldr.w	r3, [ip, r0, lsl #2]
    return data_ - ReadScalar<soffset_t>(data_);
 80076aa:	58e0      	ldr	r0, [r4, r3]
 80076ac:	441c      	add	r4, r3
 80076ae:	1a20      	subs	r0, r4, r0
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 80076b0:	f8b0 c000 	ldrh.w	ip, [r0]
 80076b4:	f1bc 0f0a 	cmp.w	ip, #10
 80076b8:	d908      	bls.n	80076cc <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x70>
 80076ba:	8940      	ldrh	r0, [r0, #10]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 80076bc:	b130      	cbz	r0, 80076cc <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x70>
 80076be:	5820      	ldr	r0, [r4, r0]
  switch (opcode->builtin_code()) {
 80076c0:	2877      	cmp	r0, #119	; 0x77
 80076c2:	d072      	beq.n	80077aa <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x14e>
 80076c4:	2881      	cmp	r0, #129	; 0x81
 80076c6:	d044      	beq.n	8007752 <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0xf6>
 80076c8:	2876      	cmp	r0, #118	; 0x76
 80076ca:	d014      	beq.n	80076f6 <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x9a>
 80076cc:	2000      	movs	r0, #0
}
 80076ce:	b003      	add	sp, #12
 80076d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 80076d4:	f04f 0c00 	mov.w	ip, #0
    return data_ - ReadScalar<soffset_t>(data_);
 80076d8:	6808      	ldr	r0, [r1, #0]
 80076da:	eba1 0e00 	sub.w	lr, r1, r0
 80076de:	f8be 7000 	ldrh.w	r7, [lr]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 80076e2:	2f04      	cmp	r7, #4
 80076e4:	d9d5      	bls.n	8007692 <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x36>
 80076e6:	f8be 0004 	ldrh.w	r0, [lr, #4]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 80076ea:	2800      	cmp	r0, #0
 80076ec:	d0d2      	beq.n	8007694 <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x38>
 80076ee:	5808      	ldr	r0, [r1, r0]
 80076f0:	e7d0      	b.n	8007694 <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 80076f2:	46a4      	mov	ip, r4
 80076f4:	e7f0      	b.n	80076d8 <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x7c>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 80076f6:	2f0a      	cmp	r7, #10
 80076f8:	f240 80bd 	bls.w	8007876 <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x21a>
 80076fc:	f8be 000a 	ldrh.w	r0, [lr, #10]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8007700:	2800      	cmp	r0, #0
 8007702:	f000 80b8 	beq.w	8007876 <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x21a>
  }
  const tflite::HardSwishOptions *builtin_options_as_HardSwishOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_HardSwishOptions ? static_cast<const tflite::HardSwishOptions *>(builtin_options()) : nullptr;
  }
  const tflite::IfOptions *builtin_options_as_IfOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_IfOptions ? static_cast<const tflite::IfOptions *>(builtin_options()) : nullptr;
 8007706:	5c08      	ldrb	r0, [r1, r0]
 8007708:	285c      	cmp	r0, #92	; 0x5c
 800770a:	f040 80b4 	bne.w	8007876 <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x21a>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 800770e:	2f0c      	cmp	r7, #12
 8007710:	f240 80b1 	bls.w	8007876 <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x21a>
 8007714:	f8be 000c 	ldrh.w	r0, [lr, #12]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8007718:	2800      	cmp	r0, #0
 800771a:	f000 80ac 	beq.w	8007876 <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x21a>
 800771e:	580c      	ldr	r4, [r1, r0]
    auto p = data_ + field_offset;
 8007720:	4408      	add	r0, r1
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8007722:	1907      	adds	r7, r0, r4
    return data_ - ReadScalar<soffset_t>(data_);
 8007724:	5900      	ldr	r0, [r0, r4]
 8007726:	1a38      	subs	r0, r7, r0
 8007728:	8804      	ldrh	r4, [r0, #0]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 800772a:	2c04      	cmp	r4, #4
 800772c:	d956      	bls.n	80077dc <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x180>
 800772e:	8881      	ldrh	r1, [r0, #4]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8007730:	2900      	cmp	r1, #0
 8007732:	f000 8091 	beq.w	8007858 <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x1fc>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8007736:	2c06      	cmp	r4, #6
 8007738:	5879      	ldr	r1, [r7, r1]
 800773a:	f240 808a 	bls.w	8007852 <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x1f6>
 800773e:	88c0      	ldrh	r0, [r0, #6]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8007740:	2800      	cmp	r0, #0
 8007742:	f000 8086 	beq.w	8007852 <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x1f6>
 8007746:	583c      	ldr	r4, [r7, r0]
  if (first_subgraph_index != -1) {
 8007748:	1c4a      	adds	r2, r1, #1
 800774a:	d16a      	bne.n	8007822 <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x1c6>
  if (second_subgraph_index != -1) {
 800774c:	1c63      	adds	r3, r4, #1
 800774e:	d153      	bne.n	80077f8 <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x19c>
 8007750:	e7bc      	b.n	80076cc <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x70>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8007752:	2f0a      	cmp	r7, #10
 8007754:	f240 808f 	bls.w	8007876 <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x21a>
 8007758:	f8be 000a 	ldrh.w	r0, [lr, #10]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 800775c:	2800      	cmp	r0, #0
 800775e:	f000 808a 	beq.w	8007876 <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x21a>
  }
  const tflite::CumsumOptions *builtin_options_as_CumsumOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_CumsumOptions ? static_cast<const tflite::CumsumOptions *>(builtin_options()) : nullptr;
  }
  const tflite::CallOnceOptions *builtin_options_as_CallOnceOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_CallOnceOptions ? static_cast<const tflite::CallOnceOptions *>(builtin_options()) : nullptr;
 8007762:	5c08      	ldrb	r0, [r1, r0]
 8007764:	2867      	cmp	r0, #103	; 0x67
 8007766:	f040 8086 	bne.w	8007876 <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x21a>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 800776a:	2f0c      	cmp	r7, #12
 800776c:	f240 8083 	bls.w	8007876 <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x21a>
 8007770:	f8be 000c 	ldrh.w	r0, [lr, #12]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8007774:	2800      	cmp	r0, #0
 8007776:	d07e      	beq.n	8007876 <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x21a>
 8007778:	580f      	ldr	r7, [r1, r0]
    auto p = data_ + field_offset;
 800777a:	4408      	add	r0, r1
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 800777c:	19c4      	adds	r4, r0, r7
    return data_ - ReadScalar<soffset_t>(data_);
 800777e:	59c1      	ldr	r1, [r0, r7]
 8007780:	1a61      	subs	r1, r4, r1
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8007782:	8808      	ldrh	r0, [r1, #0]
 8007784:	2804      	cmp	r0, #4
 8007786:	d96e      	bls.n	8007866 <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x20a>
 8007788:	8889      	ldrh	r1, [r1, #4]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 800778a:	b111      	cbz	r1, 8007792 <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x136>
 800778c:	5861      	ldr	r1, [r4, r1]
  if (first_subgraph_index != -1) {
 800778e:	1c48      	adds	r0, r1, #1
 8007790:	d09c      	beq.n	80076cc <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x70>
    TF_LITE_ENSURE_STATUS(
 8007792:	9600      	str	r6, [sp, #0]
    allocation_scope_count_++;
 8007794:	6a2c      	ldr	r4, [r5, #32]
 8007796:	3401      	adds	r4, #1
    TF_LITE_ENSURE_STATUS(
 8007798:	464b      	mov	r3, r9
 800779a:	4642      	mov	r2, r8
 800779c:	4628      	mov	r0, r5
    allocation_scope_count_++;
 800779e:	622c      	str	r4, [r5, #32]
    TF_LITE_ENSURE_STATUS(
 80077a0:	f7ff fdd2 	bl	8007348 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE>
 80077a4:	2800      	cmp	r0, #0
 80077a6:	d192      	bne.n	80076ce <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x72>
 80077a8:	e790      	b.n	80076cc <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x70>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 80077aa:	2f0a      	cmp	r7, #10
 80077ac:	d963      	bls.n	8007876 <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x21a>
 80077ae:	f8be 000a 	ldrh.w	r0, [lr, #10]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 80077b2:	2800      	cmp	r0, #0
 80077b4:	d05f      	beq.n	8007876 <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x21a>
    return builtin_options_type() == tflite::BuiltinOptions_WhileOptions ? static_cast<const tflite::WhileOptions *>(builtin_options()) : nullptr;
 80077b6:	5c08      	ldrb	r0, [r1, r0]
 80077b8:	285d      	cmp	r0, #93	; 0x5d
 80077ba:	d15c      	bne.n	8007876 <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x21a>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 80077bc:	2f0c      	cmp	r7, #12
 80077be:	d95a      	bls.n	8007876 <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x21a>
 80077c0:	f8be 000c 	ldrh.w	r0, [lr, #12]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 80077c4:	2800      	cmp	r0, #0
 80077c6:	d056      	beq.n	8007876 <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x21a>
 80077c8:	580c      	ldr	r4, [r1, r0]
    auto p = data_ + field_offset;
 80077ca:	4401      	add	r1, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 80077cc:	eb01 0c04 	add.w	ip, r1, r4
    return data_ - ReadScalar<soffset_t>(data_);
 80077d0:	590c      	ldr	r4, [r1, r4]
 80077d2:	ebac 0404 	sub.w	r4, ip, r4
 80077d6:	8827      	ldrh	r7, [r4, #0]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 80077d8:	2f04      	cmp	r7, #4
 80077da:	d82e      	bhi.n	800783a <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x1de>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 80077dc:	2100      	movs	r1, #0
 80077de:	9600      	str	r6, [sp, #0]
    allocation_scope_count_++;
 80077e0:	6a28      	ldr	r0, [r5, #32]
 80077e2:	3001      	adds	r0, #1
 80077e4:	6228      	str	r0, [r5, #32]
    TF_LITE_ENSURE_STATUS(
 80077e6:	464b      	mov	r3, r9
 80077e8:	4642      	mov	r2, r8
 80077ea:	4628      	mov	r0, r5
 80077ec:	f7ff fdac 	bl	8007348 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE>
 80077f0:	2800      	cmp	r0, #0
 80077f2:	f47f af6c 	bne.w	80076ce <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x72>
 80077f6:	2400      	movs	r4, #0
    TF_LITE_ENSURE_STATUS(
 80077f8:	960a      	str	r6, [sp, #40]	; 0x28
 80077fa:	4621      	mov	r1, r4
    allocation_scope_count_++;
 80077fc:	6a2c      	ldr	r4, [r5, #32]
    TF_LITE_ENSURE_STATUS(
 80077fe:	464b      	mov	r3, r9
    allocation_scope_count_++;
 8007800:	3401      	adds	r4, #1
    TF_LITE_ENSURE_STATUS(
 8007802:	4642      	mov	r2, r8
 8007804:	4628      	mov	r0, r5
    allocation_scope_count_++;
 8007806:	622c      	str	r4, [r5, #32]
}
 8007808:	b003      	add	sp, #12
 800780a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    TF_LITE_ENSURE_STATUS(
 800780e:	f7ff bd9b 	b.w	8007348 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8007812:	2f06      	cmp	r7, #6
 8007814:	d9e2      	bls.n	80077dc <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x180>
 8007816:	88e1      	ldrh	r1, [r4, #6]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8007818:	2900      	cmp	r1, #0
 800781a:	d0e0      	beq.n	80077de <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x182>
 800781c:	f85c 4001 	ldr.w	r4, [ip, r1]
 8007820:	4601      	mov	r1, r0
    TF_LITE_ENSURE_STATUS(
 8007822:	9600      	str	r6, [sp, #0]
    allocation_scope_count_++;
 8007824:	6a28      	ldr	r0, [r5, #32]
 8007826:	3001      	adds	r0, #1
 8007828:	6228      	str	r0, [r5, #32]
    TF_LITE_ENSURE_STATUS(
 800782a:	464b      	mov	r3, r9
 800782c:	4642      	mov	r2, r8
 800782e:	4628      	mov	r0, r5
 8007830:	f7ff fd8a 	bl	8007348 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE>
 8007834:	2800      	cmp	r0, #0
 8007836:	d089      	beq.n	800774c <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0xf0>
 8007838:	e749      	b.n	80076ce <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x72>
 800783a:	88a0      	ldrh	r0, [r4, #4]
 800783c:	2800      	cmp	r0, #0
 800783e:	d0e8      	beq.n	8007812 <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x1b6>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8007840:	2f06      	cmp	r7, #6
 8007842:	f85c 1000 	ldr.w	r1, [ip, r0]
 8007846:	d904      	bls.n	8007852 <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x1f6>
 8007848:	88e0      	ldrh	r0, [r4, #6]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 800784a:	b110      	cbz	r0, 8007852 <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x1f6>
 800784c:	f85c 4000 	ldr.w	r4, [ip, r0]
 8007850:	e77a      	b.n	8007748 <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0xec>
  if (first_subgraph_index != -1) {
 8007852:	1c4c      	adds	r4, r1, #1
 8007854:	d0cf      	beq.n	80077f6 <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x19a>
 8007856:	e7c2      	b.n	80077de <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x182>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8007858:	2c06      	cmp	r4, #6
 800785a:	d9c0      	bls.n	80077de <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x182>
 800785c:	88c0      	ldrh	r0, [r0, #6]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 800785e:	2800      	cmp	r0, #0
 8007860:	d0bc      	beq.n	80077dc <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x180>
 8007862:	583c      	ldr	r4, [r7, r0]
 8007864:	e7dd      	b.n	8007822 <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x1c6>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8007866:	2100      	movs	r1, #0
 8007868:	e793      	b.n	8007792 <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x136>
    FLATBUFFERS_ASSERT(i < size());
 800786a:	4b04      	ldr	r3, [pc, #16]	; (800787c <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x220>)
 800786c:	4a04      	ldr	r2, [pc, #16]	; (8007880 <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x224>)
 800786e:	4805      	ldr	r0, [pc, #20]	; (8007884 <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x228>)
 8007870:	21b0      	movs	r1, #176	; 0xb0
 8007872:	f00f f983 	bl	8016b7c <__assert_func>
 8007876:	2300      	movs	r3, #0
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	deff      	udf	#255	; 0xff
 800787c:	0806a098 	.word	0x0806a098
 8007880:	0806ab84 	.word	0x0806ab84
 8007884:	0806a168 	.word	0x0806a168

08007888 <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl>:

// Get offline tensors allocation plan. See
// micro/docs/memory_management.md for more info.
TfLiteStatus AllocationInfoBuilder::GetOfflinePlannedOffsets(
    const int32_t** offline_planner_offsets) {
 8007888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (model_->metadata()) {
 800788c:	f8d0 b000 	ldr.w	fp, [r0]
    return data_ - ReadScalar<soffset_t>(data_);
 8007890:	f8db 2000 	ldr.w	r2, [fp]
 8007894:	ebab 0a02 	sub.w	sl, fp, r2
    const int32_t** offline_planner_offsets) {
 8007898:	b085      	sub	sp, #20
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 800789a:	f8ba 2000 	ldrh.w	r2, [sl]
 800789e:	9001      	str	r0, [sp, #4]
 80078a0:	2a10      	cmp	r2, #16
 80078a2:	9102      	str	r1, [sp, #8]
 80078a4:	d959      	bls.n	800795a <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0xd2>
 80078a6:	f8ba 2010 	ldrh.w	r2, [sl, #16]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 80078aa:	2a00      	cmp	r2, #0
 80078ac:	d055      	beq.n	800795a <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0xd2>
 80078ae:	f85b 1002 	ldr.w	r1, [fp, r2]
    auto p = data_ + field_offset;
 80078b2:	445a      	add	r2, fp
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 80078b4:	1856      	adds	r6, r2, r1
  SizeT size() const { return EndianScalar(length_); }
 80078b6:	f852 9001 	ldr.w	r9, [r2, r1]
    for (size_t i = 0; i < model_->metadata()->size(); ++i) {
 80078ba:	f1b9 0f00 	cmp.w	r9, #0
 80078be:	d04c      	beq.n	800795a <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0xd2>
      auto metadata = model_->metadata()->Get(i);

      if (metadata->name()) {
        const size_t metadata_name_size = metadata->name()->size();

        if ((strncmp(metadata->name()->c_str(), kOfflineMemAllocMetadata,
 80078c0:	4932      	ldr	r1, [pc, #200]	; (800798c <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0x104>)
    for (size_t i = 0; i < model_->metadata()->size(); ++i) {
 80078c2:	f8cd a00c 	str.w	sl, [sp, #12]
 80078c6:	3604      	adds	r6, #4
 80078c8:	2700      	movs	r7, #0
    const uint8_t *const offset_location = p + i * element_stride;
 80078ca:	4633      	mov	r3, r6
T ReadScalar(const void *p) {
 80078cc:	3604      	adds	r6, #4
        offset_location + ReadScalar<offset_type>(offset_location));
 80078ce:	681c      	ldr	r4, [r3, #0]
    return data_ - ReadScalar<soffset_t>(data_);
 80078d0:	591d      	ldr	r5, [r3, r4]
 80078d2:	441c      	add	r4, r3
 80078d4:	1b65      	subs	r5, r4, r5
  return EndianScalar(*reinterpret_cast<const T *>(p));
 80078d6:	f8b5 8000 	ldrh.w	r8, [r5]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 80078da:	f1b8 0f04 	cmp.w	r8, #4
 80078de:	d939      	bls.n	8007954 <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0xcc>
 80078e0:	88ab      	ldrh	r3, [r5, #4]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d036      	beq.n	8007954 <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0xcc>
 80078e6:	58e2      	ldr	r2, [r4, r3]
    auto p = data_ + field_offset;
 80078e8:	4423      	add	r3, r4
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 80078ea:	1898      	adds	r0, r3, r2
 80078ec:	f853 a002 	ldr.w	sl, [r3, r2]
      if (__b < __a)
 80078f0:	f1ba 0f17 	cmp.w	sl, #23
 80078f4:	d82e      	bhi.n	8007954 <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0xcc>
        if ((strncmp(metadata->name()->c_str(), kOfflineMemAllocMetadata,
 80078f6:	3004      	adds	r0, #4
 80078f8:	4652      	mov	r2, sl
 80078fa:	f00f ffff 	bl	80178fc <strncmp>
                     std::min(metadata_name_size,
                              strlen(kOfflineMemAllocMetadata))) == 0) &&
 80078fe:	4923      	ldr	r1, [pc, #140]	; (800798c <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0x104>)
 8007900:	bb40      	cbnz	r0, 8007954 <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0xcc>
 8007902:	f1ba 0f17 	cmp.w	sl, #23
 8007906:	d125      	bne.n	8007954 <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0xcc>
 8007908:	9b03      	ldr	r3, [sp, #12]
 800790a:	899b      	ldrh	r3, [r3, #12]
 800790c:	b11b      	cbz	r3, 8007916 <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0x8e>
 800790e:	f85b 2003 	ldr.w	r2, [fp, r3]
    auto p = data_ + field_offset;
 8007912:	445b      	add	r3, fp
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8007914:	4413      	add	r3, r2
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8007916:	f1b8 0f06 	cmp.w	r8, #6
 800791a:	d822      	bhi.n	8007962 <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0xda>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 800791c:	2000      	movs	r0, #0
    FLATBUFFERS_ASSERT(i < size());
 800791e:	681a      	ldr	r2, [r3, #0]
 8007920:	4290      	cmp	r0, r2
 8007922:	d229      	bcs.n	8007978 <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0xf0>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8007924:	3304      	adds	r3, #4
    const uint8_t *const offset_location = p + i * element_stride;
 8007926:	eb03 0280 	add.w	r2, r3, r0, lsl #2
        offset_location + ReadScalar<offset_type>(offset_location));
 800792a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    return data_ - ReadScalar<soffset_t>(data_);
 800792e:	5813      	ldr	r3, [r2, r0]
 8007930:	4402      	add	r2, r0
 8007932:	1ad3      	subs	r3, r2, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8007934:	8818      	ldrh	r0, [r3, #0]
 8007936:	2804      	cmp	r0, #4
 8007938:	d924      	bls.n	8007984 <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0xfc>
 800793a:	889b      	ldrh	r3, [r3, #4]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 800793c:	b313      	cbz	r3, 8007984 <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0xfc>
 800793e:	58d0      	ldr	r0, [r2, r3]
    auto p = data_ + field_offset;
 8007940:	441a      	add	r2, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8007942:	1813      	adds	r3, r2, r0
              reinterpret_cast<const uint32_t*>(array->data());
          const size_t nbr_tensors = static_cast<size_t>(metadata_buffer[2]);
          *offline_planner_offsets =
              reinterpret_cast<const int32_t*>(&metadata_buffer[3]);

          if (info_.tensor_count != nbr_tensors) {
 8007944:	9a01      	ldr	r2, [sp, #4]
          const size_t nbr_tensors = static_cast<size_t>(metadata_buffer[2]);
 8007946:	68dc      	ldr	r4, [r3, #12]
          if (info_.tensor_count != nbr_tensors) {
 8007948:	6992      	ldr	r2, [r2, #24]
          *offline_planner_offsets =
 800794a:	9802      	ldr	r0, [sp, #8]
              reinterpret_cast<const int32_t*>(&metadata_buffer[3]);
 800794c:	3310      	adds	r3, #16
          if (info_.tensor_count != nbr_tensors) {
 800794e:	42a2      	cmp	r2, r4
          *offline_planner_offsets =
 8007950:	6003      	str	r3, [r0, #0]
          if (info_.tensor_count != nbr_tensors) {
 8007952:	d10b      	bne.n	800796c <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0xe4>
    for (size_t i = 0; i < model_->metadata()->size(); ++i) {
 8007954:	3701      	adds	r7, #1
 8007956:	454f      	cmp	r7, r9
 8007958:	d1b7      	bne.n	80078ca <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0x42>
          }
        }
      }
    }
  }
  return kTfLiteOk;
 800795a:	2000      	movs	r0, #0
}
 800795c:	b005      	add	sp, #20
 800795e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007962:	88e8      	ldrh	r0, [r5, #6]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8007964:	2800      	cmp	r0, #0
 8007966:	d0da      	beq.n	800791e <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0x96>
 8007968:	5820      	ldr	r0, [r4, r0]
 800796a:	e7d8      	b.n	800791e <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0x96>
            MicroPrintf(
 800796c:	4808      	ldr	r0, [pc, #32]	; (8007990 <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0x108>)
 800796e:	4621      	mov	r1, r4
 8007970:	f001 ff34 	bl	80097dc <_Z11MicroPrintfPKcz>
            return kTfLiteError;
 8007974:	2001      	movs	r0, #1
 8007976:	e7f1      	b.n	800795c <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0xd4>
    FLATBUFFERS_ASSERT(i < size());
 8007978:	4b06      	ldr	r3, [pc, #24]	; (8007994 <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0x10c>)
 800797a:	4a07      	ldr	r2, [pc, #28]	; (8007998 <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0x110>)
 800797c:	4807      	ldr	r0, [pc, #28]	; (800799c <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0x114>)
 800797e:	21b0      	movs	r1, #176	; 0xb0
 8007980:	f00f f8fc 	bl	8016b7c <__assert_func>
          const size_t nbr_tensors = static_cast<size_t>(metadata_buffer[2]);
 8007984:	2300      	movs	r3, #0
 8007986:	68db      	ldr	r3, [r3, #12]
 8007988:	deff      	udf	#255	; 0xff
 800798a:	bf00      	nop
 800798c:	0806adb4 	.word	0x0806adb4
 8007990:	0806ad68 	.word	0x0806ad68
 8007994:	0806a098 	.word	0x0806a098
 8007998:	0806ac7c 	.word	0x0806ac7c
 800799c:	0806a168 	.word	0x0806a168

080079a0 <_ZN6tflite18MicroMemoryPlanner9AddBufferEiiii>:
  // This is to support offline memory planning from the flatbuffer metadata.
  // By default, it returns an error.
  virtual TfLiteStatus AddBuffer(int size, int first_time_used,
                                 int last_time_used, int offline_offset) {
    return kTfLiteError;
  }
 80079a0:	2001      	movs	r0, #1
 80079a2:	4770      	bx	lr

080079a4 <_ZN6tflite18MicroMemoryPlanner4InitEPhi>:
  // The default implementation is for the memory planner that does not need
  // scratch buffer and simply returns ok.
  virtual TfLiteStatus Init(unsigned char* scratch_buffer,
                            int scratch_buffer_size) {
    return kTfLiteOk;
  }
 80079a4:	2000      	movs	r0, #0
 80079a6:	4770      	bx	lr

080079a8 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator8AllocateEjj>:
  explicit MicroBuiltinDataAllocator(
      IPersistentBufferAllocator* persistent_allocator)
      : persistent_allocator_(persistent_allocator) {}

  void* Allocate(size_t size, size_t alignment_hint) override {
    return persistent_allocator_->AllocatePersistentBuffer(size,
 80079a8:	6840      	ldr	r0, [r0, #4]
 80079aa:	6803      	ldr	r3, [r0, #0]
 80079ac:	689b      	ldr	r3, [r3, #8]
 80079ae:	4718      	bx	r3

080079b0 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator10DeallocateEPv>:
                                                           alignment_hint);
  }
  void Deallocate(void* data) override {
    // Do not deallocate, builtin data needs to be available for the life time
    // of the model.
  }
 80079b0:	4770      	bx	lr
 80079b2:	bf00      	nop

080079b4 <_ZN6tflite14MicroAllocatorD0Ev>:
    : non_persistent_buffer_allocator_(non_persistent_buffer_allocator),
      persistent_buffer_allocator_(persistent_buffer_allocator),
      memory_planner_(memory_planner),
      model_is_allocating_(false) {}

MicroAllocator::~MicroAllocator() {}
 80079b4:	4770      	bx	lr
 80079b6:	bf00      	nop

080079b8 <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEj>:
  model_is_allocating_ = false;
  return kTfLiteOk;
}

void* MicroAllocator::AllocatePersistentBuffer(size_t bytes) {
  return persistent_buffer_allocator_->AllocatePersistentBuffer(
 80079b8:	6880      	ldr	r0, [r0, #8]
 80079ba:	6803      	ldr	r3, [r0, #0]
 80079bc:	2210      	movs	r2, #16
 80079be:	689b      	ldr	r3, [r3, #8]
 80079c0:	4718      	bx	r3
 80079c2:	bf00      	nop

080079c4 <_ZN6tflite14MicroAllocator18AllocateTempBufferEjj>:
  }
  return tensor;
}

uint8_t* MicroAllocator::AllocateTempBuffer(size_t size, size_t alignment) {
  return non_persistent_buffer_allocator_->AllocateTemp(size, alignment);
 80079c4:	6840      	ldr	r0, [r0, #4]
 80079c6:	6803      	ldr	r3, [r0, #0]
 80079c8:	689b      	ldr	r3, [r3, #8]
 80079ca:	4718      	bx	r3

080079cc <_ZN6tflite14MicroAllocator20DeallocateTempBufferEPh>:
}

void MicroAllocator::DeallocateTempBuffer(uint8_t* buffer) {
  non_persistent_buffer_allocator_->DeallocateTemp(buffer);
 80079cc:	6840      	ldr	r0, [r0, #4]
 80079ce:	6803      	ldr	r3, [r0, #0]
 80079d0:	68db      	ldr	r3, [r3, #12]
 80079d2:	4718      	bx	r3

080079d4 <_ZN6tflite14MicroAllocator20ResetTempAllocationsEv>:
}

TfLiteStatus MicroAllocator::ResetTempAllocations() {
  return non_persistent_buffer_allocator_->ResetTempAllocations();
 80079d4:	6840      	ldr	r0, [r0, #4]
 80079d6:	6803      	ldr	r3, [r0, #0]
 80079d8:	695b      	ldr	r3, [r3, #20]
 80079da:	4718      	bx	r3

080079dc <_ZN6tflite14MicroAllocator20IsAllTempDeallocatedEv>:
}

bool MicroAllocator::IsAllTempDeallocated() {
  return non_persistent_buffer_allocator_->IsAllTempDeallocated();
 80079dc:	6840      	ldr	r0, [r0, #4]
 80079de:	6803      	ldr	r3, [r0, #0]
 80079e0:	691b      	ldr	r3, [r3, #16]
 80079e2:	4718      	bx	r3

080079e4 <_ZN6tflite14MicroAllocator38AllocatePersistentTfLiteTensorInternalEv>:
  return kTfLiteOk;
}

TfLiteTensor* MicroAllocator::AllocatePersistentTfLiteTensorInternal() {
  return reinterpret_cast<TfLiteTensor*>(
      persistent_buffer_allocator_->AllocatePersistentBuffer(
 80079e4:	6880      	ldr	r0, [r0, #8]
 80079e6:	6803      	ldr	r3, [r0, #0]
 80079e8:	2204      	movs	r2, #4
 80079ea:	689b      	ldr	r3, [r3, #8]
 80079ec:	2120      	movs	r1, #32
 80079ee:	4718      	bx	r3

080079f0 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD0Ev>:
class MicroBuiltinDataAllocator : public TfLiteBridgeBuiltinDataAllocator {
 80079f0:	4770      	bx	lr
 80079f2:	bf00      	nop

080079f4 <_ZN6tflite14MicroAllocator26DeallocateTempTfLiteTensorEP12TfLiteTensor>:
void MicroAllocator::DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
 80079f4:	b570      	push	{r4, r5, r6, lr}
  TFLITE_DCHECK(tensor != nullptr);
 80079f6:	b1e9      	cbz	r1, 8007a34 <_ZN6tflite14MicroAllocator26DeallocateTempTfLiteTensorEP12TfLiteTensor+0x40>
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
 80079f8:	780b      	ldrb	r3, [r1, #0]
 80079fa:	2b01      	cmp	r3, #1
 80079fc:	4605      	mov	r5, r0
 80079fe:	460c      	mov	r4, r1
 8007a00:	d00b      	beq.n	8007a1a <_ZN6tflite14MicroAllocator26DeallocateTempTfLiteTensorEP12TfLiteTensor+0x26>
  non_persistent_buffer_allocator_->DeallocateTemp(
 8007a02:	6868      	ldr	r0, [r5, #4]
  tensor->quantization.type = kTfLiteNoQuantization;
 8007a04:	2300      	movs	r3, #0
  non_persistent_buffer_allocator_->DeallocateTemp(
 8007a06:	6802      	ldr	r2, [r0, #0]
  tensor->quantization.params = nullptr;
 8007a08:	6063      	str	r3, [r4, #4]
  tensor->data.data = nullptr;
 8007a0a:	6123      	str	r3, [r4, #16]
  non_persistent_buffer_allocator_->DeallocateTemp(
 8007a0c:	68d2      	ldr	r2, [r2, #12]
  tensor->quantization.type = kTfLiteNoQuantization;
 8007a0e:	7023      	strb	r3, [r4, #0]
  tensor->dims = nullptr;
 8007a10:	6163      	str	r3, [r4, #20]
  non_persistent_buffer_allocator_->DeallocateTemp(
 8007a12:	4621      	mov	r1, r4
}
 8007a14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  non_persistent_buffer_allocator_->DeallocateTemp(
 8007a18:	4710      	bx	r2
    TFLITE_DCHECK(tensor->quantization.params != nullptr);
 8007a1a:	684e      	ldr	r6, [r1, #4]
 8007a1c:	b156      	cbz	r6, 8007a34 <_ZN6tflite14MicroAllocator26DeallocateTempTfLiteTensorEP12TfLiteTensor+0x40>
    non_persistent_buffer_allocator_->DeallocateTemp(
 8007a1e:	6840      	ldr	r0, [r0, #4]
 8007a20:	6871      	ldr	r1, [r6, #4]
 8007a22:	6803      	ldr	r3, [r0, #0]
 8007a24:	68db      	ldr	r3, [r3, #12]
 8007a26:	4798      	blx	r3
    non_persistent_buffer_allocator_->DeallocateTemp(
 8007a28:	6868      	ldr	r0, [r5, #4]
 8007a2a:	6803      	ldr	r3, [r0, #0]
 8007a2c:	4631      	mov	r1, r6
 8007a2e:	68db      	ldr	r3, [r3, #12]
 8007a30:	4798      	blx	r3
 8007a32:	e7e6      	b.n	8007a02 <_ZN6tflite14MicroAllocator26DeallocateTempTfLiteTensorEP12TfLiteTensor+0xe>
  TFLITE_DCHECK(tensor != nullptr);
 8007a34:	f00f f89a 	bl	8016b6c <abort>

08007a38 <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj>:
          max_head_buffer_usage_, MicroArenaBufferAlignment()));
  return kTfLiteOk;
}

TfLiteStatus MicroAllocator::AllocateScratchBufferHandles(
    ScratchBufferHandle** scratch_buffer_handles, size_t handle_count) {
 8007a38:	b510      	push	{r4, lr}
  TFLITE_DCHECK(scratch_buffer_handles != nullptr);
 8007a3a:	b161      	cbz	r1, 8007a56 <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj+0x1e>

  if (scratch_buffer_request_count_ == 0) {
 8007a3c:	4613      	mov	r3, r2
 8007a3e:	6982      	ldr	r2, [r0, #24]
 8007a40:	b13a      	cbz	r2, 8007a52 <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj+0x1a>
  }

  // Allocate a consecutive block of memory store the scratch buffer handles.
  // This alignment ensures quick lookup during inference time for the model:
  *scratch_buffer_handles = reinterpret_cast<ScratchBufferHandle*>(
      persistent_buffer_allocator_->AllocatePersistentBuffer(
 8007a42:	6880      	ldr	r0, [r0, #8]
 8007a44:	460c      	mov	r4, r1
 8007a46:	0099      	lsls	r1, r3, #2
 8007a48:	6803      	ldr	r3, [r0, #0]
 8007a4a:	2204      	movs	r2, #4
 8007a4c:	689b      	ldr	r3, [r3, #8]
 8007a4e:	4798      	blx	r3
  *scratch_buffer_handles = reinterpret_cast<ScratchBufferHandle*>(
 8007a50:	6020      	str	r0, [r4, #0]
          sizeof(ScratchBufferHandle) * handle_count,
          alignof(ScratchBufferHandle)));

  return kTfLiteOk;
}
 8007a52:	2000      	movs	r0, #0
 8007a54:	bd10      	pop	{r4, pc}
  TFLITE_DCHECK(scratch_buffer_handles != nullptr);
 8007a56:	f00f f889 	bl	8016b6c <abort>
 8007a5a:	bf00      	nop

08007a5c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE>:
    ScratchBufferHandle* scratch_buffer_handles) {
 8007a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a60:	4604      	mov	r4, r0
  AllocationInfoBuilder builder(model, non_persistent_buffer_allocator_);
 8007a62:	6840      	ldr	r0, [r0, #4]
    ScratchBufferHandle* scratch_buffer_handles) {
 8007a64:	b091      	sub	sp, #68	; 0x44
// `Finish`.
class AllocationInfoBuilder {
 public:
  AllocationInfoBuilder(const Model* model,
                        INonPersistentBufferAllocator* non_persistent_allocator)
      : model_(model), non_persistent_allocator_(non_persistent_allocator) {}
 8007a66:	e9cd 1007 	strd	r1, r0, [sp, #28]
 8007a6a:	460e      	mov	r6, r1
 8007a6c:	4699      	mov	r9, r3
  TF_LITE_ENSURE_STATUS(
 8007a6e:	69a1      	ldr	r1, [r4, #24]
 8007a70:	2300      	movs	r3, #0
 8007a72:	a807      	add	r0, sp, #28
    ScratchBufferHandle* scratch_buffer_handles) {
 8007a74:	4617      	mov	r7, r2
 8007a76:	930f      	str	r3, [sp, #60]	; 0x3c
  TF_LITE_ENSURE_STATUS(
 8007a78:	f7ff fa90 	bl	8006f9c <_ZN6tflite21AllocationInfoBuilder20CreateAllocationInfoEi>
 8007a7c:	4682      	mov	sl, r0
 8007a7e:	b118      	cbz	r0, 8007a88 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x2c>
}
 8007a80:	4650      	mov	r0, sl
 8007a82:	b011      	add	sp, #68	; 0x44
 8007a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  const int32_t* offline_planner_offsets = nullptr;
 8007a88:	9005      	str	r0, [sp, #20]
  TF_LITE_ENSURE_STATUS(
 8007a8a:	a905      	add	r1, sp, #20
 8007a8c:	a807      	add	r0, sp, #28
 8007a8e:	f7ff fefb 	bl	8007888 <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl>
 8007a92:	4682      	mov	sl, r0
 8007a94:	2800      	cmp	r0, #0
 8007a96:	d1f3      	bne.n	8007a80 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x24>
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 8007a98:	4605      	mov	r5, r0
    TF_LITE_ENSURE_STATUS(AllocateVariables(
 8007a9a:	f107 0804 	add.w	r8, r7, #4
 8007a9e:	46ba      	mov	sl, r7
 8007aa0:	e016      	b.n	8007ad0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x74>
 8007aa2:	891a      	ldrh	r2, [r3, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8007aa4:	b1e2      	cbz	r2, 8007ae0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x84>
 8007aa6:	58b1      	ldr	r1, [r6, r2]
    auto p = data_ + field_offset;
 8007aa8:	4432      	add	r2, r6
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8007aaa:	1853      	adds	r3, r2, r1
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 8007aac:	5852      	ldr	r2, [r2, r1]
 8007aae:	4295      	cmp	r5, r2
 8007ab0:	d229      	bcs.n	8007b06 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0xaa>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8007ab2:	3304      	adds	r3, #4
    TF_LITE_ENSURE_STATUS(AllocateVariables(
 8007ab4:	6820      	ldr	r0, [r4, #0]
 8007ab6:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
 8007aba:	6b07      	ldr	r7, [r0, #48]	; 0x30
    const uint8_t *const offset_location = p + i * element_stride;
 8007abc:	eb03 0185 	add.w	r1, r3, r5, lsl #2
 8007ac0:	4411      	add	r1, r2
 8007ac2:	9b05      	ldr	r3, [sp, #20]
 8007ac4:	f858 2035 	ldr.w	r2, [r8, r5, lsl #3]
 8007ac8:	4620      	mov	r0, r4
 8007aca:	47b8      	blx	r7
 8007acc:	b9b0      	cbnz	r0, 8007afc <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0xa0>
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 8007ace:	3501      	adds	r5, #1
    return data_ - ReadScalar<soffset_t>(data_);
 8007ad0:	6833      	ldr	r3, [r6, #0]
 8007ad2:	1af3      	subs	r3, r6, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8007ad4:	881a      	ldrh	r2, [r3, #0]
 8007ad6:	2a08      	cmp	r2, #8
 8007ad8:	d8e3      	bhi.n	8007aa2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x46>
  SizeT size() const { return EndianScalar(length_); }
 8007ada:	2300      	movs	r3, #0
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	deff      	udf	#255	; 0xff
 8007ae0:	4613      	mov	r3, r2
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	deff      	udf	#255	; 0xff
        TF_LITE_ENSURE_STATUS(planner->AddBuffer(aligned_bytes_required,
 8007ae6:	f8d9 3000 	ldr.w	r3, [r9]
 8007aea:	4601      	mov	r1, r0
 8007aec:	f8d3 a008 	ldr.w	sl, [r3, #8]
 8007af0:	4648      	mov	r0, r9
 8007af2:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8007af6:	47d0      	blx	sl
 8007af8:	2800      	cmp	r0, #0
 8007afa:	d03e      	beq.n	8007b7a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x11e>
 8007afc:	4682      	mov	sl, r0
}
 8007afe:	4650      	mov	r0, sl
 8007b00:	b011      	add	sp, #68	; 0x44
 8007b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TF_LITE_ENSURE_STATUS(
 8007b06:	4652      	mov	r2, sl
 8007b08:	9905      	ldr	r1, [sp, #20]
 8007b0a:	a807      	add	r0, sp, #28
 8007b0c:	f7ff fb2a 	bl	8007164 <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE>
 8007b10:	4657      	mov	r7, sl
 8007b12:	4682      	mov	sl, r0
 8007b14:	2800      	cmp	r0, #0
 8007b16:	d1b3      	bne.n	8007a80 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x24>

  return kTfLiteOk;
}

internal::ScratchBufferRequest* MicroAllocator::GetScratchBufferRequests() {
  return reinterpret_cast<internal::ScratchBufferRequest*>(AlignPointerUp(
 8007b18:	2104      	movs	r1, #4
 8007b1a:	69e0      	ldr	r0, [r4, #28]
 8007b1c:	f7ff f94c 	bl	8006db8 <_ZN6tflite14AlignPointerUpEPhj>
  TF_LITE_ENSURE_STATUS(builder.MarkAllocationLifetimes(
 8007b20:	4651      	mov	r1, sl
  return reinterpret_cast<internal::ScratchBufferRequest*>(AlignPointerUp(
 8007b22:	4602      	mov	r2, r0
  TF_LITE_ENSURE_STATUS(builder.MarkAllocationLifetimes(
 8007b24:	9700      	str	r7, [sp, #0]
 8007b26:	464b      	mov	r3, r9
 8007b28:	a807      	add	r0, sp, #28
 8007b2a:	f7ff fc0d 	bl	8007348 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE>
 8007b2e:	4682      	mov	sl, r0
 8007b30:	2800      	cmp	r0, #0
 8007b32:	d1a5      	bne.n	8007a80 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x24>
      non_persistent_buffer_allocator_->GetAvailableMemory(
 8007b34:	6860      	ldr	r0, [r4, #4]

  // Returns the number of allocations.
  int AllocationCount() const { return info_.allocation_info_count; }

  // Returns a pointer to the built AllocationInfo array.
  AllocationInfo* Finish() const { return info_.allocation_info; }
 8007b36:	e9dd 2809 	ldrd	r2, r8, [sp, #36]	; 0x24
 8007b3a:	6803      	ldr	r3, [r0, #0]
 8007b3c:	9202      	str	r2, [sp, #8]
 8007b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b40:	2110      	movs	r1, #16
 8007b42:	4798      	blx	r3
 8007b44:	4605      	mov	r5, r0
  uint8_t* planner_arena = non_persistent_buffer_allocator_->AllocateTemp(
 8007b46:	6860      	ldr	r0, [r4, #4]
 8007b48:	6803      	ldr	r3, [r0, #0]
 8007b4a:	2210      	movs	r2, #16
 8007b4c:	689b      	ldr	r3, [r3, #8]
 8007b4e:	4629      	mov	r1, r5
 8007b50:	4798      	blx	r3
  if (planner_arena == nullptr) {
 8007b52:	9003      	str	r0, [sp, #12]
 8007b54:	b388      	cbz	r0, 8007bba <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x15e>
  memory_planner_->Init(planner_arena, remaining_arena_size);
 8007b56:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007b5a:	4a48      	ldr	r2, [pc, #288]	; (8007c7c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x220>)
 8007b5c:	f8d9 3000 	ldr.w	r3, [r9]
 8007b60:	69db      	ldr	r3, [r3, #28]
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d12f      	bne.n	8007bc6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x16a>
  for (size_t i = 0; i < allocation_info_size; ++i) {
 8007b66:	f1b8 0f00 	cmp.w	r8, #0
 8007b6a:	f000 8081 	beq.w	8007c70 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x214>
 8007b6e:	9d02      	ldr	r5, [sp, #8]
 8007b70:	f8df b10c 	ldr.w	fp, [pc, #268]	; 8007c80 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x224>
 8007b74:	462f      	mov	r7, r5
 8007b76:	2600      	movs	r6, #0
 8007b78:	e004      	b.n	8007b84 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x128>
 8007b7a:	3601      	adds	r6, #1
 8007b7c:	45b0      	cmp	r8, r6
 8007b7e:	f105 0518 	add.w	r5, r5, #24
 8007b82:	d027      	beq.n	8007bd4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x178>
    if (current->needs_allocating) {
 8007b84:	7d2b      	ldrb	r3, [r5, #20]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d0f7      	beq.n	8007b7a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x11e>
          AlignSizeUp(current->bytes, MicroArenaBufferAlignment());
 8007b8a:	6828      	ldr	r0, [r5, #0]
 8007b8c:	2110      	movs	r1, #16
 8007b8e:	f7ff f921 	bl	8006dd4 <_ZN6tflite11AlignSizeUpEjj>
      if (current->offline_offset == kOnlinePlannedBuffer) {
 8007b92:	692b      	ldr	r3, [r5, #16]
 8007b94:	1c5a      	adds	r2, r3, #1
 8007b96:	d0a6      	beq.n	8007ae6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x8a>
        TF_LITE_ENSURE_STATUS(
 8007b98:	f8d9 2000 	ldr.w	r2, [r9]
 8007b9c:	f8d2 a00c 	ldr.w	sl, [r2, #12]
 8007ba0:	45da      	cmp	sl, fp
 8007ba2:	e9d5 2102 	ldrd	r2, r1, [r5, #8]
 8007ba6:	d008      	beq.n	8007bba <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x15e>
 8007ba8:	9300      	str	r3, [sp, #0]
 8007baa:	460b      	mov	r3, r1
 8007bac:	4601      	mov	r1, r0
 8007bae:	4648      	mov	r0, r9
 8007bb0:	47d0      	blx	sl
 8007bb2:	2800      	cmp	r0, #0
 8007bb4:	d0e1      	beq.n	8007b7a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x11e>
 8007bb6:	4682      	mov	sl, r0
 8007bb8:	e7a1      	b.n	8007afe <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0xa2>
    return kTfLiteError;
 8007bba:	f04f 0a01 	mov.w	sl, #1
}
 8007bbe:	4650      	mov	r0, sl
 8007bc0:	b011      	add	sp, #68	; 0x44
 8007bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  memory_planner_->Init(planner_arena, remaining_arena_size);
 8007bc6:	4648      	mov	r0, r9
 8007bc8:	9903      	ldr	r1, [sp, #12]
 8007bca:	462a      	mov	r2, r5
 8007bcc:	4798      	blx	r3
  TF_LITE_ENSURE_STATUS(
 8007bce:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007bd2:	e7c8      	b.n	8007b66 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x10a>
  TF_LITE_ENSURE_STATUS(
 8007bd4:	6860      	ldr	r0, [r4, #4]
 8007bd6:	6926      	ldr	r6, [r4, #16]
 8007bd8:	6803      	ldr	r3, [r0, #0]
 8007bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bdc:	4798      	blx	r3
 8007bde:	9b02      	ldr	r3, [sp, #8]
 8007be0:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8007be4:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8007be8:	f04f 0b00 	mov.w	fp, #0
 8007bec:	4680      	mov	r8, r0
      int offset = -1;
 8007bee:	f04f 39ff 	mov.w	r9, #4294967295
    if (current->needs_allocating) {
 8007bf2:	7d3b      	ldrb	r3, [r7, #20]
 8007bf4:	b183      	cbz	r3, 8007c18 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x1bc>
      TF_LITE_ENSURE_STATUS(
 8007bf6:	6833      	ldr	r3, [r6, #0]
      int offset = -1;
 8007bf8:	f8cd 9018 	str.w	r9, [sp, #24]
      TF_LITE_ENSURE_STATUS(
 8007bfc:	699b      	ldr	r3, [r3, #24]
 8007bfe:	aa06      	add	r2, sp, #24
 8007c00:	4659      	mov	r1, fp
 8007c02:	4630      	mov	r0, r6
 8007c04:	4798      	blx	r3
 8007c06:	2800      	cmp	r0, #0
 8007c08:	f47f af78 	bne.w	8007afc <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0xa0>
      *current->output_ptr = reinterpret_cast<void*>(starting_point + offset);
 8007c0c:	9b06      	ldr	r3, [sp, #24]
 8007c0e:	687a      	ldr	r2, [r7, #4]
 8007c10:	4443      	add	r3, r8
      ++planner_index;
 8007c12:	f10b 0b01 	add.w	fp, fp, #1
      *current->output_ptr = reinterpret_cast<void*>(starting_point + offset);
 8007c16:	6013      	str	r3, [r2, #0]
  for (size_t i = 0; i < allocation_info_size; ++i) {
 8007c18:	3718      	adds	r7, #24
 8007c1a:	42af      	cmp	r7, r5
 8007c1c:	d1e9      	bne.n	8007bf2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x196>
  builder.FreeAllocationInfo();
 8007c1e:	a807      	add	r0, sp, #28
 8007c20:	f7ff fa2a 	bl	8007078 <_ZN6tflite21AllocationInfoBuilder18FreeAllocationInfoEv>
  non_persistent_buffer_allocator_->DeallocateTemp(planner_arena);
 8007c24:	6860      	ldr	r0, [r4, #4]
 8007c26:	9903      	ldr	r1, [sp, #12]
 8007c28:	6803      	ldr	r3, [r0, #0]
 8007c2a:	68db      	ldr	r3, [r3, #12]
 8007c2c:	4798      	blx	r3
  TF_LITE_ENSURE_STATUS(
 8007c2e:	6860      	ldr	r0, [r4, #4]
 8007c30:	6803      	ldr	r3, [r0, #0]
 8007c32:	695b      	ldr	r3, [r3, #20]
 8007c34:	4798      	blx	r3
 8007c36:	4682      	mov	sl, r0
 8007c38:	2800      	cmp	r0, #0
 8007c3a:	f47f af21 	bne.w	8007a80 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x24>
  TF_LITE_ENSURE_STATUS(
 8007c3e:	6860      	ldr	r0, [r4, #4]
 8007c40:	69e1      	ldr	r1, [r4, #28]
 8007c42:	6803      	ldr	r3, [r0, #0]
 8007c44:	6a1b      	ldr	r3, [r3, #32]
 8007c46:	4798      	blx	r3
 8007c48:	4682      	mov	sl, r0
 8007c4a:	2800      	cmp	r0, #0
 8007c4c:	f47f af18 	bne.w	8007a80 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x24>
  head_usage = memory_planner_->GetMaximumMemorySize();
 8007c50:	6920      	ldr	r0, [r4, #16]
 8007c52:	6803      	ldr	r3, [r0, #0]
 8007c54:	691b      	ldr	r3, [r3, #16]
 8007c56:	4798      	blx	r3
  if (max_head_buffer_usage_ < head_usage) {
 8007c58:	6a21      	ldr	r1, [r4, #32]
 8007c5a:	4281      	cmp	r1, r0
    max_head_buffer_usage_ = head_usage;
 8007c5c:	bf3c      	itt	cc
 8007c5e:	6220      	strcc	r0, [r4, #32]
 8007c60:	4601      	movcc	r1, r0
  TF_LITE_ENSURE_STATUS(
 8007c62:	6860      	ldr	r0, [r4, #4]
 8007c64:	6803      	ldr	r3, [r0, #0]
 8007c66:	2210      	movs	r2, #16
 8007c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c6a:	4798      	blx	r3
 8007c6c:	4682      	mov	sl, r0
 8007c6e:	e707      	b.n	8007a80 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x24>
  TF_LITE_ENSURE_STATUS(
 8007c70:	6860      	ldr	r0, [r4, #4]
 8007c72:	6803      	ldr	r3, [r0, #0]
 8007c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c76:	4798      	blx	r3
  for (size_t i = 0; i < allocation_info_size; ++i) {
 8007c78:	e7d1      	b.n	8007c1e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x1c2>
 8007c7a:	bf00      	nop
 8007c7c:	080079a5 	.word	0x080079a5
 8007c80:	080079a1 	.word	0x080079a1

08007c84 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensorPKl>:
    const int32_t* offline_planner_offsets) {
 8007c84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007c88:	460f      	mov	r7, r1
 8007c8a:	6809      	ldr	r1, [r1, #0]
    return data_ - ReadScalar<soffset_t>(data_);
 8007c8c:	1a79      	subs	r1, r7, r1
 8007c8e:	4616      	mov	r6, r2
 8007c90:	b083      	sub	sp, #12
 8007c92:	880a      	ldrh	r2, [r1, #0]
 8007c94:	4680      	mov	r8, r0
 8007c96:	4699      	mov	r9, r3
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 8007c98:	2400      	movs	r4, #0
 8007c9a:	e024      	b.n	8007ce6 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensorPKl+0x62>
 8007c9c:	8888      	ldrh	r0, [r1, #4]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8007c9e:	b338      	cbz	r0, 8007cf0 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensorPKl+0x6c>
 8007ca0:	583d      	ldr	r5, [r7, r0]
    auto p = data_ + field_offset;
 8007ca2:	4438      	add	r0, r7
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8007ca4:	1943      	adds	r3, r0, r5
 8007ca6:	5940      	ldr	r0, [r0, r5]
 8007ca8:	4284      	cmp	r4, r0
 8007caa:	d235      	bcs.n	8007d18 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensorPKl+0x94>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8007cac:	3304      	adds	r3, #4
 8007cae:	eb03 0c84 	add.w	ip, r3, r4, lsl #2
        offset_location + ReadScalar<offset_type>(offset_location));
 8007cb2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    return data_ - ReadScalar<soffset_t>(data_);
 8007cb6:	f85c 5003 	ldr.w	r5, [ip, r3]
 8007cba:	449c      	add	ip, r3
 8007cbc:	ebac 0e05 	sub.w	lr, ip, r5
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8007cc0:	f8be 3000 	ldrh.w	r3, [lr]
 8007cc4:	2b0e      	cmp	r3, #14
 8007cc6:	d90c      	bls.n	8007ce2 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensorPKl+0x5e>
 8007cc8:	f8be 300e 	ldrh.w	r3, [lr, #14]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8007ccc:	b14b      	cbz	r3, 8007ce2 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensorPKl+0x5e>
    if (tensor->is_variable()) {
 8007cce:	f81c 3003 	ldrb.w	r3, [ip, r3]
 8007cd2:	b133      	cbz	r3, 8007ce2 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensorPKl+0x5e>
      if (offline_planner_offsets == nullptr ||
 8007cd4:	f1b9 0f00 	cmp.w	r9, #0
 8007cd8:	d00c      	beq.n	8007cf4 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensorPKl+0x70>
 8007cda:	f859 3024 	ldr.w	r3, [r9, r4, lsl #2]
 8007cde:	3301      	adds	r3, #1
 8007ce0:	d008      	beq.n	8007cf4 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensorPKl+0x70>
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 8007ce2:	3401      	adds	r4, #1
 8007ce4:	360c      	adds	r6, #12
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8007ce6:	2a04      	cmp	r2, #4
 8007ce8:	d8d8      	bhi.n	8007c9c <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensorPKl+0x18>
  SizeT size() const { return EndianScalar(length_); }
 8007cea:	2300      	movs	r3, #0
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	deff      	udf	#255	; 0xff
 8007cf0:	6803      	ldr	r3, [r0, #0]
 8007cf2:	deff      	udf	#255	; 0xff
        TF_LITE_ENSURE_STATUS(
 8007cf4:	a901      	add	r1, sp, #4
 8007cf6:	4630      	mov	r0, r6
 8007cf8:	f7ff f8fc 	bl	8006ef4 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
 8007cfc:	b968      	cbnz	r0, 8007d1a <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensorPKl+0x96>
            persistent_buffer_allocator_->AllocatePersistentBuffer(
 8007cfe:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8007d02:	9901      	ldr	r1, [sp, #4]
 8007d04:	6803      	ldr	r3, [r0, #0]
 8007d06:	2210      	movs	r2, #16
 8007d08:	689b      	ldr	r3, [r3, #8]
 8007d0a:	4798      	blx	r3
        eval_tensors[i].data.data =
 8007d0c:	6030      	str	r0, [r6, #0]
        if (eval_tensors[i].data.data == nullptr) {
 8007d0e:	b138      	cbz	r0, 8007d20 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensorPKl+0x9c>
 8007d10:	6839      	ldr	r1, [r7, #0]
    return data_ - ReadScalar<soffset_t>(data_);
 8007d12:	1a79      	subs	r1, r7, r1
 8007d14:	880a      	ldrh	r2, [r1, #0]
 8007d16:	e7e4      	b.n	8007ce2 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensorPKl+0x5e>
  return kTfLiteOk;
 8007d18:	2000      	movs	r0, #0
}
 8007d1a:	b003      	add	sp, #12
 8007d1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          MicroPrintf("Failed to allocate variable tensor of size %d",
 8007d20:	4802      	ldr	r0, [pc, #8]	; (8007d2c <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensorPKl+0xa8>)
 8007d22:	9901      	ldr	r1, [sp, #4]
 8007d24:	f001 fd5a 	bl	80097dc <_Z11MicroPrintfPKcz>
          return kTfLiteError;
 8007d28:	2001      	movs	r0, #1
 8007d2a:	e7f6      	b.n	8007d1a <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensorPKl+0x96>
 8007d2c:	0806adcc 	.word	0x0806adcc

08007d30 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE>:
    const Model* model, SubgraphAllocations* subgraph_allocations) {
 8007d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TFLITE_DCHECK(subgraph_allocations != nullptr);
 8007d34:	b39a      	cbz	r2, 8007d9e <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x6e>
 8007d36:	4606      	mov	r6, r0
 8007d38:	460f      	mov	r7, r1
 8007d3a:	4615      	mov	r5, r2
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 8007d3c:	2400      	movs	r4, #0
 8007d3e:	e01b      	b.n	8007d78 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x48>
 8007d40:	891a      	ldrh	r2, [r3, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8007d42:	b30a      	cbz	r2, 8007d88 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x58>
 8007d44:	58b9      	ldr	r1, [r7, r2]
    auto p = data_ + field_offset;
 8007d46:	443a      	add	r2, r7
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8007d48:	1853      	adds	r3, r2, r1
 8007d4a:	5852      	ldr	r2, [r2, r1]
 8007d4c:	4294      	cmp	r4, r2
 8007d4e:	d223      	bcs.n	8007d98 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x68>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8007d50:	3304      	adds	r3, #4
    const uint8_t *const offset_location = p + i * element_stride;
 8007d52:	eb03 0084 	add.w	r0, r3, r4, lsl #2
        offset_location + ReadScalar<offset_type>(offset_location));
 8007d56:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    uint32_t operators_size = NumSubgraphOperators(subgraph);
 8007d5a:	4418      	add	r0, r3
 8007d5c:	f7fe ffea 	bl	8006d34 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
        persistent_buffer_allocator_->AllocatePersistentBuffer(
 8007d60:	68b3      	ldr	r3, [r6, #8]
 8007d62:	0141      	lsls	r1, r0, #5
 8007d64:	6818      	ldr	r0, [r3, #0]
 8007d66:	2204      	movs	r2, #4
 8007d68:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	47c0      	blx	r8
    if (output == nullptr) {
 8007d70:	b160      	cbz	r0, 8007d8c <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x5c>
    subgraph_allocations[subgraph_idx].node_and_registrations = output;
 8007d72:	f845 0034 	str.w	r0, [r5, r4, lsl #3]
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 8007d76:	3401      	adds	r4, #1
    return data_ - ReadScalar<soffset_t>(data_);
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	1afb      	subs	r3, r7, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8007d7c:	881a      	ldrh	r2, [r3, #0]
 8007d7e:	2a08      	cmp	r2, #8
 8007d80:	d8de      	bhi.n	8007d40 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x10>
  SizeT size() const { return EndianScalar(length_); }
 8007d82:	2300      	movs	r3, #0
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	deff      	udf	#255	; 0xff
 8007d88:	6813      	ldr	r3, [r2, #0]
 8007d8a:	deff      	udf	#255	; 0xff
      MicroPrintf("Failed to allocate memory for node_and_registrations.");
 8007d8c:	4805      	ldr	r0, [pc, #20]	; (8007da4 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x74>)
 8007d8e:	f001 fd25 	bl	80097dc <_Z11MicroPrintfPKcz>
      return kTfLiteError;
 8007d92:	2001      	movs	r0, #1
}
 8007d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return kTfLiteOk;
 8007d98:	2000      	movs	r0, #0
}
 8007d9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  TFLITE_DCHECK(subgraph_allocations != nullptr);
 8007d9e:	f00e fee5 	bl	8016b6c <abort>
 8007da2:	bf00      	nop
 8007da4:	0806adfc 	.word	0x0806adfc

08007da8 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii>:
    int tensor_index, int subgraph_index) {
 8007da8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007dac:	461c      	mov	r4, r3
    return data_ - ReadScalar<soffset_t>(data_);
 8007dae:	680b      	ldr	r3, [r1, #0]
 8007db0:	1acb      	subs	r3, r1, r3
 8007db2:	4690      	mov	r8, r2
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8007db4:	881a      	ldrh	r2, [r3, #0]
 8007db6:	b083      	sub	sp, #12
 8007db8:	2a08      	cmp	r2, #8
 8007dba:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8007dbe:	d93b      	bls.n	8007e38 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x90>
 8007dc0:	891b      	ldrh	r3, [r3, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d038      	beq.n	8007e38 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x90>
 8007dc6:	58ca      	ldr	r2, [r1, r3]
    auto p = data_ + field_offset;
 8007dc8:	440b      	add	r3, r1
T ReadScalar(const void *p) {
 8007dca:	460d      	mov	r5, r1
    FLATBUFFERS_ASSERT(i < size());
 8007dcc:	589b      	ldr	r3, [r3, r2]
 8007dce:	4599      	cmp	r9, r3
 8007dd0:	d22c      	bcs.n	8007e2c <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x84>
  TfLiteTensor* tensor = reinterpret_cast<TfLiteTensor*>(
 8007dd2:	4607      	mov	r7, r0
      non_persistent_buffer_allocator_->AllocateTemp(sizeof(TfLiteTensor),
 8007dd4:	6840      	ldr	r0, [r0, #4]
 8007dd6:	6803      	ldr	r3, [r0, #0]
 8007dd8:	2204      	movs	r2, #4
 8007dda:	689b      	ldr	r3, [r3, #8]
 8007ddc:	2120      	movs	r1, #32
 8007dde:	4798      	blx	r3
  if (PopulateTfLiteTensorFromFlatbuffer(model, tensor, tensor_index,
 8007de0:	f8cd 9000 	str.w	r9, [sp]
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	2201      	movs	r2, #1
      non_persistent_buffer_allocator_->AllocateTemp(sizeof(TfLiteTensor),
 8007de8:	4606      	mov	r6, r0
  if (PopulateTfLiteTensorFromFlatbuffer(model, tensor, tensor_index,
 8007dea:	9201      	str	r2, [sp, #4]
 8007dec:	4629      	mov	r1, r5
 8007dee:	4638      	mov	r0, r7
 8007df0:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8007df2:	4632      	mov	r2, r6
 8007df4:	4623      	mov	r3, r4
 8007df6:	47a8      	blx	r5
 8007df8:	b998      	cbnz	r0, 8007e22 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x7a>
  if (subgraph_allocations != nullptr) {
 8007dfa:	f1b8 0f00 	cmp.w	r8, #0
 8007dfe:	d00c      	beq.n	8007e1a <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x72>
        subgraph_allocations[subgraph_index].tensors[tensor_index].data.data;
 8007e00:	eb08 08c9 	add.w	r8, r8, r9, lsl #3
 8007e04:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8007e08:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007e0c:	eb03 0284 	add.w	r2, r3, r4, lsl #2
 8007e10:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007e14:	6852      	ldr	r2, [r2, #4]
    tensor->data.data =
 8007e16:	e9c6 3204 	strd	r3, r2, [r6, #16]
}
 8007e1a:	4630      	mov	r0, r6
 8007e1c:	b003      	add	sp, #12
 8007e1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    MicroPrintf(
 8007e22:	4807      	ldr	r0, [pc, #28]	; (8007e40 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x98>)
 8007e24:	f001 fcda 	bl	80097dc <_Z11MicroPrintfPKcz>
    return nullptr;
 8007e28:	2600      	movs	r6, #0
 8007e2a:	e7f6      	b.n	8007e1a <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x72>
 8007e2c:	4b05      	ldr	r3, [pc, #20]	; (8007e44 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x9c>)
 8007e2e:	4a06      	ldr	r2, [pc, #24]	; (8007e48 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xa0>)
 8007e30:	4806      	ldr	r0, [pc, #24]	; (8007e4c <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xa4>)
 8007e32:	21b0      	movs	r1, #176	; 0xb0
 8007e34:	f00e fea2 	bl	8016b7c <__assert_func>
  SizeT size() const { return EndianScalar(length_); }
 8007e38:	2300      	movs	r3, #0
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	deff      	udf	#255	; 0xff
 8007e3e:	bf00      	nop
 8007e40:	0806ae34 	.word	0x0806ae34
 8007e44:	0806a098 	.word	0x0806a098
 8007e48:	0806a838 	.word	0x0806a838
 8007e4c:	0806a168 	.word	0x0806a168

08007e50 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii>:
    int tensor_index, int subgraph_index) {
 8007e50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007e54:	461d      	mov	r5, r3
    return data_ - ReadScalar<soffset_t>(data_);
 8007e56:	680b      	ldr	r3, [r1, #0]
 8007e58:	1acb      	subs	r3, r1, r3
 8007e5a:	4690      	mov	r8, r2
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8007e5c:	881a      	ldrh	r2, [r3, #0]
 8007e5e:	b083      	sub	sp, #12
 8007e60:	2a08      	cmp	r2, #8
 8007e62:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8007e66:	d948      	bls.n	8007efa <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xaa>
  return EndianScalar(*reinterpret_cast<const T *>(p));
 8007e68:	891b      	ldrh	r3, [r3, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d045      	beq.n	8007efa <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xaa>
 8007e6e:	58ca      	ldr	r2, [r1, r3]
    auto p = data_ + field_offset;
 8007e70:	440b      	add	r3, r1
T ReadScalar(const void *p) {
 8007e72:	460f      	mov	r7, r1
    FLATBUFFERS_ASSERT(i < size());
 8007e74:	589b      	ldr	r3, [r3, r2]
 8007e76:	4599      	cmp	r9, r3
 8007e78:	d235      	bcs.n	8007ee6 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x96>
  TfLiteTensor* tensor = AllocatePersistentTfLiteTensorInternal();
 8007e7a:	6803      	ldr	r3, [r0, #0]
 8007e7c:	4a20      	ldr	r2, [pc, #128]	; (8007f00 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xb0>)
 8007e7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e80:	4293      	cmp	r3, r2
 8007e82:	4606      	mov	r6, r0
 8007e84:	d127      	bne.n	8007ed6 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x86>
      persistent_buffer_allocator_->AllocatePersistentBuffer(
 8007e86:	68b0      	ldr	r0, [r6, #8]
 8007e88:	6803      	ldr	r3, [r0, #0]
 8007e8a:	2204      	movs	r2, #4
 8007e8c:	689b      	ldr	r3, [r3, #8]
 8007e8e:	2120      	movs	r1, #32
 8007e90:	4798      	blx	r3
 8007e92:	4604      	mov	r4, r0
  if (tensor == nullptr) {
 8007e94:	b36c      	cbz	r4, 8007ef2 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xa2>
  if (PopulateTfLiteTensorFromFlatbuffer(
 8007e96:	f8cd 9000 	str.w	r9, [sp]
 8007e9a:	6833      	ldr	r3, [r6, #0]
 8007e9c:	4630      	mov	r0, r6
 8007e9e:	2600      	movs	r6, #0
 8007ea0:	9601      	str	r6, [sp, #4]
 8007ea2:	4639      	mov	r1, r7
 8007ea4:	4622      	mov	r2, r4
 8007ea6:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 8007ea8:	462b      	mov	r3, r5
 8007eaa:	47b8      	blx	r7
 8007eac:	b9b0      	cbnz	r0, 8007edc <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x8c>
  if (subgraph_allocations != nullptr) {
 8007eae:	f1b8 0f00 	cmp.w	r8, #0
 8007eb2:	d00c      	beq.n	8007ece <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x7e>
        subgraph_allocations[subgraph_index].tensors[tensor_index].data.data;
 8007eb4:	eb08 09c9 	add.w	r9, r8, r9, lsl #3
 8007eb8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007ebc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8007ec0:	eb03 0285 	add.w	r2, r3, r5, lsl #2
 8007ec4:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8007ec8:	6852      	ldr	r2, [r2, #4]
    tensor->data.data =
 8007eca:	e9c4 3204 	strd	r3, r2, [r4, #16]
}
 8007ece:	4620      	mov	r0, r4
 8007ed0:	b003      	add	sp, #12
 8007ed2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  TfLiteTensor* tensor = AllocatePersistentTfLiteTensorInternal();
 8007ed6:	4798      	blx	r3
 8007ed8:	4604      	mov	r4, r0
 8007eda:	e7db      	b.n	8007e94 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x44>
    MicroPrintf(
 8007edc:	4809      	ldr	r0, [pc, #36]	; (8007f04 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xb4>)
 8007ede:	f001 fc7d 	bl	80097dc <_Z11MicroPrintfPKcz>
    return nullptr;
 8007ee2:	4634      	mov	r4, r6
 8007ee4:	e7f3      	b.n	8007ece <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x7e>
 8007ee6:	4b08      	ldr	r3, [pc, #32]	; (8007f08 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xb8>)
 8007ee8:	4a08      	ldr	r2, [pc, #32]	; (8007f0c <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xbc>)
 8007eea:	4809      	ldr	r0, [pc, #36]	; (8007f10 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xc0>)
 8007eec:	21b0      	movs	r1, #176	; 0xb0
 8007eee:	f00e fe45 	bl	8016b7c <__assert_func>
    MicroPrintf("Failed to allocate memory for persistent TfLiteTensor");
 8007ef2:	4808      	ldr	r0, [pc, #32]	; (8007f14 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xc4>)
 8007ef4:	f001 fc72 	bl	80097dc <_Z11MicroPrintfPKcz>
    return nullptr;
 8007ef8:	e7e9      	b.n	8007ece <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x7e>
  SizeT size() const { return EndianScalar(length_); }
 8007efa:	2300      	movs	r3, #0
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	deff      	udf	#255	; 0xff
 8007f00:	080079e5 	.word	0x080079e5
 8007f04:	0806aeb0 	.word	0x0806aeb0
 8007f08:	0806a098 	.word	0x0806a098
 8007f0c:	0806a838 	.word	0x0806a838
 8007f10:	0806a168 	.word	0x0806a168
 8007f14:	0806ae78 	.word	0x0806ae78

08007f18 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEmEE>:
    const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers) {
 8007f18:	b508      	push	{r3, lr}
    return data_ - ReadScalar<soffset_t>(data_);
 8007f1a:	6803      	ldr	r3, [r0, #0]
 8007f1c:	1ac3      	subs	r3, r0, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8007f1e:	881a      	ldrh	r2, [r3, #0]
 8007f20:	2a08      	cmp	r2, #8
 8007f22:	d918      	bls.n	8007f56 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEmEE+0x3e>
  return EndianScalar(*reinterpret_cast<const T *>(p));
 8007f24:	891a      	ldrh	r2, [r3, #8]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8007f26:	bb12      	cbnz	r2, 8007f6e <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEmEE+0x56>
    FLATBUFFERS_ASSERT(i < size());
 8007f28:	680b      	ldr	r3, [r1, #0]
 8007f2a:	429a      	cmp	r2, r3
 8007f2c:	d217      	bcs.n	8007f5e <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEmEE+0x46>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8007f2e:	3104      	adds	r1, #4
    const uint8_t *const offset_location = p + i * element_stride;
 8007f30:	eb01 0382 	add.w	r3, r1, r2, lsl #2
        offset_location + ReadScalar<offset_type>(offset_location));
 8007f34:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    return data_ - ReadScalar<soffset_t>(data_);
 8007f38:	585a      	ldr	r2, [r3, r1]
 8007f3a:	440b      	add	r3, r1
 8007f3c:	1a9a      	subs	r2, r3, r2
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8007f3e:	8811      	ldrh	r1, [r2, #0]
 8007f40:	2904      	cmp	r1, #4
 8007f42:	d912      	bls.n	8007f6a <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEmEE+0x52>
 8007f44:	8890      	ldrh	r0, [r2, #4]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8007f46:	b128      	cbz	r0, 8007f54 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEmEE+0x3c>
 8007f48:	581a      	ldr	r2, [r3, r0]
    auto p = data_ + field_offset;
 8007f4a:	4403      	add	r3, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8007f4c:	1899      	adds	r1, r3, r2
      if (array->size()) {
 8007f4e:	5898      	ldr	r0, [r3, r2]
 8007f50:	b100      	cbz	r0, 8007f54 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEmEE+0x3c>
 8007f52:	1d08      	adds	r0, r1, #4
}
 8007f54:	bd08      	pop	{r3, pc}
    FLATBUFFERS_ASSERT(i < size());
 8007f56:	680b      	ldr	r3, [r1, #0]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8007f58:	2200      	movs	r2, #0
 8007f5a:	429a      	cmp	r2, r3
 8007f5c:	d3e7      	bcc.n	8007f2e <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEmEE+0x16>
 8007f5e:	4b05      	ldr	r3, [pc, #20]	; (8007f74 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEmEE+0x5c>)
 8007f60:	4a05      	ldr	r2, [pc, #20]	; (8007f78 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEmEE+0x60>)
 8007f62:	4806      	ldr	r0, [pc, #24]	; (8007f7c <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEmEE+0x64>)
 8007f64:	21b0      	movs	r1, #176	; 0xb0
 8007f66:	f00e fe09 	bl	8016b7c <__assert_func>
  void* out_buffer = nullptr;
 8007f6a:	2000      	movs	r0, #0
}
 8007f6c:	bd08      	pop	{r3, pc}
 8007f6e:	5882      	ldr	r2, [r0, r2]
 8007f70:	e7da      	b.n	8007f28 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEmEE+0x10>
 8007f72:	bf00      	nop
 8007f74:	0806a098 	.word	0x0806a098
 8007f78:	0806ac7c 	.word	0x0806ac7c
 8007f7c:	0806a168 	.word	0x0806a168

08007f80 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE>:
    const Model* model, SubgraphAllocations* subgraph_allocations) {
 8007f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f84:	b087      	sub	sp, #28
  TFLITE_DCHECK(subgraph_allocations != nullptr);
 8007f86:	e9cd 2004 	strd	r2, r0, [sp, #16]
 8007f8a:	2a00      	cmp	r2, #0
 8007f8c:	f000 80be 	beq.w	800810c <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x18c>
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 8007f90:	2300      	movs	r3, #0
 8007f92:	468b      	mov	fp, r1
 8007f94:	9302      	str	r3, [sp, #8]
    return data_ - ReadScalar<soffset_t>(data_);
 8007f96:	f8db 3000 	ldr.w	r3, [fp]
 8007f9a:	ebab 0303 	sub.w	r3, fp, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8007f9e:	881a      	ldrh	r2, [r3, #0]
 8007fa0:	2a08      	cmp	r2, #8
 8007fa2:	f240 8097 	bls.w	80080d4 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x154>
 8007fa6:	891a      	ldrh	r2, [r3, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8007fa8:	2a00      	cmp	r2, #0
 8007faa:	f000 809f 	beq.w	80080ec <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x16c>
 8007fae:	f85b 1002 	ldr.w	r1, [fp, r2]
    auto p = data_ + field_offset;
 8007fb2:	445a      	add	r2, fp
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8007fb4:	1853      	adds	r3, r2, r1
 8007fb6:	5852      	ldr	r2, [r2, r1]
 8007fb8:	9902      	ldr	r1, [sp, #8]
 8007fba:	4291      	cmp	r1, r2
 8007fbc:	f080 809e 	bcs.w	80080fc <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x17c>
  static return_type Read(const uint8_t *const p, const offset_type i) {
 8007fc0:	460a      	mov	r2, r1
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8007fc2:	3304      	adds	r3, #4
    const uint8_t *const offset_location = p + i * element_stride;
 8007fc4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
        offset_location + ReadScalar<offset_type>(offset_location));
 8007fc8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007fcc:	eb01 0a02 	add.w	sl, r1, r2
    return data_ - ReadScalar<soffset_t>(data_);
 8007fd0:	588a      	ldr	r2, [r1, r2]
 8007fd2:	ebaa 0202 	sub.w	r2, sl, r2
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8007fd6:	8811      	ldrh	r1, [r2, #0]
 8007fd8:	2904      	cmp	r1, #4
 8007fda:	d97b      	bls.n	80080d4 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x154>
 8007fdc:	8892      	ldrh	r2, [r2, #4]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8007fde:	2a00      	cmp	r2, #0
 8007fe0:	d078      	beq.n	80080d4 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x154>
  SizeT size() const { return EndianScalar(length_); }
 8007fe2:	f85a 1002 	ldr.w	r1, [sl, r2]
        persistent_buffer_allocator_->AllocatePersistentBuffer(
 8007fe6:	9b05      	ldr	r3, [sp, #20]
    auto p = data_ + field_offset;
 8007fe8:	4452      	add	r2, sl
 8007fea:	6898      	ldr	r0, [r3, #8]
 8007fec:	5856      	ldr	r6, [r2, r1]
 8007fee:	6802      	ldr	r2, [r0, #0]
 8007ff0:	9601      	str	r6, [sp, #4]
 8007ff2:	eb06 0446 	add.w	r4, r6, r6, lsl #1
 8007ff6:	00a4      	lsls	r4, r4, #2
 8007ff8:	6895      	ldr	r5, [r2, #8]
 8007ffa:	4621      	mov	r1, r4
 8007ffc:	2204      	movs	r2, #4
 8007ffe:	47a8      	blx	r5
    if (tensors == nullptr) {
 8008000:	9003      	str	r0, [sp, #12]
 8008002:	2800      	cmp	r0, #0
 8008004:	d074      	beq.n	80080f0 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x170>
    for (size_t i = 0; i < alloc_count; ++i) {
 8008006:	2e00      	cmp	r6, #0
 8008008:	d067      	beq.n	80080da <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x15a>
 800800a:	f100 0408 	add.w	r4, r0, #8
 800800e:	2500      	movs	r5, #0
 8008010:	e01b      	b.n	800804a <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xca>
  result->data.data = GetFlatbufferTensorBuffer(flatbuffer_tensor, buffers);
 8008012:	4631      	mov	r1, r6
 8008014:	4638      	mov	r0, r7
 8008016:	f7ff ff7f 	bl	8007f18 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEmEE>
    return data_ - ReadScalar<soffset_t>(data_);
 800801a:	f858 3009 	ldr.w	r3, [r8, r9]
 800801e:	f844 0c08 	str.w	r0, [r4, #-8]
 8008022:	1afb      	subs	r3, r7, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8008024:	881a      	ldrh	r2, [r3, #0]
 8008026:	2a04      	cmp	r2, #4
 8008028:	d952      	bls.n	80080d0 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x150>
 800802a:	889b      	ldrh	r3, [r3, #4]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 800802c:	2b00      	cmp	r3, #0
 800802e:	d04f      	beq.n	80080d0 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x150>
 8008030:	58f8      	ldr	r0, [r7, r3]
    auto p = data_ + field_offset;
 8008032:	441f      	add	r7, r3
    result->dims = FlatBufferVectorToTfLiteTypeArray(flatbuffer_tensor.shape());
 8008034:	4438      	add	r0, r7
 8008036:	f7fe febb 	bl	8006db0 <_ZN6tflite33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIlmEE>
    for (size_t i = 0; i < alloc_count; ++i) {
 800803a:	9b01      	ldr	r3, [sp, #4]
    result->dims = const_cast<TfLiteIntArray*>(&kZeroLengthIntArray);
 800803c:	f844 0c04 	str.w	r0, [r4, #-4]
    for (size_t i = 0; i < alloc_count; ++i) {
 8008040:	3501      	adds	r5, #1
 8008042:	429d      	cmp	r5, r3
 8008044:	f104 040c 	add.w	r4, r4, #12
 8008048:	d047      	beq.n	80080da <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x15a>
    return data_ - ReadScalar<soffset_t>(data_);
 800804a:	f8da 3000 	ldr.w	r3, [sl]
 800804e:	ebaa 0303 	sub.w	r3, sl, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8008052:	881a      	ldrh	r2, [r3, #0]
 8008054:	2a04      	cmp	r2, #4
 8008056:	d93d      	bls.n	80080d4 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x154>
 8008058:	889a      	ldrh	r2, [r3, #4]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 800805a:	2a00      	cmp	r2, #0
 800805c:	d03a      	beq.n	80080d4 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x154>
 800805e:	f85a 1002 	ldr.w	r1, [sl, r2]
    auto p = data_ + field_offset;
 8008062:	4452      	add	r2, sl
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8008064:	1853      	adds	r3, r2, r1
    FLATBUFFERS_ASSERT(i < size());
 8008066:	5852      	ldr	r2, [r2, r1]
 8008068:	42aa      	cmp	r2, r5
 800806a:	d949      	bls.n	8008100 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x180>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800806c:	3304      	adds	r3, #4
    const uint8_t *const offset_location = p + i * element_stride;
 800806e:	eb03 0885 	add.w	r8, r3, r5, lsl #2
        offset_location + ReadScalar<offset_type>(offset_location));
 8008072:	f853 9025 	ldr.w	r9, [r3, r5, lsl #2]
    return data_ - ReadScalar<soffset_t>(data_);
 8008076:	f8db 3000 	ldr.w	r3, [fp]
 800807a:	ebab 0303 	sub.w	r3, fp, r3
 800807e:	eb08 0709 	add.w	r7, r8, r9
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8008082:	8819      	ldrh	r1, [r3, #0]
 8008084:	290c      	cmp	r1, #12
 8008086:	d921      	bls.n	80080cc <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x14c>
 8008088:	899e      	ldrh	r6, [r3, #12]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 800808a:	b11e      	cbz	r6, 8008094 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x114>
 800808c:	f85b 3006 	ldr.w	r3, [fp, r6]
    auto p = data_ + field_offset;
 8008090:	445e      	add	r6, fp
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8008092:	441e      	add	r6, r3
  *result = {};
 8008094:	2300      	movs	r3, #0
 8008096:	e944 3302 	strd	r3, r3, [r4, #-8]
 800809a:	6023      	str	r3, [r4, #0]
    return data_ - ReadScalar<soffset_t>(data_);
 800809c:	f858 3009 	ldr.w	r3, [r8, r9]
 80080a0:	1afb      	subs	r3, r7, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 80080a2:	8819      	ldrh	r1, [r3, #0]
 80080a4:	2906      	cmp	r1, #6
 80080a6:	d90f      	bls.n	80080c8 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x148>
 80080a8:	88d8      	ldrh	r0, [r3, #6]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 80080aa:	b100      	cbz	r0, 80080ae <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x12e>
 80080ac:	5638      	ldrsb	r0, [r7, r0]
  TF_LITE_ENSURE_STATUS(
 80080ae:	4621      	mov	r1, r4
 80080b0:	f004 f9ea 	bl	800c488 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteType>
 80080b4:	2800      	cmp	r0, #0
 80080b6:	d0ac      	beq.n	8008012 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x92>
        MicroPrintf("Failed to initialize tensor %d", i);
 80080b8:	4815      	ldr	r0, [pc, #84]	; (8008110 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x190>)
 80080ba:	4629      	mov	r1, r5
 80080bc:	f001 fb8e 	bl	80097dc <_Z11MicroPrintfPKcz>
        return kTfLiteError;
 80080c0:	2001      	movs	r0, #1
}
 80080c2:	b007      	add	sp, #28
 80080c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080c8:	2000      	movs	r0, #0
 80080ca:	e7f0      	b.n	80080ae <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x12e>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 80080cc:	2600      	movs	r6, #0
 80080ce:	e7e1      	b.n	8008094 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x114>
 80080d0:	4810      	ldr	r0, [pc, #64]	; (8008114 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x194>)
 80080d2:	e7b2      	b.n	800803a <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xba>
  SizeT size() const { return EndianScalar(length_); }
 80080d4:	2300      	movs	r3, #0
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	deff      	udf	#255	; 0xff
    subgraph_allocations[subgraph_idx].tensors = tensors;
 80080da:	9b04      	ldr	r3, [sp, #16]
 80080dc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80080e0:	3304      	adds	r3, #4
 80080e2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 80080e6:	1c53      	adds	r3, r2, #1
 80080e8:	9302      	str	r3, [sp, #8]
 80080ea:	e754      	b.n	8007f96 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x16>
 80080ec:	6813      	ldr	r3, [r2, #0]
 80080ee:	deff      	udf	#255	; 0xff
      MicroPrintf(
 80080f0:	4809      	ldr	r0, [pc, #36]	; (8008118 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x198>)
 80080f2:	4621      	mov	r1, r4
 80080f4:	f001 fb72 	bl	80097dc <_Z11MicroPrintfPKcz>
      return kTfLiteError;
 80080f8:	2001      	movs	r0, #1
 80080fa:	e7e2      	b.n	80080c2 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x142>
  return kTfLiteOk;
 80080fc:	2000      	movs	r0, #0
 80080fe:	e7e0      	b.n	80080c2 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x142>
    FLATBUFFERS_ASSERT(i < size());
 8008100:	4b06      	ldr	r3, [pc, #24]	; (800811c <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x19c>)
 8008102:	4a07      	ldr	r2, [pc, #28]	; (8008120 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1a0>)
 8008104:	4807      	ldr	r0, [pc, #28]	; (8008124 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1a4>)
 8008106:	21b0      	movs	r1, #176	; 0xb0
 8008108:	f00e fd38 	bl	8016b7c <__assert_func>
  TFLITE_DCHECK(subgraph_allocations != nullptr);
 800810c:	f00e fd2e 	bl	8016b6c <abort>
 8008110:	0806af44 	.word	0x0806af44
 8008114:	0806b19c 	.word	0x0806b19c
 8008118:	0806aefc 	.word	0x0806aefc
 800811c:	0806a098 	.word	0x0806a098
 8008120:	0806aa98 	.word	0x0806aa98
 8008124:	0806a168 	.word	0x0806a168

08008128 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor>:
    TfLiteTensor* result) {
 8008128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800812c:	b085      	sub	sp, #20
 800812e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  TFLITE_DCHECK(result != nullptr);
 8008130:	2d00      	cmp	r5, #0
 8008132:	f000 8141 	beq.w	80083b8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0x290>
 8008136:	4699      	mov	r9, r3
  *result = {};
 8008138:	4606      	mov	r6, r0
 800813a:	460f      	mov	r7, r1
 800813c:	4690      	mov	r8, r2
 800813e:	2100      	movs	r1, #0
 8008140:	2220      	movs	r2, #32
 8008142:	4628      	mov	r0, r5
 8008144:	f00f fbd2 	bl	80178ec <memset>
    return data_ - ReadScalar<soffset_t>(data_);
 8008148:	f8d9 3000 	ldr.w	r3, [r9]
 800814c:	eba9 0303 	sub.w	r3, r9, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8008150:	881a      	ldrh	r2, [r3, #0]
 8008152:	2a06      	cmp	r2, #6
 8008154:	d945      	bls.n	80081e2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0xba>
 8008156:	88d8      	ldrh	r0, [r3, #6]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8008158:	2800      	cmp	r0, #0
 800815a:	d144      	bne.n	80081e6 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0xbe>
  TF_LITE_ENSURE_STATUS(
 800815c:	f105 011c 	add.w	r1, r5, #28
 8008160:	f004 f992 	bl	800c488 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteType>
 8008164:	4604      	mov	r4, r0
 8008166:	2800      	cmp	r0, #0
 8008168:	d137      	bne.n	80081da <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0xb2>
    return data_ - ReadScalar<soffset_t>(data_);
 800816a:	f8d9 3000 	ldr.w	r3, [r9]
 800816e:	eba9 0303 	sub.w	r3, r9, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8008172:	881a      	ldrh	r2, [r3, #0]
 8008174:	2a0e      	cmp	r2, #14
 8008176:	d906      	bls.n	8008186 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0x5e>
 8008178:	89dc      	ldrh	r4, [r3, #14]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 800817a:	b124      	cbz	r4, 8008186 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0x5e>
    return GetField<uint8_t>(VT_IS_VARIABLE, 0) != 0;
 800817c:	f819 4004 	ldrb.w	r4, [r9, r4]
 8008180:	3c00      	subs	r4, #0
 8008182:	bf18      	it	ne
 8008184:	2401      	movne	r4, #1
  result->data.data = GetFlatbufferTensorBuffer(flatbuffer_tensor, buffers);
 8008186:	990e      	ldr	r1, [sp, #56]	; 0x38
  result->is_variable = flatbuffer_tensor.is_variable();
 8008188:	77ac      	strb	r4, [r5, #30]
  result->data.data = GetFlatbufferTensorBuffer(flatbuffer_tensor, buffers);
 800818a:	4648      	mov	r0, r9
 800818c:	f7ff fec4 	bl	8007f18 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEmEE>
    result->allocation_type = kTfLiteMmapRo;
 8008190:	2800      	cmp	r0, #0
 8008192:	bf0c      	ite	eq
 8008194:	2302      	moveq	r3, #2
 8008196:	2301      	movne	r3, #1
  result->data.data = GetFlatbufferTensorBuffer(flatbuffer_tensor, buffers);
 8008198:	6128      	str	r0, [r5, #16]
  if (result->data.data == nullptr) {
 800819a:	776b      	strb	r3, [r5, #29]
  TF_LITE_ENSURE_STATUS(
 800819c:	aa03      	add	r2, sp, #12
 800819e:	f105 0118 	add.w	r1, r5, #24
 80081a2:	4648      	mov	r0, r9
 80081a4:	f7fe fe60 	bl	8006e68 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_>
 80081a8:	4604      	mov	r4, r0
 80081aa:	b9b0      	cbnz	r0, 80081da <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0xb2>
    return data_ - ReadScalar<soffset_t>(data_);
 80081ac:	f8d9 3000 	ldr.w	r3, [r9]
 80081b0:	eba9 0303 	sub.w	r3, r9, r3
 80081b4:	881a      	ldrh	r2, [r3, #0]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 80081b6:	2a04      	cmp	r2, #4
 80081b8:	d918      	bls.n	80081ec <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0xc4>
 80081ba:	8899      	ldrh	r1, [r3, #4]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 80081bc:	b1b1      	cbz	r1, 80081ec <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0xc4>
 80081be:	f859 0001 	ldr.w	r0, [r9, r1]
    auto p = data_ + field_offset;
 80081c2:	4449      	add	r1, r9
    result->dims = FlatBufferVectorToTfLiteTypeArray(flatbuffer_tensor.shape());
 80081c4:	4408      	add	r0, r1
 80081c6:	f7fe fdf3 	bl	8006db0 <_ZN6tflite33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIlmEE>
    return data_ - ReadScalar<soffset_t>(data_);
 80081ca:	f8d9 3000 	ldr.w	r3, [r9]
 80081ce:	6168      	str	r0, [r5, #20]
 80081d0:	eba9 0303 	sub.w	r3, r9, r3
 80081d4:	881a      	ldrh	r2, [r3, #0]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 80081d6:	2a0c      	cmp	r2, #12
 80081d8:	d80c      	bhi.n	80081f4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0xcc>
}
 80081da:	4620      	mov	r0, r4
 80081dc:	b005      	add	sp, #20
 80081de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 80081e2:	2000      	movs	r0, #0
 80081e4:	e7ba      	b.n	800815c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0x34>
 80081e6:	f919 0000 	ldrsb.w	r0, [r9, r0]
 80081ea:	e7b7      	b.n	800815c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0x34>
    result->dims = const_cast<TfLiteIntArray*>(&kZeroLengthIntArray);
 80081ec:	4973      	ldr	r1, [pc, #460]	; (80083bc <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0x294>)
 80081ee:	6169      	str	r1, [r5, #20]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 80081f0:	2a0c      	cmp	r2, #12
 80081f2:	d9f2      	bls.n	80081da <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0xb2>
 80081f4:	899b      	ldrh	r3, [r3, #12]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d0ef      	beq.n	80081da <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0xb2>
 80081fa:	f859 a003 	ldr.w	sl, [r9, r3]
    auto p = data_ + field_offset;
 80081fe:	444b      	add	r3, r9
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8008200:	eb03 090a 	add.w	r9, r3, sl
    return data_ - ReadScalar<soffset_t>(data_);
 8008204:	f853 200a 	ldr.w	r2, [r3, sl]
 8008208:	eba9 0202 	sub.w	r2, r9, r2
 800820c:	8810      	ldrh	r0, [r2, #0]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 800820e:	2808      	cmp	r0, #8
 8008210:	d9e3      	bls.n	80081da <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0xb2>
 8008212:	8911      	ldrh	r1, [r2, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8008214:	2900      	cmp	r1, #0
 8008216:	d0e0      	beq.n	80081da <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0xb2>
 8008218:	f859 c001 	ldr.w	ip, [r9, r1]
    auto p = data_ + field_offset;
 800821c:	4449      	add	r1, r9
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 800821e:	eb01 0e0c 	add.w	lr, r1, ip
  if (src_quantization && src_quantization->scale() &&
 8008222:	f851 100c 	ldr.w	r1, [r1, ip]
 8008226:	2900      	cmp	r1, #0
 8008228:	d0d7      	beq.n	80081da <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0xb2>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 800822a:	280a      	cmp	r0, #10
 800822c:	d9d5      	bls.n	80081da <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0xb2>
 800822e:	8952      	ldrh	r2, [r2, #10]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8008230:	2a00      	cmp	r2, #0
 8008232:	d0d2      	beq.n	80081da <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0xb2>
 8008234:	f859 1002 	ldr.w	r1, [r9, r2]
    auto p = data_ + field_offset;
 8008238:	444a      	add	r2, r9
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 800823a:	1850      	adds	r0, r2, r1
      src_quantization->zero_point() &&
 800823c:	5852      	ldr	r2, [r2, r1]
 800823e:	2a00      	cmp	r2, #0
 8008240:	d0cb      	beq.n	80081da <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0xb2>
    result->params.zero_point =
 8008242:	6841      	ldr	r1, [r0, #4]
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 8008244:	f8de 2004 	ldr.w	r2, [lr, #4]
 8008248:	60e9      	str	r1, [r5, #12]
    result->params.scale = src_quantization->scale()->Get(0);
 800824a:	60aa      	str	r2, [r5, #8]
    return data_ - ReadScalar<soffset_t>(data_);
 800824c:	f853 200a 	ldr.w	r2, [r3, sl]
 8008250:	eba9 0202 	sub.w	r2, r9, r2
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8008254:	8811      	ldrh	r1, [r2, #0]
 8008256:	2908      	cmp	r1, #8
 8008258:	d978      	bls.n	800834c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0x224>
 800825a:	8912      	ldrh	r2, [r2, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 800825c:	2a00      	cmp	r2, #0
 800825e:	d075      	beq.n	800834c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0x224>
  SizeT size() const { return EndianScalar(length_); }
 8008260:	f859 1002 	ldr.w	r1, [r9, r2]
 8008264:	9301      	str	r3, [sp, #4]
    auto p = data_ + field_offset;
 8008266:	444a      	add	r2, r9
    int channels = src_quantization->scale()->size();
 8008268:	f852 b001 	ldr.w	fp, [r2, r1]
            ? reinterpret_cast<TfLiteAffineQuantization*>(
 800826c:	f1b8 0f00 	cmp.w	r8, #0
 8008270:	d075      	beq.n	800835e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0x236>
                  non_persistent_buffer_allocator->AllocateTemp(
 8008272:	683a      	ldr	r2, [r7, #0]
 8008274:	210c      	movs	r1, #12
 8008276:	6896      	ldr	r6, [r2, #8]
 8008278:	4638      	mov	r0, r7
 800827a:	2204      	movs	r2, #4
 800827c:	47b0      	blx	r6
    if (quantization == nullptr) {
 800827e:	9b01      	ldr	r3, [sp, #4]
 8008280:	4680      	mov	r8, r0
 8008282:	2800      	cmp	r0, #0
 8008284:	f000 8084 	beq.w	8008390 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0x268>
                  non_persistent_buffer_allocator->AllocateTemp(
 8008288:	683a      	ldr	r2, [r7, #0]
 800828a:	9301      	str	r3, [sp, #4]
 800828c:	4658      	mov	r0, fp
 800828e:	6896      	ldr	r6, [r2, #8]
 8008290:	f7fd ff54 	bl	800613c <TfLiteIntArrayGetSizeInBytes>
 8008294:	2204      	movs	r2, #4
 8008296:	4601      	mov	r1, r0
 8008298:	4638      	mov	r0, r7
 800829a:	47b0      	blx	r6
 800829c:	9b01      	ldr	r3, [sp, #4]
    quantization->zero_point =
 800829e:	f8c8 0004 	str.w	r0, [r8, #4]
    if (quantization->zero_point == nullptr) {
 80082a2:	2800      	cmp	r0, #0
 80082a4:	d079      	beq.n	800839a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0x272>
    return data_ - ReadScalar<soffset_t>(data_);
 80082a6:	f853 200a 	ldr.w	r2, [r3, sl]
 80082aa:	eba9 0202 	sub.w	r2, r9, r2
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 80082ae:	8811      	ldrh	r1, [r2, #0]
 80082b0:	2908      	cmp	r1, #8
 80082b2:	d96b      	bls.n	800838c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0x264>
 80082b4:	8910      	ldrh	r0, [r2, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 80082b6:	b118      	cbz	r0, 80082c0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0x198>
 80082b8:	f859 2000 	ldr.w	r2, [r9, r0]
    auto p = data_ + field_offset;
 80082bc:	4448      	add	r0, r9
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 80082be:	4410      	add	r0, r2
 80082c0:	9301      	str	r3, [sp, #4]
        FlatBufferVectorToTfLiteTypeArray(src_quantization->scale());
 80082c2:	f7fe fd77 	bl	8006db4 <_ZN6tflite33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIfmEE>
    for (int i = 0; i < channels; i++) {
 80082c6:	9b01      	ldr	r3, [sp, #4]
    quantization->zero_point->size = channels;
 80082c8:	f8d8 1004 	ldr.w	r1, [r8, #4]
    return data_ - ReadScalar<soffset_t>(data_);
 80082cc:	f853 300a 	ldr.w	r3, [r3, sl]
    quantization->scale =
 80082d0:	f8c8 0000 	str.w	r0, [r8]
 80082d4:	eba9 0a03 	sub.w	sl, r9, r3
    for (int i = 0; i < channels; i++) {
 80082d8:	f1bb 0f00 	cmp.w	fp, #0
 80082dc:	f8ba 3000 	ldrh.w	r3, [sl]
    quantization->zero_point->size = channels;
 80082e0:	f8c1 b000 	str.w	fp, [r1]
 80082e4:	9301      	str	r3, [sp, #4]
    for (int i = 0; i < channels; i++) {
 80082e6:	dd22      	ble.n	800832e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0x206>
 80082e8:	2b0a      	cmp	r3, #10
 80082ea:	d92f      	bls.n	800834c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0x224>
 80082ec:	f8ba c00a 	ldrh.w	ip, [sl, #10]
 80082f0:	2300      	movs	r3, #0
    auto p = data_ + field_offset;
 80082f2:	eb09 070c 	add.w	r7, r9, ip
 80082f6:	4666      	mov	r6, ip
 80082f8:	46a4      	mov	ip, r4
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 80082fa:	2e00      	cmp	r6, #0
 80082fc:	d058      	beq.n	80083b0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0x288>
 80082fe:	683a      	ldr	r2, [r7, #0]
 8008300:	f8ba 0008 	ldrh.w	r0, [sl, #8]
 8008304:	58bc      	ldr	r4, [r7, r2]
    auto p = data_ + field_offset;
 8008306:	eb09 0e00 	add.w	lr, r9, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 800830a:	443a      	add	r2, r7
 800830c:	2800      	cmp	r0, #0
 800830e:	d051      	beq.n	80083b4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0x28c>
 8008310:	f859 0000 	ldr.w	r0, [r9, r0]
      zero_point_data[i] = src_quantization->zero_point()->size() ==
 8008314:	f85e 0000 	ldr.w	r0, [lr, r0]
 8008318:	42a0      	cmp	r0, r4
 800831a:	d01a      	beq.n	8008352 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0x22a>
    FLATBUFFERS_ASSERT(i < size());
 800831c:	2c00      	cmp	r4, #0
 800831e:	d041      	beq.n	80083a4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0x27c>
 8008320:	6852      	ldr	r2, [r2, #4]
 8008322:	f841 2f04 	str.w	r2, [r1, #4]!
    for (int i = 0; i < channels; i++) {
 8008326:	3301      	adds	r3, #1
 8008328:	459b      	cmp	fp, r3
 800832a:	d1e6      	bne.n	80082fa <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0x1d2>
 800832c:	4664      	mov	r4, ip
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 800832e:	9b01      	ldr	r3, [sp, #4]
 8008330:	2b10      	cmp	r3, #16
 8008332:	d929      	bls.n	8008388 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0x260>
 8008334:	f8ba 3010 	ldrh.w	r3, [sl, #16]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8008338:	b10b      	cbz	r3, 800833e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0x216>
 800833a:	f859 3003 	ldr.w	r3, [r9, r3]
    quantization->quantized_dimension = src_quantization->quantized_dimension();
 800833e:	f8c8 3008 	str.w	r3, [r8, #8]
    result->quantization = {kTfLiteAffineQuantization, quantization};
 8008342:	2201      	movs	r2, #1
 8008344:	702a      	strb	r2, [r5, #0]
 8008346:	f8c5 8004 	str.w	r8, [r5, #4]
 800834a:	e746      	b.n	80081da <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0xb2>
  SizeT size() const { return EndianScalar(length_); }
 800834c:	2300      	movs	r3, #0
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	deff      	udf	#255	; 0xff
    FLATBUFFERS_ASSERT(i < size());
 8008352:	4283      	cmp	r3, r0
 8008354:	d226      	bcs.n	80083a4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0x27c>
 8008356:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
      zero_point_data[i] = src_quantization->zero_point()->size() ==
 800835a:	6852      	ldr	r2, [r2, #4]
 800835c:	e7e1      	b.n	8008322 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0x1fa>
                  persistent_buffer_allocator->AllocatePersistentBuffer(
 800835e:	6832      	ldr	r2, [r6, #0]
 8008360:	210c      	movs	r1, #12
 8008362:	6897      	ldr	r7, [r2, #8]
 8008364:	4630      	mov	r0, r6
 8008366:	2204      	movs	r2, #4
 8008368:	47b8      	blx	r7
    if (quantization == nullptr) {
 800836a:	9b01      	ldr	r3, [sp, #4]
 800836c:	4680      	mov	r8, r0
 800836e:	b178      	cbz	r0, 8008390 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0x268>
                  persistent_buffer_allocator->AllocatePersistentBuffer(
 8008370:	6832      	ldr	r2, [r6, #0]
 8008372:	9301      	str	r3, [sp, #4]
 8008374:	4658      	mov	r0, fp
 8008376:	6897      	ldr	r7, [r2, #8]
 8008378:	f7fd fee0 	bl	800613c <TfLiteIntArrayGetSizeInBytes>
 800837c:	2204      	movs	r2, #4
 800837e:	4601      	mov	r1, r0
 8008380:	4630      	mov	r0, r6
 8008382:	47b8      	blx	r7
 8008384:	9b01      	ldr	r3, [sp, #4]
 8008386:	e78a      	b.n	800829e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0x176>
 8008388:	2300      	movs	r3, #0
 800838a:	e7d8      	b.n	800833e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0x216>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 800838c:	2000      	movs	r0, #0
 800838e:	e797      	b.n	80082c0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0x198>
      MicroPrintf("Unable to allocate TfLiteAffineQuantization.\n");
 8008390:	480b      	ldr	r0, [pc, #44]	; (80083c0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0x298>)
 8008392:	f001 fa23 	bl	80097dc <_Z11MicroPrintfPKcz>
      return kTfLiteError;
 8008396:	2401      	movs	r4, #1
 8008398:	e71f      	b.n	80081da <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0xb2>
      MicroPrintf("Unable to allocate quantization->zero_point.\n");
 800839a:	480a      	ldr	r0, [pc, #40]	; (80083c4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0x29c>)
 800839c:	f001 fa1e 	bl	80097dc <_Z11MicroPrintfPKcz>
      return kTfLiteError;
 80083a0:	2401      	movs	r4, #1
 80083a2:	e71a      	b.n	80081da <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0xb2>
 80083a4:	4b08      	ldr	r3, [pc, #32]	; (80083c8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0x2a0>)
 80083a6:	4a09      	ldr	r2, [pc, #36]	; (80083cc <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0x2a4>)
 80083a8:	4809      	ldr	r0, [pc, #36]	; (80083d0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0x2a8>)
 80083aa:	21b0      	movs	r1, #176	; 0xb0
 80083ac:	f00e fbe6 	bl	8016b7c <__assert_func>
  SizeT size() const { return EndianScalar(length_); }
 80083b0:	6833      	ldr	r3, [r6, #0]
 80083b2:	deff      	udf	#255	; 0xff
 80083b4:	6803      	ldr	r3, [r0, #0]
 80083b6:	deff      	udf	#255	; 0xff
  TFLITE_DCHECK(result != nullptr);
 80083b8:	f00e fbd8 	bl	8016b6c <abort>
 80083bc:	0806b19c 	.word	0x0806b19c
 80083c0:	0806af64 	.word	0x0806af64
 80083c4:	0806af94 	.word	0x0806af94
 80083c8:	0806a098 	.word	0x0806a098
 80083cc:	0806afc4 	.word	0x0806afc4
 80083d0:	0806a168 	.word	0x0806a168

080083d4 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib>:
    int subgraph_idx, bool allocate_temp) {
 80083d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return data_ - ReadScalar<soffset_t>(data_);
 80083d8:	680c      	ldr	r4, [r1, #0]
 80083da:	9d08      	ldr	r5, [sp, #32]
 80083dc:	1b0c      	subs	r4, r1, r4
 80083de:	468c      	mov	ip, r1
 80083e0:	f8b4 8000 	ldrh.w	r8, [r4]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 80083e4:	f1b8 0f08 	cmp.w	r8, #8
 80083e8:	4617      	mov	r7, r2
  return internal::InitializeTfLiteTensorFromFlatbuffer(
 80083ea:	e9d0 1601 	ldrd	r1, r6, [r0, #4]
    int subgraph_idx, bool allocate_temp) {
 80083ee:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
 80083f2:	d94f      	bls.n	8008494 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0xc0>
 80083f4:	8920      	ldrh	r0, [r4, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 80083f6:	2800      	cmp	r0, #0
 80083f8:	d04c      	beq.n	8008494 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0xc0>
 80083fa:	f85c 9000 	ldr.w	r9, [ip, r0]
    auto p = data_ + field_offset;
 80083fe:	eb0c 0e00 	add.w	lr, ip, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8008402:	eb0e 0009 	add.w	r0, lr, r9
    FLATBUFFERS_ASSERT(i < size());
 8008406:	f85e e009 	ldr.w	lr, [lr, r9]
 800840a:	4575      	cmp	r5, lr
 800840c:	d236      	bcs.n	800847c <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0xa8>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800840e:	3004      	adds	r0, #4
    const uint8_t *const offset_location = p + i * element_stride;
 8008410:	eb00 0e85 	add.w	lr, r0, r5, lsl #2
        offset_location + ReadScalar<offset_type>(offset_location));
 8008414:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    return data_ - ReadScalar<soffset_t>(data_);
 8008418:	f85e 5000 	ldr.w	r5, [lr, r0]
 800841c:	4486      	add	lr, r0
 800841e:	ebae 0505 	sub.w	r5, lr, r5
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8008422:	8828      	ldrh	r0, [r5, #0]
 8008424:	2804      	cmp	r0, #4
 8008426:	d935      	bls.n	8008494 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0xc0>
 8008428:	88a8      	ldrh	r0, [r5, #4]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 800842a:	b398      	cbz	r0, 8008494 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0xc0>
 800842c:	f85e 5000 	ldr.w	r5, [lr, r0]
    auto p = data_ + field_offset;
 8008430:	4486      	add	lr, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8008432:	eb0e 0005 	add.w	r0, lr, r5
    FLATBUFFERS_ASSERT(i < size());
 8008436:	f85e 5005 	ldr.w	r5, [lr, r5]
 800843a:	42ab      	cmp	r3, r5
 800843c:	d224      	bcs.n	8008488 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0xb4>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800843e:	3004      	adds	r0, #4
    const uint8_t *const offset_location = p + i * element_stride;
 8008440:	eb00 0583 	add.w	r5, r0, r3, lsl #2
        offset_location + ReadScalar<offset_type>(offset_location));
 8008444:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8008448:	f1b8 0f0c 	cmp.w	r8, #12
 800844c:	442b      	add	r3, r5
 800844e:	d90d      	bls.n	800846c <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0x98>
 8008450:	89a0      	ldrh	r0, [r4, #12]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8008452:	b120      	cbz	r0, 800845e <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0x8a>
 8008454:	f85c 4000 	ldr.w	r4, [ip, r0]
    auto p = data_ + field_offset;
 8008458:	4484      	add	ip, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 800845a:	eb0c 0004 	add.w	r0, ip, r4
  return internal::InitializeTfLiteTensorFromFlatbuffer(
 800845e:	e9cd 0708 	strd	r0, r7, [sp, #32]
 8008462:	4630      	mov	r0, r6
}
 8008464:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return internal::InitializeTfLiteTensorFromFlatbuffer(
 8008468:	f7ff be5e 	b.w	8008128 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor>
 800846c:	2000      	movs	r0, #0
 800846e:	e9cd 0708 	strd	r0, r7, [sp, #32]
 8008472:	4630      	mov	r0, r6
}
 8008474:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return internal::InitializeTfLiteTensorFromFlatbuffer(
 8008478:	f7ff be56 	b.w	8008128 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor>
    FLATBUFFERS_ASSERT(i < size());
 800847c:	4b07      	ldr	r3, [pc, #28]	; (800849c <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0xc8>)
 800847e:	4a08      	ldr	r2, [pc, #32]	; (80084a0 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0xcc>)
 8008480:	4808      	ldr	r0, [pc, #32]	; (80084a4 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0xd0>)
 8008482:	21b0      	movs	r1, #176	; 0xb0
 8008484:	f00e fb7a 	bl	8016b7c <__assert_func>
 8008488:	4b04      	ldr	r3, [pc, #16]	; (800849c <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0xc8>)
 800848a:	4a07      	ldr	r2, [pc, #28]	; (80084a8 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0xd4>)
 800848c:	4805      	ldr	r0, [pc, #20]	; (80084a4 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0xd0>)
 800848e:	21b0      	movs	r1, #176	; 0xb0
 8008490:	f00e fb74 	bl	8016b7c <__assert_func>
  SizeT size() const { return EndianScalar(length_); }
 8008494:	2300      	movs	r3, #0
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	deff      	udf	#255	; 0xff
 800849a:	bf00      	nop
 800849c:	0806a098 	.word	0x0806a098
 80084a0:	0806a838 	.word	0x0806a838
 80084a4:	0806a168 	.word	0x0806a168
 80084a8:	0806aa98 	.word	0x0806aa98

080084ac <_ZN6tflite14MicroAllocator6CreateEPhjNS_17MemoryPlannerTypeE>:
                                       MemoryPlannerType memory_planner_type) {
 80084ac:	b570      	push	{r4, r5, r6, lr}
 80084ae:	460e      	mov	r6, r1
      AlignPointerUp(tensor_arena, MicroArenaBufferAlignment());
 80084b0:	2110      	movs	r1, #16
                                       MemoryPlannerType memory_planner_type) {
 80084b2:	4604      	mov	r4, r0
 80084b4:	4615      	mov	r5, r2
      AlignPointerUp(tensor_arena, MicroArenaBufferAlignment());
 80084b6:	f7fe fc7f 	bl	8006db8 <_ZN6tflite14AlignPointerUpEPhj>
  size_t aligned_arena_size = tensor_arena + arena_size - aligned_arena;
 80084ba:	4434      	add	r4, r6
      SingleArenaBufferAllocator::Create(aligned_arena, aligned_arena_size);
 80084bc:	1a21      	subs	r1, r4, r0
 80084be:	f7fe fc0f 	bl	8006ce0 <_ZN6tflite26SingleArenaBufferAllocator6CreateEPhj>
      CreateMemoryPlanner(memory_planner_type, memory_allocator);
 80084c2:	4604      	mov	r4, r0
 80084c4:	b360      	cbz	r0, 8008520 <_ZN6tflite14MicroAllocator6CreateEPhjNS_17MemoryPlannerTypeE+0x74>
 80084c6:	1d06      	adds	r6, r0, #4
  switch (memory_planner_type) {
 80084c8:	b305      	cbz	r5, 800850c <_ZN6tflite14MicroAllocator6CreateEPhjNS_17MemoryPlannerTypeE+0x60>
 80084ca:	2d01      	cmp	r5, #1
 80084cc:	d001      	beq.n	80084d2 <_ZN6tflite14MicroAllocator6CreateEPhjNS_17MemoryPlannerTypeE+0x26>
  TFLITE_DCHECK(memory_allocator != nullptr);
 80084ce:	f00e fb4d 	bl	8016b6c <abort>
      memory_planner_buffer = memory_allocator->AllocatePersistentBuffer(
 80084d2:	6843      	ldr	r3, [r0, #4]
 80084d4:	2204      	movs	r2, #4
 80084d6:	689b      	ldr	r3, [r3, #8]
 80084d8:	f241 010c 	movw	r1, #4108	; 0x100c
 80084dc:	4630      	mov	r0, r6
 80084de:	4798      	blx	r3
 80084e0:	4605      	mov	r5, r0
      memory_planner = new (memory_planner_buffer) LinearMemoryPlanner();
 80084e2:	f003 ffc3 	bl	800c46c <_ZN6tflite19LinearMemoryPlannerC1Ev>
  TFLITE_DCHECK(memory_planner != nullptr);
 80084e6:	2d00      	cmp	r5, #0
 80084e8:	d0f1      	beq.n	80084ce <_ZN6tflite14MicroAllocator6CreateEPhjNS_17MemoryPlannerTypeE+0x22>
  uint8_t* allocator_buffer = memory_allocator->AllocatePersistentBuffer(
 80084ea:	6823      	ldr	r3, [r4, #0]
 80084ec:	2204      	movs	r2, #4
 80084ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084f0:	2124      	movs	r1, #36	; 0x24
 80084f2:	4620      	mov	r0, r4
 80084f4:	4798      	blx	r3
      model_is_allocating_(false) {}
 80084f6:	2200      	movs	r2, #0
 80084f8:	e9c0 2206 	strd	r2, r2, [r0, #24]
 80084fc:	7502      	strb	r2, [r0, #20]
 80084fe:	6202      	str	r2, [r0, #32]
 8008500:	4a0b      	ldr	r2, [pc, #44]	; (8008530 <_ZN6tflite14MicroAllocator6CreateEPhjNS_17MemoryPlannerTypeE+0x84>)
    : non_persistent_buffer_allocator_(non_persistent_buffer_allocator),
 8008502:	6044      	str	r4, [r0, #4]
      persistent_buffer_allocator_(persistent_buffer_allocator),
 8008504:	6086      	str	r6, [r0, #8]
      memory_planner_(memory_planner),
 8008506:	6105      	str	r5, [r0, #16]
      model_is_allocating_(false) {}
 8008508:	6002      	str	r2, [r0, #0]
}
 800850a:	bd70      	pop	{r4, r5, r6, pc}
      memory_planner_buffer = memory_allocator->AllocatePersistentBuffer(
 800850c:	6843      	ldr	r3, [r0, #4]
 800850e:	2204      	movs	r2, #4
 8008510:	689b      	ldr	r3, [r3, #8]
 8008512:	212c      	movs	r1, #44	; 0x2c
 8008514:	4630      	mov	r0, r6
 8008516:	4798      	blx	r3
 8008518:	4605      	mov	r5, r0
      memory_planner = new (memory_planner_buffer) GreedyMemoryPlanner();
 800851a:	f003 fcb1 	bl	800be80 <_ZN6tflite19GreedyMemoryPlannerC1Ev>
      break;
 800851e:	e7e2      	b.n	80084e6 <_ZN6tflite14MicroAllocator6CreateEPhjNS_17MemoryPlannerTypeE+0x3a>
  switch (memory_planner_type) {
 8008520:	b90d      	cbnz	r5, 8008526 <_ZN6tflite14MicroAllocator6CreateEPhjNS_17MemoryPlannerTypeE+0x7a>
      memory_planner_buffer = memory_allocator->AllocatePersistentBuffer(
 8008522:	682b      	ldr	r3, [r5, #0]
 8008524:	deff      	udf	#255	; 0xff
  switch (memory_planner_type) {
 8008526:	2d01      	cmp	r5, #1
 8008528:	d1d1      	bne.n	80084ce <_ZN6tflite14MicroAllocator6CreateEPhjNS_17MemoryPlannerTypeE+0x22>
      memory_planner_buffer = memory_allocator->AllocatePersistentBuffer(
 800852a:	6803      	ldr	r3, [r0, #0]
 800852c:	deff      	udf	#255	; 0xff
 800852e:	bf00      	nop
 8008530:	0806b1c0 	.word	0x0806b1c0

08008534 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE>:
SubgraphAllocations* MicroAllocator::StartModelAllocation(const Model* model) {
 8008534:	b570      	push	{r4, r5, r6, lr}
  TFLITE_DCHECK(model != nullptr);
 8008536:	2900      	cmp	r1, #0
 8008538:	d04c      	beq.n	80085d4 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xa0>
  if (model_is_allocating_) {
 800853a:	7d06      	ldrb	r6, [r0, #20]
 800853c:	4604      	mov	r4, r0
 800853e:	2e00      	cmp	r6, #0
 8008540:	d13c      	bne.n	80085bc <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x88>
      persistent_buffer_allocator_->AllocatePersistentBuffer(
 8008542:	6880      	ldr	r0, [r0, #8]
  model_is_allocating_ = true;
 8008544:	2301      	movs	r3, #1
 8008546:	7523      	strb	r3, [r4, #20]
      persistent_buffer_allocator_->AllocatePersistentBuffer(
 8008548:	6803      	ldr	r3, [r0, #0]
 800854a:	2204      	movs	r2, #4
 800854c:	689b      	ldr	r3, [r3, #8]
 800854e:	460d      	mov	r5, r1
 8008550:	2108      	movs	r1, #8
 8008552:	4798      	blx	r3
      MicroBuiltinDataAllocator(persistent_buffer_allocator_);
 8008554:	68a3      	ldr	r3, [r4, #8]
      : persistent_allocator_(persistent_allocator) {}
 8008556:	6043      	str	r3, [r0, #4]
      non_persistent_buffer_allocator_->AllocateResizableBuffer(
 8008558:	6863      	ldr	r3, [r4, #4]
      : persistent_allocator_(persistent_allocator) {}
 800855a:	4a1f      	ldr	r2, [pc, #124]	; (80085d8 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xa4>)
 800855c:	6002      	str	r2, [r0, #0]
      non_persistent_buffer_allocator_->AllocateResizableBuffer(
 800855e:	681a      	ldr	r2, [r3, #0]
  builtin_data_allocator_ = new (data_allocator_buffer)
 8008560:	60e0      	str	r0, [r4, #12]
  scratch_buffer_request_count_ = 0;
 8008562:	61a6      	str	r6, [r4, #24]
      non_persistent_buffer_allocator_->AllocateResizableBuffer(
 8008564:	4618      	mov	r0, r3
 8008566:	6996      	ldr	r6, [r2, #24]
 8008568:	2190      	movs	r1, #144	; 0x90
 800856a:	2204      	movs	r2, #4
 800856c:	47b0      	blx	r6
  scratch_buffer_head_ =
 800856e:	61e0      	str	r0, [r4, #28]
  if (scratch_buffer_head_ == nullptr) {
 8008570:	b308      	cbz	r0, 80085b6 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x82>
    return data_ - ReadScalar<soffset_t>(data_);
 8008572:	682b      	ldr	r3, [r5, #0]
      persistent_buffer_allocator_->AllocatePersistentBuffer(
 8008574:	68a0      	ldr	r0, [r4, #8]
 8008576:	1aeb      	subs	r3, r5, r3
 8008578:	6802      	ldr	r2, [r0, #0]
 800857a:	6896      	ldr	r6, [r2, #8]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 800857c:	881a      	ldrh	r2, [r3, #0]
 800857e:	2a08      	cmp	r2, #8
 8008580:	d925      	bls.n	80085ce <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x9a>
 8008582:	891b      	ldrh	r3, [r3, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8008584:	b31b      	cbz	r3, 80085ce <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x9a>
 8008586:	58ea      	ldr	r2, [r5, r3]
    auto p = data_ + field_offset;
 8008588:	442b      	add	r3, r5
          sizeof(SubgraphAllocations) * model->subgraphs()->size(),
 800858a:	5899      	ldr	r1, [r3, r2]
      persistent_buffer_allocator_->AllocatePersistentBuffer(
 800858c:	2204      	movs	r2, #4
 800858e:	00c9      	lsls	r1, r1, #3
 8008590:	47b0      	blx	r6
  if (output == nullptr) {
 8008592:	4606      	mov	r6, r0
 8008594:	b1b8      	cbz	r0, 80085c6 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x92>
  if (AllocateTfLiteEvalTensors(model, output) != kTfLiteOk ||
 8008596:	6823      	ldr	r3, [r4, #0]
 8008598:	4602      	mov	r2, r0
 800859a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800859c:	4629      	mov	r1, r5
 800859e:	4620      	mov	r0, r4
 80085a0:	4798      	blx	r3
 80085a2:	b940      	cbnz	r0, 80085b6 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x82>
      AllocateNodeAndRegistrations(model, output) != kTfLiteOk) {
 80085a4:	6823      	ldr	r3, [r4, #0]
 80085a6:	4632      	mov	r2, r6
 80085a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085aa:	4629      	mov	r1, r5
 80085ac:	4620      	mov	r0, r4
 80085ae:	4798      	blx	r3
  if (AllocateTfLiteEvalTensors(model, output) != kTfLiteOk ||
 80085b0:	b908      	cbnz	r0, 80085b6 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x82>
}
 80085b2:	4630      	mov	r0, r6
 80085b4:	bd70      	pop	{r4, r5, r6, pc}
    return nullptr;
 80085b6:	2600      	movs	r6, #0
}
 80085b8:	4630      	mov	r0, r6
 80085ba:	bd70      	pop	{r4, r5, r6, pc}
    MicroPrintf(
 80085bc:	4807      	ldr	r0, [pc, #28]	; (80085dc <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xa8>)
 80085be:	f001 f90d 	bl	80097dc <_Z11MicroPrintfPKcz>
    return nullptr;
 80085c2:	2600      	movs	r6, #0
 80085c4:	e7f5      	b.n	80085b2 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x7e>
    MicroPrintf("Failed to allocate memory for model metadata.");
 80085c6:	4806      	ldr	r0, [pc, #24]	; (80085e0 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xac>)
 80085c8:	f001 f908 	bl	80097dc <_Z11MicroPrintfPKcz>
    return nullptr;
 80085cc:	e7f1      	b.n	80085b2 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x7e>
 80085ce:	2300      	movs	r3, #0
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	deff      	udf	#255	; 0xff
  TFLITE_DCHECK(model != nullptr);
 80085d4:	f00e faca 	bl	8016b6c <abort>
 80085d8:	0806b1a8 	.word	0x0806b1a8
 80085dc:	0806b090 	.word	0x0806b090
 80085e0:	0806b0e8 	.word	0x0806b0e8

080085e4 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE>:
    ScratchBufferHandle** scratch_buffer_handles) {
 80085e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085e6:	461d      	mov	r5, r3
  if (!model_is_allocating_) {
 80085e8:	7d03      	ldrb	r3, [r0, #20]
 80085ea:	b31b      	cbz	r3, 8008634 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x50>
 80085ec:	460e      	mov	r6, r1
  TF_LITE_ENSURE_STATUS(AllocateScratchBufferHandles(
 80085ee:	6801      	ldr	r1, [r0, #0]
 80085f0:	f8df c054 	ldr.w	ip, [pc, #84]	; 8008648 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x64>
 80085f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80085f6:	4563      	cmp	r3, ip
 80085f8:	4617      	mov	r7, r2
 80085fa:	4604      	mov	r4, r0
 80085fc:	6982      	ldr	r2, [r0, #24]
 80085fe:	d112      	bne.n	8008626 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x42>
  TFLITE_DCHECK(scratch_buffer_handles != nullptr);
 8008600:	b1ed      	cbz	r5, 800863e <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x5a>
  if (scratch_buffer_request_count_ == 0) {
 8008602:	b1aa      	cbz	r2, 8008630 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x4c>
      persistent_buffer_allocator_->AllocatePersistentBuffer(
 8008604:	6880      	ldr	r0, [r0, #8]
 8008606:	6803      	ldr	r3, [r0, #0]
 8008608:	0091      	lsls	r1, r2, #2
 800860a:	689b      	ldr	r3, [r3, #8]
 800860c:	2204      	movs	r2, #4
 800860e:	4798      	blx	r3
  TF_LITE_ENSURE_STATUS(CommitStaticMemoryPlan(model, subgraph_allocations,
 8008610:	6821      	ldr	r1, [r4, #0]
  *scratch_buffer_handles = reinterpret_cast<ScratchBufferHandle*>(
 8008612:	6028      	str	r0, [r5, #0]
      persistent_buffer_allocator_->AllocatePersistentBuffer(
 8008614:	4603      	mov	r3, r0
  TF_LITE_ENSURE_STATUS(CommitStaticMemoryPlan(model, subgraph_allocations,
 8008616:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 8008618:	463a      	mov	r2, r7
 800861a:	4631      	mov	r1, r6
 800861c:	4620      	mov	r0, r4
 800861e:	47a8      	blx	r5
 8008620:	b900      	cbnz	r0, 8008624 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x40>
  model_is_allocating_ = false;
 8008622:	7520      	strb	r0, [r4, #20]
}
 8008624:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  TF_LITE_ENSURE_STATUS(AllocateScratchBufferHandles(
 8008626:	4629      	mov	r1, r5
 8008628:	4798      	blx	r3
 800862a:	2800      	cmp	r0, #0
 800862c:	d1fa      	bne.n	8008624 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x40>
  TF_LITE_ENSURE_STATUS(CommitStaticMemoryPlan(model, subgraph_allocations,
 800862e:	6821      	ldr	r1, [r4, #0]
 8008630:	682b      	ldr	r3, [r5, #0]
 8008632:	e7f0      	b.n	8008616 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x32>
    MicroPrintf(
 8008634:	4803      	ldr	r0, [pc, #12]	; (8008644 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x60>)
 8008636:	f001 f8d1 	bl	80097dc <_Z11MicroPrintfPKcz>
    return kTfLiteError;
 800863a:	2001      	movs	r0, #1
}
 800863c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  TFLITE_DCHECK(scratch_buffer_handles != nullptr);
 800863e:	f00e fa95 	bl	8016b6c <abort>
 8008642:	bf00      	nop
 8008644:	0806b118 	.word	0x0806b118
 8008648:	08007a39 	.word	0x08007a39

0800864c <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi>:
                                                         int* buffer_idx) {
 800864c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008650:	4605      	mov	r5, r0
 8008652:	4688      	mov	r8, r1
  return reinterpret_cast<internal::ScratchBufferRequest*>(AlignPointerUp(
 8008654:	69c0      	ldr	r0, [r0, #28]
 8008656:	2104      	movs	r1, #4
                                                         int* buffer_idx) {
 8008658:	4617      	mov	r7, r2
 800865a:	461e      	mov	r6, r3
  return reinterpret_cast<internal::ScratchBufferRequest*>(AlignPointerUp(
 800865c:	f7fe fbac 	bl	8006db8 <_ZN6tflite14AlignPointerUpEPhj>
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 8008660:	69a9      	ldr	r1, [r5, #24]
  return reinterpret_cast<internal::ScratchBufferRequest*>(AlignPointerUp(
 8008662:	4684      	mov	ip, r0
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 8008664:	b179      	cbz	r1, 8008686 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x3a>
 8008666:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 800866a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
  size_t current_node_request_count = 0;
 800866e:	2200      	movs	r2, #0
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
 8008670:	f8dc 4004 	ldr.w	r4, [ip, #4]
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 8008674:	f10c 0c0c 	add.w	ip, ip, #12
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
 8008678:	3401      	adds	r4, #1
      ++current_node_request_count;
 800867a:	bf08      	it	eq
 800867c:	3201      	addeq	r2, #1
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 800867e:	459c      	cmp	ip, r3
 8008680:	d1f6      	bne.n	8008670 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x24>
  if (current_node_request_count >= kMaxScratchBuffersPerOp) {
 8008682:	2a0b      	cmp	r2, #11
 8008684:	d80e      	bhi.n	80086a4 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x58>
  current_request->node_idx = kUnassignedScratchBufferRequestIndex;
 8008686:	f04f 33ff 	mov.w	r3, #4294967295
 800868a:	f8cc 3004 	str.w	r3, [ip, #4]
  current_request->bytes = bytes;
 800868e:	f8cc 8000 	str.w	r8, [ip]
  current_request->subgraph_idx = subgraph_idx;
 8008692:	f8cc 7008 	str.w	r7, [ip, #8]
  *buffer_idx = scratch_buffer_request_count_;
 8008696:	6031      	str	r1, [r6, #0]
  ++scratch_buffer_request_count_;
 8008698:	69ab      	ldr	r3, [r5, #24]
 800869a:	3301      	adds	r3, #1
  return kTfLiteOk;
 800869c:	2000      	movs	r0, #0
  ++scratch_buffer_request_count_;
 800869e:	61ab      	str	r3, [r5, #24]
}
 80086a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MicroPrintf("Scratch buffer request exeeds limit per operator (%d)",
 80086a4:	4803      	ldr	r0, [pc, #12]	; (80086b4 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x68>)
 80086a6:	210c      	movs	r1, #12
 80086a8:	f001 f898 	bl	80097dc <_Z11MicroPrintfPKcz>
    return kTfLiteError;
 80086ac:	2001      	movs	r0, #1
}
 80086ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086b2:	bf00      	nop
 80086b4:	0806b164 	.word	0x0806b164

080086b8 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi>:
  TF_LITE_ENSURE_STATUS(ResetTempAllocations());
 80086b8:	6803      	ldr	r3, [r0, #0]
 80086ba:	4a16      	ldr	r2, [pc, #88]	; (8008714 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x5c>)
 80086bc:	695b      	ldr	r3, [r3, #20]
 80086be:	4293      	cmp	r3, r2
TfLiteStatus MicroAllocator::FinishPrepareNodeAllocations(int node_id) {
 80086c0:	b570      	push	{r4, r5, r6, lr}
 80086c2:	4605      	mov	r5, r0
  return non_persistent_buffer_allocator_->ResetTempAllocations();
 80086c4:	bf02      	ittt	eq
 80086c6:	6840      	ldreq	r0, [r0, #4]
 80086c8:	6803      	ldreq	r3, [r0, #0]
 80086ca:	695b      	ldreq	r3, [r3, #20]
TfLiteStatus MicroAllocator::FinishPrepareNodeAllocations(int node_id) {
 80086cc:	460c      	mov	r4, r1
  TF_LITE_ENSURE_STATUS(ResetTempAllocations());
 80086ce:	4798      	blx	r3
 80086d0:	b100      	cbz	r0, 80086d4 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x1c>
}
 80086d2:	bd70      	pop	{r4, r5, r6, pc}
  return reinterpret_cast<internal::ScratchBufferRequest*>(AlignPointerUp(
 80086d4:	69e8      	ldr	r0, [r5, #28]
 80086d6:	2104      	movs	r1, #4
 80086d8:	f7fe fb6e 	bl	8006db8 <_ZN6tflite14AlignPointerUpEPhj>
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 80086dc:	69aa      	ldr	r2, [r5, #24]
  return reinterpret_cast<internal::ScratchBufferRequest*>(AlignPointerUp(
 80086de:	4603      	mov	r3, r0
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 80086e0:	b1b2      	cbz	r2, 8008710 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x58>
 80086e2:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
 80086e6:	ea4f 028c 	mov.w	r2, ip, lsl #2
 80086ea:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
 80086ee:	6859      	ldr	r1, [r3, #4]
 80086f0:	3101      	adds	r1, #1
      requests[i].node_idx = node_id;
 80086f2:	bf08      	it	eq
 80086f4:	605c      	streq	r4, [r3, #4]
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 80086f6:	330c      	adds	r3, #12
 80086f8:	4563      	cmp	r3, ip
 80086fa:	d1f8      	bne.n	80086ee <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x36>
  TF_LITE_ENSURE_STATUS(non_persistent_buffer_allocator_->ResizeBuffer(
 80086fc:	3290      	adds	r2, #144	; 0x90
 80086fe:	6868      	ldr	r0, [r5, #4]
 8008700:	69e9      	ldr	r1, [r5, #28]
 8008702:	6804      	ldr	r4, [r0, #0]
 8008704:	69e4      	ldr	r4, [r4, #28]
 8008706:	2304      	movs	r3, #4
 8008708:	46a4      	mov	ip, r4
}
 800870a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  TF_LITE_ENSURE_STATUS(non_persistent_buffer_allocator_->ResizeBuffer(
 800870e:	4760      	bx	ip
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 8008710:	2290      	movs	r2, #144	; 0x90
 8008712:	e7f4      	b.n	80086fe <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x46>
 8008714:	080079d5 	.word	0x080079d5

08008718 <_ZN6tflite14MicroAllocator23GetBuiltinDataAllocatorEv>:
      scratch_buffer_head_, alignof(internal::ScratchBufferRequest)));
}

TfLiteBridgeBuiltinDataAllocator* MicroAllocator::GetBuiltinDataAllocator() {
  return builtin_data_allocator_;
}
 8008718:	68c0      	ldr	r0, [r0, #12]
 800871a:	4770      	bx	lr

0800871c <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei>:
}  // namespace

TfLiteTensor* MicroContext::AllocateTempInputTensor(const TfLiteNode* node,
                                                    int index) {
  const int tensor_index =
      GetTensorIndex(index, node->inputs->size, node->inputs->data);
 800871c:	680b      	ldr	r3, [r1, #0]
  if (index >= 0 && index < max_size) {
 800871e:	2a00      	cmp	r2, #0
      GetTensorIndex(index, node->inputs->size, node->inputs->data);
 8008720:	f853 1b04 	ldr.w	r1, [r3], #4
  if (index >= 0 && index < max_size) {
 8008724:	db08      	blt.n	8008738 <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei+0x1c>
 8008726:	4291      	cmp	r1, r2
 8008728:	dd06      	ble.n	8008738 <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei+0x1c>
    const int tensor_index = tensor_indices[index];
 800872a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  if (tensor_index < 0) {
 800872e:	2900      	cmp	r1, #0
 8008730:	db02      	blt.n	8008738 <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei+0x1c>
    return nullptr;
  }
  return AllocateTempTfLiteTensor(tensor_index);
 8008732:	6803      	ldr	r3, [r0, #0]
 8008734:	695b      	ldr	r3, [r3, #20]
 8008736:	4718      	bx	r3
}
 8008738:	2000      	movs	r0, #0
 800873a:	4770      	bx	lr

0800873c <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei>:

TfLiteTensor* MicroContext::AllocateTempOutputTensor(const TfLiteNode* node,
                                                     int index) {
  const int tensor_index =
      GetTensorIndex(index, node->outputs->size, node->outputs->data);
 800873c:	684b      	ldr	r3, [r1, #4]
  if (index >= 0 && index < max_size) {
 800873e:	2a00      	cmp	r2, #0
      GetTensorIndex(index, node->outputs->size, node->outputs->data);
 8008740:	f853 1b04 	ldr.w	r1, [r3], #4
  if (index >= 0 && index < max_size) {
 8008744:	db08      	blt.n	8008758 <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei+0x1c>
 8008746:	4291      	cmp	r1, r2
 8008748:	dd06      	ble.n	8008758 <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei+0x1c>
    const int tensor_index = tensor_indices[index];
 800874a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  if (tensor_index < 0) {
 800874e:	2900      	cmp	r1, #0
 8008750:	db02      	blt.n	8008758 <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei+0x1c>
    return nullptr;
  }
  return AllocateTempTfLiteTensor(tensor_index);
 8008752:	6803      	ldr	r3, [r0, #0]
 8008754:	695b      	ldr	r3, [r3, #20]
 8008756:	4718      	bx	r3
}
 8008758:	2000      	movs	r0, #0
 800875a:	4770      	bx	lr

0800875c <_ZN6tflite25MicroContextReportOpErrorEP13TfLiteContextPKcz>:
  }
  return AllocateTempTfLiteTensor(tensor_index);
}

void MicroContextReportOpError(struct TfLiteContext* context,
                               const char* format, ...) {
 800875c:	b40e      	push	{r1, r2, r3}
 800875e:	b500      	push	{lr}
 8008760:	b082      	sub	sp, #8
 8008762:	a903      	add	r1, sp, #12
 8008764:	f851 0b04 	ldr.w	r0, [r1], #4
  va_list args;
  va_start(args, format);
 8008768:	9101      	str	r1, [sp, #4]
  VMicroPrintf(format, args);
 800876a:	f001 f82d 	bl	80097c8 <_Z12VMicroPrintfPKcSt9__va_list>
  va_end(args);
}
 800876e:	b002      	add	sp, #8
 8008770:	f85d eb04 	ldr.w	lr, [sp], #4
 8008774:	b003      	add	sp, #12
 8008776:	4770      	bx	lr

08008778 <_ZN6tflite36MicroContextAllocatePersistentBufferEP13TfLiteContextj>:
 private:
  TF_LITE_REMOVE_VIRTUAL_DELETE
};

inline MicroContext* GetMicroContext(const struct TfLiteContext* context) {
  return reinterpret_cast<MicroContext*>(context->impl_);
 8008778:	68c0      	ldr	r0, [r0, #12]
// TODO(b/213010668): migrate all existing kernels to use MicroContext, delete
// these functions, and remove corresponding members from the TfLiteContext
// struct for TFLM.
inline void* MicroContextAllocatePersistentBuffer(TfLiteContext* ctx,
                                                  size_t bytes) {
  return GetMicroContext(ctx)->AllocatePersistentBuffer(bytes);
 800877a:	6803      	ldr	r3, [r0, #0]
 800877c:	689b      	ldr	r3, [r3, #8]
 800877e:	4718      	bx	r3

08008780 <_ZN6tflite39MicroContextRequestScratchBufferInArenaEP13TfLiteContextjPi>:
  return reinterpret_cast<MicroContext*>(context->impl_);
 8008780:	68c0      	ldr	r0, [r0, #12]
}
inline TfLiteStatus MicroContextRequestScratchBufferInArena(TfLiteContext* ctx,
                                                            size_t bytes,
                                                            int* buffer_idx) {
  return GetMicroContext(ctx)->RequestScratchBufferInArena(bytes, buffer_idx);
 8008782:	6803      	ldr	r3, [r0, #0]
 8008784:	68db      	ldr	r3, [r3, #12]
 8008786:	4718      	bx	r3

08008788 <_ZN6tflite28MicroContextGetScratchBufferEP13TfLiteContexti>:
  return reinterpret_cast<MicroContext*>(context->impl_);
 8008788:	68c0      	ldr	r0, [r0, #12]
}
inline void* MicroContextGetScratchBuffer(TfLiteContext* ctx, int buffer_idx) {
  return GetMicroContext(ctx)->GetScratchBuffer(buffer_idx);
 800878a:	6803      	ldr	r3, [r0, #0]
 800878c:	691b      	ldr	r3, [r3, #16]
 800878e:	4718      	bx	r3

08008790 <_ZN6tflite21MicroContextGetTensorEPK13TfLiteContexti>:
  return reinterpret_cast<MicroContext*>(context->impl_);
 8008790:	68c0      	ldr	r0, [r0, #12]
}
inline TfLiteTensor* MicroContextGetTensor(const struct TfLiteContext* context,
                                           int tensor_idx) {
  return GetMicroContext(context)->AllocateTempTfLiteTensor(tensor_idx);
 8008792:	6803      	ldr	r3, [r0, #0]
 8008794:	695b      	ldr	r3, [r3, #20]
 8008796:	4718      	bx	r3

08008798 <_ZN6tflite25MicroContextGetEvalTensorEPK13TfLiteContexti>:
  return reinterpret_cast<MicroContext*>(context->impl_);
 8008798:	68c0      	ldr	r0, [r0, #12]
}
inline TfLiteEvalTensor* MicroContextGetEvalTensor(
    const struct TfLiteContext* context, int tensor_idx) {
  return GetMicroContext(context)->GetEvalTensor(tensor_idx);
 800879a:	6803      	ldr	r3, [r0, #0]
 800879c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800879e:	4718      	bx	r3

080087a0 <_ZN6tflite23MicroInterpreterContext16external_contextEv>:
  // Does not take ownership of the pointer and the pointer must refer to valid
  // an object that outlive this class instance.
  // This can only be called once to set one external context.
  TfLiteStatus set_external_context(void* external_context_payload) override;

  void* external_context() override { return external_context_payload_; }
 80087a0:	6980      	ldr	r0, [r0, #24]
 80087a2:	4770      	bx	lr

080087a4 <_ZN6tflite30MicroContextGetExternalContextEP13TfLiteContext25TfLiteExternalContextType>:
  return reinterpret_cast<MicroContext*>(context->impl_);
 80087a4:	68c0      	ldr	r0, [r0, #12]
 80087a6:	4a04      	ldr	r2, [pc, #16]	; (80087b8 <_ZN6tflite30MicroContextGetExternalContextEP13TfLiteContext25TfLiteExternalContextType+0x14>)
}
inline TfLiteExternalContext* MicroContextGetExternalContext(
    TfLiteContext* context, TfLiteExternalContextType unused) {
  return reinterpret_cast<TfLiteExternalContext*>(
      GetMicroContext(context)->external_context());
 80087a8:	6803      	ldr	r3, [r0, #0]
 80087aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d101      	bne.n	80087b4 <_ZN6tflite30MicroContextGetExternalContextEP13TfLiteContext25TfLiteExternalContextType+0x10>
 80087b0:	6980      	ldr	r0, [r0, #24]
}
 80087b2:	4770      	bx	lr
      GetMicroContext(context)->external_context());
 80087b4:	4718      	bx	r3
 80087b6:	bf00      	nop
 80087b8:	080087a1 	.word	0x080087a1

080087bc <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_22MicroResourceVariablesEPNS_22MicroProfilerInterfaceEb>:
    return MemoryPlannerType::kGreedy;
  }
}
}  // namespace

MicroInterpreter::MicroInterpreter(const Model* model,
 80087bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80087c0:	b083      	sub	sp, #12
      graph_(&context_, model, &allocator_, resource_variables),
      tensors_allocated_(false),
      initialization_status_(kTfLiteError),
      input_tensors_(nullptr),
      output_tensors_(nullptr),
      micro_context_(&allocator_, model_, &graph_) {
 80087c2:	f100 0808 	add.w	r8, r0, #8
MicroInterpreter::MicroInterpreter(const Model* model,
 80087c6:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
      op_resolver_(op_resolver),
 80087ca:	6042      	str	r2, [r0, #4]
MicroInterpreter::MicroInterpreter(const Model* model,
 80087cc:	4604      	mov	r4, r0
 80087ce:	461f      	mov	r7, r3
 80087d0:	460e      	mov	r6, r1
    : model_(model),
 80087d2:	6001      	str	r1, [r0, #0]
      micro_context_(&allocator_, model_, &graph_) {
 80087d4:	2264      	movs	r2, #100	; 0x64
 80087d6:	2100      	movs	r1, #0
 80087d8:	4640      	mov	r0, r8
MicroInterpreter::MicroInterpreter(const Model* model,
 80087da:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
      micro_context_(&allocator_, model_, &graph_) {
 80087dc:	f00f f886 	bl	80178ec <memset>
      allocator_(*MicroAllocator::Create(
 80087e0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80087e2:	464a      	mov	r2, r9
 80087e4:	4638      	mov	r0, r7
 80087e6:	f7ff fe61 	bl	80084ac <_ZN6tflite14MicroAllocator6CreateEPhjNS_17MemoryPlannerTypeE>
      graph_(&context_, model, &allocator_, resource_variables),
 80087ea:	f104 0770 	add.w	r7, r4, #112	; 0x70
 80087ee:	9500      	str	r5, [sp, #0]
      allocator_(*MicroAllocator::Create(
 80087f0:	4603      	mov	r3, r0
      graph_(&context_, model, &allocator_, resource_variables),
 80087f2:	4632      	mov	r2, r6
 80087f4:	4641      	mov	r1, r8
      allocator_(*MicroAllocator::Create(
 80087f6:	66e0      	str	r0, [r4, #108]	; 0x6c
      graph_(&context_, model, &allocator_, resource_variables),
 80087f8:	4638      	mov	r0, r7
 80087fa:	f000 ffb5 	bl	8009768 <_ZN6tflite21MicroInterpreterGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorEPNS_22MicroResourceVariablesE>
      micro_context_(&allocator_, model_, &graph_) {
 80087fe:	4626      	mov	r6, r4
      tensors_allocated_(false),
 8008800:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008804:	f8a4 3090 	strh.w	r3, [r4, #144]	; 0x90
      micro_context_(&allocator_, model_, &graph_) {
 8008808:	f856 2ba0 	ldr.w	r2, [r6], #160
 800880c:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800880e:	2500      	movs	r5, #0
 8008810:	463b      	mov	r3, r7
      input_tensors_(nullptr),
 8008812:	e9c4 5525 	strd	r5, r5, [r4, #148]	; 0x94
      output_tensors_(nullptr),
 8008816:	f8c4 509c 	str.w	r5, [r4, #156]	; 0x9c
      micro_context_(&allocator_, model_, &graph_) {
 800881a:	4630      	mov	r0, r6
 800881c:	f000 fc48 	bl	80090b0 <_ZN6tflite23MicroInterpreterContextC1EPNS_14MicroAllocatorEPKNS_5ModelEPNS_21MicroInterpreterGraphE>
    graph_.FreeSubgraphs();
  }
}

void MicroInterpreter::Init(MicroProfilerInterface* profiler) {
  micro_context_.SetInterpreterState(
 8008820:	4629      	mov	r1, r5
 8008822:	4630      	mov	r0, r6
 8008824:	f000 fc52 	bl	80090cc <_ZN6tflite23MicroInterpreterContext19SetInterpreterStateENS0_16InterpreterStateE>
      MicroInterpreterContext::InterpreterState::kInit);
  context_.impl_ = static_cast<void*>(&micro_context_);
  context_.ReportError = MicroContextReportOpError;
 8008828:	4b0b      	ldr	r3, [pc, #44]	; (8008858 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_22MicroResourceVariablesEPNS_22MicroProfilerInterfaceEb+0x9c>)
  context_.GetTensor = MicroContextGetTensor;
 800882a:	4a0c      	ldr	r2, [pc, #48]	; (800885c <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_22MicroResourceVariablesEPNS_22MicroProfilerInterfaceEb+0xa0>)
  context_.ReportError = MicroContextReportOpError;
 800882c:	61e3      	str	r3, [r4, #28]
  context_.GetEvalTensor = MicroContextGetEvalTensor;
 800882e:	4b0c      	ldr	r3, [pc, #48]	; (8008860 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_22MicroResourceVariablesEPNS_22MicroProfilerInterfaceEb+0xa4>)
  context_.profiler = profiler;
  context_.RequestScratchBufferInArena =
      MicroContextRequestScratchBufferInArena;
  context_.GetExternalContext = MicroContextGetExternalContext;
 8008830:	490c      	ldr	r1, [pc, #48]	; (8008864 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_22MicroResourceVariablesEPNS_22MicroProfilerInterfaceEb+0xa8>)
  context_.impl_ = static_cast<void*>(&micro_context_);
 8008832:	6166      	str	r6, [r4, #20]
  context_.GetEvalTensor = MicroContextGetEvalTensor;
 8008834:	e9c4 2316 	strd	r2, r3, [r4, #88]	; 0x58
  context_.profiler = profiler;
 8008838:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  context_.RequestScratchBufferInArena =
 800883a:	4b0b      	ldr	r3, [pc, #44]	; (8008868 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_22MicroResourceVariablesEPNS_22MicroProfilerInterfaceEb+0xac>)
  context_.profiler = profiler;
 800883c:	63e2      	str	r2, [r4, #60]	; 0x3c
  context_.RequestScratchBufferInArena =
 800883e:	64a3      	str	r3, [r4, #72]	; 0x48
  context_.AllocatePersistentBuffer = MicroContextAllocatePersistentBuffer;
 8008840:	4a0a      	ldr	r2, [pc, #40]	; (800886c <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_22MicroResourceVariablesEPNS_22MicroProfilerInterfaceEb+0xb0>)
  context_.GetScratchBuffer = MicroContextGetScratchBuffer;
 8008842:	4b0b      	ldr	r3, [pc, #44]	; (8008870 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_22MicroResourceVariablesEPNS_22MicroProfilerInterfaceEb+0xb4>)
  context_.GetExternalContext = MicroContextGetExternalContext;
 8008844:	6321      	str	r1, [r4, #48]	; 0x30
}
 8008846:	4620      	mov	r0, r4
  context_.AllocatePersistentBuffer = MicroContextAllocatePersistentBuffer;
 8008848:	6422      	str	r2, [r4, #64]	; 0x40
  context_.GetScratchBuffer = MicroContextGetScratchBuffer;
 800884a:	64e3      	str	r3, [r4, #76]	; 0x4c

  initialization_status_ = kTfLiteOk;
 800884c:	f884 5091 	strb.w	r5, [r4, #145]	; 0x91
}
 8008850:	b003      	add	sp, #12
 8008852:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008856:	bf00      	nop
 8008858:	0800875d 	.word	0x0800875d
 800885c:	08008791 	.word	0x08008791
 8008860:	08008799 	.word	0x08008799
 8008864:	080087a5 	.word	0x080087a5
 8008868:	08008781 	.word	0x08008781
 800886c:	08008779 	.word	0x08008779
 8008870:	08008789 	.word	0x08008789

08008874 <_ZN6tflite16MicroInterpreter5inputEj>:
  }
  return graph_.InvokeSubgraph(0);
}

TfLiteTensor* MicroInterpreter::input(size_t index) {
  const size_t length = inputs_size();
 8008874:	6803      	ldr	r3, [r0, #0]
    return data_ - ReadScalar<soffset_t>(data_);
 8008876:	681a      	ldr	r2, [r3, #0]
 8008878:	1a9a      	subs	r2, r3, r2
TfLiteTensor* MicroInterpreter::input(size_t index) {
 800887a:	b510      	push	{r4, lr}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 800887c:	8814      	ldrh	r4, [r2, #0]
 800887e:	2c08      	cmp	r4, #8
 8008880:	d925      	bls.n	80088ce <_ZN6tflite16MicroInterpreter5inputEj+0x5a>
 8008882:	8912      	ldrh	r2, [r2, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8008884:	b31a      	cbz	r2, 80088ce <_ZN6tflite16MicroInterpreter5inputEj+0x5a>
 8008886:	589c      	ldr	r4, [r3, r2]
    auto p = data_ + field_offset;
 8008888:	4413      	add	r3, r2
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 800888a:	191a      	adds	r2, r3, r4
    FLATBUFFERS_ASSERT(i < size());
 800888c:	591b      	ldr	r3, [r3, r4]
 800888e:	b1c3      	cbz	r3, 80088c2 <_ZN6tflite16MicroInterpreter5inputEj+0x4e>
 8008890:	6854      	ldr	r4, [r2, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8008892:	1d13      	adds	r3, r2, #4
    return data_ - ReadScalar<soffset_t>(data_);
 8008894:	591a      	ldr	r2, [r3, r4]
 8008896:	4423      	add	r3, r4
 8008898:	1a9a      	subs	r2, r3, r2
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 800889a:	8814      	ldrh	r4, [r2, #0]
 800889c:	2c06      	cmp	r4, #6
 800889e:	d916      	bls.n	80088ce <_ZN6tflite16MicroInterpreter5inputEj+0x5a>
 80088a0:	88d2      	ldrh	r2, [r2, #6]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 80088a2:	b1a2      	cbz	r2, 80088ce <_ZN6tflite16MicroInterpreter5inputEj+0x5a>
  SizeT size() const { return EndianScalar(length_); }
 80088a4:	589c      	ldr	r4, [r3, r2]
    auto p = data_ + field_offset;
 80088a6:	4413      	add	r3, r2
 80088a8:	591a      	ldr	r2, [r3, r4]
  if (index >= length) {
 80088aa:	4291      	cmp	r1, r2
 80088ac:	d204      	bcs.n	80088b8 <_ZN6tflite16MicroInterpreter5inputEj+0x44>
    MicroPrintf("Input index %d out of range (length is %d)", index, length);
    return nullptr;
  }
  return input_tensors_[index];
 80088ae:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
 80088b2:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
}
 80088b6:	bd10      	pop	{r4, pc}
    MicroPrintf("Input index %d out of range (length is %d)", index, length);
 80088b8:	4806      	ldr	r0, [pc, #24]	; (80088d4 <_ZN6tflite16MicroInterpreter5inputEj+0x60>)
 80088ba:	f000 ff8f 	bl	80097dc <_Z11MicroPrintfPKcz>
    return nullptr;
 80088be:	2000      	movs	r0, #0
}
 80088c0:	bd10      	pop	{r4, pc}
    FLATBUFFERS_ASSERT(i < size());
 80088c2:	4b05      	ldr	r3, [pc, #20]	; (80088d8 <_ZN6tflite16MicroInterpreter5inputEj+0x64>)
 80088c4:	4a05      	ldr	r2, [pc, #20]	; (80088dc <_ZN6tflite16MicroInterpreter5inputEj+0x68>)
 80088c6:	4806      	ldr	r0, [pc, #24]	; (80088e0 <_ZN6tflite16MicroInterpreter5inputEj+0x6c>)
 80088c8:	21b0      	movs	r1, #176	; 0xb0
 80088ca:	f00e f957 	bl	8016b7c <__assert_func>
  SizeT size() const { return EndianScalar(length_); }
 80088ce:	2300      	movs	r3, #0
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	deff      	udf	#255	; 0xff
 80088d4:	0806b204 	.word	0x0806b204
 80088d8:	0806a098 	.word	0x0806a098
 80088dc:	0806a838 	.word	0x0806a838
 80088e0:	0806a168 	.word	0x0806a168

080088e4 <_ZN6tflite16MicroInterpreter6outputEj>:

TfLiteTensor* MicroInterpreter::output(size_t index) {
  const size_t length = outputs_size();
 80088e4:	6803      	ldr	r3, [r0, #0]
    return data_ - ReadScalar<soffset_t>(data_);
 80088e6:	681a      	ldr	r2, [r3, #0]
 80088e8:	1a9a      	subs	r2, r3, r2
TfLiteTensor* MicroInterpreter::output(size_t index) {
 80088ea:	b510      	push	{r4, lr}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 80088ec:	8814      	ldrh	r4, [r2, #0]
 80088ee:	2c08      	cmp	r4, #8
 80088f0:	d925      	bls.n	800893e <_ZN6tflite16MicroInterpreter6outputEj+0x5a>
 80088f2:	8912      	ldrh	r2, [r2, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 80088f4:	b31a      	cbz	r2, 800893e <_ZN6tflite16MicroInterpreter6outputEj+0x5a>
 80088f6:	589c      	ldr	r4, [r3, r2]
    auto p = data_ + field_offset;
 80088f8:	4413      	add	r3, r2
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 80088fa:	191a      	adds	r2, r3, r4
    FLATBUFFERS_ASSERT(i < size());
 80088fc:	591b      	ldr	r3, [r3, r4]
 80088fe:	b1c3      	cbz	r3, 8008932 <_ZN6tflite16MicroInterpreter6outputEj+0x4e>
 8008900:	6854      	ldr	r4, [r2, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8008902:	1d13      	adds	r3, r2, #4
    return data_ - ReadScalar<soffset_t>(data_);
 8008904:	591a      	ldr	r2, [r3, r4]
 8008906:	4423      	add	r3, r4
 8008908:	1a9a      	subs	r2, r3, r2
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 800890a:	8814      	ldrh	r4, [r2, #0]
 800890c:	2c08      	cmp	r4, #8
 800890e:	d916      	bls.n	800893e <_ZN6tflite16MicroInterpreter6outputEj+0x5a>
 8008910:	8912      	ldrh	r2, [r2, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8008912:	b1a2      	cbz	r2, 800893e <_ZN6tflite16MicroInterpreter6outputEj+0x5a>
  SizeT size() const { return EndianScalar(length_); }
 8008914:	589c      	ldr	r4, [r3, r2]
    auto p = data_ + field_offset;
 8008916:	4413      	add	r3, r2
 8008918:	591a      	ldr	r2, [r3, r4]
  if (index >= length) {
 800891a:	4291      	cmp	r1, r2
 800891c:	d204      	bcs.n	8008928 <_ZN6tflite16MicroInterpreter6outputEj+0x44>
    MicroPrintf("Output index %d out of range (length is %d)", index, length);
    return nullptr;
  }
  return output_tensors_[index];
 800891e:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 8008922:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
}
 8008926:	bd10      	pop	{r4, pc}
    MicroPrintf("Output index %d out of range (length is %d)", index, length);
 8008928:	4806      	ldr	r0, [pc, #24]	; (8008944 <_ZN6tflite16MicroInterpreter6outputEj+0x60>)
 800892a:	f000 ff57 	bl	80097dc <_Z11MicroPrintfPKcz>
    return nullptr;
 800892e:	2000      	movs	r0, #0
}
 8008930:	bd10      	pop	{r4, pc}
    FLATBUFFERS_ASSERT(i < size());
 8008932:	4b05      	ldr	r3, [pc, #20]	; (8008948 <_ZN6tflite16MicroInterpreter6outputEj+0x64>)
 8008934:	4a05      	ldr	r2, [pc, #20]	; (800894c <_ZN6tflite16MicroInterpreter6outputEj+0x68>)
 8008936:	4806      	ldr	r0, [pc, #24]	; (8008950 <_ZN6tflite16MicroInterpreter6outputEj+0x6c>)
 8008938:	21b0      	movs	r1, #176	; 0xb0
 800893a:	f00e f91f 	bl	8016b7c <__assert_func>
  SizeT size() const { return EndianScalar(length_); }
 800893e:	2300      	movs	r3, #0
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	deff      	udf	#255	; 0xff
 8008944:	0806b230 	.word	0x0806b230
 8008948:	0806a098 	.word	0x0806a098
 800894c:	0806a838 	.word	0x0806a838
 8008950:	0806a168 	.word	0x0806a168

08008954 <_ZN6tflite16MicroInterpreterD1Ev>:
MicroInterpreter::~MicroInterpreter() {
 8008954:	b538      	push	{r3, r4, r5, lr}
  if (graph_.GetAllocations() != nullptr) {
 8008956:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
MicroInterpreter::~MicroInterpreter() {
 800895a:	4604      	mov	r4, r0
    graph_.FreeSubgraphs();
 800895c:	f100 0570 	add.w	r5, r0, #112	; 0x70
  if (graph_.GetAllocations() != nullptr) {
 8008960:	b113      	cbz	r3, 8008968 <_ZN6tflite16MicroInterpreterD1Ev+0x14>
    graph_.FreeSubgraphs();
 8008962:	4628      	mov	r0, r5
 8008964:	f000 fc2e 	bl	80091c4 <_ZN6tflite21MicroInterpreterGraph13FreeSubgraphsEv>
MicroInterpreter::~MicroInterpreter() {
 8008968:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
 800896c:	f000 fb34 	bl	8008fd8 <_ZN6tflite23MicroInterpreterContextD0Ev>
 8008970:	4628      	mov	r0, r5
 8008972:	f000 fbaf 	bl	80090d4 <_ZN6tflite21MicroInterpreterGraphD0Ev>
}
 8008976:	4620      	mov	r0, r4
 8008978:	bd38      	pop	{r3, r4, r5, pc}
 800897a:	bf00      	nop

0800897c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv>:
TfLiteStatus MicroInterpreter::PrepareNodeAndRegistrationDataFromFlatbuffer() {
 800897c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008980:	ed2d 8b02 	vpush	{d8}
 8008984:	b08b      	sub	sp, #44	; 0x2c
  for (int subgraph_idx = 0; subgraph_idx < graph_.NumSubgraphs();
 8008986:	2300      	movs	r3, #0
 8008988:	9306      	str	r3, [sp, #24]
 800898a:	f100 0370 	add.w	r3, r0, #112	; 0x70
 800898e:	ee08 3a90 	vmov	s17, r3
TfLiteStatus MicroInterpreter::PrepareNodeAndRegistrationDataFromFlatbuffer() {
 8008992:	4683      	mov	fp, r0
  for (int subgraph_idx = 0; subgraph_idx < graph_.NumSubgraphs();
 8008994:	ee18 0a90 	vmov	r0, s17
 8008998:	f000 fb9e 	bl	80090d8 <_ZN6tflite21MicroInterpreterGraph12NumSubgraphsEv>
 800899c:	9b06      	ldr	r3, [sp, #24]
 800899e:	4298      	cmp	r0, r3
 80089a0:	f340 8137 	ble.w	8008c12 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x296>
    const SubGraph* subgraph = model_->subgraphs()->Get(subgraph_idx);
 80089a4:	f8db 2000 	ldr.w	r2, [fp]
    return data_ - ReadScalar<soffset_t>(data_);
 80089a8:	6813      	ldr	r3, [r2, #0]
 80089aa:	1ad3      	subs	r3, r2, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 80089ac:	8819      	ldrh	r1, [r3, #0]
 80089ae:	2908      	cmp	r1, #8
 80089b0:	f240 8105 	bls.w	8008bbe <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x242>
 80089b4:	8918      	ldrh	r0, [r3, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 80089b6:	2800      	cmp	r0, #0
 80089b8:	f000 8145 	beq.w	8008c46 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2ca>
 80089bc:	5814      	ldr	r4, [r2, r0]
    auto p = data_ + field_offset;
 80089be:	4410      	add	r0, r2
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 80089c0:	1901      	adds	r1, r0, r4
    FLATBUFFERS_ASSERT(i < size());
 80089c2:	5900      	ldr	r0, [r0, r4]
 80089c4:	9c06      	ldr	r4, [sp, #24]
 80089c6:	42a0      	cmp	r0, r4
 80089c8:	f240 8137 	bls.w	8008c3a <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2be>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 80089cc:	3104      	adds	r1, #4
 80089ce:	88db      	ldrh	r3, [r3, #6]
 80089d0:	f851 0024 	ldr.w	r0, [r1, r4, lsl #2]
    const uint8_t *const offset_location = p + i * element_stride;
 80089d4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
        offset_location + ReadScalar<offset_type>(offset_location));
 80089d8:	eb01 0800 	add.w	r8, r1, r0
 80089dc:	b113      	cbz	r3, 80089e4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x68>
 80089de:	58d1      	ldr	r1, [r2, r3]
    auto p = data_ + field_offset;
 80089e0:	4413      	add	r3, r2
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 80089e2:	440b      	add	r3, r1
        allocator_.GetBuiltinDataAllocator();
 80089e4:	f8db 006c 	ldr.w	r0, [fp, #108]	; 0x6c
 80089e8:	9303      	str	r3, [sp, #12]
 80089ea:	f7ff fe95 	bl	8008718 <_ZN6tflite14MicroAllocator23GetBuiltinDataAllocatorEv>
 80089ee:	ee08 0a10 	vmov	s16, r0
    uint32_t operators_size = NumSubgraphOperators(subgraph);
 80089f2:	4640      	mov	r0, r8
 80089f4:	f7fe f99e 	bl	8006d34 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
    for (size_t i = 0; i < operators_size; ++i) {
 80089f8:	9007      	str	r0, [sp, #28]
 80089fa:	2800      	cmp	r0, #0
 80089fc:	f000 80c3 	beq.w	8008b86 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x20a>
 8008a00:	9b06      	ldr	r3, [sp, #24]
 8008a02:	00db      	lsls	r3, r3, #3
 8008a04:	9301      	str	r3, [sp, #4]
 8008a06:	9b03      	ldr	r3, [sp, #12]
 8008a08:	3304      	adds	r3, #4
 8008a0a:	2500      	movs	r5, #0
 8008a0c:	9305      	str	r3, [sp, #20]
    return data_ - ReadScalar<soffset_t>(data_);
 8008a0e:	f8d8 3000 	ldr.w	r3, [r8]
 8008a12:	eba8 0303 	sub.w	r3, r8, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8008a16:	881a      	ldrh	r2, [r3, #0]
 8008a18:	2a0a      	cmp	r2, #10
 8008a1a:	f240 80d0 	bls.w	8008bbe <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x242>
 8008a1e:	895a      	ldrh	r2, [r3, #10]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8008a20:	2a00      	cmp	r2, #0
 8008a22:	f000 80cc 	beq.w	8008bbe <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x242>
 8008a26:	f858 1002 	ldr.w	r1, [r8, r2]
    auto p = data_ + field_offset;
 8008a2a:	4442      	add	r2, r8
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8008a2c:	1853      	adds	r3, r2, r1
    FLATBUFFERS_ASSERT(i < size());
 8008a2e:	5852      	ldr	r2, [r2, r1]
 8008a30:	42aa      	cmp	r2, r5
 8008a32:	f240 80fc 	bls.w	8008c2e <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2b2>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8008a36:	3304      	adds	r3, #4
    const uint8_t *const offset_location = p + i * element_stride;
 8008a38:	eb03 0685 	add.w	r6, r3, r5, lsl #2
        offset_location + ReadScalar<offset_type>(offset_location));
 8008a3c:	f853 7025 	ldr.w	r7, [r3, r5, lsl #2]
    return data_ - ReadScalar<soffset_t>(data_);
 8008a40:	59f3      	ldr	r3, [r6, r7]
 8008a42:	19f4      	adds	r4, r6, r7
 8008a44:	1ae3      	subs	r3, r4, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8008a46:	881a      	ldrh	r2, [r3, #0]
 8008a48:	2a04      	cmp	r2, #4
 8008a4a:	d94a      	bls.n	8008ae2 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x166>
 8008a4c:	889b      	ldrh	r3, [r3, #4]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	f000 80b3 	beq.w	8008bba <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x23e>
 8008a54:	f854 9003 	ldr.w	r9, [r4, r3]
      if (index >= opcodes->size()) {
 8008a58:	9b03      	ldr	r3, [sp, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	454b      	cmp	r3, r9
 8008a5e:	f240 80b8 	bls.w	8008bd2 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x256>
                                          .node_and_registrations[i]
 8008a62:	f8db 3080 	ldr.w	r3, [fp, #128]	; 0x80
 8008a66:	9a01      	ldr	r2, [sp, #4]
 8008a68:	589a      	ldr	r2, [r3, r2]
 8008a6a:	9b05      	ldr	r3, [sp, #20]
 8008a6c:	f853 1029 	ldr.w	r1, [r3, r9, lsl #2]
    const uint8_t *const offset_location = p + i * element_stride;
 8008a70:	eb03 0389 	add.w	r3, r3, r9, lsl #2
        offset_location + ReadScalar<offset_type>(offset_location));
 8008a74:	440b      	add	r3, r1
 8008a76:	eb02 1245 	add.w	r2, r2, r5, lsl #5
          GetRegistrationFromOpCode(opcode, op_resolver_,
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f8db 1004 	ldr.w	r1, [fp, #4]
 8008a80:	9302      	str	r3, [sp, #8]
 8008a82:	321c      	adds	r2, #28
 8008a84:	f000 febe 	bl	8009804 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_15MicroOpResolverEPPK16TFLMRegistration>
      if (status != kTfLiteOk) {
 8008a88:	ea4f 1a45 	mov.w	sl, r5, lsl #5
 8008a8c:	9b02      	ldr	r3, [sp, #8]
 8008a8e:	2800      	cmp	r0, #0
 8008a90:	f040 80a5 	bne.w	8008bde <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x262>
                                     .node_and_registrations[i]
 8008a94:	f8db 3080 	ldr.w	r3, [fp, #128]	; 0x80
                                     .registration;
 8008a98:	9a01      	ldr	r2, [sp, #4]
 8008a9a:	589b      	ldr	r3, [r3, r2]
 8008a9c:	4453      	add	r3, sl
 8008a9e:	69db      	ldr	r3, [r3, #28]
      if (registration == nullptr) {
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	f000 80ae 	beq.w	8008c02 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x286>
      BuiltinOperator op_type =
 8008aa6:	f8d3 9014 	ldr.w	r9, [r3, #20]
    return data_ - ReadScalar<soffset_t>(data_);
 8008aaa:	59f3      	ldr	r3, [r6, r7]
      unsigned char* builtin_data = nullptr;
 8008aac:	9009      	str	r0, [sp, #36]	; 0x24
 8008aae:	1ae3      	subs	r3, r4, r3
      if (op_type == BuiltinOperator_CUSTOM) {
 8008ab0:	f1b9 0f20 	cmp.w	r9, #32
 8008ab4:	881a      	ldrh	r2, [r3, #0]
 8008ab6:	d06c      	beq.n	8008b92 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x216>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8008ab8:	2a0e      	cmp	r2, #14
 8008aba:	d915      	bls.n	8008ae8 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x16c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8008abc:	89db      	ldrh	r3, [r3, #14]
 8008abe:	b19b      	cbz	r3, 8008ae8 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x16c>
// Check 'v' is out of closed range [low; high].
// Workaround for GCC warning [-Werror=type-limits]:
// comparison is always true due to limited range of data type.
template<typename T>
inline bool IsOutRange(const T &v, const T &low, const T &high) {
  return (v < low) || (high < v);
 8008ac0:	4649      	mov	r1, r9
 8008ac2:	29cd      	cmp	r1, #205	; 0xcd
  return EnumNamesBuiltinOperator()[index];
 8008ac4:	bf96      	itet	ls
 8008ac6:	4b61      	ldrls	r3, [pc, #388]	; (8008c4c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2d0>)
  if (::flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_REDUCE_WINDOW)) return "";
 8008ac8:	4961      	ldrhi	r1, [pc, #388]	; (8008c50 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2d4>)
  return EnumNamesBuiltinOperator()[index];
 8008aca:	f853 1029 	ldrls.w	r1, [r3, r9, lsl #2]
          MicroPrintf(
 8008ace:	4861      	ldr	r0, [pc, #388]	; (8008c54 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2d8>)
 8008ad0:	f000 fe84 	bl	80097dc <_Z11MicroPrintfPKcz>
          return kTfLiteError;
 8008ad4:	2201      	movs	r2, #1
}
 8008ad6:	4610      	mov	r0, r2
 8008ad8:	b00b      	add	sp, #44	; 0x2c
 8008ada:	ecbd 8b02 	vpop	{d8}
 8008ade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8008ae2:	f04f 0900 	mov.w	r9, #0
 8008ae6:	e7b7      	b.n	8008a58 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xdc>
            op_resolver_.GetOpDataParser(op_type);
 8008ae8:	f8db 0004 	ldr.w	r0, [fp, #4]
 8008aec:	6803      	ldr	r3, [r0, #0]
 8008aee:	4649      	mov	r1, r9
 8008af0:	689b      	ldr	r3, [r3, #8]
 8008af2:	4798      	blx	r3
        if (parser == nullptr) {
 8008af4:	2800      	cmp	r0, #0
 8008af6:	f000 808e 	beq.w	8008c16 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x29a>
        TF_LITE_ENSURE_STATUS(CallBuiltinParseFunction(
 8008afa:	ee18 2a10 	vmov	r2, s16
 8008afe:	ab09      	add	r3, sp, #36	; 0x24
 8008b00:	4621      	mov	r1, r4
 8008b02:	f003 fccf 	bl	800c4a4 <_ZN6tflite24CallBuiltinParseFunctionEPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvES3_S7_S9_>
 8008b06:	2800      	cmp	r0, #0
 8008b08:	f040 8081 	bne.w	8008c0e <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x292>
    return data_ - ReadScalar<soffset_t>(data_);
 8008b0c:	59f3      	ldr	r3, [r6, r7]
 8008b0e:	1ae3      	subs	r3, r4, r3
  return EndianScalar(*reinterpret_cast<const T *>(p));
 8008b10:	881a      	ldrh	r2, [r3, #0]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8008b12:	f04f 0900 	mov.w	r9, #0
 8008b16:	2a06      	cmp	r2, #6
 8008b18:	f8cd 9010 	str.w	r9, [sp, #16]
 8008b1c:	d846      	bhi.n	8008bac <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x230>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8008b1e:	4648      	mov	r0, r9
          FlatBufferVectorToTfLiteTypeArray(op->inputs());
 8008b20:	f7fe f946 	bl	8006db0 <_ZN6tflite33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIlmEE>
    return data_ - ReadScalar<soffset_t>(data_);
 8008b24:	59f2      	ldr	r2, [r6, r7]
 8008b26:	1aa2      	subs	r2, r4, r2
 8008b28:	4603      	mov	r3, r0
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8008b2a:	8811      	ldrh	r1, [r2, #0]
 8008b2c:	2908      	cmp	r1, #8
 8008b2e:	d92e      	bls.n	8008b8e <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x212>
 8008b30:	8910      	ldrh	r0, [r2, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8008b32:	b110      	cbz	r0, 8008b3a <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1be>
 8008b34:	5822      	ldr	r2, [r4, r0]
    auto p = data_ + field_offset;
 8008b36:	4420      	add	r0, r4
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8008b38:	4410      	add	r0, r2
 8008b3a:	9302      	str	r3, [sp, #8]
          FlatBufferVectorToTfLiteTypeArray(op->outputs());
 8008b3c:	f7fe f938 	bl	8006db0 <_ZN6tflite33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIlmEE>
          graph_.GetAllocations()[subgraph_idx].node_and_registrations[i].node);
 8008b40:	f8db 1080 	ldr.w	r1, [fp, #128]	; 0x80
 8008b44:	9b01      	ldr	r3, [sp, #4]
    return data_ - ReadScalar<soffset_t>(data_);
 8008b46:	59f2      	ldr	r2, [r6, r7]
 8008b48:	58c9      	ldr	r1, [r1, r3]
 8008b4a:	1aa2      	subs	r2, r4, r2
 8008b4c:	eb01 060a 	add.w	r6, r1, sl
      *node = {};
 8008b50:	2300      	movs	r3, #0
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8008b52:	8817      	ldrh	r7, [r2, #0]
 8008b54:	e9c6 3302 	strd	r3, r3, [r6, #8]
      node->inputs = inputs_array;
 8008b58:	9b02      	ldr	r3, [sp, #8]
 8008b5a:	f841 300a 	str.w	r3, [r1, sl]
      node->custom_initial_data = custom_data;
 8008b5e:	9b04      	ldr	r3, [sp, #16]
      node->outputs = outputs_array;
 8008b60:	6070      	str	r0, [r6, #4]
      node->custom_initial_data_size = custom_data_size;
 8008b62:	e9c6 3905 	strd	r3, r9, [r6, #20]
 8008b66:	2f14      	cmp	r7, #20
      node->builtin_data = reinterpret_cast<void*>(builtin_data);
 8008b68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b6a:	6133      	str	r3, [r6, #16]
 8008b6c:	d906      	bls.n	8008b7c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x200>
 8008b6e:	8a93      	ldrh	r3, [r2, #20]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8008b70:	b123      	cbz	r3, 8008b7c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x200>
 8008b72:	58e2      	ldr	r2, [r4, r3]
    auto p = data_ + field_offset;
 8008b74:	4423      	add	r3, r4
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8008b76:	1898      	adds	r0, r3, r2
      if (op->intermediates() && (op->intermediates()->size() > 0)) {
 8008b78:	589b      	ldr	r3, [r3, r2]
 8008b7a:	bb1b      	cbnz	r3, 8008bc4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x248>
    for (size_t i = 0; i < operators_size; ++i) {
 8008b7c:	9b07      	ldr	r3, [sp, #28]
 8008b7e:	3501      	adds	r5, #1
 8008b80:	42ab      	cmp	r3, r5
 8008b82:	f47f af44 	bne.w	8008a0e <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x92>
  for (int subgraph_idx = 0; subgraph_idx < graph_.NumSubgraphs();
 8008b86:	9b06      	ldr	r3, [sp, #24]
 8008b88:	3301      	adds	r3, #1
 8008b8a:	9306      	str	r3, [sp, #24]
 8008b8c:	e702      	b.n	8008994 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x18>
 8008b8e:	2000      	movs	r0, #0
 8008b90:	e7d3      	b.n	8008b3a <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1be>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8008b92:	2a0e      	cmp	r2, #14
 8008b94:	d9bd      	bls.n	8008b12 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x196>
 8008b96:	89da      	ldrh	r2, [r3, #14]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8008b98:	b1c2      	cbz	r2, 8008bcc <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x250>
 8008b9a:	58a1      	ldr	r1, [r4, r2]
    auto p = data_ + field_offset;
 8008b9c:	eb04 0902 	add.w	r9, r4, r2
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8008ba0:	eb09 0201 	add.w	r2, r9, r1
 8008ba4:	3204      	adds	r2, #4
      node->custom_initial_data_size = custom_data_size;
 8008ba6:	f859 9001 	ldr.w	r9, [r9, r1]
 8008baa:	9204      	str	r2, [sp, #16]
 8008bac:	88d8      	ldrh	r0, [r3, #6]
 8008bae:	2800      	cmp	r0, #0
 8008bb0:	d0b6      	beq.n	8008b20 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1a4>
 8008bb2:	5823      	ldr	r3, [r4, r0]
    auto p = data_ + field_offset;
 8008bb4:	4420      	add	r0, r4
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8008bb6:	4418      	add	r0, r3
 8008bb8:	e7b2      	b.n	8008b20 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1a4>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8008bba:	4699      	mov	r9, r3
 8008bbc:	e74c      	b.n	8008a58 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xdc>
  SizeT size() const { return EndianScalar(length_); }
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	deff      	udf	#255	; 0xff
            FlatBufferVectorToTfLiteTypeArray(op->intermediates());
 8008bc4:	f7fe f8f4 	bl	8006db0 <_ZN6tflite33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIlmEE>
        node->intermediates =
 8008bc8:	60b0      	str	r0, [r6, #8]
 8008bca:	e7d7      	b.n	8008b7c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x200>
 8008bcc:	4691      	mov	r9, r2
      const char* custom_data = nullptr;
 8008bce:	9204      	str	r2, [sp, #16]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8008bd0:	e7ec      	b.n	8008bac <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x230>
        MicroPrintf("Missing registration for opcode_index %d\n", index);
 8008bd2:	4821      	ldr	r0, [pc, #132]	; (8008c58 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2dc>)
 8008bd4:	4649      	mov	r1, r9
 8008bd6:	f000 fe01 	bl	80097dc <_Z11MicroPrintfPKcz>
        return kTfLiteError;
 8008bda:	2201      	movs	r2, #1
 8008bdc:	e77b      	b.n	8008ad6 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x15a>
        MicroPrintf("Failed to get registration from op code %s\n ",
 8008bde:	9001      	str	r0, [sp, #4]
 8008be0:	4618      	mov	r0, r3
 8008be2:	f003 fc93 	bl	800c50c <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>
  return (v < low) || (high < v);
 8008be6:	28cd      	cmp	r0, #205	; 0xcd
 8008be8:	bf98      	it	ls
 8008bea:	4b18      	ldrls	r3, [pc, #96]	; (8008c4c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2d0>)
 8008bec:	9a01      	ldr	r2, [sp, #4]
 8008bee:	bf94      	ite	ls
 8008bf0:	f853 1020 	ldrls.w	r1, [r3, r0, lsl #2]
  if (::flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_REDUCE_WINDOW)) return "";
 8008bf4:	4916      	ldrhi	r1, [pc, #88]	; (8008c50 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2d4>)
 8008bf6:	4819      	ldr	r0, [pc, #100]	; (8008c5c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2e0>)
 8008bf8:	9201      	str	r2, [sp, #4]
 8008bfa:	f000 fdef 	bl	80097dc <_Z11MicroPrintfPKcz>
        return status;
 8008bfe:	9a01      	ldr	r2, [sp, #4]
 8008c00:	e769      	b.n	8008ad6 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x15a>
        MicroPrintf("Skipping op for opcode_index %d\n", index);
 8008c02:	4817      	ldr	r0, [pc, #92]	; (8008c60 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2e4>)
 8008c04:	4649      	mov	r1, r9
 8008c06:	f000 fde9 	bl	80097dc <_Z11MicroPrintfPKcz>
        return kTfLiteError;
 8008c0a:	2201      	movs	r2, #1
 8008c0c:	e763      	b.n	8008ad6 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x15a>
 8008c0e:	4602      	mov	r2, r0
 8008c10:	e761      	b.n	8008ad6 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x15a>
  return kTfLiteOk;
 8008c12:	2200      	movs	r2, #0
 8008c14:	e75f      	b.n	8008ad6 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x15a>
 8008c16:	4649      	mov	r1, r9
 8008c18:	29cd      	cmp	r1, #205	; 0xcd
  return EnumNamesBuiltinOperator()[index];
 8008c1a:	bf96      	itet	ls
 8008c1c:	4b0b      	ldrls	r3, [pc, #44]	; (8008c4c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2d0>)
  if (::flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_REDUCE_WINDOW)) return "";
 8008c1e:	490c      	ldrhi	r1, [pc, #48]	; (8008c50 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2d4>)
  return EnumNamesBuiltinOperator()[index];
 8008c20:	f853 1029 	ldrls.w	r1, [r3, r9, lsl #2]
          MicroPrintf("Did not find a parser for %s",
 8008c24:	480f      	ldr	r0, [pc, #60]	; (8008c64 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2e8>)
 8008c26:	f000 fdd9 	bl	80097dc <_Z11MicroPrintfPKcz>
          return kTfLiteError;
 8008c2a:	2201      	movs	r2, #1
 8008c2c:	e753      	b.n	8008ad6 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x15a>
    FLATBUFFERS_ASSERT(i < size());
 8008c2e:	4b0e      	ldr	r3, [pc, #56]	; (8008c68 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2ec>)
 8008c30:	4a0e      	ldr	r2, [pc, #56]	; (8008c6c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2f0>)
 8008c32:	480f      	ldr	r0, [pc, #60]	; (8008c70 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2f4>)
 8008c34:	21b0      	movs	r1, #176	; 0xb0
 8008c36:	f00d ffa1 	bl	8016b7c <__assert_func>
 8008c3a:	4b0b      	ldr	r3, [pc, #44]	; (8008c68 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2ec>)
 8008c3c:	4a0d      	ldr	r2, [pc, #52]	; (8008c74 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2f8>)
 8008c3e:	480c      	ldr	r0, [pc, #48]	; (8008c70 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2f4>)
 8008c40:	21b0      	movs	r1, #176	; 0xb0
 8008c42:	f00d ff9b 	bl	8016b7c <__assert_func>
  SizeT size() const { return EndianScalar(length_); }
 8008c46:	6803      	ldr	r3, [r0, #0]
 8008c48:	deff      	udf	#255	; 0xff
 8008c4a:	bf00      	nop
 8008c4c:	0806bf68 	.word	0x0806bf68
 8008c50:	08019b84 	.word	0x08019b84
 8008c54:	0806b2dc 	.word	0x0806b2dc
 8008c58:	0806b25c 	.word	0x0806b25c
 8008c5c:	0806b288 	.word	0x0806b288
 8008c60:	0806b2b8 	.word	0x0806b2b8
 8008c64:	0806b324 	.word	0x0806b324
 8008c68:	0806a098 	.word	0x0806a098
 8008c6c:	0806a96c 	.word	0x0806a96c
 8008c70:	0806a168 	.word	0x0806a168
 8008c74:	0806a838 	.word	0x0806a838

08008c78 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>:
TfLiteStatus MicroInterpreter::AllocateTensors() {
 8008c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  SubgraphAllocations* allocations = allocator_.StartModelAllocation(model_);
 8008c7c:	6801      	ldr	r1, [r0, #0]
TfLiteStatus MicroInterpreter::AllocateTensors() {
 8008c7e:	b082      	sub	sp, #8
 8008c80:	4604      	mov	r4, r0
  SubgraphAllocations* allocations = allocator_.StartModelAllocation(model_);
 8008c82:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 8008c84:	f7ff fc56 	bl	8008534 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE>
  if (allocations == nullptr) {
 8008c88:	2800      	cmp	r0, #0
 8008c8a:	f000 80b1 	beq.w	8008df0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x178>
  graph_.SetSubgraphAllocations(allocations);
 8008c8e:	f104 0670 	add.w	r6, r4, #112	; 0x70
 8008c92:	4601      	mov	r1, r0
 8008c94:	4630      	mov	r0, r6
 8008c96:	f000 fd85 	bl	80097a4 <_ZN6tflite21MicroInterpreterGraph22SetSubgraphAllocationsEPNS_19SubgraphAllocationsE>
  TF_LITE_ENSURE_STATUS(PrepareNodeAndRegistrationDataFromFlatbuffer());
 8008c9a:	4620      	mov	r0, r4
 8008c9c:	f7ff fe6e 	bl	800897c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv>
 8008ca0:	4605      	mov	r5, r0
 8008ca2:	b118      	cbz	r0, 8008cac <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x34>
}
 8008ca4:	4628      	mov	r0, r5
 8008ca6:	b002      	add	sp, #8
 8008ca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  micro_context_.SetInterpreterState(
 8008cac:	f104 07a0 	add.w	r7, r4, #160	; 0xa0
 8008cb0:	4601      	mov	r1, r0
 8008cb2:	4638      	mov	r0, r7
 8008cb4:	f000 fa0a 	bl	80090cc <_ZN6tflite23MicroInterpreterContext19SetInterpreterStateENS0_16InterpreterStateE>
  TF_LITE_ENSURE_STATUS(graph_.InitSubgraphs());
 8008cb8:	4630      	mov	r0, r6
 8008cba:	f000 fa1d 	bl	80090f8 <_ZN6tflite21MicroInterpreterGraph13InitSubgraphsEv>
 8008cbe:	4605      	mov	r5, r0
 8008cc0:	2800      	cmp	r0, #0
 8008cc2:	d1ef      	bne.n	8008ca4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2c>
  micro_context_.SetInterpreterState(
 8008cc4:	2101      	movs	r1, #1
 8008cc6:	4638      	mov	r0, r7
 8008cc8:	f000 fa00 	bl	80090cc <_ZN6tflite23MicroInterpreterContext19SetInterpreterStateENS0_16InterpreterStateE>
  TF_LITE_ENSURE_STATUS(graph_.PrepareSubgraphs());
 8008ccc:	4630      	mov	r0, r6
 8008cce:	f000 faa3 	bl	8009218 <_ZN6tflite21MicroInterpreterGraph16PrepareSubgraphsEv>
 8008cd2:	4605      	mov	r5, r0
 8008cd4:	2800      	cmp	r0, #0
 8008cd6:	d1e5      	bne.n	8008ca4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2c>
  micro_context_.SetInterpreterState(
 8008cd8:	2102      	movs	r1, #2
 8008cda:	4638      	mov	r0, r7
 8008cdc:	f000 f9f6 	bl	80090cc <_ZN6tflite23MicroInterpreterContext19SetInterpreterStateENS0_16InterpreterStateE>
  TF_LITE_ENSURE_OK(&context_, allocator_.FinishModelAllocation(
 8008ce0:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8008ce4:	6821      	ldr	r1, [r4, #0]
 8008ce6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8008ce8:	f104 0394 	add.w	r3, r4, #148	; 0x94
 8008cec:	f7ff fc7a 	bl	80085e4 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE>
 8008cf0:	4605      	mov	r5, r0
 8008cf2:	2800      	cmp	r0, #0
 8008cf4:	d1d6      	bne.n	8008ca4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2c>
  micro_context_.SetScratchBufferHandles(scratch_buffer_handles_);
 8008cf6:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8008cfa:	4638      	mov	r0, r7
 8008cfc:	f000 f9e4 	bl	80090c8 <_ZN6tflite23MicroInterpreterContext23SetScratchBufferHandlesEPNS_19ScratchBufferHandleE>
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
 8008d00:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8008d02:	6803      	ldr	r3, [r0, #0]
 8008d04:	69dd      	ldr	r5, [r3, #28]
 8008d06:	6823      	ldr	r3, [r4, #0]
    return data_ - ReadScalar<soffset_t>(data_);
 8008d08:	681a      	ldr	r2, [r3, #0]
 8008d0a:	1a9a      	subs	r2, r3, r2
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8008d0c:	8811      	ldrh	r1, [r2, #0]
 8008d0e:	2908      	cmp	r1, #8
 8008d10:	f240 8132 	bls.w	8008f78 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x300>
  return EndianScalar(*reinterpret_cast<const T *>(p));
 8008d14:	8912      	ldrh	r2, [r2, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8008d16:	2a00      	cmp	r2, #0
 8008d18:	f000 812e 	beq.w	8008f78 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x300>
 8008d1c:	5899      	ldr	r1, [r3, r2]
    auto p = data_ + field_offset;
 8008d1e:	441a      	add	r2, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8008d20:	1853      	adds	r3, r2, r1
    FLATBUFFERS_ASSERT(i < size());
 8008d22:	5852      	ldr	r2, [r2, r1]
 8008d24:	2a00      	cmp	r2, #0
 8008d26:	f000 8121 	beq.w	8008f6c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2f4>
 8008d2a:	6859      	ldr	r1, [r3, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8008d2c:	3304      	adds	r3, #4
 8008d2e:	185a      	adds	r2, r3, r1
    return data_ - ReadScalar<soffset_t>(data_);
 8008d30:	585b      	ldr	r3, [r3, r1]
 8008d32:	1ad3      	subs	r3, r2, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8008d34:	8819      	ldrh	r1, [r3, #0]
 8008d36:	2906      	cmp	r1, #6
 8008d38:	f240 811e 	bls.w	8008f78 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x300>
 8008d3c:	88db      	ldrh	r3, [r3, #6]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	f000 811a 	beq.w	8008f78 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x300>
  SizeT size() const { return EndianScalar(length_); }
 8008d44:	58d1      	ldr	r1, [r2, r3]
    auto p = data_ + field_offset;
 8008d46:	441a      	add	r2, r3
 8008d48:	5851      	ldr	r1, [r2, r1]
 8008d4a:	0089      	lsls	r1, r1, #2
 8008d4c:	47a8      	blx	r5
 8008d4e:	4680      	mov	r8, r0
  input_tensors_ =
 8008d50:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
  if (input_tensors_ == nullptr) {
 8008d54:	2800      	cmp	r0, #0
 8008d56:	f000 80c6 	beq.w	8008ee6 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x26e>
  for (size_t i = 0; i < inputs_size(); ++i) {
 8008d5a:	2500      	movs	r5, #0
    input_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 8008d5c:	46a9      	mov	r9, r5
 8008d5e:	e000      	b.n	8008d62 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xea>
  for (size_t i = 0; i < inputs_size(); ++i) {
 8008d60:	3501      	adds	r5, #1
 8008d62:	6821      	ldr	r1, [r4, #0]
    return data_ - ReadScalar<soffset_t>(data_);
 8008d64:	680b      	ldr	r3, [r1, #0]
 8008d66:	1acb      	subs	r3, r1, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8008d68:	881a      	ldrh	r2, [r3, #0]
 8008d6a:	2a08      	cmp	r2, #8
 8008d6c:	f240 8104 	bls.w	8008f78 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x300>
 8008d70:	891a      	ldrh	r2, [r3, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8008d72:	2a00      	cmp	r2, #0
 8008d74:	f000 8100 	beq.w	8008f78 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x300>
 8008d78:	5888      	ldr	r0, [r1, r2]
    auto p = data_ + field_offset;
 8008d7a:	440a      	add	r2, r1
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8008d7c:	1813      	adds	r3, r2, r0
    FLATBUFFERS_ASSERT(i < size());
 8008d7e:	5812      	ldr	r2, [r2, r0]
 8008d80:	2a00      	cmp	r2, #0
 8008d82:	f000 80f3 	beq.w	8008f6c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2f4>
 8008d86:	685a      	ldr	r2, [r3, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8008d88:	3304      	adds	r3, #4
 8008d8a:	eb03 0c02 	add.w	ip, r3, r2
    return data_ - ReadScalar<soffset_t>(data_);
 8008d8e:	589b      	ldr	r3, [r3, r2]
 8008d90:	ebac 0303 	sub.w	r3, ip, r3
 8008d94:	f8b3 e000 	ldrh.w	lr, [r3]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8008d98:	f1be 0f06 	cmp.w	lr, #6
 8008d9c:	f240 80ec 	bls.w	8008f78 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x300>
 8008da0:	88d8      	ldrh	r0, [r3, #6]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8008da2:	2800      	cmp	r0, #0
 8008da4:	f000 80e8 	beq.w	8008f78 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x300>
 8008da8:	f85c a000 	ldr.w	sl, [ip, r0]
    auto p = data_ + field_offset;
 8008dac:	4460      	add	r0, ip
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8008dae:	eb00 020a 	add.w	r2, r0, sl
 8008db2:	f850 000a 	ldr.w	r0, [r0, sl]
 8008db6:	4285      	cmp	r5, r0
 8008db8:	d225      	bcs.n	8008e06 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x18e>
    input_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 8008dba:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 8008dbc:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 8008dc0:	f8d0 c000 	ldr.w	ip, [r0]
 8008dc4:	685b      	ldr	r3, [r3, #4]
 8008dc6:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8008dca:	f8cd 9000 	str.w	r9, [sp]
 8008dce:	f8dc a000 	ldr.w	sl, [ip]
 8008dd2:	47d0      	blx	sl
 8008dd4:	f848 0025 	str.w	r0, [r8, r5, lsl #2]
    if (input_tensors_[i] == nullptr) {
 8008dd8:	f8d4 8098 	ldr.w	r8, [r4, #152]	; 0x98
 8008ddc:	f858 3025 	ldr.w	r3, [r8, r5, lsl #2]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d1bd      	bne.n	8008d60 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xe8>
      MicroPrintf("Failed to initialize input tensor %d", i);
 8008de4:	4629      	mov	r1, r5
 8008de6:	4866      	ldr	r0, [pc, #408]	; (8008f80 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x308>)
 8008de8:	f000 fcf8 	bl	80097dc <_Z11MicroPrintfPKcz>
      return kTfLiteError;
 8008dec:	2501      	movs	r5, #1
 8008dee:	e759      	b.n	8008ca4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2c>
    MicroPrintf("Failed starting model allocation.\n");
 8008df0:	4864      	ldr	r0, [pc, #400]	; (8008f84 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x30c>)
 8008df2:	f000 fcf3 	bl	80097dc <_Z11MicroPrintfPKcz>
    initialization_status_ = kTfLiteError;
 8008df6:	2001      	movs	r0, #1
    return kTfLiteError;
 8008df8:	4605      	mov	r5, r0
    initialization_status_ = kTfLiteError;
 8008dfa:	f884 0091 	strb.w	r0, [r4, #145]	; 0x91
}
 8008dfe:	4628      	mov	r0, r5
 8008e00:	b002      	add	sp, #8
 8008e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
 8008e06:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8008e08:	6802      	ldr	r2, [r0, #0]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8008e0a:	f1be 0f08 	cmp.w	lr, #8
 8008e0e:	69d2      	ldr	r2, [r2, #28]
 8008e10:	f240 80b2 	bls.w	8008f78 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x300>
 8008e14:	891b      	ldrh	r3, [r3, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	f000 80ae 	beq.w	8008f78 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x300>
  SizeT size() const { return EndianScalar(length_); }
 8008e1c:	f85c 1003 	ldr.w	r1, [ip, r3]
    auto p = data_ + field_offset;
 8008e20:	449c      	add	ip, r3
 8008e22:	f85c 1001 	ldr.w	r1, [ip, r1]
 8008e26:	0089      	lsls	r1, r1, #2
 8008e28:	4790      	blx	r2
 8008e2a:	4680      	mov	r8, r0
  output_tensors_ =
 8008e2c:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c
  if (output_tensors_ == nullptr) {
 8008e30:	2800      	cmp	r0, #0
 8008e32:	d07b      	beq.n	8008f2c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2b4>
  for (size_t i = 0; i < outputs_size(); ++i) {
 8008e34:	2500      	movs	r5, #0
    output_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 8008e36:	46a9      	mov	r9, r5
 8008e38:	e000      	b.n	8008e3c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1c4>
  for (size_t i = 0; i < outputs_size(); ++i) {
 8008e3a:	3501      	adds	r5, #1
 8008e3c:	6821      	ldr	r1, [r4, #0]
    return data_ - ReadScalar<soffset_t>(data_);
 8008e3e:	680b      	ldr	r3, [r1, #0]
 8008e40:	1acb      	subs	r3, r1, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8008e42:	881a      	ldrh	r2, [r3, #0]
 8008e44:	2a08      	cmp	r2, #8
 8008e46:	f240 8097 	bls.w	8008f78 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x300>
 8008e4a:	891a      	ldrh	r2, [r3, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8008e4c:	2a00      	cmp	r2, #0
 8008e4e:	f000 8093 	beq.w	8008f78 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x300>
 8008e52:	5888      	ldr	r0, [r1, r2]
    auto p = data_ + field_offset;
 8008e54:	440a      	add	r2, r1
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8008e56:	1813      	adds	r3, r2, r0
    FLATBUFFERS_ASSERT(i < size());
 8008e58:	5812      	ldr	r2, [r2, r0]
 8008e5a:	2a00      	cmp	r2, #0
 8008e5c:	f000 8086 	beq.w	8008f6c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2f4>
        offset_location + ReadScalar<offset_type>(offset_location));
 8008e60:	6858      	ldr	r0, [r3, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8008e62:	3304      	adds	r3, #4
 8008e64:	181a      	adds	r2, r3, r0
    return data_ - ReadScalar<soffset_t>(data_);
 8008e66:	581b      	ldr	r3, [r3, r0]
 8008e68:	1ad3      	subs	r3, r2, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8008e6a:	8818      	ldrh	r0, [r3, #0]
 8008e6c:	2808      	cmp	r0, #8
 8008e6e:	f240 8083 	bls.w	8008f78 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x300>
 8008e72:	891b      	ldrh	r3, [r3, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d07f      	beq.n	8008f78 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x300>
 8008e78:	58d0      	ldr	r0, [r2, r3]
    auto p = data_ + field_offset;
 8008e7a:	441a      	add	r2, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8008e7c:	1813      	adds	r3, r2, r0
 8008e7e:	5812      	ldr	r2, [r2, r0]
 8008e80:	4295      	cmp	r5, r2
 8008e82:	d21a      	bcs.n	8008eba <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x242>
    output_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 8008e84:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8008e86:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8008e8a:	f8d0 c000 	ldr.w	ip, [r0]
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 8008e8e:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8008e92:	685b      	ldr	r3, [r3, #4]
 8008e94:	f8cd 9000 	str.w	r9, [sp]
 8008e98:	f8dc a000 	ldr.w	sl, [ip]
 8008e9c:	47d0      	blx	sl
 8008e9e:	f848 0025 	str.w	r0, [r8, r5, lsl #2]
    if (output_tensors_[i] == nullptr) {
 8008ea2:	f8d4 809c 	ldr.w	r8, [r4, #156]	; 0x9c
 8008ea6:	f858 3025 	ldr.w	r3, [r8, r5, lsl #2]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d1c5      	bne.n	8008e3a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1c2>
      MicroPrintf("Failed to initialize output tensor %d", i);
 8008eae:	4629      	mov	r1, r5
 8008eb0:	4835      	ldr	r0, [pc, #212]	; (8008f88 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x310>)
 8008eb2:	f000 fc93 	bl	80097dc <_Z11MicroPrintfPKcz>
      return kTfLiteError;
 8008eb6:	2501      	movs	r5, #1
 8008eb8:	e6f4      	b.n	8008ca4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2c>

TfLiteStatus MicroInterpreter::Reset() {
  TfLiteStatus status = graph_.ResetSubgraphs();
 8008eba:	4630      	mov	r0, r6
 8008ebc:	f000 f958 	bl	8009170 <_ZN6tflite21MicroInterpreterGraph14ResetSubgraphsEv>
  if (status != kTfLiteOk) {
 8008ec0:	4605      	mov	r5, r0
 8008ec2:	2800      	cmp	r0, #0
 8008ec4:	f47f aeee 	bne.w	8008ca4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2c>
    return status;
  }
  return graph_.ResetVariableTensors();
 8008ec8:	4630      	mov	r0, r6
 8008eca:	f000 fb05 	bl	80094d8 <_ZN6tflite21MicroInterpreterGraph20ResetVariableTensorsEv>
  TF_LITE_ENSURE_STATUS(Reset());
 8008ece:	4605      	mov	r5, r0
 8008ed0:	2800      	cmp	r0, #0
 8008ed2:	f47f aee7 	bne.w	8008ca4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2c>
  tensors_allocated_ = true;
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
  micro_context_.SetInterpreterState(
 8008edc:	2103      	movs	r1, #3
 8008ede:	4638      	mov	r0, r7
 8008ee0:	f000 f8f4 	bl	80090cc <_ZN6tflite23MicroInterpreterContext19SetInterpreterStateENS0_16InterpreterStateE>
  return kTfLiteOk;
 8008ee4:	e6de      	b.n	8008ca4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2c>
    MicroPrintf(
 8008ee6:	6822      	ldr	r2, [r4, #0]
    return data_ - ReadScalar<soffset_t>(data_);
 8008ee8:	6813      	ldr	r3, [r2, #0]
 8008eea:	1ad3      	subs	r3, r2, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8008eec:	8819      	ldrh	r1, [r3, #0]
 8008eee:	2908      	cmp	r1, #8
 8008ef0:	d942      	bls.n	8008f78 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x300>
 8008ef2:	891b      	ldrh	r3, [r3, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d03f      	beq.n	8008f78 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x300>
 8008ef8:	58d1      	ldr	r1, [r2, r3]
    auto p = data_ + field_offset;
 8008efa:	441a      	add	r2, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8008efc:	1853      	adds	r3, r2, r1
    FLATBUFFERS_ASSERT(i < size());
 8008efe:	5852      	ldr	r2, [r2, r1]
 8008f00:	2a00      	cmp	r2, #0
 8008f02:	d033      	beq.n	8008f6c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2f4>
        offset_location + ReadScalar<offset_type>(offset_location));
 8008f04:	6859      	ldr	r1, [r3, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8008f06:	3304      	adds	r3, #4
 8008f08:	185a      	adds	r2, r3, r1
    return data_ - ReadScalar<soffset_t>(data_);
 8008f0a:	585b      	ldr	r3, [r3, r1]
 8008f0c:	1ad3      	subs	r3, r2, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8008f0e:	8819      	ldrh	r1, [r3, #0]
 8008f10:	2906      	cmp	r1, #6
 8008f12:	d931      	bls.n	8008f78 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x300>
 8008f14:	88db      	ldrh	r3, [r3, #6]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d02e      	beq.n	8008f78 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x300>
  SizeT size() const { return EndianScalar(length_); }
 8008f1a:	58d1      	ldr	r1, [r2, r3]
 8008f1c:	481b      	ldr	r0, [pc, #108]	; (8008f8c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x314>)
    auto p = data_ + field_offset;
 8008f1e:	441a      	add	r2, r3
    return kTfLiteError;
 8008f20:	2501      	movs	r5, #1
    MicroPrintf(
 8008f22:	5851      	ldr	r1, [r2, r1]
 8008f24:	0089      	lsls	r1, r1, #2
 8008f26:	f000 fc59 	bl	80097dc <_Z11MicroPrintfPKcz>
    return kTfLiteError;
 8008f2a:	e6bb      	b.n	8008ca4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2c>
    MicroPrintf(
 8008f2c:	6823      	ldr	r3, [r4, #0]
    return data_ - ReadScalar<soffset_t>(data_);
 8008f2e:	681a      	ldr	r2, [r3, #0]
 8008f30:	1a9a      	subs	r2, r3, r2
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8008f32:	8811      	ldrh	r1, [r2, #0]
 8008f34:	2908      	cmp	r1, #8
 8008f36:	d91f      	bls.n	8008f78 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x300>
 8008f38:	8912      	ldrh	r2, [r2, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8008f3a:	b1ea      	cbz	r2, 8008f78 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x300>
 8008f3c:	5899      	ldr	r1, [r3, r2]
    auto p = data_ + field_offset;
 8008f3e:	441a      	add	r2, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8008f40:	1853      	adds	r3, r2, r1
    FLATBUFFERS_ASSERT(i < size());
 8008f42:	5852      	ldr	r2, [r2, r1]
 8008f44:	b192      	cbz	r2, 8008f6c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2f4>
 8008f46:	6859      	ldr	r1, [r3, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8008f48:	3304      	adds	r3, #4
 8008f4a:	185a      	adds	r2, r3, r1
    return data_ - ReadScalar<soffset_t>(data_);
 8008f4c:	585b      	ldr	r3, [r3, r1]
 8008f4e:	1ad3      	subs	r3, r2, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8008f50:	8819      	ldrh	r1, [r3, #0]
 8008f52:	2908      	cmp	r1, #8
 8008f54:	d910      	bls.n	8008f78 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x300>
 8008f56:	891b      	ldrh	r3, [r3, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8008f58:	b173      	cbz	r3, 8008f78 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x300>
  SizeT size() const { return EndianScalar(length_); }
 8008f5a:	58d1      	ldr	r1, [r2, r3]
 8008f5c:	480c      	ldr	r0, [pc, #48]	; (8008f90 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x318>)
    auto p = data_ + field_offset;
 8008f5e:	441a      	add	r2, r3
    return kTfLiteError;
 8008f60:	2501      	movs	r5, #1
    MicroPrintf(
 8008f62:	5851      	ldr	r1, [r2, r1]
 8008f64:	0089      	lsls	r1, r1, #2
 8008f66:	f000 fc39 	bl	80097dc <_Z11MicroPrintfPKcz>
    return kTfLiteError;
 8008f6a:	e69b      	b.n	8008ca4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2c>
    FLATBUFFERS_ASSERT(i < size());
 8008f6c:	4b09      	ldr	r3, [pc, #36]	; (8008f94 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x31c>)
 8008f6e:	4a0a      	ldr	r2, [pc, #40]	; (8008f98 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x320>)
 8008f70:	480a      	ldr	r0, [pc, #40]	; (8008f9c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x324>)
 8008f72:	21b0      	movs	r1, #176	; 0xb0
 8008f74:	f00d fe02 	bl	8016b7c <__assert_func>
  SizeT size() const { return EndianScalar(length_); }
 8008f78:	2300      	movs	r3, #0
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	deff      	udf	#255	; 0xff
 8008f7e:	bf00      	nop
 8008f80:	0806b3b4 	.word	0x0806b3b4
 8008f84:	0806b344 	.word	0x0806b344
 8008f88:	0806b428 	.word	0x0806b428
 8008f8c:	0806b368 	.word	0x0806b368
 8008f90:	0806b3dc 	.word	0x0806b3dc
 8008f94:	0806a098 	.word	0x0806a098
 8008f98:	0806a838 	.word	0x0806a838
 8008f9c:	0806a168 	.word	0x0806a168

08008fa0 <_ZN6tflite16MicroInterpreter6InvokeEv>:
  if (initialization_status_ != kTfLiteOk) {
 8008fa0:	f890 3091 	ldrb.w	r3, [r0, #145]	; 0x91
TfLiteStatus MicroInterpreter::Invoke() {
 8008fa4:	b510      	push	{r4, lr}
  if (initialization_status_ != kTfLiteOk) {
 8008fa6:	b96b      	cbnz	r3, 8008fc4 <_ZN6tflite16MicroInterpreter6InvokeEv+0x24>
  if (!tensors_allocated_) {
 8008fa8:	f890 3090 	ldrb.w	r3, [r0, #144]	; 0x90
 8008fac:	4604      	mov	r4, r0
 8008fae:	b913      	cbnz	r3, 8008fb6 <_ZN6tflite16MicroInterpreter6InvokeEv+0x16>
    TF_LITE_ENSURE_OK(&context_, AllocateTensors());
 8008fb0:	f7ff fe62 	bl	8008c78 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>
 8008fb4:	b950      	cbnz	r0, 8008fcc <_ZN6tflite16MicroInterpreter6InvokeEv+0x2c>
  return graph_.InvokeSubgraph(0);
 8008fb6:	f104 0070 	add.w	r0, r4, #112	; 0x70
 8008fba:	2100      	movs	r1, #0
}
 8008fbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return graph_.InvokeSubgraph(0);
 8008fc0:	f000 b97a 	b.w	80092b8 <_ZN6tflite21MicroInterpreterGraph14InvokeSubgraphEi>
    MicroPrintf("Invoke() called after initialization failed\n");
 8008fc4:	4802      	ldr	r0, [pc, #8]	; (8008fd0 <_ZN6tflite16MicroInterpreter6InvokeEv+0x30>)
 8008fc6:	f000 fc09 	bl	80097dc <_Z11MicroPrintfPKcz>
    return kTfLiteError;
 8008fca:	2001      	movs	r0, #1
}
 8008fcc:	bd10      	pop	{r4, pc}
 8008fce:	bf00      	nop
 8008fd0:	0806b450 	.word	0x0806b450

08008fd4 <_ZN6tflite23MicroInterpreterContext5graphEv>:

  MicroGraph& graph() override { return graph_; }
 8008fd4:	6880      	ldr	r0, [r0, #8]
 8008fd6:	4770      	bx	lr

08008fd8 <_ZN6tflite23MicroInterpreterContextD0Ev>:
    : allocator_(*allocator),
      graph_(*graph),
      model_(model),
      state_(InterpreterState::kInit) {}

MicroInterpreterContext::~MicroInterpreterContext() {}
 8008fd8:	4770      	bx	lr
 8008fda:	bf00      	nop

08008fdc <_ZN6tflite23MicroInterpreterContext24AllocateTempTfLiteTensorEi>:
  ScratchBufferHandle* handle = scratch_buffer_handles_ + buffer_idx;
  return handle->data;
}

TfLiteTensor* MicroInterpreterContext::AllocateTempTfLiteTensor(
    int tensor_idx) {
 8008fdc:	b530      	push	{r4, r5, lr}
  return allocator_.AllocateTempTfLiteTensor(model_, graph_.GetAllocations(),
 8008fde:	e9d0 4501 	ldrd	r4, r5, [r0, #4]
 8008fe2:	e9d5 2504 	ldrd	r2, r5, [r5, #16]
    int tensor_idx) {
 8008fe6:	b083      	sub	sp, #12
 8008fe8:	460b      	mov	r3, r1
  return allocator_.AllocateTempTfLiteTensor(model_, graph_.GetAllocations(),
 8008fea:	68c1      	ldr	r1, [r0, #12]
 8008fec:	6820      	ldr	r0, [r4, #0]
 8008fee:	9500      	str	r5, [sp, #0]
 8008ff0:	6845      	ldr	r5, [r0, #4]
 8008ff2:	4620      	mov	r0, r4
 8008ff4:	47a8      	blx	r5
                                             tensor_idx,
                                             graph_.GetCurrentSubgraphIndex());
}
 8008ff6:	b003      	add	sp, #12
 8008ff8:	bd30      	pop	{r4, r5, pc}
 8008ffa:	bf00      	nop

08008ffc <_ZN6tflite23MicroInterpreterContext26DeallocateTempTfLiteTensorEP12TfLiteTensor>:

void MicroInterpreterContext::DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
  return allocator_.DeallocateTempTfLiteTensor(tensor);
 8008ffc:	6840      	ldr	r0, [r0, #4]
 8008ffe:	6803      	ldr	r3, [r0, #0]
 8009000:	689b      	ldr	r3, [r3, #8]
 8009002:	4718      	bx	r3

08009004 <_ZN6tflite23MicroInterpreterContext13GetEvalTensorEi>:
  TFLITE_DCHECK(state_ == InterpreterState::kPrepare);
  allocator_.DeallocateTempBuffer(buffer);
}

TfLiteEvalTensor* MicroInterpreterContext::GetEvalTensor(int tensor_idx) {
  return &graph_.GetAllocations()[graph_.GetCurrentSubgraphIndex()]
 8009004:	6883      	ldr	r3, [r0, #8]
              .tensors[tensor_idx];
 8009006:	e9d3 3204 	ldrd	r3, r2, [r3, #16]
 800900a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800900e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8009012:	6858      	ldr	r0, [r3, #4]
}
 8009014:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8009018:	4770      	bx	lr
 800901a:	bf00      	nop

0800901c <_ZN6tflite23MicroInterpreterContext24AllocatePersistentBufferEj>:
  TFLITE_DCHECK(state_ == InterpreterState::kPrepare ||
 800901c:	6903      	ldr	r3, [r0, #16]
 800901e:	2b01      	cmp	r3, #1
 8009020:	d803      	bhi.n	800902a <_ZN6tflite23MicroInterpreterContext24AllocatePersistentBufferEj+0xe>
  return allocator_.AllocatePersistentBuffer(bytes);
 8009022:	6840      	ldr	r0, [r0, #4]
 8009024:	6803      	ldr	r3, [r0, #0]
 8009026:	69db      	ldr	r3, [r3, #28]
 8009028:	4718      	bx	r3
void* MicroInterpreterContext::AllocatePersistentBuffer(size_t bytes) {
 800902a:	b510      	push	{r4, lr}
  TFLITE_DCHECK(state_ == InterpreterState::kPrepare ||
 800902c:	f00d fd9e 	bl	8016b6c <abort>

08009030 <_ZN6tflite23MicroInterpreterContext16GetScratchBufferEi>:
void* MicroInterpreterContext::GetScratchBuffer(int buffer_idx) {
 8009030:	b508      	push	{r3, lr}
  TFLITE_DCHECK(state_ == InterpreterState::kInvoke);
 8009032:	6903      	ldr	r3, [r0, #16]
 8009034:	2b03      	cmp	r3, #3
 8009036:	d103      	bne.n	8009040 <_ZN6tflite23MicroInterpreterContext16GetScratchBufferEi+0x10>
  return handle->data;
 8009038:	6943      	ldr	r3, [r0, #20]
}
 800903a:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 800903e:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(state_ == InterpreterState::kInvoke);
 8009040:	f00d fd94 	bl	8016b6c <abort>

08009044 <_ZN6tflite23MicroInterpreterContext18AllocateTempBufferEjj>:
  TFLITE_DCHECK(state_ == InterpreterState::kPrepare);
 8009044:	6903      	ldr	r3, [r0, #16]
 8009046:	2b01      	cmp	r3, #1
 8009048:	d103      	bne.n	8009052 <_ZN6tflite23MicroInterpreterContext18AllocateTempBufferEjj+0xe>
  return allocator_.AllocateTempBuffer(size, alignment);
 800904a:	6840      	ldr	r0, [r0, #4]
 800904c:	6803      	ldr	r3, [r0, #0]
 800904e:	68db      	ldr	r3, [r3, #12]
 8009050:	4718      	bx	r3
                                                     size_t alignment) {
 8009052:	b510      	push	{r4, lr}
  TFLITE_DCHECK(state_ == InterpreterState::kPrepare);
 8009054:	f00d fd8a 	bl	8016b6c <abort>

08009058 <_ZN6tflite23MicroInterpreterContext20DeallocateTempBufferEPh>:
  TFLITE_DCHECK(state_ == InterpreterState::kPrepare);
 8009058:	6903      	ldr	r3, [r0, #16]
 800905a:	2b01      	cmp	r3, #1
 800905c:	d103      	bne.n	8009066 <_ZN6tflite23MicroInterpreterContext20DeallocateTempBufferEPh+0xe>
  allocator_.DeallocateTempBuffer(buffer);
 800905e:	6840      	ldr	r0, [r0, #4]
 8009060:	6803      	ldr	r3, [r0, #0]
 8009062:	691b      	ldr	r3, [r3, #16]
 8009064:	4718      	bx	r3
void MicroInterpreterContext::DeallocateTempBuffer(uint8_t* buffer) {
 8009066:	b510      	push	{r4, lr}
  TFLITE_DCHECK(state_ == InterpreterState::kPrepare);
 8009068:	f00d fd80 	bl	8016b6c <abort>

0800906c <_ZN6tflite23MicroInterpreterContext27RequestScratchBufferInArenaEjPi>:
    size_t bytes, int* buffer_idx) {
 800906c:	4613      	mov	r3, r2
  TFLITE_DCHECK(state_ == InterpreterState::kPrepare);
 800906e:	6902      	ldr	r2, [r0, #16]
 8009070:	2a01      	cmp	r2, #1
 8009072:	d104      	bne.n	800907e <_ZN6tflite23MicroInterpreterContext27RequestScratchBufferInArenaEjPi+0x12>
  return allocator_.RequestScratchBufferInArena(
 8009074:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 8009078:	6952      	ldr	r2, [r2, #20]
 800907a:	f7ff bae7 	b.w	800864c <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi>
    size_t bytes, int* buffer_idx) {
 800907e:	b510      	push	{r4, lr}
  TFLITE_DCHECK(state_ == InterpreterState::kPrepare);
 8009080:	f00d fd74 	bl	8016b6c <abort>

08009084 <_ZN6tflite23MicroInterpreterContext20set_external_contextEPv>:
    ScratchBufferHandle* scratch_buffer_handles) {
  scratch_buffer_handles_ = scratch_buffer_handles;
}

TfLiteStatus MicroInterpreterContext::set_external_context(
    void* external_context_payload) {
 8009084:	b508      	push	{r3, lr}
  TFLITE_DCHECK(state_ == InterpreterState::kPrepare ||
 8009086:	6903      	ldr	r3, [r0, #16]
 8009088:	f023 0302 	bic.w	r3, r3, #2
 800908c:	2b01      	cmp	r3, #1
 800908e:	d001      	beq.n	8009094 <_ZN6tflite23MicroInterpreterContext20set_external_contextEPv+0x10>
 8009090:	f00d fd6c 	bl	8016b6c <abort>
                state_ == InterpreterState::kInvoke);
  if (external_context_payload == nullptr ||
      external_context_payload_ != nullptr) {
 8009094:	6982      	ldr	r2, [r0, #24]
  if (external_context_payload == nullptr ||
 8009096:	b101      	cbz	r1, 800909a <_ZN6tflite23MicroInterpreterContext20set_external_contextEPv+0x16>
 8009098:	b122      	cbz	r2, 80090a4 <_ZN6tflite23MicroInterpreterContext20set_external_contextEPv+0x20>
    MicroPrintf(
 800909a:	4804      	ldr	r0, [pc, #16]	; (80090ac <_ZN6tflite23MicroInterpreterContext20set_external_contextEPv+0x28>)
 800909c:	f000 fb9e 	bl	80097dc <_Z11MicroPrintfPKcz>
 80090a0:	2001      	movs	r0, #1
    return kTfLiteError;
  }

  external_context_payload_ = external_context_payload;
  return kTfLiteOk;
}
 80090a2:	bd08      	pop	{r3, pc}
  external_context_payload_ = external_context_payload;
 80090a4:	6181      	str	r1, [r0, #24]
  return kTfLiteOk;
 80090a6:	4610      	mov	r0, r2
}
 80090a8:	bd08      	pop	{r3, pc}
 80090aa:	bf00      	nop
 80090ac:	0806c2a4 	.word	0x0806c2a4

080090b0 <_ZN6tflite23MicroInterpreterContextC1EPNS_14MicroAllocatorEPKNS_5ModelEPNS_21MicroInterpreterGraphE>:
      model_(model),
 80090b0:	e9c0 3202 	strd	r3, r2, [r0, #8]
    : allocator_(*allocator),
 80090b4:	6041      	str	r1, [r0, #4]
      state_(InterpreterState::kInit) {}
 80090b6:	4b03      	ldr	r3, [pc, #12]	; (80090c4 <_ZN6tflite23MicroInterpreterContextC1EPNS_14MicroAllocatorEPKNS_5ModelEPNS_21MicroInterpreterGraphE+0x14>)
 80090b8:	6003      	str	r3, [r0, #0]
 80090ba:	2100      	movs	r1, #0
 80090bc:	e9c0 1104 	strd	r1, r1, [r0, #16]
 80090c0:	6181      	str	r1, [r0, #24]
 80090c2:	4770      	bx	lr
 80090c4:	0806c2ec 	.word	0x0806c2ec

080090c8 <_ZN6tflite23MicroInterpreterContext23SetScratchBufferHandlesEPNS_19ScratchBufferHandleE>:
  scratch_buffer_handles_ = scratch_buffer_handles;
 80090c8:	6141      	str	r1, [r0, #20]
}
 80090ca:	4770      	bx	lr

080090cc <_ZN6tflite23MicroInterpreterContext19SetInterpreterStateENS0_16InterpreterStateE>:

void MicroInterpreterContext::SetInterpreterState(InterpreterState state) {
  state_ = state;
 80090cc:	6101      	str	r1, [r0, #16]
}
 80090ce:	4770      	bx	lr

080090d0 <_ZN6tflite21MicroInterpreterGraph20GetResourceVariablesEv>:
  // Gets the list of alloctions for each subgraph. This is the source of truth
  // for all per-subgraph allocation data.
  SubgraphAllocations* GetAllocations() { return subgraph_allocations_; }

  // Get the resource variables for this TFLM graph.
  MicroResourceVariables* GetResourceVariables() { return resource_variables_; }
 80090d0:	6980      	ldr	r0, [r0, #24]
 80090d2:	4770      	bx	lr

080090d4 <_ZN6tflite21MicroInterpreterGraphD0Ev>:
  if (model != nullptr) {
    subgraphs_ = model->subgraphs();
  }
}

MicroInterpreterGraph::~MicroInterpreterGraph() {}
 80090d4:	4770      	bx	lr
 80090d6:	bf00      	nop

080090d8 <_ZN6tflite21MicroInterpreterGraph12NumSubgraphsEv>:

  return kTfLiteOk;
}

int MicroInterpreterGraph::NumSubgraphs() {
  return model_->subgraphs()->size();
 80090d8:	6882      	ldr	r2, [r0, #8]
    return data_ - ReadScalar<soffset_t>(data_);
 80090da:	6813      	ldr	r3, [r2, #0]
 80090dc:	1ad3      	subs	r3, r2, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 80090de:	8819      	ldrh	r1, [r3, #0]
 80090e0:	2908      	cmp	r1, #8
 80090e2:	d905      	bls.n	80090f0 <_ZN6tflite21MicroInterpreterGraph12NumSubgraphsEv+0x18>
 80090e4:	891b      	ldrh	r3, [r3, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 80090e6:	b11b      	cbz	r3, 80090f0 <_ZN6tflite21MicroInterpreterGraph12NumSubgraphsEv+0x18>
 80090e8:	58d1      	ldr	r1, [r2, r3]
    auto p = data_ + field_offset;
 80090ea:	441a      	add	r2, r3
 80090ec:	5850      	ldr	r0, [r2, r1]
}
 80090ee:	4770      	bx	lr
 80090f0:	2300      	movs	r3, #0
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	deff      	udf	#255	; 0xff
 80090f6:	bf00      	nop

080090f8 <_ZN6tflite21MicroInterpreterGraph13InitSubgraphsEv>:
TfLiteStatus MicroInterpreterGraph::InitSubgraphs() {
 80090f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090fc:	69c3      	ldr	r3, [r0, #28]
  int previous_subgraph_idx = current_subgraph_index_;
 80090fe:	f8d0 9014 	ldr.w	r9, [r0, #20]
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 8009102:	681b      	ldr	r3, [r3, #0]
TfLiteStatus MicroInterpreterGraph::InitSubgraphs() {
 8009104:	4682      	mov	sl, r0
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 8009106:	b36b      	cbz	r3, 8009164 <_ZN6tflite21MicroInterpreterGraph13InitSubgraphsEv+0x6c>
 8009108:	f04f 0800 	mov.w	r8, #0
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
 800910c:	f8da 0008 	ldr.w	r0, [sl, #8]
    current_subgraph_index_ = subgraph_idx;
 8009110:	f8ca 8014 	str.w	r8, [sl, #20]
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
 8009114:	4641      	mov	r1, r8
 8009116:	f7fd fe1b 	bl	8006d50 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
    for (size_t i = 0; i < operators_size; ++i) {
 800911a:	4606      	mov	r6, r0
 800911c:	b1d8      	cbz	r0, 8009156 <_ZN6tflite21MicroInterpreterGraph13InitSubgraphsEv+0x5e>
 800911e:	ea4f 0bc8 	mov.w	fp, r8, lsl #3
 8009122:	2500      	movs	r5, #0
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
 8009124:	f8da 3010 	ldr.w	r3, [sl, #16]
 8009128:	f853 400b 	ldr.w	r4, [r3, fp]
 800912c:	eb04 1445 	add.w	r4, r4, r5, lsl #5
        init_data = reinterpret_cast<const char*>(node->custom_initial_data);
 8009130:	e9d4 1004 	ldrd	r1, r0, [r4, #16]
      const TFLMRegistration* registration = subgraph_allocations_[subgraph_idx]
 8009134:	69e3      	ldr	r3, [r4, #28]
      if (registration->builtin_code == BuiltinOperator_CUSTOM) {
 8009136:	695f      	ldr	r7, [r3, #20]
      if (registration->init) {
 8009138:	681b      	ldr	r3, [r3, #0]
      if (registration->builtin_code == BuiltinOperator_CUSTOM) {
 800913a:	2f20      	cmp	r7, #32
        init_data_size = 0;
 800913c:	f04f 0200 	mov.w	r2, #0
        init_data = reinterpret_cast<const char*>(node->custom_initial_data);
 8009140:	bf04      	itt	eq
 8009142:	4601      	moveq	r1, r0
        init_data_size = node->custom_initial_data_size;
 8009144:	69a2      	ldreq	r2, [r4, #24]
    for (size_t i = 0; i < operators_size; ++i) {
 8009146:	3501      	adds	r5, #1
      if (registration->init) {
 8009148:	b11b      	cbz	r3, 8009152 <_ZN6tflite21MicroInterpreterGraph13InitSubgraphsEv+0x5a>
            registration->init(context_, init_data, init_data_size);
 800914a:	f8da 0004 	ldr.w	r0, [sl, #4]
 800914e:	4798      	blx	r3
        node->user_data =
 8009150:	60e0      	str	r0, [r4, #12]
    for (size_t i = 0; i < operators_size; ++i) {
 8009152:	42ae      	cmp	r6, r5
 8009154:	d1e6      	bne.n	8009124 <_ZN6tflite21MicroInterpreterGraph13InitSubgraphsEv+0x2c>
 8009156:	f8da 301c 	ldr.w	r3, [sl, #28]
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f108 0801 	add.w	r8, r8, #1
 8009160:	4543      	cmp	r3, r8
 8009162:	d8d3      	bhi.n	800910c <_ZN6tflite21MicroInterpreterGraph13InitSubgraphsEv+0x14>
  current_subgraph_index_ = previous_subgraph_idx;
 8009164:	f8ca 9014 	str.w	r9, [sl, #20]
}
 8009168:	2000      	movs	r0, #0
 800916a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800916e:	bf00      	nop

08009170 <_ZN6tflite21MicroInterpreterGraph14ResetSubgraphsEv>:
TfLiteStatus MicroInterpreterGraph::ResetSubgraphs() {
 8009170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009174:	69c3      	ldr	r3, [r0, #28]
  int previous_subgraph_idx = current_subgraph_index_;
 8009176:	6947      	ldr	r7, [r0, #20]
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 8009178:	681b      	ldr	r3, [r3, #0]
TfLiteStatus MicroInterpreterGraph::ResetSubgraphs() {
 800917a:	4605      	mov	r5, r0
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 800917c:	b1f3      	cbz	r3, 80091bc <_ZN6tflite21MicroInterpreterGraph14ResetSubgraphsEv+0x4c>
 800917e:	2600      	movs	r6, #0
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
 8009180:	68a8      	ldr	r0, [r5, #8]
    current_subgraph_index_ = subgraph_idx;
 8009182:	616e      	str	r6, [r5, #20]
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
 8009184:	4631      	mov	r1, r6
 8009186:	f7fd fde3 	bl	8006d50 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
    for (size_t i = 0; i < operators_size; ++i) {
 800918a:	4680      	mov	r8, r0
 800918c:	b188      	cbz	r0, 80091b2 <_ZN6tflite21MicroInterpreterGraph14ResetSubgraphsEv+0x42>
 800918e:	ea4f 09c6 	mov.w	r9, r6, lsl #3
 8009192:	2400      	movs	r4, #0
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
 8009194:	692b      	ldr	r3, [r5, #16]
 8009196:	f853 3009 	ldr.w	r3, [r3, r9]
 800919a:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    for (size_t i = 0; i < operators_size; ++i) {
 800919e:	3401      	adds	r4, #1
      const TFLMRegistration* registration = subgraph_allocations_[subgraph_idx]
 80091a0:	69da      	ldr	r2, [r3, #28]
      if (registration != nullptr && registration->reset != nullptr) {
 80091a2:	b122      	cbz	r2, 80091ae <_ZN6tflite21MicroInterpreterGraph14ResetSubgraphsEv+0x3e>
 80091a4:	6912      	ldr	r2, [r2, #16]
 80091a6:	b112      	cbz	r2, 80091ae <_ZN6tflite21MicroInterpreterGraph14ResetSubgraphsEv+0x3e>
        registration->reset(context_, node->user_data);
 80091a8:	68d9      	ldr	r1, [r3, #12]
 80091aa:	6868      	ldr	r0, [r5, #4]
 80091ac:	4790      	blx	r2
    for (size_t i = 0; i < operators_size; ++i) {
 80091ae:	45a0      	cmp	r8, r4
 80091b0:	d1f0      	bne.n	8009194 <_ZN6tflite21MicroInterpreterGraph14ResetSubgraphsEv+0x24>
 80091b2:	69eb      	ldr	r3, [r5, #28]
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	3601      	adds	r6, #1
 80091b8:	42b3      	cmp	r3, r6
 80091ba:	d8e1      	bhi.n	8009180 <_ZN6tflite21MicroInterpreterGraph14ResetSubgraphsEv+0x10>
  current_subgraph_index_ = previous_subgraph_idx;
 80091bc:	616f      	str	r7, [r5, #20]
}
 80091be:	2000      	movs	r0, #0
 80091c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080091c4 <_ZN6tflite21MicroInterpreterGraph13FreeSubgraphsEv>:
TfLiteStatus MicroInterpreterGraph::FreeSubgraphs() {
 80091c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091c8:	69c3      	ldr	r3, [r0, #28]
  int previous_subgraph_idx = current_subgraph_index_;
 80091ca:	6947      	ldr	r7, [r0, #20]
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 80091cc:	681b      	ldr	r3, [r3, #0]
TfLiteStatus MicroInterpreterGraph::FreeSubgraphs() {
 80091ce:	4605      	mov	r5, r0
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 80091d0:	b1f3      	cbz	r3, 8009210 <_ZN6tflite21MicroInterpreterGraph13FreeSubgraphsEv+0x4c>
 80091d2:	2600      	movs	r6, #0
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
 80091d4:	68a8      	ldr	r0, [r5, #8]
    current_subgraph_index_ = subgraph_idx;
 80091d6:	616e      	str	r6, [r5, #20]
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
 80091d8:	4631      	mov	r1, r6
 80091da:	f7fd fdb9 	bl	8006d50 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
    for (size_t i = 0; i < operators_size; ++i) {
 80091de:	4680      	mov	r8, r0
 80091e0:	b188      	cbz	r0, 8009206 <_ZN6tflite21MicroInterpreterGraph13FreeSubgraphsEv+0x42>
 80091e2:	ea4f 09c6 	mov.w	r9, r6, lsl #3
 80091e6:	2400      	movs	r4, #0
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
 80091e8:	692b      	ldr	r3, [r5, #16]
 80091ea:	f853 3009 	ldr.w	r3, [r3, r9]
 80091ee:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    for (size_t i = 0; i < operators_size; ++i) {
 80091f2:	3401      	adds	r4, #1
      const TFLMRegistration* registration = subgraph_allocations_[subgraph_idx]
 80091f4:	69da      	ldr	r2, [r3, #28]
      if (registration != nullptr && registration->free != nullptr) {
 80091f6:	b122      	cbz	r2, 8009202 <_ZN6tflite21MicroInterpreterGraph13FreeSubgraphsEv+0x3e>
 80091f8:	6852      	ldr	r2, [r2, #4]
 80091fa:	b112      	cbz	r2, 8009202 <_ZN6tflite21MicroInterpreterGraph13FreeSubgraphsEv+0x3e>
        registration->free(context_, node->user_data);
 80091fc:	68d9      	ldr	r1, [r3, #12]
 80091fe:	6868      	ldr	r0, [r5, #4]
 8009200:	4790      	blx	r2
    for (size_t i = 0; i < operators_size; ++i) {
 8009202:	45a0      	cmp	r8, r4
 8009204:	d1f0      	bne.n	80091e8 <_ZN6tflite21MicroInterpreterGraph13FreeSubgraphsEv+0x24>
 8009206:	69eb      	ldr	r3, [r5, #28]
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	3601      	adds	r6, #1
 800920c:	42b3      	cmp	r3, r6
 800920e:	d8e1      	bhi.n	80091d4 <_ZN6tflite21MicroInterpreterGraph13FreeSubgraphsEv+0x10>
  current_subgraph_index_ = previous_subgraph_idx;
 8009210:	616f      	str	r7, [r5, #20]
}
 8009212:	2000      	movs	r0, #0
 8009214:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08009218 <_ZN6tflite21MicroInterpreterGraph16PrepareSubgraphsEv>:
 8009218:	69c3      	ldr	r3, [r0, #28]
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 800921a:	681b      	ldr	r3, [r3, #0]
TfLiteStatus MicroInterpreterGraph::PrepareSubgraphs() {
 800921c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  int previous_subgraph_idx = current_subgraph_index_;
 8009220:	f8d0 8014 	ldr.w	r8, [r0, #20]
TfLiteStatus MicroInterpreterGraph::PrepareSubgraphs() {
 8009224:	4681      	mov	r9, r0
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 8009226:	2700      	movs	r7, #0
 8009228:	b33b      	cbz	r3, 800927a <_ZN6tflite21MicroInterpreterGraph16PrepareSubgraphsEv+0x62>
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
 800922a:	f8d9 0008 	ldr.w	r0, [r9, #8]
    current_subgraph_index_ = subgraph_idx;
 800922e:	f8c9 7014 	str.w	r7, [r9, #20]
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
 8009232:	4639      	mov	r1, r7
 8009234:	f7fd fd8c 	bl	8006d50 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
    for (size_t i = 0; i < operators_size; ++i) {
 8009238:	4605      	mov	r5, r0
 800923a:	b1c0      	cbz	r0, 800926e <_ZN6tflite21MicroInterpreterGraph16PrepareSubgraphsEv+0x56>
 800923c:	00fe      	lsls	r6, r7, #3
 800923e:	2400      	movs	r4, #0
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
 8009240:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009244:	5999      	ldr	r1, [r3, r6]
 8009246:	eb01 1144 	add.w	r1, r1, r4, lsl #5
      const TFLMRegistration* registration = subgraph_allocations_[subgraph_idx]
 800924a:	f8d1 a01c 	ldr.w	sl, [r1, #28]
      if (registration->prepare != nullptr) {
 800924e:	f8da 3008 	ldr.w	r3, [sl, #8]
 8009252:	b123      	cbz	r3, 800925e <_ZN6tflite21MicroInterpreterGraph16PrepareSubgraphsEv+0x46>
        TfLiteStatus prepare_status = registration->prepare(context_, node);
 8009254:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8009258:	4798      	blx	r3
        if (prepare_status != kTfLiteOk) {
 800925a:	4603      	mov	r3, r0
 800925c:	b990      	cbnz	r0, 8009284 <_ZN6tflite21MicroInterpreterGraph16PrepareSubgraphsEv+0x6c>
      allocator_->FinishPrepareNodeAllocations(/*node_id=*/i);
 800925e:	4621      	mov	r1, r4
 8009260:	f8d9 000c 	ldr.w	r0, [r9, #12]
    for (size_t i = 0; i < operators_size; ++i) {
 8009264:	3401      	adds	r4, #1
      allocator_->FinishPrepareNodeAllocations(/*node_id=*/i);
 8009266:	f7ff fa27 	bl	80086b8 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi>
    for (size_t i = 0; i < operators_size; ++i) {
 800926a:	42a5      	cmp	r5, r4
 800926c:	d1e8      	bne.n	8009240 <_ZN6tflite21MicroInterpreterGraph16PrepareSubgraphsEv+0x28>
 800926e:	f8d9 301c 	ldr.w	r3, [r9, #28]
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	3701      	adds	r7, #1
 8009276:	429f      	cmp	r7, r3
 8009278:	d3d7      	bcc.n	800922a <_ZN6tflite21MicroInterpreterGraph16PrepareSubgraphsEv+0x12>
  current_subgraph_index_ = previous_subgraph_idx;
 800927a:	f8c9 8014 	str.w	r8, [r9, #20]
  return kTfLiteOk;
 800927e:	2000      	movs	r0, #0
}
 8009280:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (registration->builtin_code == BuiltinOperator_CUSTOM) {
 8009284:	f8da 2014 	ldr.w	r2, [sl, #20]
 8009288:	2a20      	cmp	r2, #32
 800928a:	d00c      	beq.n	80092a6 <_ZN6tflite21MicroInterpreterGraph16PrepareSubgraphsEv+0x8e>
  return (v < low) || (high < v);
 800928c:	2acd      	cmp	r2, #205	; 0xcd
 800928e:	bf96      	itet	ls
 8009290:	4906      	ldrls	r1, [pc, #24]	; (80092ac <_ZN6tflite21MicroInterpreterGraph16PrepareSubgraphsEv+0x94>)
  if (::flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_REDUCE_WINDOW)) return "";
 8009292:	4907      	ldrhi	r1, [pc, #28]	; (80092b0 <_ZN6tflite21MicroInterpreterGraph16PrepareSubgraphsEv+0x98>)
  return EnumNamesBuiltinOperator()[index];
 8009294:	f851 1022 	ldrls.w	r1, [r1, r2, lsl #2]
          MicroPrintf("Node %s (number %df) failed to prepare with status %d",
 8009298:	4806      	ldr	r0, [pc, #24]	; (80092b4 <_ZN6tflite21MicroInterpreterGraph16PrepareSubgraphsEv+0x9c>)
 800929a:	4622      	mov	r2, r4
 800929c:	f000 fa9e 	bl	80097dc <_Z11MicroPrintfPKcz>
          return kTfLiteError;
 80092a0:	2001      	movs	r0, #1
}
 80092a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return registration->custom_name;
 80092a6:	f8da 1018 	ldr.w	r1, [sl, #24]
 80092aa:	e7f5      	b.n	8009298 <_ZN6tflite21MicroInterpreterGraph16PrepareSubgraphsEv+0x80>
 80092ac:	0806bf68 	.word	0x0806bf68
 80092b0:	08019b84 	.word	0x08019b84
 80092b4:	0806c320 	.word	0x0806c320

080092b8 <_ZN6tflite21MicroInterpreterGraph14InvokeSubgraphEi>:
TfLiteStatus MicroInterpreterGraph::InvokeSubgraph(int subgraph_idx) {
 80092b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092bc:	69c3      	ldr	r3, [r0, #28]
 80092be:	681a      	ldr	r2, [r3, #0]
  int previous_subgraph_idx = current_subgraph_index_;
 80092c0:	6943      	ldr	r3, [r0, #20]
  current_subgraph_index_ = subgraph_idx;
 80092c2:	6141      	str	r1, [r0, #20]
TfLiteStatus MicroInterpreterGraph::InvokeSubgraph(int subgraph_idx) {
 80092c4:	b099      	sub	sp, #100	; 0x64
  if (static_cast<size_t>(subgraph_idx) >= subgraphs_->size()) {
 80092c6:	4291      	cmp	r1, r2
TfLiteStatus MicroInterpreterGraph::InvokeSubgraph(int subgraph_idx) {
 80092c8:	4607      	mov	r7, r0
  int previous_subgraph_idx = current_subgraph_index_;
 80092ca:	9303      	str	r3, [sp, #12]
  if (static_cast<size_t>(subgraph_idx) >= subgraphs_->size()) {
 80092cc:	d25f      	bcs.n	800938e <_ZN6tflite21MicroInterpreterGraph14InvokeSubgraphEi+0xd6>
  uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
 80092ce:	6880      	ldr	r0, [r0, #8]
 80092d0:	460c      	mov	r4, r1
 80092d2:	f7fd fd3d 	bl	8006d50 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
  for (size_t i = 0; i < operators_size; ++i) {
 80092d6:	9002      	str	r0, [sp, #8]
 80092d8:	2800      	cmp	r0, #0
 80092da:	d060      	beq.n	800939e <_ZN6tflite21MicroInterpreterGraph14InvokeSubgraphEi+0xe6>
        &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
 80092dc:	00e3      	lsls	r3, r4, #3
  for (size_t i = 0; i < operators_size; ++i) {
 80092de:	f04f 0800 	mov.w	r8, #0
        &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
 80092e2:	9301      	str	r3, [sp, #4]
  int tick_counter=0;
 80092e4:	4644      	mov	r4, r8
 80092e6:	e038      	b.n	800935a <_ZN6tflite21MicroInterpreterGraph14InvokeSubgraphEi+0xa2>
 public:
  explicit ScopedMicroProfiler(const char* tag,
                               MicroProfilerInterface* profiler)
      : profiler_(profiler) {
    if (profiler_ != nullptr) {
      event_handle_ = profiler_->BeginEvent(tag);
 80092e8:	682b      	ldr	r3, [r5, #0]
 80092ea:	4628      	mov	r0, r5
 80092ec:	689b      	ldr	r3, [r3, #8]
 80092ee:	4798      	blx	r3
 80092f0:	4683      	mov	fp, r0
    TFLITE_DCHECK(registration->invoke);
 80092f2:	68f3      	ldr	r3, [r6, #12]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	f000 8097 	beq.w	8009428 <_ZN6tflite21MicroInterpreterGraph14InvokeSubgraphEi+0x170>
  if (registration->builtin_code == BuiltinOperator_CUSTOM) {
 80092fa:	6973      	ldr	r3, [r6, #20]
 80092fc:	2b20      	cmp	r3, #32
 80092fe:	d042      	beq.n	8009386 <_ZN6tflite21MicroInterpreterGraph14InvokeSubgraphEi+0xce>
 8009300:	2bcd      	cmp	r3, #205	; 0xcd
 8009302:	bf96      	itet	ls
 8009304:	4a49      	ldrls	r2, [pc, #292]	; (800942c <_ZN6tflite21MicroInterpreterGraph14InvokeSubgraphEi+0x174>)
  if (::flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_REDUCE_WINDOW)) return "";
 8009306:	494a      	ldrhi	r1, [pc, #296]	; (8009430 <_ZN6tflite21MicroInterpreterGraph14InvokeSubgraphEi+0x178>)
  return EnumNamesBuiltinOperator()[index];
 8009308:	f852 1023 	ldrls.w	r1, [r2, r3, lsl #2]
    registrations[tick_counter] = OpNameFromRegistration(registration);
 800930c:	ab18      	add	r3, sp, #96	; 0x60
 800930e:	eb03 0a84 	add.w	sl, r3, r4, lsl #2
    tick_counter++;
 8009312:	3401      	adds	r4, #1
    registrations[tick_counter] = OpNameFromRegistration(registration);
 8009314:	f84a 1c28 	str.w	r1, [sl, #-40]
    tick[tick_counter] = HAL_GetTick();
 8009318:	f7f8 fe16 	bl	8001f48 <HAL_GetTick>
    if (tick_counter==10) tick_counter=0;
 800931c:	2c0a      	cmp	r4, #10
    TfLiteStatus invoke_status = registration->invoke(context_, node);
 800931e:	4649      	mov	r1, r9
 8009320:	68f3      	ldr	r3, [r6, #12]
    tick[tick_counter] = HAL_GetTick();
 8009322:	f84a 0c50 	str.w	r0, [sl, #-80]
    TfLiteStatus invoke_status = registration->invoke(context_, node);
 8009326:	6878      	ldr	r0, [r7, #4]
    if (tick_counter==10) tick_counter=0;
 8009328:	bf08      	it	eq
 800932a:	2400      	moveq	r4, #0
    TfLiteStatus invoke_status = registration->invoke(context_, node);
 800932c:	4798      	blx	r3
 800932e:	4681      	mov	r9, r0
    allocator_->ResetTempAllocations();
 8009330:	68f8      	ldr	r0, [r7, #12]
 8009332:	6803      	ldr	r3, [r0, #0]
 8009334:	695b      	ldr	r3, [r3, #20]
 8009336:	4798      	blx	r3
    if (invoke_status == kTfLiteError) {
 8009338:	f1b9 0f01 	cmp.w	r9, #1
 800933c:	d051      	beq.n	80093e2 <_ZN6tflite21MicroInterpreterGraph14InvokeSubgraphEi+0x12a>
    } else if (invoke_status != kTfLiteOk) {
 800933e:	f1b9 0f00 	cmp.w	r9, #0
 8009342:	d16b      	bne.n	800941c <_ZN6tflite21MicroInterpreterGraph14InvokeSubgraphEi+0x164>
    }
  }

  ~ScopedMicroProfiler() {
    if (profiler_ != nullptr) {
 8009344:	b125      	cbz	r5, 8009350 <_ZN6tflite21MicroInterpreterGraph14InvokeSubgraphEi+0x98>
      profiler_->EndEvent(event_handle_);
 8009346:	682b      	ldr	r3, [r5, #0]
 8009348:	4659      	mov	r1, fp
 800934a:	68db      	ldr	r3, [r3, #12]
 800934c:	4628      	mov	r0, r5
 800934e:	4798      	blx	r3
  for (size_t i = 0; i < operators_size; ++i) {
 8009350:	9b02      	ldr	r3, [sp, #8]
 8009352:	f108 0801 	add.w	r8, r8, #1
 8009356:	4543      	cmp	r3, r8
 8009358:	d021      	beq.n	800939e <_ZN6tflite21MicroInterpreterGraph14InvokeSubgraphEi+0xe6>
        &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
 800935a:	693b      	ldr	r3, [r7, #16]
 800935c:	9a01      	ldr	r2, [sp, #4]
 800935e:	589b      	ldr	r3, [r3, r2]
 8009360:	eb03 1948 	add.w	r9, r3, r8, lsl #5
    const TFLMRegistration* registration = subgraph_allocations_[subgraph_idx]
 8009364:	f8d9 601c 	ldr.w	r6, [r9, #28]
  if (registration->builtin_code == BuiltinOperator_CUSTOM) {
 8009368:	6973      	ldr	r3, [r6, #20]
 800936a:	2b20      	cmp	r3, #32
 800936c:	d00d      	beq.n	800938a <_ZN6tflite21MicroInterpreterGraph14InvokeSubgraphEi+0xd2>
 800936e:	2bcd      	cmp	r3, #205	; 0xcd
 8009370:	bf96      	itet	ls
 8009372:	4a2e      	ldrls	r2, [pc, #184]	; (800942c <_ZN6tflite21MicroInterpreterGraph14InvokeSubgraphEi+0x174>)
  if (::flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_REDUCE_WINDOW)) return "";
 8009374:	492e      	ldrhi	r1, [pc, #184]	; (8009430 <_ZN6tflite21MicroInterpreterGraph14InvokeSubgraphEi+0x178>)
  return EnumNamesBuiltinOperator()[index];
 8009376:	f852 1023 	ldrls.w	r1, [r2, r3, lsl #2]
        reinterpret_cast<MicroProfilerInterface*>(context_->profiler));
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6b5d      	ldr	r5, [r3, #52]	; 0x34
    if (profiler_ != nullptr) {
 800937e:	2d00      	cmp	r5, #0
 8009380:	d1b2      	bne.n	80092e8 <_ZN6tflite21MicroInterpreterGraph14InvokeSubgraphEi+0x30>
      : profiler_(profiler) {
 8009382:	46ab      	mov	fp, r5
 8009384:	e7b5      	b.n	80092f2 <_ZN6tflite21MicroInterpreterGraph14InvokeSubgraphEi+0x3a>
    return registration->custom_name;
 8009386:	69b1      	ldr	r1, [r6, #24]
 8009388:	e7c0      	b.n	800930c <_ZN6tflite21MicroInterpreterGraph14InvokeSubgraphEi+0x54>
 800938a:	69b1      	ldr	r1, [r6, #24]
 800938c:	e7f5      	b.n	800937a <_ZN6tflite21MicroInterpreterGraph14InvokeSubgraphEi+0xc2>
    MicroPrintf("Accessing subgraph %d but only %d subgraphs found",
 800938e:	4829      	ldr	r0, [pc, #164]	; (8009434 <_ZN6tflite21MicroInterpreterGraph14InvokeSubgraphEi+0x17c>)
 8009390:	f000 fa24 	bl	80097dc <_Z11MicroPrintfPKcz>
    return kTfLiteError;
 8009394:	2601      	movs	r6, #1
}
 8009396:	4630      	mov	r0, r6
 8009398:	b019      	add	sp, #100	; 0x64
 800939a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  MicroPrintf("Node %s : %lu (ms)", registrations[i], tick[i+1]-tick[i]);
 800939e:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8009438 <_ZN6tflite21MicroInterpreterGraph14InvokeSubgraphEi+0x180>
 80093a2:	ad0d      	add	r5, sp, #52	; 0x34
 80093a4:	ac04      	add	r4, sp, #16
 80093a6:	ae16      	add	r6, sp, #88	; 0x58
 80093a8:	e9d4 3200 	ldrd	r3, r2, [r4]
 80093ac:	f855 1f04 	ldr.w	r1, [r5, #4]!
 80093b0:	1ad2      	subs	r2, r2, r3
 80093b2:	4640      	mov	r0, r8
 80093b4:	f000 fa12 	bl	80097dc <_Z11MicroPrintfPKcz>
  for (int i=0; i<9; i++) {
 80093b8:	42ae      	cmp	r6, r5
 80093ba:	f104 0404 	add.w	r4, r4, #4
 80093be:	d1f3      	bne.n	80093a8 <_ZN6tflite21MicroInterpreterGraph14InvokeSubgraphEi+0xf0>
  MicroPrintf("Node %s : %lu (ms)", registrations[9], HAL_GetTick()-tick[9]);
 80093c0:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80093c2:	9101      	str	r1, [sp, #4]
 80093c4:	f7f8 fdc0 	bl	8001f48 <HAL_GetTick>
 80093c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80093ca:	9901      	ldr	r1, [sp, #4]
 80093cc:	1a82      	subs	r2, r0, r2
 80093ce:	481a      	ldr	r0, [pc, #104]	; (8009438 <_ZN6tflite21MicroInterpreterGraph14InvokeSubgraphEi+0x180>)
 80093d0:	f000 fa04 	bl	80097dc <_Z11MicroPrintfPKcz>
  return kTfLiteOk;
 80093d4:	2600      	movs	r6, #0
  current_subgraph_index_ = previous_subgraph_idx;
 80093d6:	9b03      	ldr	r3, [sp, #12]
 80093d8:	617b      	str	r3, [r7, #20]
}
 80093da:	4630      	mov	r0, r6
 80093dc:	b019      	add	sp, #100	; 0x64
 80093de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (registration->builtin_code == BuiltinOperator_CUSTOM) {
 80093e2:	46b2      	mov	sl, r6
 80093e4:	464e      	mov	r6, r9
 80093e6:	f8da 2014 	ldr.w	r2, [sl, #20]
 80093ea:	2a20      	cmp	r2, #32
 80093ec:	46d9      	mov	r9, fp
 80093ee:	d018      	beq.n	8009422 <_ZN6tflite21MicroInterpreterGraph14InvokeSubgraphEi+0x16a>
 80093f0:	2acd      	cmp	r2, #205	; 0xcd
 80093f2:	bf96      	itet	ls
 80093f4:	4b0d      	ldrls	r3, [pc, #52]	; (800942c <_ZN6tflite21MicroInterpreterGraph14InvokeSubgraphEi+0x174>)
  if (::flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_REDUCE_WINDOW)) return "";
 80093f6:	490e      	ldrhi	r1, [pc, #56]	; (8009430 <_ZN6tflite21MicroInterpreterGraph14InvokeSubgraphEi+0x178>)
  return EnumNamesBuiltinOperator()[index];
 80093f8:	f853 1022 	ldrls.w	r1, [r3, r2, lsl #2]
      MicroPrintf("Node %s (number %d) failed to invoke with status %d",
 80093fc:	480f      	ldr	r0, [pc, #60]	; (800943c <_ZN6tflite21MicroInterpreterGraph14InvokeSubgraphEi+0x184>)
 80093fe:	4642      	mov	r2, r8
 8009400:	2301      	movs	r3, #1
 8009402:	f000 f9eb 	bl	80097dc <_Z11MicroPrintfPKcz>
    if (profiler_ != nullptr) {
 8009406:	2d00      	cmp	r5, #0
 8009408:	d0c5      	beq.n	8009396 <_ZN6tflite21MicroInterpreterGraph14InvokeSubgraphEi+0xde>
      profiler_->EndEvent(event_handle_);
 800940a:	682b      	ldr	r3, [r5, #0]
 800940c:	4628      	mov	r0, r5
 800940e:	68db      	ldr	r3, [r3, #12]
 8009410:	4649      	mov	r1, r9
 8009412:	4798      	blx	r3
}
 8009414:	4630      	mov	r0, r6
 8009416:	b019      	add	sp, #100	; 0x64
 8009418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800941c:	464e      	mov	r6, r9
 800941e:	46d9      	mov	r9, fp
 8009420:	e7f1      	b.n	8009406 <_ZN6tflite21MicroInterpreterGraph14InvokeSubgraphEi+0x14e>
    return registration->custom_name;
 8009422:	f8da 1018 	ldr.w	r1, [sl, #24]
 8009426:	e7e9      	b.n	80093fc <_ZN6tflite21MicroInterpreterGraph14InvokeSubgraphEi+0x144>
    TFLITE_DCHECK(registration->invoke);
 8009428:	f00d fba0 	bl	8016b6c <abort>
 800942c:	0806bf68 	.word	0x0806bf68
 8009430:	08019b84 	.word	0x08019b84
 8009434:	0806c358 	.word	0x0806c358
 8009438:	0806c3c0 	.word	0x0806c3c0
 800943c:	0806c38c 	.word	0x0806c38c

08009440 <_ZN6tflite21MicroInterpreterGraph16GetSubgraphInputEii>:
size_t MicroInterpreterGraph::NumSubgraphInputs(int subgraph_idx) {
  return model_->subgraphs()->Get(subgraph_idx)->inputs()->size();
}

TfLiteEvalTensor* MicroInterpreterGraph::GetSubgraphInput(int subgraph_idx,
                                                          int input_idx) {
 8009440:	b538      	push	{r3, r4, r5, lr}
  int tensor_idx =
      model_->subgraphs()->Get(subgraph_idx)->inputs()->Get(input_idx);
 8009442:	6883      	ldr	r3, [r0, #8]
    return data_ - ReadScalar<soffset_t>(data_);
 8009444:	681c      	ldr	r4, [r3, #0]
 8009446:	eba3 0c04 	sub.w	ip, r3, r4
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 800944a:	f8bc 4000 	ldrh.w	r4, [ip]
 800944e:	2c08      	cmp	r4, #8
 8009450:	d937      	bls.n	80094c2 <_ZN6tflite21MicroInterpreterGraph16GetSubgraphInputEii+0x82>
  return EndianScalar(*reinterpret_cast<const T *>(p));
 8009452:	f8bc 4008 	ldrh.w	r4, [ip, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8009456:	2c00      	cmp	r4, #0
 8009458:	d033      	beq.n	80094c2 <_ZN6tflite21MicroInterpreterGraph16GetSubgraphInputEii+0x82>
 800945a:	591d      	ldr	r5, [r3, r4]
    auto p = data_ + field_offset;
 800945c:	4423      	add	r3, r4
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 800945e:	195c      	adds	r4, r3, r5
    FLATBUFFERS_ASSERT(i < size());
 8009460:	595b      	ldr	r3, [r3, r5]
 8009462:	4299      	cmp	r1, r3
 8009464:	d221      	bcs.n	80094aa <_ZN6tflite21MicroInterpreterGraph16GetSubgraphInputEii+0x6a>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8009466:	3404      	adds	r4, #4
    const uint8_t *const offset_location = p + i * element_stride;
 8009468:	eb04 0381 	add.w	r3, r4, r1, lsl #2
        offset_location + ReadScalar<offset_type>(offset_location));
 800946c:	f854 5021 	ldr.w	r5, [r4, r1, lsl #2]
    return data_ - ReadScalar<soffset_t>(data_);
 8009470:	595c      	ldr	r4, [r3, r5]
 8009472:	442b      	add	r3, r5
 8009474:	eba3 0c04 	sub.w	ip, r3, r4
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8009478:	f8bc 4000 	ldrh.w	r4, [ip]
 800947c:	2c06      	cmp	r4, #6
 800947e:	d920      	bls.n	80094c2 <_ZN6tflite21MicroInterpreterGraph16GetSubgraphInputEii+0x82>
 8009480:	f8bc 4006 	ldrh.w	r4, [ip, #6]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8009484:	b1ec      	cbz	r4, 80094c2 <_ZN6tflite21MicroInterpreterGraph16GetSubgraphInputEii+0x82>
 8009486:	591d      	ldr	r5, [r3, r4]
    auto p = data_ + field_offset;
 8009488:	4423      	add	r3, r4
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 800948a:	195c      	adds	r4, r3, r5
    FLATBUFFERS_ASSERT(i < size());
 800948c:	595b      	ldr	r3, [r3, r5]
 800948e:	429a      	cmp	r2, r3
 8009490:	d211      	bcs.n	80094b6 <_ZN6tflite21MicroInterpreterGraph16GetSubgraphInputEii+0x76>
  return &subgraph_allocations_[subgraph_idx].tensors[tensor_idx];
 8009492:	6903      	ldr	r3, [r0, #16]
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 8009494:	eb04 0082 	add.w	r0, r4, r2, lsl #2
 8009498:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
 800949c:	6843      	ldr	r3, [r0, #4]
 800949e:	6850      	ldr	r0, [r2, #4]
 80094a0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80094a4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
}
 80094a8:	bd38      	pop	{r3, r4, r5, pc}
 80094aa:	4b07      	ldr	r3, [pc, #28]	; (80094c8 <_ZN6tflite21MicroInterpreterGraph16GetSubgraphInputEii+0x88>)
 80094ac:	4a07      	ldr	r2, [pc, #28]	; (80094cc <_ZN6tflite21MicroInterpreterGraph16GetSubgraphInputEii+0x8c>)
 80094ae:	4808      	ldr	r0, [pc, #32]	; (80094d0 <_ZN6tflite21MicroInterpreterGraph16GetSubgraphInputEii+0x90>)
 80094b0:	21b0      	movs	r1, #176	; 0xb0
 80094b2:	f00d fb63 	bl	8016b7c <__assert_func>
 80094b6:	4b04      	ldr	r3, [pc, #16]	; (80094c8 <_ZN6tflite21MicroInterpreterGraph16GetSubgraphInputEii+0x88>)
 80094b8:	4a06      	ldr	r2, [pc, #24]	; (80094d4 <_ZN6tflite21MicroInterpreterGraph16GetSubgraphInputEii+0x94>)
 80094ba:	4805      	ldr	r0, [pc, #20]	; (80094d0 <_ZN6tflite21MicroInterpreterGraph16GetSubgraphInputEii+0x90>)
 80094bc:	21b0      	movs	r1, #176	; 0xb0
 80094be:	f00d fb5d 	bl	8016b7c <__assert_func>
  SizeT size() const { return EndianScalar(length_); }
 80094c2:	2300      	movs	r3, #0
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	deff      	udf	#255	; 0xff
 80094c8:	0806a098 	.word	0x0806a098
 80094cc:	0806a838 	.word	0x0806a838
 80094d0:	0806a168 	.word	0x0806a168
 80094d4:	0806a0a4 	.word	0x0806a0a4

080094d8 <_ZN6tflite21MicroInterpreterGraph20ResetVariableTensorsEv>:
TfLiteStatus MicroInterpreterGraph::ResetVariableTensors() {
 80094d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 80094dc:	69c3      	ldr	r3, [r0, #28]
 80094de:	681a      	ldr	r2, [r3, #0]
TfLiteStatus MicroInterpreterGraph::ResetVariableTensors() {
 80094e0:	b085      	sub	sp, #20
 80094e2:	4680      	mov	r8, r0
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 80094e4:	2600      	movs	r6, #0
 80094e6:	2a00      	cmp	r2, #0
 80094e8:	d062      	beq.n	80095b0 <_ZN6tflite21MicroInterpreterGraph20ResetVariableTensorsEv+0xd8>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 80094ea:	3304      	adds	r3, #4
    const uint8_t *const offset_location = p + i * element_stride;
 80094ec:	eb03 0586 	add.w	r5, r3, r6, lsl #2
        offset_location + ReadScalar<offset_type>(offset_location));
 80094f0:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 80094f4:	58e8      	ldr	r0, [r5, r3]
 80094f6:	441d      	add	r5, r3
    return data_ - ReadScalar<soffset_t>(data_);
 80094f8:	1a28      	subs	r0, r5, r0
 80094fa:	00f7      	lsls	r7, r6, #3
 80094fc:	8801      	ldrh	r1, [r0, #0]
    for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 80094fe:	2400      	movs	r4, #0
 8009500:	e020      	b.n	8009544 <_ZN6tflite21MicroInterpreterGraph20ResetVariableTensorsEv+0x6c>
 8009502:	8882      	ldrh	r2, [r0, #4]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8009504:	b31a      	cbz	r2, 800954e <_ZN6tflite21MicroInterpreterGraph20ResetVariableTensorsEv+0x76>
 8009506:	f855 c002 	ldr.w	ip, [r5, r2]
    auto p = data_ + field_offset;
 800950a:	442a      	add	r2, r5
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 800950c:	eb02 030c 	add.w	r3, r2, ip
 8009510:	f852 200c 	ldr.w	r2, [r2, ip]
 8009514:	4294      	cmp	r4, r2
 8009516:	d245      	bcs.n	80095a4 <_ZN6tflite21MicroInterpreterGraph20ResetVariableTensorsEv+0xcc>
 8009518:	3304      	adds	r3, #4
    const uint8_t *const offset_location = p + i * element_stride;
 800951a:	eb03 0984 	add.w	r9, r3, r4, lsl #2
        offset_location + ReadScalar<offset_type>(offset_location));
 800951e:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
    return data_ - ReadScalar<soffset_t>(data_);
 8009522:	f859 3002 	ldr.w	r3, [r9, r2]
 8009526:	eb09 0a02 	add.w	sl, r9, r2
 800952a:	ebaa 0303 	sub.w	r3, sl, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 800952e:	f8b3 c000 	ldrh.w	ip, [r3]
 8009532:	f1bc 0f0e 	cmp.w	ip, #14
 8009536:	d904      	bls.n	8009542 <_ZN6tflite21MicroInterpreterGraph20ResetVariableTensorsEv+0x6a>
 8009538:	89db      	ldrh	r3, [r3, #14]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 800953a:	b113      	cbz	r3, 8009542 <_ZN6tflite21MicroInterpreterGraph20ResetVariableTensorsEv+0x6a>
      if (tensor->is_variable()) {
 800953c:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8009540:	b93b      	cbnz	r3, 8009552 <_ZN6tflite21MicroInterpreterGraph20ResetVariableTensorsEv+0x7a>
    for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 8009542:	3401      	adds	r4, #1
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8009544:	2904      	cmp	r1, #4
 8009546:	d8dc      	bhi.n	8009502 <_ZN6tflite21MicroInterpreterGraph20ResetVariableTensorsEv+0x2a>
  SizeT size() const { return EndianScalar(length_); }
 8009548:	2300      	movs	r3, #0
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	deff      	udf	#255	; 0xff
 800954e:	6813      	ldr	r3, [r2, #0]
 8009550:	deff      	udf	#255	; 0xff
        TF_LITE_ENSURE_STATUS(TfLiteEvalTensorByteLength(
 8009552:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8009556:	9201      	str	r2, [sp, #4]
 8009558:	443b      	add	r3, r7
 800955a:	eb04 0b44 	add.w	fp, r4, r4, lsl #1
 800955e:	6858      	ldr	r0, [r3, #4]
 8009560:	a903      	add	r1, sp, #12
 8009562:	eb00 008b 	add.w	r0, r0, fp, lsl #2
 8009566:	f7fd fcc5 	bl	8006ef4 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
 800956a:	bb38      	cbnz	r0, 80095bc <_ZN6tflite21MicroInterpreterGraph20ResetVariableTensorsEv+0xe4>
    return data_ - ReadScalar<soffset_t>(data_);
 800956c:	9a01      	ldr	r2, [sp, #4]
 800956e:	f859 3002 	ldr.w	r3, [r9, r2]
 8009572:	ebaa 0303 	sub.w	r3, sl, r3
 8009576:	881a      	ldrh	r2, [r3, #0]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8009578:	2a06      	cmp	r2, #6
 800957a:	d905      	bls.n	8009588 <_ZN6tflite21MicroInterpreterGraph20ResetVariableTensorsEv+0xb0>
 800957c:	88d9      	ldrh	r1, [r3, #6]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 800957e:	b121      	cbz	r1, 800958a <_ZN6tflite21MicroInterpreterGraph20ResetVariableTensorsEv+0xb2>
        if (tensor->type() == tflite::TensorType_INT8) {
 8009580:	f91a 1001 	ldrsb.w	r1, [sl, r1]
 8009584:	2909      	cmp	r1, #9
 8009586:	d01c      	beq.n	80095c2 <_ZN6tflite21MicroInterpreterGraph20ResetVariableTensorsEv+0xea>
        int value = 0;
 8009588:	2100      	movs	r1, #0
        memset(subgraph_allocations_[subgraph_idx].tensors[i].data.raw, value,
 800958a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800958e:	9a03      	ldr	r2, [sp, #12]
 8009590:	443b      	add	r3, r7
 8009592:	685b      	ldr	r3, [r3, #4]
 8009594:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8009598:	f00e f9a8 	bl	80178ec <memset>
 800959c:	6828      	ldr	r0, [r5, #0]
    return data_ - ReadScalar<soffset_t>(data_);
 800959e:	1a28      	subs	r0, r5, r0
 80095a0:	8801      	ldrh	r1, [r0, #0]
 80095a2:	e7ce      	b.n	8009542 <_ZN6tflite21MicroInterpreterGraph20ResetVariableTensorsEv+0x6a>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 80095a4:	f8d8 301c 	ldr.w	r3, [r8, #28]
 80095a8:	681a      	ldr	r2, [r3, #0]
 80095aa:	3601      	adds	r6, #1
 80095ac:	4296      	cmp	r6, r2
 80095ae:	d39c      	bcc.n	80094ea <_ZN6tflite21MicroInterpreterGraph20ResetVariableTensorsEv+0x12>
  if (resource_variables_ != nullptr) {
 80095b0:	f8d8 0018 	ldr.w	r0, [r8, #24]
 80095b4:	b110      	cbz	r0, 80095bc <_ZN6tflite21MicroInterpreterGraph20ResetVariableTensorsEv+0xe4>
    resource_variables_->ResetAll();
 80095b6:	f000 f979 	bl	80098ac <_ZN6tflite22MicroResourceVariables8ResetAllEv>
  return kTfLiteOk;
 80095ba:	2000      	movs	r0, #0
}
 80095bc:	b005      	add	sp, #20
 80095be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 80095c2:	2a0c      	cmp	r2, #12
 80095c4:	d9c0      	bls.n	8009548 <_ZN6tflite21MicroInterpreterGraph20ResetVariableTensorsEv+0x70>
 80095c6:	899b      	ldrh	r3, [r3, #12]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d0bd      	beq.n	8009548 <_ZN6tflite21MicroInterpreterGraph20ResetVariableTensorsEv+0x70>
 80095cc:	f85a 2003 	ldr.w	r2, [sl, r3]
    auto p = data_ + field_offset;
 80095d0:	449a      	add	sl, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 80095d2:	eb0a 0102 	add.w	r1, sl, r2
    return data_ - ReadScalar<soffset_t>(data_);
 80095d6:	f85a 3002 	ldr.w	r3, [sl, r2]
 80095da:	1acb      	subs	r3, r1, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 80095dc:	881a      	ldrh	r2, [r3, #0]
 80095de:	2a0a      	cmp	r2, #10
 80095e0:	d9b2      	bls.n	8009548 <_ZN6tflite21MicroInterpreterGraph20ResetVariableTensorsEv+0x70>
 80095e2:	895a      	ldrh	r2, [r3, #10]
    auto p = data_ + field_offset;
 80095e4:	188b      	adds	r3, r1, r2
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 80095e6:	2a00      	cmp	r2, #0
 80095e8:	d0ae      	beq.n	8009548 <_ZN6tflite21MicroInterpreterGraph20ResetVariableTensorsEv+0x70>
 80095ea:	588a      	ldr	r2, [r1, r2]
    FLATBUFFERS_ASSERT(i < size());
 80095ec:	5899      	ldr	r1, [r3, r2]
 80095ee:	4413      	add	r3, r2
 80095f0:	b109      	cbz	r1, 80095f6 <_ZN6tflite21MicroInterpreterGraph20ResetVariableTensorsEv+0x11e>
          value = tensor->quantization()->zero_point()->Get(0);
 80095f2:	6859      	ldr	r1, [r3, #4]
 80095f4:	e7c9      	b.n	800958a <_ZN6tflite21MicroInterpreterGraph20ResetVariableTensorsEv+0xb2>
 80095f6:	4b03      	ldr	r3, [pc, #12]	; (8009604 <_ZN6tflite21MicroInterpreterGraph20ResetVariableTensorsEv+0x12c>)
 80095f8:	4a03      	ldr	r2, [pc, #12]	; (8009608 <_ZN6tflite21MicroInterpreterGraph20ResetVariableTensorsEv+0x130>)
 80095fa:	4804      	ldr	r0, [pc, #16]	; (800960c <_ZN6tflite21MicroInterpreterGraph20ResetVariableTensorsEv+0x134>)
 80095fc:	21b0      	movs	r1, #176	; 0xb0
 80095fe:	f00d fabd 	bl	8016b7c <__assert_func>
 8009602:	bf00      	nop
 8009604:	0806a098 	.word	0x0806a098
 8009608:	0806afc4 	.word	0x0806afc4
 800960c:	0806a168 	.word	0x0806a168

08009610 <_ZN6tflite21MicroInterpreterGraph17NumSubgraphInputsEi>:
size_t MicroInterpreterGraph::NumSubgraphInputs(int subgraph_idx) {
 8009610:	b508      	push	{r3, lr}
  return model_->subgraphs()->Get(subgraph_idx)->inputs()->size();
 8009612:	6883      	ldr	r3, [r0, #8]
    return data_ - ReadScalar<soffset_t>(data_);
 8009614:	681a      	ldr	r2, [r3, #0]
 8009616:	1a9a      	subs	r2, r3, r2
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8009618:	8810      	ldrh	r0, [r2, #0]
 800961a:	2808      	cmp	r0, #8
 800961c:	d91e      	bls.n	800965c <_ZN6tflite21MicroInterpreterGraph17NumSubgraphInputsEi+0x4c>
 800961e:	8912      	ldrh	r2, [r2, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8009620:	b1e2      	cbz	r2, 800965c <_ZN6tflite21MicroInterpreterGraph17NumSubgraphInputsEi+0x4c>
 8009622:	5898      	ldr	r0, [r3, r2]
    auto p = data_ + field_offset;
 8009624:	4413      	add	r3, r2
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8009626:	181a      	adds	r2, r3, r0
 8009628:	581b      	ldr	r3, [r3, r0]
 800962a:	4299      	cmp	r1, r3
 800962c:	d210      	bcs.n	8009650 <_ZN6tflite21MicroInterpreterGraph17NumSubgraphInputsEi+0x40>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800962e:	3204      	adds	r2, #4
    const uint8_t *const offset_location = p + i * element_stride;
 8009630:	eb02 0381 	add.w	r3, r2, r1, lsl #2
        offset_location + ReadScalar<offset_type>(offset_location));
 8009634:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    return data_ - ReadScalar<soffset_t>(data_);
 8009638:	585a      	ldr	r2, [r3, r1]
 800963a:	440b      	add	r3, r1
 800963c:	1a9a      	subs	r2, r3, r2
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 800963e:	8811      	ldrh	r1, [r2, #0]
 8009640:	2906      	cmp	r1, #6
 8009642:	d90b      	bls.n	800965c <_ZN6tflite21MicroInterpreterGraph17NumSubgraphInputsEi+0x4c>
 8009644:	88d2      	ldrh	r2, [r2, #6]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8009646:	b14a      	cbz	r2, 800965c <_ZN6tflite21MicroInterpreterGraph17NumSubgraphInputsEi+0x4c>
  SizeT size() const { return EndianScalar(length_); }
 8009648:	5899      	ldr	r1, [r3, r2]
    auto p = data_ + field_offset;
 800964a:	4413      	add	r3, r2
 800964c:	5858      	ldr	r0, [r3, r1]
}
 800964e:	bd08      	pop	{r3, pc}
    FLATBUFFERS_ASSERT(i < size());
 8009650:	4b04      	ldr	r3, [pc, #16]	; (8009664 <_ZN6tflite21MicroInterpreterGraph17NumSubgraphInputsEi+0x54>)
 8009652:	4a05      	ldr	r2, [pc, #20]	; (8009668 <_ZN6tflite21MicroInterpreterGraph17NumSubgraphInputsEi+0x58>)
 8009654:	4805      	ldr	r0, [pc, #20]	; (800966c <_ZN6tflite21MicroInterpreterGraph17NumSubgraphInputsEi+0x5c>)
 8009656:	21b0      	movs	r1, #176	; 0xb0
 8009658:	f00d fa90 	bl	8016b7c <__assert_func>
  SizeT size() const { return EndianScalar(length_); }
 800965c:	2300      	movs	r3, #0
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	deff      	udf	#255	; 0xff
 8009662:	bf00      	nop
 8009664:	0806a098 	.word	0x0806a098
 8009668:	0806a838 	.word	0x0806a838
 800966c:	0806a168 	.word	0x0806a168

08009670 <_ZN6tflite21MicroInterpreterGraph18NumSubgraphOutputsEi>:

size_t MicroInterpreterGraph::NumSubgraphOutputs(int subgraph_idx) {
 8009670:	b508      	push	{r3, lr}
  return model_->subgraphs()->Get(subgraph_idx)->outputs()->size();
 8009672:	6883      	ldr	r3, [r0, #8]
    return data_ - ReadScalar<soffset_t>(data_);
 8009674:	681a      	ldr	r2, [r3, #0]
 8009676:	1a9a      	subs	r2, r3, r2
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8009678:	8810      	ldrh	r0, [r2, #0]
 800967a:	2808      	cmp	r0, #8
 800967c:	d91e      	bls.n	80096bc <_ZN6tflite21MicroInterpreterGraph18NumSubgraphOutputsEi+0x4c>
 800967e:	8912      	ldrh	r2, [r2, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8009680:	b1e2      	cbz	r2, 80096bc <_ZN6tflite21MicroInterpreterGraph18NumSubgraphOutputsEi+0x4c>
 8009682:	5898      	ldr	r0, [r3, r2]
    auto p = data_ + field_offset;
 8009684:	4413      	add	r3, r2
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8009686:	181a      	adds	r2, r3, r0
    FLATBUFFERS_ASSERT(i < size());
 8009688:	581b      	ldr	r3, [r3, r0]
 800968a:	4299      	cmp	r1, r3
 800968c:	d210      	bcs.n	80096b0 <_ZN6tflite21MicroInterpreterGraph18NumSubgraphOutputsEi+0x40>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800968e:	3204      	adds	r2, #4
    const uint8_t *const offset_location = p + i * element_stride;
 8009690:	eb02 0381 	add.w	r3, r2, r1, lsl #2
        offset_location + ReadScalar<offset_type>(offset_location));
 8009694:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    return data_ - ReadScalar<soffset_t>(data_);
 8009698:	585a      	ldr	r2, [r3, r1]
 800969a:	440b      	add	r3, r1
 800969c:	1a9a      	subs	r2, r3, r2
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 800969e:	8811      	ldrh	r1, [r2, #0]
 80096a0:	2908      	cmp	r1, #8
 80096a2:	d90b      	bls.n	80096bc <_ZN6tflite21MicroInterpreterGraph18NumSubgraphOutputsEi+0x4c>
 80096a4:	8912      	ldrh	r2, [r2, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 80096a6:	b14a      	cbz	r2, 80096bc <_ZN6tflite21MicroInterpreterGraph18NumSubgraphOutputsEi+0x4c>
  SizeT size() const { return EndianScalar(length_); }
 80096a8:	5899      	ldr	r1, [r3, r2]
    auto p = data_ + field_offset;
 80096aa:	4413      	add	r3, r2
 80096ac:	5858      	ldr	r0, [r3, r1]
}
 80096ae:	bd08      	pop	{r3, pc}
    FLATBUFFERS_ASSERT(i < size());
 80096b0:	4b04      	ldr	r3, [pc, #16]	; (80096c4 <_ZN6tflite21MicroInterpreterGraph18NumSubgraphOutputsEi+0x54>)
 80096b2:	4a05      	ldr	r2, [pc, #20]	; (80096c8 <_ZN6tflite21MicroInterpreterGraph18NumSubgraphOutputsEi+0x58>)
 80096b4:	4805      	ldr	r0, [pc, #20]	; (80096cc <_ZN6tflite21MicroInterpreterGraph18NumSubgraphOutputsEi+0x5c>)
 80096b6:	21b0      	movs	r1, #176	; 0xb0
 80096b8:	f00d fa60 	bl	8016b7c <__assert_func>
  SizeT size() const { return EndianScalar(length_); }
 80096bc:	2300      	movs	r3, #0
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	deff      	udf	#255	; 0xff
 80096c2:	bf00      	nop
 80096c4:	0806a098 	.word	0x0806a098
 80096c8:	0806a838 	.word	0x0806a838
 80096cc:	0806a168 	.word	0x0806a168

080096d0 <_ZN6tflite21MicroInterpreterGraph17GetSubgraphOutputEii>:

TfLiteEvalTensor* MicroInterpreterGraph::GetSubgraphOutput(int subgraph_idx,
                                                           int output_idx) {
 80096d0:	b538      	push	{r3, r4, r5, lr}
  int tensor_idx =
      model_->subgraphs()->Get(subgraph_idx)->outputs()->Get(output_idx);
 80096d2:	6883      	ldr	r3, [r0, #8]
    return data_ - ReadScalar<soffset_t>(data_);
 80096d4:	681c      	ldr	r4, [r3, #0]
 80096d6:	eba3 0c04 	sub.w	ip, r3, r4
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 80096da:	f8bc 4000 	ldrh.w	r4, [ip]
 80096de:	2c08      	cmp	r4, #8
 80096e0:	d937      	bls.n	8009752 <_ZN6tflite21MicroInterpreterGraph17GetSubgraphOutputEii+0x82>
 80096e2:	f8bc 4008 	ldrh.w	r4, [ip, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 80096e6:	2c00      	cmp	r4, #0
 80096e8:	d033      	beq.n	8009752 <_ZN6tflite21MicroInterpreterGraph17GetSubgraphOutputEii+0x82>
 80096ea:	591d      	ldr	r5, [r3, r4]
    auto p = data_ + field_offset;
 80096ec:	4423      	add	r3, r4
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 80096ee:	195c      	adds	r4, r3, r5
    FLATBUFFERS_ASSERT(i < size());
 80096f0:	595b      	ldr	r3, [r3, r5]
 80096f2:	4299      	cmp	r1, r3
 80096f4:	d221      	bcs.n	800973a <_ZN6tflite21MicroInterpreterGraph17GetSubgraphOutputEii+0x6a>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 80096f6:	3404      	adds	r4, #4
    const uint8_t *const offset_location = p + i * element_stride;
 80096f8:	eb04 0381 	add.w	r3, r4, r1, lsl #2
        offset_location + ReadScalar<offset_type>(offset_location));
 80096fc:	f854 5021 	ldr.w	r5, [r4, r1, lsl #2]
    return data_ - ReadScalar<soffset_t>(data_);
 8009700:	595c      	ldr	r4, [r3, r5]
 8009702:	442b      	add	r3, r5
 8009704:	eba3 0c04 	sub.w	ip, r3, r4
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8009708:	f8bc 4000 	ldrh.w	r4, [ip]
 800970c:	2c08      	cmp	r4, #8
 800970e:	d920      	bls.n	8009752 <_ZN6tflite21MicroInterpreterGraph17GetSubgraphOutputEii+0x82>
 8009710:	f8bc 4008 	ldrh.w	r4, [ip, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8009714:	b1ec      	cbz	r4, 8009752 <_ZN6tflite21MicroInterpreterGraph17GetSubgraphOutputEii+0x82>
 8009716:	591d      	ldr	r5, [r3, r4]
    auto p = data_ + field_offset;
 8009718:	4423      	add	r3, r4
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 800971a:	195c      	adds	r4, r3, r5
    FLATBUFFERS_ASSERT(i < size());
 800971c:	595b      	ldr	r3, [r3, r5]
 800971e:	429a      	cmp	r2, r3
 8009720:	d211      	bcs.n	8009746 <_ZN6tflite21MicroInterpreterGraph17GetSubgraphOutputEii+0x76>
  return &subgraph_allocations_[subgraph_idx].tensors[tensor_idx];
 8009722:	6903      	ldr	r3, [r0, #16]
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 8009724:	eb04 0082 	add.w	r0, r4, r2, lsl #2
 8009728:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
 800972c:	6843      	ldr	r3, [r0, #4]
 800972e:	6850      	ldr	r0, [r2, #4]
 8009730:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8009734:	eb00 0083 	add.w	r0, r0, r3, lsl #2
}
 8009738:	bd38      	pop	{r3, r4, r5, pc}
 800973a:	4b07      	ldr	r3, [pc, #28]	; (8009758 <_ZN6tflite21MicroInterpreterGraph17GetSubgraphOutputEii+0x88>)
 800973c:	4a07      	ldr	r2, [pc, #28]	; (800975c <_ZN6tflite21MicroInterpreterGraph17GetSubgraphOutputEii+0x8c>)
 800973e:	4808      	ldr	r0, [pc, #32]	; (8009760 <_ZN6tflite21MicroInterpreterGraph17GetSubgraphOutputEii+0x90>)
 8009740:	21b0      	movs	r1, #176	; 0xb0
 8009742:	f00d fa1b 	bl	8016b7c <__assert_func>
 8009746:	4b04      	ldr	r3, [pc, #16]	; (8009758 <_ZN6tflite21MicroInterpreterGraph17GetSubgraphOutputEii+0x88>)
 8009748:	4a06      	ldr	r2, [pc, #24]	; (8009764 <_ZN6tflite21MicroInterpreterGraph17GetSubgraphOutputEii+0x94>)
 800974a:	4805      	ldr	r0, [pc, #20]	; (8009760 <_ZN6tflite21MicroInterpreterGraph17GetSubgraphOutputEii+0x90>)
 800974c:	21b0      	movs	r1, #176	; 0xb0
 800974e:	f00d fa15 	bl	8016b7c <__assert_func>
  SizeT size() const { return EndianScalar(length_); }
 8009752:	2300      	movs	r3, #0
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	deff      	udf	#255	; 0xff
 8009758:	0806a098 	.word	0x0806a098
 800975c:	0806a838 	.word	0x0806a838
 8009760:	0806a168 	.word	0x0806a168
 8009764:	0806a0a4 	.word	0x0806a0a4

08009768 <_ZN6tflite21MicroInterpreterGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorEPNS_22MicroResourceVariablesE>:
MicroInterpreterGraph::MicroInterpreterGraph(
 8009768:	b410      	push	{r4}
      allocator_(allocator),
 800976a:	e9c0 2302 	strd	r2, r3, [r0, #8]
      resource_variables_(resource_variables) {
 800976e:	9c01      	ldr	r4, [sp, #4]
 8009770:	4b0b      	ldr	r3, [pc, #44]	; (80097a0 <_ZN6tflite21MicroInterpreterGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorEPNS_22MicroResourceVariablesE+0x38>)
    : context_(context),
 8009772:	6041      	str	r1, [r0, #4]
      resource_variables_(resource_variables) {
 8009774:	2100      	movs	r1, #0
      current_subgraph_index_(0),
 8009776:	e9c0 1104 	strd	r1, r1, [r0, #16]
      resource_variables_(resource_variables) {
 800977a:	6184      	str	r4, [r0, #24]
 800977c:	6003      	str	r3, [r0, #0]
  if (model != nullptr) {
 800977e:	b162      	cbz	r2, 800979a <_ZN6tflite21MicroInterpreterGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorEPNS_22MicroResourceVariablesE+0x32>
    return data_ - ReadScalar<soffset_t>(data_);
 8009780:	6813      	ldr	r3, [r2, #0]
 8009782:	1ad3      	subs	r3, r2, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8009784:	f8b3 c000 	ldrh.w	ip, [r3]
 8009788:	f1bc 0f08 	cmp.w	ip, #8
 800978c:	d904      	bls.n	8009798 <_ZN6tflite21MicroInterpreterGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorEPNS_22MicroResourceVariablesE+0x30>
 800978e:	8919      	ldrh	r1, [r3, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8009790:	b111      	cbz	r1, 8009798 <_ZN6tflite21MicroInterpreterGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorEPNS_22MicroResourceVariablesE+0x30>
 8009792:	5853      	ldr	r3, [r2, r1]
    auto p = data_ + field_offset;
 8009794:	440a      	add	r2, r1
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8009796:	18d1      	adds	r1, r2, r3
    subgraphs_ = model->subgraphs();
 8009798:	61c1      	str	r1, [r0, #28]
}
 800979a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800979e:	4770      	bx	lr
 80097a0:	0806c3dc 	.word	0x0806c3dc

080097a4 <_ZN6tflite21MicroInterpreterGraph22SetSubgraphAllocationsEPNS_19SubgraphAllocationsE>:
  subgraph_allocations_ = subgraph_allocations;
 80097a4:	6101      	str	r1, [r0, #16]
}
 80097a6:	4770      	bx	lr

080097a8 <_ZN12_GLOBAL__N_19VDebugLogEPKcz.constprop.0>:
#endif

#if !defined(TF_LITE_STRIP_ERROR_STRINGS)
namespace {

void VDebugLog(const char* format, ...) {
 80097a8:	b40f      	push	{r0, r1, r2, r3}
 80097aa:	b500      	push	{lr}
 80097ac:	b083      	sub	sp, #12
  va_list args;
  va_start(args, format);
 80097ae:	a905      	add	r1, sp, #20
  DebugLog(format, args);
 80097b0:	4804      	ldr	r0, [pc, #16]	; (80097c4 <_ZN12_GLOBAL__N_19VDebugLogEPKcz.constprop.0+0x1c>)
  va_start(args, format);
 80097b2:	9101      	str	r1, [sp, #4]
  DebugLog(format, args);
 80097b4:	f7f8 f948 	bl	8001a48 <DebugLog>
  va_end(args);
}
 80097b8:	b003      	add	sp, #12
 80097ba:	f85d eb04 	ldr.w	lr, [sp], #4
 80097be:	b004      	add	sp, #16
 80097c0:	4770      	bx	lr
 80097c2:	bf00      	nop
 80097c4:	08019c38 	.word	0x08019c38

080097c8 <_Z12VMicroPrintfPKcSt9__va_list>:

}  // namespace

void VMicroPrintf(const char* format, va_list args) {
 80097c8:	b508      	push	{r3, lr}
  DebugLog(format, args);
 80097ca:	f7f8 f93d 	bl	8001a48 <DebugLog>
  // TODO(b/290051015): remove "\r\n"
  VDebugLog("\r\n");
}
 80097ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  VDebugLog("\r\n");
 80097d2:	4801      	ldr	r0, [pc, #4]	; (80097d8 <_Z12VMicroPrintfPKcSt9__va_list+0x10>)
 80097d4:	f7ff bfe8 	b.w	80097a8 <_ZN12_GLOBAL__N_19VDebugLogEPKcz.constprop.0>
 80097d8:	08019c38 	.word	0x08019c38

080097dc <_Z11MicroPrintfPKcz>:

void MicroPrintf(const char* format, ...) {
 80097dc:	b40f      	push	{r0, r1, r2, r3}
 80097de:	b500      	push	{lr}
 80097e0:	b083      	sub	sp, #12
 80097e2:	a904      	add	r1, sp, #16
 80097e4:	f851 0b04 	ldr.w	r0, [r1], #4
  va_list args;
  va_start(args, format);
 80097e8:	9101      	str	r1, [sp, #4]
  DebugLog(format, args);
 80097ea:	f7f8 f92d 	bl	8001a48 <DebugLog>
  VDebugLog("\r\n");
 80097ee:	4804      	ldr	r0, [pc, #16]	; (8009800 <_Z11MicroPrintfPKcz+0x24>)
 80097f0:	f7ff ffda 	bl	80097a8 <_ZN12_GLOBAL__N_19VDebugLogEPKcz.constprop.0>
  VMicroPrintf(format, args);
  va_end(args);
}
 80097f4:	b003      	add	sp, #12
 80097f6:	f85d eb04 	ldr.w	lr, [sp], #4
 80097fa:	b004      	add	sp, #16
 80097fc:	4770      	bx	lr
 80097fe:	bf00      	nop
 8009800:	08019c38 	.word	0x08019c38

08009804 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_15MicroOpResolverEPPK16TFLMRegistration>:

namespace tflite {

TfLiteStatus GetRegistrationFromOpCode(const OperatorCode* opcode,
                                       const MicroOpResolver& op_resolver,
                                       const TFLMRegistration** registration) {
 8009804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TfLiteStatus status = kTfLiteOk;
  *registration = nullptr;
 8009808:	2600      	movs	r6, #0
 800980a:	6016      	str	r6, [r2, #0]
                                       const TFLMRegistration** registration) {
 800980c:	4615      	mov	r5, r2
 800980e:	4680      	mov	r8, r0
 8009810:	460f      	mov	r7, r1
  auto builtin_code = GetBuiltinCode(opcode);
 8009812:	f002 fe7b 	bl	800c50c <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>

  if (builtin_code > BuiltinOperator_MAX) {
 8009816:	28cd      	cmp	r0, #205	; 0xcd
  auto builtin_code = GetBuiltinCode(opcode);
 8009818:	4604      	mov	r4, r0
  if (builtin_code > BuiltinOperator_MAX) {
 800981a:	dc24      	bgt.n	8009866 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_15MicroOpResolverEPPK16TFLMRegistration+0x62>
    MicroPrintf("Op builtin_code out of range: %d.", builtin_code);
    status = kTfLiteError;
  } else if (builtin_code != BuiltinOperator_CUSTOM) {
 800981c:	2820      	cmp	r0, #32
 800981e:	d009      	beq.n	8009834 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_15MicroOpResolverEPPK16TFLMRegistration+0x30>
    *registration = op_resolver.FindOp(builtin_code);
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	4638      	mov	r0, r7
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	4621      	mov	r1, r4
 8009828:	4798      	blx	r3
 800982a:	6028      	str	r0, [r5, #0]
    if (*registration == nullptr) {
 800982c:	b340      	cbz	r0, 8009880 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_15MicroOpResolverEPPK16TFLMRegistration+0x7c>
  TfLiteStatus status = kTfLiteOk;
 800982e:	4630      	mov	r0, r6
      // while preparing ops.
      status = kTfLiteError;
    }
  }
  return status;
}
 8009830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return data_ - ReadScalar<soffset_t>(data_);
 8009834:	f8d8 3000 	ldr.w	r3, [r8]
 8009838:	eba8 0303 	sub.w	r3, r8, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 800983c:	881a      	ldrh	r2, [r3, #0]
 800983e:	2a06      	cmp	r2, #6
 8009840:	d918      	bls.n	8009874 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_15MicroOpResolverEPPK16TFLMRegistration+0x70>
 8009842:	88db      	ldrh	r3, [r3, #6]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8009844:	b1b3      	cbz	r3, 8009874 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_15MicroOpResolverEPPK16TFLMRegistration+0x70>
 8009846:	f858 2003 	ldr.w	r2, [r8, r3]
    auto p = data_ + field_offset;
 800984a:	eb08 0103 	add.w	r1, r8, r3
    *registration = op_resolver.FindOp(name);
 800984e:	683b      	ldr	r3, [r7, #0]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8009850:	4411      	add	r1, r2
 8009852:	685b      	ldr	r3, [r3, #4]
 8009854:	3104      	adds	r1, #4
 8009856:	4638      	mov	r0, r7
 8009858:	4798      	blx	r3
 800985a:	4603      	mov	r3, r0
    status = kTfLiteError;
 800985c:	fab0 f080 	clz	r0, r0
    *registration = op_resolver.FindOp(name);
 8009860:	602b      	str	r3, [r5, #0]
    status = kTfLiteError;
 8009862:	0940      	lsrs	r0, r0, #5
 8009864:	e7e4      	b.n	8009830 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_15MicroOpResolverEPPK16TFLMRegistration+0x2c>
    MicroPrintf("Op builtin_code out of range: %d.", builtin_code);
 8009866:	480c      	ldr	r0, [pc, #48]	; (8009898 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_15MicroOpResolverEPPK16TFLMRegistration+0x94>)
 8009868:	4621      	mov	r1, r4
 800986a:	f7ff ffb7 	bl	80097dc <_Z11MicroPrintfPKcz>
    status = kTfLiteError;
 800986e:	2001      	movs	r0, #1
}
 8009870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MicroPrintf("Operator with CUSTOM builtin_code has no custom_code.\n");
 8009874:	4809      	ldr	r0, [pc, #36]	; (800989c <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_15MicroOpResolverEPPK16TFLMRegistration+0x98>)
 8009876:	f7ff ffb1 	bl	80097dc <_Z11MicroPrintfPKcz>
    status = kTfLiteError;
 800987a:	2001      	movs	r0, #1
}
 800987c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return (v < low) || (high < v);
 8009880:	2c00      	cmp	r4, #0
 8009882:	bfaa      	itet	ge
 8009884:	4b06      	ldrge	r3, [pc, #24]	; (80098a0 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_15MicroOpResolverEPPK16TFLMRegistration+0x9c>)
  if (::flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_REDUCE_WINDOW)) return "";
 8009886:	4907      	ldrlt	r1, [pc, #28]	; (80098a4 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_15MicroOpResolverEPPK16TFLMRegistration+0xa0>)
  return EnumNamesBuiltinOperator()[index];
 8009888:	f853 1024 	ldrge.w	r1, [r3, r4, lsl #2]
      MicroPrintf("Didn't find op for builtin opcode '%s'",
 800988c:	4806      	ldr	r0, [pc, #24]	; (80098a8 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_15MicroOpResolverEPPK16TFLMRegistration+0xa4>)
 800988e:	f7ff ffa5 	bl	80097dc <_Z11MicroPrintfPKcz>
      status = kTfLiteError;
 8009892:	2001      	movs	r0, #1
}
 8009894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009898:	0806c414 	.word	0x0806c414
 800989c:	0806c460 	.word	0x0806c460
 80098a0:	0806bf68 	.word	0x0806bf68
 80098a4:	08019b84 	.word	0x08019b84
 80098a8:	0806c438 	.word	0x0806c438

080098ac <_ZN6tflite22MicroResourceVariables8ResetAllEv>:
  memcpy(variable.resource_buffer, tensor->data.raw, variable.bytes);
  return kTfLiteOk;
}

TfLiteStatus MicroResourceVariables::ResetAll() {
  for (int i = 0; i < num_resource_variables_; i++) {
 80098ac:	6883      	ldr	r3, [r0, #8]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	dd13      	ble.n	80098da <_ZN6tflite22MicroResourceVariables8ResetAllEv+0x2e>
TfLiteStatus MicroResourceVariables::ResetAll() {
 80098b2:	b570      	push	{r4, r5, r6, lr}
  for (int i = 0; i < num_resource_variables_; i++) {
 80098b4:	2400      	movs	r4, #0
 80098b6:	4606      	mov	r6, r0
 80098b8:	4625      	mov	r5, r4
    MicroResourceVariable variable = resource_variables_[i];
 80098ba:	6833      	ldr	r3, [r6, #0]
 80098bc:	4423      	add	r3, r4
  for (int i = 0; i < num_resource_variables_; i++) {
 80098be:	3501      	adds	r5, #1
    // TODO(b/269669735): Explains why casting zero_point to int8 and memset.
    memset(variable.resource_buffer, variable.default_value, variable.bytes);
 80098c0:	68da      	ldr	r2, [r3, #12]
 80098c2:	f993 1010 	ldrsb.w	r1, [r3, #16]
 80098c6:	6898      	ldr	r0, [r3, #8]
 80098c8:	f00e f810 	bl	80178ec <memset>
  for (int i = 0; i < num_resource_variables_; i++) {
 80098cc:	68b3      	ldr	r3, [r6, #8]
 80098ce:	42ab      	cmp	r3, r5
    memset(variable.resource_buffer, variable.default_value, variable.bytes);
 80098d0:	f104 0414 	add.w	r4, r4, #20
  for (int i = 0; i < num_resource_variables_; i++) {
 80098d4:	dcf1      	bgt.n	80098ba <_ZN6tflite22MicroResourceVariables8ResetAllEv+0xe>
  }
  return kTfLiteOk;
}
 80098d6:	2000      	movs	r0, #0
 80098d8:	bd70      	pop	{r4, r5, r6, pc}
 80098da:	2000      	movs	r0, #0
 80098dc:	4770      	bx	lr
 80098de:	bf00      	nop

080098e0 <_ZN6tflite12ElementCountERK14TfLiteIntArray>:
#include "tensorflow/lite/micro/memory_helpers.h"
#include "tensorflow/lite/micro/micro_log.h"

namespace tflite {

int ElementCount(const TfLiteIntArray& dims) {
 80098e0:	b410      	push	{r4}
  int result = 1;
  for (int i = 0; i < dims.size; ++i) {
 80098e2:	6804      	ldr	r4, [r0, #0]
 80098e4:	2c00      	cmp	r4, #0
 80098e6:	dd0c      	ble.n	8009902 <_ZN6tflite12ElementCountERK14TfLiteIntArray+0x22>
 80098e8:	4602      	mov	r2, r0
 80098ea:	2300      	movs	r3, #0
  int result = 1;
 80098ec:	2001      	movs	r0, #1
    result *= dims.data[i];
 80098ee:	f852 1f04 	ldr.w	r1, [r2, #4]!
  for (int i = 0; i < dims.size; ++i) {
 80098f2:	3301      	adds	r3, #1
 80098f4:	42a3      	cmp	r3, r4
    result *= dims.data[i];
 80098f6:	fb01 f000 	mul.w	r0, r1, r0
  for (int i = 0; i < dims.size; ++i) {
 80098fa:	d1f8      	bne.n	80098ee <_ZN6tflite12ElementCountERK14TfLiteIntArray+0xe>
  }
  return result;
}
 80098fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009900:	4770      	bx	lr
  int result = 1;
 8009902:	2001      	movs	r0, #1
}
 8009904:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009908:	4770      	bx	lr
 800990a:	bf00      	nop

0800990c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>:
TfLiteStatus CalculateOpDataConv(TfLiteContext* context, TfLiteNode* node,
                                 const TfLiteConvParams& params, int width,
                                 int height, int filter_width,
                                 int filter_height, int out_width,
                                 int out_height, const TfLiteType data_type,
                                 OpDataConv* data) {
 800990c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009910:	4615      	mov	r5, r2
  bool has_bias = node->inputs->size == 3;
 8009912:	680a      	ldr	r2, [r1, #0]
  // Check number of inputs/outputs
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
 8009914:	6812      	ldr	r2, [r2, #0]
                                 OpDataConv* data) {
 8009916:	b08d      	sub	sp, #52	; 0x34
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
 8009918:	3a02      	subs	r2, #2
 800991a:	2a01      	cmp	r2, #1
                                 OpDataConv* data) {
 800991c:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 8009920:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8009922:	4604      	mov	r4, r0
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
 8009924:	d90a      	bls.n	800993c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x30>
 8009926:	4b8c      	ldr	r3, [pc, #560]	; (8009b58 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x24c>)
 8009928:	6944      	ldr	r4, [r0, #20]
 800992a:	4a8c      	ldr	r2, [pc, #560]	; (8009b5c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x250>)
 800992c:	9300      	str	r3, [sp, #0]
 800992e:	498c      	ldr	r1, [pc, #560]	; (8009b60 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x254>)
 8009930:	2357      	movs	r3, #87	; 0x57
 8009932:	47a0      	blx	r4
 8009934:	2001      	movs	r0, #1
  if (bias != nullptr) {
    micro_context->DeallocateTempTfLiteTensor(bias);
  }

  return kTfLiteOk;
}
 8009936:	b00d      	add	sp, #52	; 0x34
 8009938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
 800993c:	684a      	ldr	r2, [r1, #4]
 800993e:	6812      	ldr	r2, [r2, #0]
 8009940:	2a01      	cmp	r2, #1
 8009942:	468a      	mov	sl, r1
 8009944:	d00f      	beq.n	8009966 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x5a>
 8009946:	4b87      	ldr	r3, [pc, #540]	; (8009b64 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x258>)
 8009948:	6944      	ldr	r4, [r0, #20]
 800994a:	9301      	str	r3, [sp, #4]
 800994c:	2501      	movs	r5, #1
 800994e:	4b86      	ldr	r3, [pc, #536]	; (8009b68 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x25c>)
 8009950:	9300      	str	r3, [sp, #0]
 8009952:	e9cd 2502 	strd	r2, r5, [sp, #8]
 8009956:	4985      	ldr	r1, [pc, #532]	; (8009b6c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x260>)
 8009958:	4a80      	ldr	r2, [pc, #512]	; (8009b5c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x250>)
 800995a:	2358      	movs	r3, #88	; 0x58
 800995c:	47a0      	blx	r4
 800995e:	4628      	mov	r0, r5
}
 8009960:	b00d      	add	sp, #52	; 0x34
 8009962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
}

// Matching GetWindowedOutputSize in TensorFlow.
inline int ComputeOutSize(TfLitePadding padding, int image_size,
                          int filter_size, int stride, int dilation_rate = 1) {
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 8009966:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8009968:	692a      	ldr	r2, [r5, #16]
      params.stride_height, params.stride_width, params.dilation_height_factor,
 800996a:	f8d5 c004 	ldr.w	ip, [r5, #4]
 800996e:	f8d5 e008 	ldr.w	lr, [r5, #8]
 8009972:	1e48      	subs	r0, r1, #1
 8009974:	fb02 f000 	mul.w	r0, r2, r0
 8009978:	6969      	ldr	r1, [r5, #20]
  auto padding = params.padding;
 800997a:	782a      	ldrb	r2, [r5, #0]
 800997c:	3001      	adds	r0, #1

  // TODO(b/186448822): This uses 0 since the function has no other way to
  // report error case
  if (stride == 0) return 0;
 800997e:	f1bc 0f00 	cmp.w	ip, #0
 8009982:	d01a      	beq.n	80099ba <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xae>

  switch (padding) {
 8009984:	2a01      	cmp	r2, #1
 8009986:	f000 80bb 	beq.w	8009b00 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f4>
 800998a:	2a02      	cmp	r2, #2
 800998c:	d12a      	bne.n	80099e4 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xd8>
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 800998e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009990:	1e57      	subs	r7, r2, #1
 8009992:	fb01 f707 	mul.w	r7, r1, r7
    case kTfLitePaddingSame:
      return (image_size + stride - 1) / stride;
    case kTfLitePaddingValid:
      return (image_size + stride - effective_filter_size) / stride;
 8009996:	eb0c 0203 	add.w	r2, ip, r3
 800999a:	1a12      	subs	r2, r2, r0
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 800999c:	3701      	adds	r7, #1
      return (image_size + stride - effective_filter_size) / stride;
 800999e:	fb92 f2fc 	sdiv	r2, r2, ip
      ((out_size - 1) * stride + effective_filter_size - in_size);
 80099a2:	3a01      	subs	r2, #1
  if (stride == 0) return 0;
 80099a4:	f1be 0f00 	cmp.w	lr, #0
 80099a8:	f000 80b9 	beq.w	8009b1e <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x212>
      return (image_size + stride - effective_filter_size) / stride;
 80099ac:	9916      	ldr	r1, [sp, #88]	; 0x58
 80099ae:	4471      	add	r1, lr
 80099b0:	1bc9      	subs	r1, r1, r7
 80099b2:	fb91 f1fe 	sdiv	r1, r1, lr
      ((out_size - 1) * stride + effective_filter_size - in_size);
 80099b6:	3901      	subs	r1, #1
      return (image_size + stride - effective_filter_size) / stride;
 80099b8:	e01c      	b.n	80099f4 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xe8>
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 80099ba:	9f18      	ldr	r7, [sp, #96]	; 0x60
 80099bc:	3f01      	subs	r7, #1
 80099be:	fb01 f707 	mul.w	r7, r1, r7
 80099c2:	3701      	adds	r7, #1
  if (stride == 0) return 0;
 80099c4:	f1be 0f00 	cmp.w	lr, #0
 80099c8:	f000 8096 	beq.w	8009af8 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1ec>
  switch (padding) {
 80099cc:	2a01      	cmp	r2, #1
 80099ce:	f040 80b3 	bne.w	8009b38 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x22c>
 80099d2:	f04f 32ff 	mov.w	r2, #4294967295
      return (image_size + stride - 1) / stride;
 80099d6:	9916      	ldr	r1, [sp, #88]	; 0x58
 80099d8:	4471      	add	r1, lr
 80099da:	3901      	subs	r1, #1
 80099dc:	fb91 f1fe 	sdiv	r1, r1, lr
      ((out_size - 1) * stride + effective_filter_size - in_size);
 80099e0:	3901      	subs	r1, #1
      return (image_size + stride - 1) / stride;
 80099e2:	e007      	b.n	80099f4 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xe8>
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 80099e4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80099e6:	1e57      	subs	r7, r2, #1
 80099e8:	fb01 f707 	mul.w	r7, r1, r7
 80099ec:	f04f 32ff 	mov.w	r2, #4294967295
 80099f0:	3701      	adds	r7, #1
 80099f2:	4611      	mov	r1, r2
      ((out_size - 1) * stride + effective_filter_size - in_size);
 80099f4:	fb02 020c 	mla	r2, r2, ip, r0
  int total_padding =
 80099f8:	1ad2      	subs	r2, r2, r3
 80099fa:	9b16      	ldr	r3, [sp, #88]	; 0x58
      ((out_size - 1) * stride + effective_filter_size - in_size);
 80099fc:	fb01 710e 	mla	r1, r1, lr, r7
  int total_padding =
 8009a00:	1acb      	subs	r3, r1, r3
  total_padding = total_padding > 0 ? total_padding : 0;
 8009a02:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
  return reinterpret_cast<MicroContext*>(context->impl_);
 8009a06:	68e7      	ldr	r7, [r4, #12]
  return total_padding / 2;
 8009a08:	1051      	asrs	r1, r2, #1
  total_padding = total_padding > 0 ? total_padding : 0;
 8009a0a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  *offset = total_padding % 2;
 8009a0e:	f002 0201 	and.w	r2, r2, #1
  data->padding = ComputePaddingHeightWidth(
 8009a12:	60b2      	str	r2, [r6, #8]
  return total_padding / 2;
 8009a14:	105a      	asrs	r2, r3, #1
  *offset = total_padding % 2;
 8009a16:	f003 0301 	and.w	r3, r3, #1
 8009a1a:	6031      	str	r1, [r6, #0]
 8009a1c:	6072      	str	r2, [r6, #4]
 8009a1e:	60f3      	str	r3, [r6, #12]
      micro_context->AllocateTempInputTensor(node, kConvInputTensor);
 8009a20:	2200      	movs	r2, #0
 8009a22:	4651      	mov	r1, sl
 8009a24:	4638      	mov	r0, r7
 8009a26:	f7fe fe79 	bl	800871c <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
 8009a2a:	4680      	mov	r8, r0
 8009a2c:	2800      	cmp	r0, #0
 8009a2e:	d039      	beq.n	8009aa4 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x198>
      micro_context->AllocateTempInputTensor(node, kConvWeightsTensor);
 8009a30:	2201      	movs	r2, #1
 8009a32:	4651      	mov	r1, sl
 8009a34:	4638      	mov	r0, r7
 8009a36:	f7fe fe71 	bl	800871c <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei>
  TF_LITE_ENSURE(context, filter != nullptr);
 8009a3a:	4681      	mov	r9, r0
 8009a3c:	2800      	cmp	r0, #0
 8009a3e:	d071      	beq.n	8009b24 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x218>
      micro_context->AllocateTempInputTensor(node, kConvBiasTensor);
 8009a40:	4651      	mov	r1, sl
 8009a42:	2202      	movs	r2, #2
 8009a44:	4638      	mov	r0, r7
 8009a46:	f7fe fe69 	bl	800871c <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei>
      micro_context->AllocateTempOutputTensor(node, kConvOutputTensor);
 8009a4a:	4651      	mov	r1, sl
      micro_context->AllocateTempInputTensor(node, kConvBiasTensor);
 8009a4c:	900b      	str	r0, [sp, #44]	; 0x2c
      micro_context->AllocateTempOutputTensor(node, kConvOutputTensor);
 8009a4e:	2200      	movs	r2, #0
 8009a50:	4638      	mov	r0, r7
 8009a52:	f7fe fe73 	bl	800873c <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
 8009a56:	4682      	mov	sl, r0
 8009a58:	2800      	cmp	r0, #0
 8009a5a:	d073      	beq.n	8009b44 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x238>
  if (data_type != kTfLiteFloat32) {
 8009a5c:	f1bb 0f01 	cmp.w	fp, #1
 8009a60:	d12a      	bne.n	8009ab8 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1ac>
  micro_context->DeallocateTempTfLiteTensor(output);
 8009a62:	683b      	ldr	r3, [r7, #0]
  data->input_zero_point = input->params.zero_point;
 8009a64:	f8d8 200c 	ldr.w	r2, [r8, #12]
  micro_context->DeallocateTempTfLiteTensor(output);
 8009a68:	699b      	ldr	r3, [r3, #24]
  data->input_zero_point = input->params.zero_point;
 8009a6a:	6132      	str	r2, [r6, #16]
  data->filter_zero_point = filter->params.zero_point;
 8009a6c:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8009a70:	6172      	str	r2, [r6, #20]
  data->output_zero_point = output->params.zero_point;
 8009a72:	f8da 200c 	ldr.w	r2, [sl, #12]
 8009a76:	61b2      	str	r2, [r6, #24]
  micro_context->DeallocateTempTfLiteTensor(output);
 8009a78:	4651      	mov	r1, sl
 8009a7a:	4638      	mov	r0, r7
 8009a7c:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(input);
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	4641      	mov	r1, r8
 8009a82:	699b      	ldr	r3, [r3, #24]
 8009a84:	4638      	mov	r0, r7
 8009a86:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(filter);
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	4649      	mov	r1, r9
 8009a8c:	699b      	ldr	r3, [r3, #24]
 8009a8e:	4638      	mov	r0, r7
 8009a90:	4798      	blx	r3
  if (bias != nullptr) {
 8009a92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a94:	b123      	cbz	r3, 8009aa0 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x194>
 8009a96:	4619      	mov	r1, r3
    micro_context->DeallocateTempTfLiteTensor(bias);
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	4638      	mov	r0, r7
 8009a9c:	699b      	ldr	r3, [r3, #24]
 8009a9e:	4798      	blx	r3
  return kTfLiteOk;
 8009aa0:	2000      	movs	r0, #0
 8009aa2:	e748      	b.n	8009936 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x2a>
  TF_LITE_ENSURE(context, input != nullptr);
 8009aa4:	4b32      	ldr	r3, [pc, #200]	; (8009b70 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x264>)
 8009aa6:	6965      	ldr	r5, [r4, #20]
 8009aa8:	4a2c      	ldr	r2, [pc, #176]	; (8009b5c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x250>)
 8009aaa:	9300      	str	r3, [sp, #0]
 8009aac:	4620      	mov	r0, r4
 8009aae:	492c      	ldr	r1, [pc, #176]	; (8009b60 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x254>)
 8009ab0:	2365      	movs	r3, #101	; 0x65
 8009ab2:	47a8      	blx	r5
 8009ab4:	2001      	movs	r0, #1
 8009ab6:	e73e      	b.n	8009936 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x2a>
    int output_channels = filter->dims->data[kConvQuantizedDimension];
 8009ab8:	f8d9 3014 	ldr.w	r3, [r9, #20]
    TF_LITE_ENSURE_STATUS(tflite::PopulateConvolutionQuantizationParams(
 8009abc:	350c      	adds	r5, #12
 8009abe:	685b      	ldr	r3, [r3, #4]
 8009ac0:	9308      	str	r3, [sp, #32]
 8009ac2:	e9cd a500 	strd	sl, r5, [sp]
 8009ac6:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8009ac8:	9307      	str	r3, [sp, #28]
 8009aca:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009acc:	9306      	str	r3, [sp, #24]
 8009ace:	f106 0330 	add.w	r3, r6, #48	; 0x30
 8009ad2:	9305      	str	r3, [sp, #20]
 8009ad4:	f106 032c 	add.w	r3, r6, #44	; 0x2c
 8009ad8:	9304      	str	r3, [sp, #16]
 8009ada:	f106 0320 	add.w	r3, r6, #32
 8009ade:	9303      	str	r3, [sp, #12]
 8009ae0:	f106 031c 	add.w	r3, r6, #28
 8009ae4:	9302      	str	r3, [sp, #8]
 8009ae6:	4620      	mov	r0, r4
 8009ae8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009aea:	464a      	mov	r2, r9
 8009aec:	4641      	mov	r1, r8
 8009aee:	f7fc fd63 	bl	80065b8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i>
 8009af2:	2800      	cmp	r0, #0
 8009af4:	d0b5      	beq.n	8009a62 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x156>
 8009af6:	e71e      	b.n	8009936 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x2a>
 8009af8:	f04f 32ff 	mov.w	r2, #4294967295
 8009afc:	4611      	mov	r1, r2
 8009afe:	e779      	b.n	80099f4 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xe8>
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 8009b00:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009b02:	1e57      	subs	r7, r2, #1
 8009b04:	fb01 f707 	mul.w	r7, r1, r7
      return (image_size + stride - 1) / stride;
 8009b08:	eb0c 0203 	add.w	r2, ip, r3
 8009b0c:	3a01      	subs	r2, #1
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 8009b0e:	3701      	adds	r7, #1
      return (image_size + stride - 1) / stride;
 8009b10:	fb92 f2fc 	sdiv	r2, r2, ip
      ((out_size - 1) * stride + effective_filter_size - in_size);
 8009b14:	3a01      	subs	r2, #1
  if (stride == 0) return 0;
 8009b16:	f1be 0f00 	cmp.w	lr, #0
 8009b1a:	f47f af5c 	bne.w	80099d6 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xca>
      ((out_size - 1) * stride + effective_filter_size - in_size);
 8009b1e:	f04f 31ff 	mov.w	r1, #4294967295
 8009b22:	e767      	b.n	80099f4 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xe8>
  TF_LITE_ENSURE(context, filter != nullptr);
 8009b24:	4b13      	ldr	r3, [pc, #76]	; (8009b74 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x268>)
 8009b26:	6965      	ldr	r5, [r4, #20]
 8009b28:	4a0c      	ldr	r2, [pc, #48]	; (8009b5c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x250>)
 8009b2a:	9300      	str	r3, [sp, #0]
 8009b2c:	4620      	mov	r0, r4
 8009b2e:	490c      	ldr	r1, [pc, #48]	; (8009b60 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x254>)
 8009b30:	2368      	movs	r3, #104	; 0x68
 8009b32:	47a8      	blx	r5
 8009b34:	2001      	movs	r0, #1
 8009b36:	e6fe      	b.n	8009936 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x2a>
  switch (padding) {
 8009b38:	2a02      	cmp	r2, #2
 8009b3a:	f04f 32ff 	mov.w	r2, #4294967295
 8009b3e:	f43f af35 	beq.w	80099ac <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xa0>
 8009b42:	e7db      	b.n	8009afc <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f0>
  TF_LITE_ENSURE(context, output != nullptr);
 8009b44:	4b0c      	ldr	r3, [pc, #48]	; (8009b78 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x26c>)
 8009b46:	6965      	ldr	r5, [r4, #20]
 8009b48:	4a04      	ldr	r2, [pc, #16]	; (8009b5c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x250>)
 8009b4a:	9300      	str	r3, [sp, #0]
 8009b4c:	4620      	mov	r0, r4
 8009b4e:	4904      	ldr	r1, [pc, #16]	; (8009b60 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x254>)
 8009b50:	236d      	movs	r3, #109	; 0x6d
 8009b52:	47a8      	blx	r5
 8009b54:	2001      	movs	r0, #1
 8009b56:	e6ee      	b.n	8009936 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x2a>
 8009b58:	0806c4d0 	.word	0x0806c4d0
 8009b5c:	0806c498 	.word	0x0806c498
 8009b60:	0806a3f0 	.word	0x0806a3f0
 8009b64:	0806c7dc 	.word	0x0806c7dc
 8009b68:	0806c4f4 	.word	0x0806c4f4
 8009b6c:	0806a478 	.word	0x0806a478
 8009b70:	0806c508 	.word	0x0806c508
 8009b74:	0806c51c 	.word	0x0806c51c
 8009b78:	0806c530 	.word	0x0806c530

08009b7c <_ZN6tflite14DequantizeInitEP13TfLiteContextPKcj>:

namespace tflite {

void* DequantizeInit(TfLiteContext* context, const char* buffer,
                     size_t length) {
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 8009b7c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009b7e:	b10b      	cbz	r3, 8009b84 <_ZN6tflite14DequantizeInitEP13TfLiteContextPKcj+0x8>
  return context->AllocatePersistentBuffer(context, sizeof(DequantizeOpData));
 8009b80:	2120      	movs	r1, #32
 8009b82:	4718      	bx	r3
                     size_t length) {
 8009b84:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 8009b86:	f00c fff1 	bl	8016b6c <abort>
 8009b8a:	bf00      	nop

08009b8c <_ZN6tflite14DequantizeEvalEP13TfLiteContextP10TfLiteNode>:
}

TfLiteStatus DequantizeEval(TfLiteContext* context, TfLiteNode* node) {
 8009b8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
 8009b90:	68cf      	ldr	r7, [r1, #12]
TfLiteStatus DequantizeEval(TfLiteContext* context, TfLiteNode* node) {
 8009b92:	b0ad      	sub	sp, #180	; 0xb4
  TFLITE_DCHECK(node->user_data != nullptr);
 8009b94:	2f00      	cmp	r7, #0
 8009b96:	f000 817c 	beq.w	8009e92 <_ZN6tflite14DequantizeEvalEP13TfLiteContextP10TfLiteNode+0x306>
  DequantizeOpData* data = static_cast<DequantizeOpData*>(node->user_data);

  const TfLiteEvalTensor* input = tflite::micro::GetEvalInput(context, node, 0);
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	460d      	mov	r5, r1
 8009b9e:	4606      	mov	r6, r0
 8009ba0:	f000 fa7a 	bl	800a098 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  TfLiteEvalTensor* output = tflite::micro::GetEvalOutput(context, node, 0);
 8009ba4:	4629      	mov	r1, r5
  const TfLiteEvalTensor* input = tflite::micro::GetEvalInput(context, node, 0);
 8009ba6:	4604      	mov	r4, r0
  TfLiteEvalTensor* output = tflite::micro::GetEvalOutput(context, node, 0);
 8009ba8:	2200      	movs	r2, #0
 8009baa:	4630      	mov	r0, r6
 8009bac:	f000 fa8e 	bl	800a0cc <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>

  // Output type ensured to be kTfLiteFloat32 at the Prepare stage
  TFLITE_DCHECK(output->type == kTfLiteFloat32);
 8009bb0:	7a06      	ldrb	r6, [r0, #8]
 8009bb2:	2e01      	cmp	r6, #1
  TfLiteEvalTensor* output = tflite::micro::GetEvalOutput(context, node, 0);
 8009bb4:	4605      	mov	r5, r0
  TFLITE_DCHECK(output->type == kTfLiteFloat32);
 8009bb6:	f040 816c 	bne.w	8009e92 <_ZN6tflite14DequantizeEvalEP13TfLiteContextP10TfLiteNode+0x306>

  switch (input->type) {
 8009bba:	7a20      	ldrb	r0, [r4, #8]
 8009bbc:	2807      	cmp	r0, #7
 8009bbe:	d013      	beq.n	8009be8 <_ZN6tflite14DequantizeEvalEP13TfLiteContextP10TfLiteNode+0x5c>
 8009bc0:	2809      	cmp	r0, #9
 8009bc2:	f000 80ec 	beq.w	8009d9e <_ZN6tflite14DequantizeEvalEP13TfLiteContextP10TfLiteNode+0x212>
 8009bc6:	2803      	cmp	r0, #3
 8009bc8:	d07d      	beq.n	8009cc6 <_ZN6tflite14DequantizeEvalEP13TfLiteContextP10TfLiteNode+0x13a>
                                tflite::micro::GetTensorData<uint8_t>(input),
                                tflite::micro::GetTensorShape(output),
                                tflite::micro::GetTensorData<float>(output));
      break;
    default:
      MicroPrintf("Input %s, output %s not supported.",
 8009bca:	f7fc fabb 	bl	8006144 <TfLiteTypeGetName>
 8009bce:	9001      	str	r0, [sp, #4]
 8009bd0:	7a28      	ldrb	r0, [r5, #8]
 8009bd2:	f7fc fab7 	bl	8006144 <TfLiteTypeGetName>
 8009bd6:	9901      	ldr	r1, [sp, #4]
 8009bd8:	4602      	mov	r2, r0
 8009bda:	48a3      	ldr	r0, [pc, #652]	; (8009e68 <_ZN6tflite14DequantizeEvalEP13TfLiteContextP10TfLiteNode+0x2dc>)
 8009bdc:	f7ff fdfe 	bl	80097dc <_Z11MicroPrintfPKcz>
                  TfLiteTypeGetName(output->type));
      return kTfLiteError;
  }

  return kTfLiteOk;
}
 8009be0:	4630      	mov	r0, r6
 8009be2:	b02d      	add	sp, #180	; 0xb4
 8009be4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                                tflite::micro::GetTensorShape(input),
 8009be8:	4621      	mov	r1, r4
 8009bea:	a810      	add	r0, sp, #64	; 0x40
 8009bec:	f000 fa7a 	bl	800a0e4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                                tflite::micro::GetTensorShape(output),
 8009bf0:	4629      	mov	r1, r5
 8009bf2:	a817      	add	r0, sp, #92	; 0x5c

// Returns const data for a TfLiteEvalTensor struct that are expected to exist.
template <typename T>
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
  TFLITE_DCHECK(tensor != nullptr);
  return reinterpret_cast<const T*>(tensor->data.raw);
 8009bf4:	6824      	ldr	r4, [r4, #0]
 8009bf6:	f000 fa75 	bl	800a0e4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  int32_t DimensionsCount() const { return size_; }
 8009bfa:	9a10      	ldr	r2, [sp, #64]	; 0x40

// Flat size calculation, checking that dimensions match with one or more other
// arrays.
inline int MatchingFlatSize(const RuntimeShape& shape,
                            const RuntimeShape& check_shape_0) {
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
 8009bfc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
template <typename InputT, typename OutputT>
inline void Dequantize(const tflite::DequantizationParams& op_params,
                       const RuntimeShape& input_shape,
                       const InputT* input_data,
                       const RuntimeShape& output_shape, OutputT* output_data) {
  int32_t zero_point = op_params.zero_point;
 8009bfe:	f8d7 9008 	ldr.w	r9, [r7, #8]
  return reinterpret_cast<T*>(tensor->data.raw);
 8009c02:	682d      	ldr	r5, [r5, #0]
 8009c04:	429a      	cmp	r2, r3
  const double scale = op_params.scale;
 8009c06:	e9d7 6700 	ldrd	r6, r7, [r7]
 8009c0a:	f040 8142 	bne.w	8009e92 <_ZN6tflite14DequantizeEvalEP13TfLiteContextP10TfLiteNode+0x306>
  const int dims_count = shape.DimensionsCount();
  for (int i = 0; i < dims_count; ++i) {
 8009c0e:	2a00      	cmp	r2, #0
 8009c10:	f340 813a 	ble.w	8009e88 <_ZN6tflite14DequantizeEvalEP13TfLiteContextP10TfLiteNode+0x2fc>
    return dims_[i];
 8009c14:	9b11      	ldr	r3, [sp, #68]	; 0x44
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 8009c16:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009c18:	428b      	cmp	r3, r1
 8009c1a:	f040 813a 	bne.w	8009e92 <_ZN6tflite14DequantizeEvalEP13TfLiteContextP10TfLiteNode+0x306>
  for (int i = 0; i < dims_count; ++i) {
 8009c1e:	2a01      	cmp	r2, #1
 8009c20:	d037      	beq.n	8009c92 <_ZN6tflite14DequantizeEvalEP13TfLiteContextP10TfLiteNode+0x106>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 8009c22:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009c24:	9919      	ldr	r1, [sp, #100]	; 0x64
 8009c26:	4288      	cmp	r0, r1
 8009c28:	f040 8133 	bne.w	8009e92 <_ZN6tflite14DequantizeEvalEP13TfLiteContextP10TfLiteNode+0x306>
  for (int i = 0; i < dims_count; ++i) {
 8009c2c:	2a02      	cmp	r2, #2
 8009c2e:	d019      	beq.n	8009c64 <_ZN6tflite14DequantizeEvalEP13TfLiteContextP10TfLiteNode+0xd8>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 8009c30:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8009c32:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009c34:	4288      	cmp	r0, r1
 8009c36:	f040 812c 	bne.w	8009e92 <_ZN6tflite14DequantizeEvalEP13TfLiteContextP10TfLiteNode+0x306>
  for (int i = 0; i < dims_count; ++i) {
 8009c3a:	2a03      	cmp	r2, #3
 8009c3c:	d012      	beq.n	8009c64 <_ZN6tflite14DequantizeEvalEP13TfLiteContextP10TfLiteNode+0xd8>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 8009c3e:	9814      	ldr	r0, [sp, #80]	; 0x50
 8009c40:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8009c42:	4288      	cmp	r0, r1
 8009c44:	f040 8125 	bne.w	8009e92 <_ZN6tflite14DequantizeEvalEP13TfLiteContextP10TfLiteNode+0x306>
  for (int i = 0; i < dims_count; ++i) {
 8009c48:	2a04      	cmp	r2, #4
 8009c4a:	d00b      	beq.n	8009c64 <_ZN6tflite14DequantizeEvalEP13TfLiteContextP10TfLiteNode+0xd8>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 8009c4c:	9815      	ldr	r0, [sp, #84]	; 0x54
 8009c4e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009c50:	4288      	cmp	r0, r1
 8009c52:	f040 811e 	bne.w	8009e92 <_ZN6tflite14DequantizeEvalEP13TfLiteContextP10TfLiteNode+0x306>
  for (int i = 0; i < dims_count; ++i) {
 8009c56:	2a05      	cmp	r2, #5
 8009c58:	d004      	beq.n	8009c64 <_ZN6tflite14DequantizeEvalEP13TfLiteContextP10TfLiteNode+0xd8>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 8009c5a:	9816      	ldr	r0, [sp, #88]	; 0x58
 8009c5c:	991d      	ldr	r1, [sp, #116]	; 0x74
 8009c5e:	4288      	cmp	r0, r1
 8009c60:	f040 8117 	bne.w	8009e92 <_ZN6tflite14DequantizeEvalEP13TfLiteContextP10TfLiteNode+0x306>
  // vector.
  int FlatSize() const {
    int buffer_size = 1;
    const int* dims_data = reinterpret_cast<const int*>(DimsData());
    for (int i = 0; i < size_; i++) {
      buffer_size *= dims_data[i];
 8009c64:	9912      	ldr	r1, [sp, #72]	; 0x48
    for (int i = 0; i < size_; i++) {
 8009c66:	2a02      	cmp	r2, #2
      buffer_size *= dims_data[i];
 8009c68:	fb01 f303 	mul.w	r3, r1, r3
    for (int i = 0; i < size_; i++) {
 8009c6c:	d011      	beq.n	8009c92 <_ZN6tflite14DequantizeEvalEP13TfLiteContextP10TfLiteNode+0x106>
      buffer_size *= dims_data[i];
 8009c6e:	9913      	ldr	r1, [sp, #76]	; 0x4c
    for (int i = 0; i < size_; i++) {
 8009c70:	2a03      	cmp	r2, #3
      buffer_size *= dims_data[i];
 8009c72:	fb01 f303 	mul.w	r3, r1, r3
    for (int i = 0; i < size_; i++) {
 8009c76:	d00c      	beq.n	8009c92 <_ZN6tflite14DequantizeEvalEP13TfLiteContextP10TfLiteNode+0x106>
      buffer_size *= dims_data[i];
 8009c78:	9914      	ldr	r1, [sp, #80]	; 0x50
    for (int i = 0; i < size_; i++) {
 8009c7a:	2a04      	cmp	r2, #4
      buffer_size *= dims_data[i];
 8009c7c:	fb01 f303 	mul.w	r3, r1, r3
    for (int i = 0; i < size_; i++) {
 8009c80:	d007      	beq.n	8009c92 <_ZN6tflite14DequantizeEvalEP13TfLiteContextP10TfLiteNode+0x106>
      buffer_size *= dims_data[i];
 8009c82:	9915      	ldr	r1, [sp, #84]	; 0x54
    for (int i = 0; i < size_; i++) {
 8009c84:	2a05      	cmp	r2, #5
      buffer_size *= dims_data[i];
 8009c86:	fb01 f303 	mul.w	r3, r1, r3
    for (int i = 0; i < size_; i++) {
 8009c8a:	d002      	beq.n	8009c92 <_ZN6tflite14DequantizeEvalEP13TfLiteContextP10TfLiteNode+0x106>
      buffer_size *= dims_data[i];
 8009c8c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009c8e:	fb02 f303 	mul.w	r3, r2, r3
  const int flat_size = MatchingFlatSize(input_shape, output_shape);

  for (int i = 0; i < flat_size; i++) {
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	dd12      	ble.n	8009cbc <_ZN6tflite14DequantizeEvalEP13TfLiteContextP10TfLiteNode+0x130>
 8009c96:	3c02      	subs	r4, #2
 8009c98:	eb04 0843 	add.w	r8, r4, r3, lsl #1
    const int32_t val = input_data[i];
 8009c9c:	f934 0f02 	ldrsh.w	r0, [r4, #2]!
    const OutputT result = static_cast<OutputT>(scale * (val - zero_point));
 8009ca0:	eba0 0009 	sub.w	r0, r0, r9
 8009ca4:	f7f6 fc76 	bl	8000594 <__aeabi_i2d>
 8009ca8:	4632      	mov	r2, r6
 8009caa:	463b      	mov	r3, r7
 8009cac:	f7f6 fcdc 	bl	8000668 <__aeabi_dmul>
 8009cb0:	f7f6 ffb2 	bl	8000c18 <__aeabi_d2f>
  for (int i = 0; i < flat_size; i++) {
 8009cb4:	4544      	cmp	r4, r8
    const OutputT result = static_cast<OutputT>(scale * (val - zero_point));
 8009cb6:	f845 0b04 	str.w	r0, [r5], #4
  for (int i = 0; i < flat_size; i++) {
 8009cba:	d1ef      	bne.n	8009c9c <_ZN6tflite14DequantizeEvalEP13TfLiteContextP10TfLiteNode+0x110>
  return kTfLiteOk;
 8009cbc:	2600      	movs	r6, #0
}
 8009cbe:	4630      	mov	r0, r6
 8009cc0:	b02d      	add	sp, #180	; 0xb4
 8009cc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                                tflite::micro::GetTensorShape(input),
 8009cc6:	4621      	mov	r1, r4
 8009cc8:	a81e      	add	r0, sp, #120	; 0x78
 8009cca:	f000 fa0b 	bl	800a0e4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                                tflite::micro::GetTensorShape(output),
 8009cce:	4629      	mov	r1, r5
 8009cd0:	a825      	add	r0, sp, #148	; 0x94
  return reinterpret_cast<const T*>(tensor->data.raw);
 8009cd2:	6824      	ldr	r4, [r4, #0]
 8009cd4:	f000 fa06 	bl	800a0e4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  int32_t DimensionsCount() const { return size_; }
 8009cd8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
 8009cda:	9b25      	ldr	r3, [sp, #148]	; 0x94
  int32_t zero_point = op_params.zero_point;
 8009cdc:	f8d7 9008 	ldr.w	r9, [r7, #8]
  return reinterpret_cast<T*>(tensor->data.raw);
 8009ce0:	682d      	ldr	r5, [r5, #0]
 8009ce2:	429a      	cmp	r2, r3
  const double scale = op_params.scale;
 8009ce4:	e9d7 6700 	ldrd	r6, r7, [r7]
 8009ce8:	f040 80d3 	bne.w	8009e92 <_ZN6tflite14DequantizeEvalEP13TfLiteContextP10TfLiteNode+0x306>
  for (int i = 0; i < dims_count; ++i) {
 8009cec:	2a00      	cmp	r2, #0
 8009cee:	f340 80ce 	ble.w	8009e8e <_ZN6tflite14DequantizeEvalEP13TfLiteContextP10TfLiteNode+0x302>
    return dims_[i];
 8009cf2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 8009cf4:	9926      	ldr	r1, [sp, #152]	; 0x98
 8009cf6:	4299      	cmp	r1, r3
 8009cf8:	f040 80cb 	bne.w	8009e92 <_ZN6tflite14DequantizeEvalEP13TfLiteContextP10TfLiteNode+0x306>
  for (int i = 0; i < dims_count; ++i) {
 8009cfc:	2a01      	cmp	r2, #1
 8009cfe:	d037      	beq.n	8009d70 <_ZN6tflite14DequantizeEvalEP13TfLiteContextP10TfLiteNode+0x1e4>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 8009d00:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8009d02:	9920      	ldr	r1, [sp, #128]	; 0x80
 8009d04:	4288      	cmp	r0, r1
 8009d06:	f040 80c4 	bne.w	8009e92 <_ZN6tflite14DequantizeEvalEP13TfLiteContextP10TfLiteNode+0x306>
  for (int i = 0; i < dims_count; ++i) {
 8009d0a:	2a02      	cmp	r2, #2
 8009d0c:	d019      	beq.n	8009d42 <_ZN6tflite14DequantizeEvalEP13TfLiteContextP10TfLiteNode+0x1b6>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 8009d0e:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8009d10:	9921      	ldr	r1, [sp, #132]	; 0x84
 8009d12:	4288      	cmp	r0, r1
 8009d14:	f040 80bd 	bne.w	8009e92 <_ZN6tflite14DequantizeEvalEP13TfLiteContextP10TfLiteNode+0x306>
  for (int i = 0; i < dims_count; ++i) {
 8009d18:	2a03      	cmp	r2, #3
 8009d1a:	d012      	beq.n	8009d42 <_ZN6tflite14DequantizeEvalEP13TfLiteContextP10TfLiteNode+0x1b6>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 8009d1c:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8009d1e:	9922      	ldr	r1, [sp, #136]	; 0x88
 8009d20:	4288      	cmp	r0, r1
 8009d22:	f040 80b6 	bne.w	8009e92 <_ZN6tflite14DequantizeEvalEP13TfLiteContextP10TfLiteNode+0x306>
  for (int i = 0; i < dims_count; ++i) {
 8009d26:	2a04      	cmp	r2, #4
 8009d28:	d00b      	beq.n	8009d42 <_ZN6tflite14DequantizeEvalEP13TfLiteContextP10TfLiteNode+0x1b6>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 8009d2a:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8009d2c:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8009d2e:	4288      	cmp	r0, r1
 8009d30:	f040 80af 	bne.w	8009e92 <_ZN6tflite14DequantizeEvalEP13TfLiteContextP10TfLiteNode+0x306>
  for (int i = 0; i < dims_count; ++i) {
 8009d34:	2a05      	cmp	r2, #5
 8009d36:	d004      	beq.n	8009d42 <_ZN6tflite14DequantizeEvalEP13TfLiteContextP10TfLiteNode+0x1b6>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 8009d38:	9824      	ldr	r0, [sp, #144]	; 0x90
 8009d3a:	992b      	ldr	r1, [sp, #172]	; 0xac
 8009d3c:	4288      	cmp	r0, r1
 8009d3e:	f040 80a8 	bne.w	8009e92 <_ZN6tflite14DequantizeEvalEP13TfLiteContextP10TfLiteNode+0x306>
      buffer_size *= dims_data[i];
 8009d42:	9920      	ldr	r1, [sp, #128]	; 0x80
    for (int i = 0; i < size_; i++) {
 8009d44:	2a02      	cmp	r2, #2
      buffer_size *= dims_data[i];
 8009d46:	fb01 f303 	mul.w	r3, r1, r3
    for (int i = 0; i < size_; i++) {
 8009d4a:	d011      	beq.n	8009d70 <_ZN6tflite14DequantizeEvalEP13TfLiteContextP10TfLiteNode+0x1e4>
      buffer_size *= dims_data[i];
 8009d4c:	9921      	ldr	r1, [sp, #132]	; 0x84
    for (int i = 0; i < size_; i++) {
 8009d4e:	2a03      	cmp	r2, #3
      buffer_size *= dims_data[i];
 8009d50:	fb01 f303 	mul.w	r3, r1, r3
    for (int i = 0; i < size_; i++) {
 8009d54:	d00c      	beq.n	8009d70 <_ZN6tflite14DequantizeEvalEP13TfLiteContextP10TfLiteNode+0x1e4>
      buffer_size *= dims_data[i];
 8009d56:	9922      	ldr	r1, [sp, #136]	; 0x88
    for (int i = 0; i < size_; i++) {
 8009d58:	2a04      	cmp	r2, #4
      buffer_size *= dims_data[i];
 8009d5a:	fb01 f303 	mul.w	r3, r1, r3
    for (int i = 0; i < size_; i++) {
 8009d5e:	d007      	beq.n	8009d70 <_ZN6tflite14DequantizeEvalEP13TfLiteContextP10TfLiteNode+0x1e4>
      buffer_size *= dims_data[i];
 8009d60:	9923      	ldr	r1, [sp, #140]	; 0x8c
    for (int i = 0; i < size_; i++) {
 8009d62:	2a05      	cmp	r2, #5
      buffer_size *= dims_data[i];
 8009d64:	fb01 f303 	mul.w	r3, r1, r3
    for (int i = 0; i < size_; i++) {
 8009d68:	d002      	beq.n	8009d70 <_ZN6tflite14DequantizeEvalEP13TfLiteContextP10TfLiteNode+0x1e4>
      buffer_size *= dims_data[i];
 8009d6a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009d6c:	fb02 f303 	mul.w	r3, r2, r3
  for (int i = 0; i < flat_size; i++) {
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	dda3      	ble.n	8009cbc <_ZN6tflite14DequantizeEvalEP13TfLiteContextP10TfLiteNode+0x130>
 8009d74:	3c01      	subs	r4, #1
 8009d76:	eb04 0803 	add.w	r8, r4, r3
    const int32_t val = input_data[i];
 8009d7a:	f814 0f01 	ldrb.w	r0, [r4, #1]!
    const OutputT result = static_cast<OutputT>(scale * (val - zero_point));
 8009d7e:	eba0 0009 	sub.w	r0, r0, r9
 8009d82:	f7f6 fc07 	bl	8000594 <__aeabi_i2d>
 8009d86:	4632      	mov	r2, r6
 8009d88:	463b      	mov	r3, r7
 8009d8a:	f7f6 fc6d 	bl	8000668 <__aeabi_dmul>
 8009d8e:	f7f6 ff43 	bl	8000c18 <__aeabi_d2f>
  for (int i = 0; i < flat_size; i++) {
 8009d92:	45a0      	cmp	r8, r4
    const OutputT result = static_cast<OutputT>(scale * (val - zero_point));
 8009d94:	f845 0b04 	str.w	r0, [r5], #4
  for (int i = 0; i < flat_size; i++) {
 8009d98:	d1ef      	bne.n	8009d7a <_ZN6tflite14DequantizeEvalEP13TfLiteContextP10TfLiteNode+0x1ee>
  return kTfLiteOk;
 8009d9a:	2600      	movs	r6, #0
 8009d9c:	e78f      	b.n	8009cbe <_ZN6tflite14DequantizeEvalEP13TfLiteContextP10TfLiteNode+0x132>
                                tflite::micro::GetTensorShape(input),
 8009d9e:	4621      	mov	r1, r4
 8009da0:	a802      	add	r0, sp, #8
 8009da2:	f000 f99f 	bl	800a0e4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                                tflite::micro::GetTensorShape(output),
 8009da6:	4629      	mov	r1, r5
 8009da8:	a809      	add	r0, sp, #36	; 0x24
  return reinterpret_cast<const T*>(tensor->data.raw);
 8009daa:	6824      	ldr	r4, [r4, #0]
 8009dac:	f000 f99a 	bl	800a0e4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  int32_t DimensionsCount() const { return size_; }
 8009db0:	9a02      	ldr	r2, [sp, #8]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
 8009db2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  int32_t zero_point = op_params.zero_point;
 8009db4:	f8d7 9008 	ldr.w	r9, [r7, #8]
  return reinterpret_cast<T*>(tensor->data.raw);
 8009db8:	682d      	ldr	r5, [r5, #0]
 8009dba:	429a      	cmp	r2, r3
  const double scale = op_params.scale;
 8009dbc:	e9d7 6700 	ldrd	r6, r7, [r7]
 8009dc0:	d167      	bne.n	8009e92 <_ZN6tflite14DequantizeEvalEP13TfLiteContextP10TfLiteNode+0x306>
  for (int i = 0; i < dims_count; ++i) {
 8009dc2:	2a00      	cmp	r2, #0
 8009dc4:	dd52      	ble.n	8009e6c <_ZN6tflite14DequantizeEvalEP13TfLiteContextP10TfLiteNode+0x2e0>
    return dims_[i];
 8009dc6:	9b03      	ldr	r3, [sp, #12]
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 8009dc8:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009dca:	428b      	cmp	r3, r1
 8009dcc:	d161      	bne.n	8009e92 <_ZN6tflite14DequantizeEvalEP13TfLiteContextP10TfLiteNode+0x306>
  for (int i = 0; i < dims_count; ++i) {
 8009dce:	2a01      	cmp	r2, #1
 8009dd0:	d032      	beq.n	8009e38 <_ZN6tflite14DequantizeEvalEP13TfLiteContextP10TfLiteNode+0x2ac>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 8009dd2:	9804      	ldr	r0, [sp, #16]
 8009dd4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009dd6:	4288      	cmp	r0, r1
 8009dd8:	d15b      	bne.n	8009e92 <_ZN6tflite14DequantizeEvalEP13TfLiteContextP10TfLiteNode+0x306>
  for (int i = 0; i < dims_count; ++i) {
 8009dda:	2a02      	cmp	r2, #2
 8009ddc:	d015      	beq.n	8009e0a <_ZN6tflite14DequantizeEvalEP13TfLiteContextP10TfLiteNode+0x27e>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 8009dde:	9805      	ldr	r0, [sp, #20]
 8009de0:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009de2:	4288      	cmp	r0, r1
 8009de4:	d155      	bne.n	8009e92 <_ZN6tflite14DequantizeEvalEP13TfLiteContextP10TfLiteNode+0x306>
  for (int i = 0; i < dims_count; ++i) {
 8009de6:	2a03      	cmp	r2, #3
 8009de8:	d00f      	beq.n	8009e0a <_ZN6tflite14DequantizeEvalEP13TfLiteContextP10TfLiteNode+0x27e>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 8009dea:	9806      	ldr	r0, [sp, #24]
 8009dec:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009dee:	4288      	cmp	r0, r1
 8009df0:	d14f      	bne.n	8009e92 <_ZN6tflite14DequantizeEvalEP13TfLiteContextP10TfLiteNode+0x306>
  for (int i = 0; i < dims_count; ++i) {
 8009df2:	2a04      	cmp	r2, #4
 8009df4:	d009      	beq.n	8009e0a <_ZN6tflite14DequantizeEvalEP13TfLiteContextP10TfLiteNode+0x27e>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 8009df6:	9807      	ldr	r0, [sp, #28]
 8009df8:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009dfa:	4288      	cmp	r0, r1
 8009dfc:	d149      	bne.n	8009e92 <_ZN6tflite14DequantizeEvalEP13TfLiteContextP10TfLiteNode+0x306>
  for (int i = 0; i < dims_count; ++i) {
 8009dfe:	2a05      	cmp	r2, #5
 8009e00:	d003      	beq.n	8009e0a <_ZN6tflite14DequantizeEvalEP13TfLiteContextP10TfLiteNode+0x27e>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 8009e02:	9808      	ldr	r0, [sp, #32]
 8009e04:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009e06:	4288      	cmp	r0, r1
 8009e08:	d143      	bne.n	8009e92 <_ZN6tflite14DequantizeEvalEP13TfLiteContextP10TfLiteNode+0x306>
      buffer_size *= dims_data[i];
 8009e0a:	9904      	ldr	r1, [sp, #16]
    for (int i = 0; i < size_; i++) {
 8009e0c:	2a02      	cmp	r2, #2
      buffer_size *= dims_data[i];
 8009e0e:	fb01 f303 	mul.w	r3, r1, r3
    for (int i = 0; i < size_; i++) {
 8009e12:	d011      	beq.n	8009e38 <_ZN6tflite14DequantizeEvalEP13TfLiteContextP10TfLiteNode+0x2ac>
      buffer_size *= dims_data[i];
 8009e14:	9905      	ldr	r1, [sp, #20]
    for (int i = 0; i < size_; i++) {
 8009e16:	2a03      	cmp	r2, #3
      buffer_size *= dims_data[i];
 8009e18:	fb01 f303 	mul.w	r3, r1, r3
    for (int i = 0; i < size_; i++) {
 8009e1c:	d00c      	beq.n	8009e38 <_ZN6tflite14DequantizeEvalEP13TfLiteContextP10TfLiteNode+0x2ac>
      buffer_size *= dims_data[i];
 8009e1e:	9906      	ldr	r1, [sp, #24]
    for (int i = 0; i < size_; i++) {
 8009e20:	2a04      	cmp	r2, #4
      buffer_size *= dims_data[i];
 8009e22:	fb01 f303 	mul.w	r3, r1, r3
    for (int i = 0; i < size_; i++) {
 8009e26:	d007      	beq.n	8009e38 <_ZN6tflite14DequantizeEvalEP13TfLiteContextP10TfLiteNode+0x2ac>
      buffer_size *= dims_data[i];
 8009e28:	9907      	ldr	r1, [sp, #28]
    for (int i = 0; i < size_; i++) {
 8009e2a:	2a05      	cmp	r2, #5
      buffer_size *= dims_data[i];
 8009e2c:	fb01 f303 	mul.w	r3, r1, r3
    for (int i = 0; i < size_; i++) {
 8009e30:	d002      	beq.n	8009e38 <_ZN6tflite14DequantizeEvalEP13TfLiteContextP10TfLiteNode+0x2ac>
      buffer_size *= dims_data[i];
 8009e32:	9a08      	ldr	r2, [sp, #32]
 8009e34:	fb02 f303 	mul.w	r3, r2, r3
  for (int i = 0; i < flat_size; i++) {
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	f77f af3f 	ble.w	8009cbc <_ZN6tflite14DequantizeEvalEP13TfLiteContextP10TfLiteNode+0x130>
 8009e3e:	3c01      	subs	r4, #1
 8009e40:	eb04 0803 	add.w	r8, r4, r3
    const int32_t val = input_data[i];
 8009e44:	f914 0f01 	ldrsb.w	r0, [r4, #1]!
    const OutputT result = static_cast<OutputT>(scale * (val - zero_point));
 8009e48:	eba0 0009 	sub.w	r0, r0, r9
 8009e4c:	f7f6 fba2 	bl	8000594 <__aeabi_i2d>
 8009e50:	4632      	mov	r2, r6
 8009e52:	463b      	mov	r3, r7
 8009e54:	f7f6 fc08 	bl	8000668 <__aeabi_dmul>
 8009e58:	f7f6 fede 	bl	8000c18 <__aeabi_d2f>
  for (int i = 0; i < flat_size; i++) {
 8009e5c:	4544      	cmp	r4, r8
    const OutputT result = static_cast<OutputT>(scale * (val - zero_point));
 8009e5e:	f845 0b04 	str.w	r0, [r5], #4
  for (int i = 0; i < flat_size; i++) {
 8009e62:	d1ef      	bne.n	8009e44 <_ZN6tflite14DequantizeEvalEP13TfLiteContextP10TfLiteNode+0x2b8>
  return kTfLiteOk;
 8009e64:	2600      	movs	r6, #0
 8009e66:	e72a      	b.n	8009cbe <_ZN6tflite14DequantizeEvalEP13TfLiteContextP10TfLiteNode+0x132>
 8009e68:	0806c558 	.word	0x0806c558
    const int32_t val = input_data[i];
 8009e6c:	f994 0000 	ldrsb.w	r0, [r4]
    const OutputT result = static_cast<OutputT>(scale * (val - zero_point));
 8009e70:	eba0 0009 	sub.w	r0, r0, r9
 8009e74:	f7f6 fb8e 	bl	8000594 <__aeabi_i2d>
 8009e78:	4632      	mov	r2, r6
 8009e7a:	463b      	mov	r3, r7
 8009e7c:	f7f6 fbf4 	bl	8000668 <__aeabi_dmul>
 8009e80:	f7f6 feca 	bl	8000c18 <__aeabi_d2f>
 8009e84:	6028      	str	r0, [r5, #0]
  for (int i = 0; i < flat_size; i++) {
 8009e86:	e719      	b.n	8009cbc <_ZN6tflite14DequantizeEvalEP13TfLiteContextP10TfLiteNode+0x130>
    const int32_t val = input_data[i];
 8009e88:	f9b4 0000 	ldrsh.w	r0, [r4]
 8009e8c:	e7f0      	b.n	8009e70 <_ZN6tflite14DequantizeEvalEP13TfLiteContextP10TfLiteNode+0x2e4>
 8009e8e:	7820      	ldrb	r0, [r4, #0]
 8009e90:	e7ee      	b.n	8009e70 <_ZN6tflite14DequantizeEvalEP13TfLiteContextP10TfLiteNode+0x2e4>
  TFLITE_DCHECK(node->user_data != nullptr);
 8009e92:	f00c fe6b 	bl	8016b6c <abort>
 8009e96:	bf00      	nop

08009e98 <_ZN6tflite19Register_DEQUANTIZEEv>:

TFLMRegistration Register_DEQUANTIZE() {
 8009e98:	b510      	push	{r4, lr}
  return tflite::micro::RegisterOp(DequantizeInit, DequantizePrepare,
 8009e9a:	2100      	movs	r1, #0
TFLMRegistration Register_DEQUANTIZE() {
 8009e9c:	b082      	sub	sp, #8
  return tflite::micro::RegisterOp(DequantizeInit, DequantizePrepare,
 8009e9e:	e9cd 1100 	strd	r1, r1, [sp]
 8009ea2:	4b04      	ldr	r3, [pc, #16]	; (8009eb4 <_ZN6tflite19Register_DEQUANTIZEEv+0x1c>)
 8009ea4:	4a04      	ldr	r2, [pc, #16]	; (8009eb8 <_ZN6tflite19Register_DEQUANTIZEEv+0x20>)
 8009ea6:	4905      	ldr	r1, [pc, #20]	; (8009ebc <_ZN6tflite19Register_DEQUANTIZEEv+0x24>)
TFLMRegistration Register_DEQUANTIZE() {
 8009ea8:	4604      	mov	r4, r0
  return tflite::micro::RegisterOp(DequantizeInit, DequantizePrepare,
 8009eaa:	f000 f8e9 	bl	800a080 <_ZN6tflite5micro10RegisterOpEPFPvP13TfLiteContextPKcjEPF12TfLiteStatusS3_P10TfLiteNodeESC_PFvS3_S1_ESE_>
                                   DequantizeEval);
}
 8009eae:	4620      	mov	r0, r4
 8009eb0:	b002      	add	sp, #8
 8009eb2:	bd10      	pop	{r4, pc}
 8009eb4:	08009b8d 	.word	0x08009b8d
 8009eb8:	08009ec1 	.word	0x08009ec1
 8009ebc:	08009b7d 	.word	0x08009b7d

08009ec0 <_ZN6tflite17DequantizePrepareEP13TfLiteContextP10TfLiteNode>:
#include "tensorflow/lite/micro/kernels/dequantize.h"
#include "tensorflow/lite/micro/kernels/kernel_util.h"

namespace tflite {

TfLiteStatus DequantizePrepare(TfLiteContext* context, TfLiteNode* node) {
 8009ec0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
 8009ec4:	68ce      	ldr	r6, [r1, #12]
TfLiteStatus DequantizePrepare(TfLiteContext* context, TfLiteNode* node) {
 8009ec6:	b085      	sub	sp, #20
  TFLITE_DCHECK(node->user_data != nullptr);
 8009ec8:	2e00      	cmp	r6, #0
 8009eca:	d07e      	beq.n	8009fca <_ZN6tflite17DequantizePrepareEP13TfLiteContextP10TfLiteNode+0x10a>
inline int SizeOfDimension(const TfLiteTensor* t, int dim) {
  return t->dims->data[dim];
}

inline int NumInputs(const TfLiteNode* node) {
  return node->inputs == nullptr ? 0 : node->inputs->size;
 8009ecc:	680b      	ldr	r3, [r1, #0]
 8009ece:	460c      	mov	r4, r1
 8009ed0:	4605      	mov	r5, r0
 8009ed2:	b113      	cbz	r3, 8009eda <_ZN6tflite17DequantizePrepareEP13TfLiteContextP10TfLiteNode+0x1a>
 8009ed4:	681b      	ldr	r3, [r3, #0]
  DequantizeOpData* data = static_cast<DequantizeOpData*>(node->user_data);

  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
 8009ed6:	2b01      	cmp	r3, #1
 8009ed8:	d010      	beq.n	8009efc <_ZN6tflite17DequantizePrepareEP13TfLiteContextP10TfLiteNode+0x3c>
 8009eda:	2401      	movs	r4, #1
 8009edc:	696e      	ldr	r6, [r5, #20]
 8009ede:	4a3c      	ldr	r2, [pc, #240]	; (8009fd0 <_ZN6tflite17DequantizePrepareEP13TfLiteContextP10TfLiteNode+0x110>)
 8009ee0:	9201      	str	r2, [sp, #4]
 8009ee2:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009ee6:	4b3b      	ldr	r3, [pc, #236]	; (8009fd4 <_ZN6tflite17DequantizePrepareEP13TfLiteContextP10TfLiteNode+0x114>)
 8009ee8:	9300      	str	r3, [sp, #0]
 8009eea:	4628      	mov	r0, r5
 8009eec:	4a3a      	ldr	r2, [pc, #232]	; (8009fd8 <_ZN6tflite17DequantizePrepareEP13TfLiteContextP10TfLiteNode+0x118>)
 8009eee:	493b      	ldr	r1, [pc, #236]	; (8009fdc <_ZN6tflite17DequantizePrepareEP13TfLiteContextP10TfLiteNode+0x11c>)
 8009ef0:	2320      	movs	r3, #32
 8009ef2:	47b0      	blx	r6
 8009ef4:	4620      	mov	r0, r4

  micro_context->DeallocateTempTfLiteTensor(input);
  micro_context->DeallocateTempTfLiteTensor(output);

  return kTfLiteOk;
}
 8009ef6:	b005      	add	sp, #20
 8009ef8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
}
inline int NumOutputs(const TfLiteNode* node) {
  return node->outputs == nullptr ? 0 : node->outputs->size;
 8009efc:	684f      	ldr	r7, [r1, #4]
 8009efe:	b117      	cbz	r7, 8009f06 <_ZN6tflite17DequantizePrepareEP13TfLiteContextP10TfLiteNode+0x46>
 8009f00:	683f      	ldr	r7, [r7, #0]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 8009f02:	2f01      	cmp	r7, #1
 8009f04:	d010      	beq.n	8009f28 <_ZN6tflite17DequantizePrepareEP13TfLiteContextP10TfLiteNode+0x68>
 8009f06:	4b32      	ldr	r3, [pc, #200]	; (8009fd0 <_ZN6tflite17DequantizePrepareEP13TfLiteContextP10TfLiteNode+0x110>)
 8009f08:	696e      	ldr	r6, [r5, #20]
 8009f0a:	9301      	str	r3, [sp, #4]
 8009f0c:	2401      	movs	r4, #1
 8009f0e:	4b34      	ldr	r3, [pc, #208]	; (8009fe0 <_ZN6tflite17DequantizePrepareEP13TfLiteContextP10TfLiteNode+0x120>)
 8009f10:	9300      	str	r3, [sp, #0]
 8009f12:	4628      	mov	r0, r5
 8009f14:	e9cd 7402 	strd	r7, r4, [sp, #8]
 8009f18:	4a2f      	ldr	r2, [pc, #188]	; (8009fd8 <_ZN6tflite17DequantizePrepareEP13TfLiteContextP10TfLiteNode+0x118>)
 8009f1a:	4930      	ldr	r1, [pc, #192]	; (8009fdc <_ZN6tflite17DequantizePrepareEP13TfLiteContextP10TfLiteNode+0x11c>)
 8009f1c:	2321      	movs	r3, #33	; 0x21
 8009f1e:	47b0      	blx	r6
 8009f20:	4620      	mov	r0, r4
}
 8009f22:	b005      	add	sp, #20
 8009f24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009f28:	f8d0 900c 	ldr.w	r9, [r0, #12]
  TfLiteTensor* input = micro_context->AllocateTempInputTensor(node, 0);
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	4648      	mov	r0, r9
 8009f30:	f7fe fbf4 	bl	800871c <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
 8009f34:	4680      	mov	r8, r0
 8009f36:	b350      	cbz	r0, 8009f8e <_ZN6tflite17DequantizePrepareEP13TfLiteContextP10TfLiteNode+0xce>
  TfLiteTensor* output = micro_context->AllocateTempOutputTensor(node, 0);
 8009f38:	4621      	mov	r1, r4
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	4648      	mov	r0, r9
 8009f3e:	f7fe fbfd 	bl	800873c <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
 8009f42:	4604      	mov	r4, r0
 8009f44:	b188      	cbz	r0, 8009f6a <_ZN6tflite17DequantizePrepareEP13TfLiteContextP10TfLiteNode+0xaa>
  TF_LITE_ENSURE(context, input->type == kTfLiteInt8 ||
 8009f46:	f898 301c 	ldrb.w	r3, [r8, #28]
 8009f4a:	2b09      	cmp	r3, #9
 8009f4c:	d012      	beq.n	8009f74 <_ZN6tflite17DequantizePrepareEP13TfLiteContextP10TfLiteNode+0xb4>
 8009f4e:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
 8009f52:	2b03      	cmp	r3, #3
 8009f54:	d00e      	beq.n	8009f74 <_ZN6tflite17DequantizePrepareEP13TfLiteContextP10TfLiteNode+0xb4>
 8009f56:	4b23      	ldr	r3, [pc, #140]	; (8009fe4 <_ZN6tflite17DequantizePrepareEP13TfLiteContextP10TfLiteNode+0x124>)
 8009f58:	696c      	ldr	r4, [r5, #20]
 8009f5a:	9300      	str	r3, [sp, #0]
 8009f5c:	232b      	movs	r3, #43	; 0x2b
 8009f5e:	4628      	mov	r0, r5
 8009f60:	4a1d      	ldr	r2, [pc, #116]	; (8009fd8 <_ZN6tflite17DequantizePrepareEP13TfLiteContextP10TfLiteNode+0x118>)
 8009f62:	4921      	ldr	r1, [pc, #132]	; (8009fe8 <_ZN6tflite17DequantizePrepareEP13TfLiteContextP10TfLiteNode+0x128>)
 8009f64:	47a0      	blx	r4
 8009f66:	4638      	mov	r0, r7
 8009f68:	e7c5      	b.n	8009ef6 <_ZN6tflite17DequantizePrepareEP13TfLiteContextP10TfLiteNode+0x36>
  TF_LITE_ENSURE(context, output != nullptr);
 8009f6a:	4b20      	ldr	r3, [pc, #128]	; (8009fec <_ZN6tflite17DequantizePrepareEP13TfLiteContextP10TfLiteNode+0x12c>)
 8009f6c:	696c      	ldr	r4, [r5, #20]
 8009f6e:	9300      	str	r3, [sp, #0]
 8009f70:	2329      	movs	r3, #41	; 0x29
 8009f72:	e7f4      	b.n	8009f5e <_ZN6tflite17DequantizePrepareEP13TfLiteContextP10TfLiteNode+0x9e>
  TF_LITE_ENSURE(context, output->type == kTfLiteFloat32);
 8009f74:	7f23      	ldrb	r3, [r4, #28]
 8009f76:	2b01      	cmp	r3, #1
 8009f78:	d00e      	beq.n	8009f98 <_ZN6tflite17DequantizePrepareEP13TfLiteContextP10TfLiteNode+0xd8>
 8009f7a:	4b1d      	ldr	r3, [pc, #116]	; (8009ff0 <_ZN6tflite17DequantizePrepareEP13TfLiteContextP10TfLiteNode+0x130>)
 8009f7c:	696c      	ldr	r4, [r5, #20]
 8009f7e:	4a16      	ldr	r2, [pc, #88]	; (8009fd8 <_ZN6tflite17DequantizePrepareEP13TfLiteContextP10TfLiteNode+0x118>)
 8009f80:	9300      	str	r3, [sp, #0]
 8009f82:	4628      	mov	r0, r5
 8009f84:	4918      	ldr	r1, [pc, #96]	; (8009fe8 <_ZN6tflite17DequantizePrepareEP13TfLiteContextP10TfLiteNode+0x128>)
 8009f86:	232e      	movs	r3, #46	; 0x2e
 8009f88:	47a0      	blx	r4
 8009f8a:	2001      	movs	r0, #1
 8009f8c:	e7b3      	b.n	8009ef6 <_ZN6tflite17DequantizePrepareEP13TfLiteContextP10TfLiteNode+0x36>
  TF_LITE_ENSURE(context, input != nullptr);
 8009f8e:	4b19      	ldr	r3, [pc, #100]	; (8009ff4 <_ZN6tflite17DequantizePrepareEP13TfLiteContextP10TfLiteNode+0x134>)
 8009f90:	696c      	ldr	r4, [r5, #20]
 8009f92:	9300      	str	r3, [sp, #0]
 8009f94:	2327      	movs	r3, #39	; 0x27
 8009f96:	e7e2      	b.n	8009f5e <_ZN6tflite17DequantizePrepareEP13TfLiteContextP10TfLiteNode+0x9e>
  data->quantization_params.zero_point = input->params.zero_point;
 8009f98:	f8d8 300c 	ldr.w	r3, [r8, #12]
  data->quantization_params.scale = static_cast<double>(input->params.scale);
 8009f9c:	f8d8 0008 	ldr.w	r0, [r8, #8]
  data->quantization_params.zero_point = input->params.zero_point;
 8009fa0:	60b3      	str	r3, [r6, #8]
  data->quantization_params.scale = static_cast<double>(input->params.scale);
 8009fa2:	f7f6 fb09 	bl	80005b8 <__aeabi_f2d>
  data->output_zero_point = output->params.zero_point;
 8009fa6:	68e3      	ldr	r3, [r4, #12]
 8009fa8:	61b3      	str	r3, [r6, #24]
  micro_context->DeallocateTempTfLiteTensor(input);
 8009faa:	f8d9 3000 	ldr.w	r3, [r9]
  data->quantization_params.scale = static_cast<double>(input->params.scale);
 8009fae:	e9c6 0100 	strd	r0, r1, [r6]
  micro_context->DeallocateTempTfLiteTensor(input);
 8009fb2:	699b      	ldr	r3, [r3, #24]
 8009fb4:	4641      	mov	r1, r8
 8009fb6:	4648      	mov	r0, r9
 8009fb8:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(output);
 8009fba:	f8d9 3000 	ldr.w	r3, [r9]
 8009fbe:	4648      	mov	r0, r9
 8009fc0:	699b      	ldr	r3, [r3, #24]
 8009fc2:	4621      	mov	r1, r4
 8009fc4:	4798      	blx	r3
  return kTfLiteOk;
 8009fc6:	2000      	movs	r0, #0
 8009fc8:	e795      	b.n	8009ef6 <_ZN6tflite17DequantizePrepareEP13TfLiteContextP10TfLiteNode+0x36>
  TFLITE_DCHECK(node->user_data != nullptr);
 8009fca:	f00c fdcf 	bl	8016b6c <abort>
 8009fce:	bf00      	nop
 8009fd0:	0806c7dc 	.word	0x0806c7dc
 8009fd4:	0806c5bc 	.word	0x0806c5bc
 8009fd8:	0806c57c 	.word	0x0806c57c
 8009fdc:	0806a478 	.word	0x0806a478
 8009fe0:	0806c5cc 	.word	0x0806c5cc
 8009fe4:	0806c5e0 	.word	0x0806c5e0
 8009fe8:	0806a3f0 	.word	0x0806a3f0
 8009fec:	0806c530 	.word	0x0806c530
 8009ff0:	0806c63c 	.word	0x0806c63c
 8009ff4:	0806c508 	.word	0x0806c508

08009ff8 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>:

TfLiteStatus CalculateOpDataFullyConnected(
    TfLiteContext* context, TfLiteFusedActivation activation,
    TfLiteType data_type, const TfLiteTensor* input, const TfLiteTensor* filter,
    const TfLiteTensor* bias, TfLiteTensor* output,
    OpDataFullyConnected* data) {
 8009ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ffc:	b084      	sub	sp, #16
  if (data_type != kTfLiteFloat32) {
 8009ffe:	2a01      	cmp	r2, #1
    OpDataFullyConnected* data) {
 800a000:	9d0d      	ldr	r5, [sp, #52]	; 0x34
  if (data_type != kTfLiteFloat32) {
 800a002:	d104      	bne.n	800a00e <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x16>

    return CalculateActivationRangeQuantized(context, activation, output,
                                             &data->output_activation_min,
                                             &data->output_activation_max);
  }
  return kTfLiteOk;
 800a004:	2400      	movs	r4, #0
}
 800a006:	4620      	mov	r0, r4
 800a008:	b004      	add	sp, #16
 800a00a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    double real_multiplier = 0.0;
 800a00e:	ed9f 7b1a 	vldr	d7, [pc, #104]	; 800a078 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x80>
 800a012:	461e      	mov	r6, r3
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 800a014:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a016:	9300      	str	r3, [sp, #0]
 800a018:	ab02      	add	r3, sp, #8
 800a01a:	9301      	str	r3, [sp, #4]
 800a01c:	4688      	mov	r8, r1
 800a01e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a022:	4631      	mov	r1, r6
    double real_multiplier = 0.0;
 800a024:	ed8d 7b02 	vstr	d7, [sp, #8]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 800a028:	4607      	mov	r7, r0
 800a02a:	f7fc f955 	bl	80062d8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
 800a02e:	4604      	mov	r4, r0
 800a030:	2800      	cmp	r0, #0
 800a032:	d1e8      	bne.n	800a006 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0xe>
    QuantizeMultiplier(real_multiplier, &data->output_multiplier,
 800a034:	ed9d 0b02 	vldr	d0, [sp, #8]
 800a038:	1d29      	adds	r1, r5, #4
 800a03a:	4628      	mov	r0, r5
 800a03c:	f7fc f8f2 	bl	8006224 <_ZN6tflite18QuantizeMultiplierEdPlPi>
    TFLITE_DCHECK(filter->params.zero_point == 0);
 800a040:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a042:	68db      	ldr	r3, [r3, #12]
 800a044:	b9a3      	cbnz	r3, 800a070 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x78>
    data->input_zero_point = input->params.zero_point;
 800a046:	68f3      	ldr	r3, [r6, #12]
 800a048:	616b      	str	r3, [r5, #20]
    data->output_zero_point = output->params.zero_point;
 800a04a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    return CalculateActivationRangeQuantized(context, activation, output,
 800a04c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    data->output_zero_point = output->params.zero_point;
 800a04e:	68db      	ldr	r3, [r3, #12]
 800a050:	e9c5 4306 	strd	r4, r3, [r5, #24]
    return CalculateActivationRangeQuantized(context, activation, output,
 800a054:	f105 030c 	add.w	r3, r5, #12
 800a058:	9300      	str	r3, [sp, #0]
 800a05a:	4641      	mov	r1, r8
 800a05c:	f105 0308 	add.w	r3, r5, #8
 800a060:	4638      	mov	r0, r7
 800a062:	f7fc f9c1 	bl	80063e8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 800a066:	4604      	mov	r4, r0
}
 800a068:	4620      	mov	r0, r4
 800a06a:	b004      	add	sp, #16
 800a06c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    TFLITE_DCHECK(filter->params.zero_point == 0);
 800a070:	f00c fd7c 	bl	8016b6c <abort>
 800a074:	f3af 8000 	nop.w
	...

0800a080 <_ZN6tflite5micro10RegisterOpEPFPvP13TfLiteContextPKcjEPF12TfLiteStatusS3_P10TfLiteNodeESC_PFvS3_S1_ESE_>:
          /*free=*/free,
          /*prepare=*/prepare,
          /*invoke=*/invoke,
          /*reset*/ reset,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr};
 800a080:	e9c0 2302 	strd	r2, r3, [r0, #8]
    void (*reset)(TfLiteContext* context, void* buffer)) {
 800a084:	e9dd 2300 	ldrd	r2, r3, [sp]
          /*custom_name=*/nullptr};
 800a088:	6001      	str	r1, [r0, #0]
 800a08a:	2100      	movs	r1, #0
 800a08c:	e9c0 1105 	strd	r1, r1, [r0, #20]
 800a090:	6042      	str	r2, [r0, #4]
 800a092:	6103      	str	r3, [r0, #16]
}
 800a094:	4770      	bx	lr
 800a096:	bf00      	nop

0800a098 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>:
  return context->GetEvalTensor(context, node->inputs->data[index]);
}

// Returns the TfLiteEvalTensor struct for a given input index in a node.
const TfLiteEvalTensor* GetEvalInput(const TfLiteContext* context,
                                     const TfLiteNode* node, int index) {
 800a098:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context != nullptr);
 800a09a:	b1a8      	cbz	r0, 800a0c8 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x30>
  TFLITE_DCHECK(node != nullptr);
 800a09c:	b1a1      	cbz	r1, 800a0c8 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x30>
      context, index, node->inputs->size, node->inputs->data);
 800a09e:	6809      	ldr	r1, [r1, #0]
  const int tensor_index = ValidateTensorIndexing(
 800a0a0:	468c      	mov	ip, r1
  if (index >= 0 && index < max_size) {
 800a0a2:	2a00      	cmp	r2, #0
  const int tensor_index = ValidateTensorIndexing(
 800a0a4:	f85c 4b04 	ldr.w	r4, [ip], #4
  if (index >= 0 && index < max_size) {
 800a0a8:	db0c      	blt.n	800a0c4 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x2c>
 800a0aa:	42a2      	cmp	r2, r4
 800a0ac:	da0a      	bge.n	800a0c4 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x2c>
  if (tensor_index < 0) {
 800a0ae:	f85c 4022 	ldr.w	r4, [ip, r2, lsl #2]
 800a0b2:	2c00      	cmp	r4, #0
 800a0b4:	db06      	blt.n	800a0c4 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x2c>
  return context->GetEvalTensor(context, node->inputs->data[index]);
 800a0b6:	eb01 0182 	add.w	r1, r1, r2, lsl #2
  return GetMutableEvalInput(context, node, index);
}
 800a0ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return context->GetEvalTensor(context, node->inputs->data[index]);
 800a0be:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800a0c0:	6849      	ldr	r1, [r1, #4]
 800a0c2:	4718      	bx	r3
}
 800a0c4:	2000      	movs	r0, #0
 800a0c6:	bd10      	pop	{r4, pc}
  TFLITE_DCHECK(context != nullptr);
 800a0c8:	f00c fd50 	bl	8016b6c <abort>

0800a0cc <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given output index in a node.
TfLiteEvalTensor* GetEvalOutput(const TfLiteContext* context,
                                const TfLiteNode* node, int index) {
  TFLITE_DCHECK(context != nullptr);
 800a0cc:	b130      	cbz	r0, 800a0dc <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x10>
  TFLITE_DCHECK(node != nullptr);
 800a0ce:	b129      	cbz	r1, 800a0dc <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x10>
  return context->GetEvalTensor(context, node->outputs->data[index]);
 800a0d0:	6849      	ldr	r1, [r1, #4]
 800a0d2:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800a0d4:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800a0d8:	6851      	ldr	r1, [r2, #4]
 800a0da:	4718      	bx	r3
                                const TfLiteNode* node, int index) {
 800a0dc:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context != nullptr);
 800a0de:	f00c fd45 	bl	8016b6c <abort>
 800a0e2:	bf00      	nop

0800a0e4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>:
  TFLITE_DCHECK(input1 != nullptr);
  TFLITE_DCHECK(input2 != nullptr);
  return TfLiteIntArrayEqual(input1->dims, input2->dims);
}

const RuntimeShape GetTensorShape(const TfLiteEvalTensor* tensor) {
 800a0e4:	b510      	push	{r4, lr}
 800a0e6:	4604      	mov	r4, r0
  if (tensor == nullptr || tensor->dims == nullptr) {
 800a0e8:	b161      	cbz	r1, 800a104 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x20>
 800a0ea:	6849      	ldr	r1, [r1, #4]
 800a0ec:	b151      	cbz	r1, 800a104 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x20>
    return RuntimeShape();
  }
  TfLiteIntArray* dims = tensor->dims;
  const int dims_size = dims->size;
 800a0ee:	f851 2b04 	ldr.w	r2, [r1], #4
      : size_(dimensions_count) {
 800a0f2:	6002      	str	r2, [r0, #0]
    TFLITE_DCHECK_LE(dimensions_count, kMaxSmallSize);
 800a0f4:	2a06      	cmp	r2, #6
 800a0f6:	dc09      	bgt.n	800a10c <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x28>
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
 800a0f8:	0092      	lsls	r2, r2, #2
 800a0fa:	3004      	adds	r0, #4
 800a0fc:	f00d fcdb 	bl	8017ab6 <memcpy>
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
  return RuntimeShape(dims_size, dims_data);
}
 800a100:	4620      	mov	r0, r4
 800a102:	bd10      	pop	{r4, pc}
  RuntimeShape() : size_(0) {}
 800a104:	2300      	movs	r3, #0
 800a106:	6023      	str	r3, [r4, #0]
 800a108:	4620      	mov	r0, r4
 800a10a:	bd10      	pop	{r4, pc}
    TFLITE_DCHECK_LE(dimensions_count, kMaxSmallSize);
 800a10c:	f00c fd2e 	bl	8016b6c <abort>

0800a110 <_ZN6tflite5micro32CreateWritableTensorDimsWithCopyEP13TfLiteContextP12TfLiteTensorP16TfLiteEvalTensor>:
// The old dims data is copied to the new storage area.
// The tensor and eval_tensor must be the same tensor.
// Only use during Prepare phase.
TfLiteStatus CreateWritableTensorDimsWithCopy(TfLiteContext* context,
                                              TfLiteTensor* tensor,
                                              TfLiteEvalTensor* eval_tensor) {
 800a110:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a112:	4605      	mov	r5, r0
 800a114:	b083      	sub	sp, #12
  TF_LITE_ENSURE(context, tensor != nullptr);
 800a116:	b331      	cbz	r1, 800a166 <_ZN6tflite5micro32CreateWritableTensorDimsWithCopyEP13TfLiteContextP12TfLiteTensorP16TfLiteEvalTensor+0x56>
  TF_LITE_ENSURE(context, eval_tensor != nullptr);
 800a118:	4617      	mov	r7, r2
 800a11a:	2a00      	cmp	r2, #0
 800a11c:	d02d      	beq.n	800a17a <_ZN6tflite5micro32CreateWritableTensorDimsWithCopyEP13TfLiteContextP12TfLiteTensorP16TfLiteEvalTensor+0x6a>
  TF_LITE_ENSURE(context, context->AllocatePersistentBuffer != nullptr);
 800a11e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a120:	b1bb      	cbz	r3, 800a152 <_ZN6tflite5micro32CreateWritableTensorDimsWithCopyEP13TfLiteContextP12TfLiteTensorP16TfLiteEvalTensor+0x42>
  int ranks = tensor->dims->size;
 800a122:	694b      	ldr	r3, [r1, #20]
 800a124:	681e      	ldr	r6, [r3, #0]
  size_t alloc_size = TfLiteIntArrayGetSizeInBytes(ranks);
 800a126:	4630      	mov	r0, r6
 800a128:	460c      	mov	r4, r1
 800a12a:	f7fc f807 	bl	800613c <TfLiteIntArrayGetSizeInBytes>
  TfLiteIntArray* new_dims = static_cast<TfLiteIntArray*>(
      context->AllocatePersistentBuffer(context, alloc_size));
 800a12e:	6bab      	ldr	r3, [r5, #56]	; 0x38
  size_t alloc_size = TfLiteIntArrayGetSizeInBytes(ranks);
 800a130:	4601      	mov	r1, r0
      context->AllocatePersistentBuffer(context, alloc_size));
 800a132:	4628      	mov	r0, r5
 800a134:	4798      	blx	r3
  TfLiteIntArray* old_dims = tensor->dims;
  new_dims->size = ranks;
  tensor->dims = new_dims;
  eval_tensor->dims = new_dims;
  for (int i = 0; i < ranks; i++) {
 800a136:	2e00      	cmp	r6, #0
  TfLiteIntArray* old_dims = tensor->dims;
 800a138:	6961      	ldr	r1, [r4, #20]
  new_dims->size = ranks;
 800a13a:	6006      	str	r6, [r0, #0]
  tensor->dims = new_dims;
 800a13c:	6160      	str	r0, [r4, #20]
  eval_tensor->dims = new_dims;
 800a13e:	6078      	str	r0, [r7, #4]
  for (int i = 0; i < ranks; i++) {
 800a140:	dd04      	ble.n	800a14c <_ZN6tflite5micro32CreateWritableTensorDimsWithCopyEP13TfLiteContextP12TfLiteTensorP16TfLiteEvalTensor+0x3c>
    new_dims->data[i] = old_dims->data[i];
 800a142:	00b2      	lsls	r2, r6, #2
 800a144:	3104      	adds	r1, #4
 800a146:	3004      	adds	r0, #4
 800a148:	f00d fbb6 	bl	80178b8 <memmove>
  }

  return kTfLiteOk;
 800a14c:	2000      	movs	r0, #0
}
 800a14e:	b003      	add	sp, #12
 800a150:	bdf0      	pop	{r4, r5, r6, r7, pc}
  TF_LITE_ENSURE(context, context->AllocatePersistentBuffer != nullptr);
 800a152:	4b0f      	ldr	r3, [pc, #60]	; (800a190 <_ZN6tflite5micro32CreateWritableTensorDimsWithCopyEP13TfLiteContextP12TfLiteTensorP16TfLiteEvalTensor+0x80>)
 800a154:	6944      	ldr	r4, [r0, #20]
 800a156:	4a0f      	ldr	r2, [pc, #60]	; (800a194 <_ZN6tflite5micro32CreateWritableTensorDimsWithCopyEP13TfLiteContextP12TfLiteTensorP16TfLiteEvalTensor+0x84>)
 800a158:	9300      	str	r3, [sp, #0]
 800a15a:	490f      	ldr	r1, [pc, #60]	; (800a198 <_ZN6tflite5micro32CreateWritableTensorDimsWithCopyEP13TfLiteContextP12TfLiteTensorP16TfLiteEvalTensor+0x88>)
 800a15c:	2385      	movs	r3, #133	; 0x85
 800a15e:	47a0      	blx	r4
 800a160:	2001      	movs	r0, #1
}
 800a162:	b003      	add	sp, #12
 800a164:	bdf0      	pop	{r4, r5, r6, r7, pc}
  TF_LITE_ENSURE(context, tensor != nullptr);
 800a166:	4b0d      	ldr	r3, [pc, #52]	; (800a19c <_ZN6tflite5micro32CreateWritableTensorDimsWithCopyEP13TfLiteContextP12TfLiteTensorP16TfLiteEvalTensor+0x8c>)
 800a168:	6944      	ldr	r4, [r0, #20]
 800a16a:	4a0a      	ldr	r2, [pc, #40]	; (800a194 <_ZN6tflite5micro32CreateWritableTensorDimsWithCopyEP13TfLiteContextP12TfLiteTensorP16TfLiteEvalTensor+0x84>)
 800a16c:	9300      	str	r3, [sp, #0]
 800a16e:	490a      	ldr	r1, [pc, #40]	; (800a198 <_ZN6tflite5micro32CreateWritableTensorDimsWithCopyEP13TfLiteContextP12TfLiteTensorP16TfLiteEvalTensor+0x88>)
 800a170:	2383      	movs	r3, #131	; 0x83
 800a172:	47a0      	blx	r4
 800a174:	2001      	movs	r0, #1
}
 800a176:	b003      	add	sp, #12
 800a178:	bdf0      	pop	{r4, r5, r6, r7, pc}
  TF_LITE_ENSURE(context, eval_tensor != nullptr);
 800a17a:	4b09      	ldr	r3, [pc, #36]	; (800a1a0 <_ZN6tflite5micro32CreateWritableTensorDimsWithCopyEP13TfLiteContextP12TfLiteTensorP16TfLiteEvalTensor+0x90>)
 800a17c:	6944      	ldr	r4, [r0, #20]
 800a17e:	4a05      	ldr	r2, [pc, #20]	; (800a194 <_ZN6tflite5micro32CreateWritableTensorDimsWithCopyEP13TfLiteContextP12TfLiteTensorP16TfLiteEvalTensor+0x84>)
 800a180:	9300      	str	r3, [sp, #0]
 800a182:	4905      	ldr	r1, [pc, #20]	; (800a198 <_ZN6tflite5micro32CreateWritableTensorDimsWithCopyEP13TfLiteContextP12TfLiteTensorP16TfLiteEvalTensor+0x88>)
 800a184:	2384      	movs	r3, #132	; 0x84
 800a186:	47a0      	blx	r4
 800a188:	2001      	movs	r0, #1
}
 800a18a:	b003      	add	sp, #12
 800a18c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a18e:	bf00      	nop
 800a190:	0806c6d0 	.word	0x0806c6d0
 800a194:	0806c66c 	.word	0x0806c66c
 800a198:	0806a3f0 	.word	0x0806a3f0
 800a19c:	0806c6a4 	.word	0x0806c6a4
 800a1a0:	0806c6b8 	.word	0x0806c6b8

0800a1a4 <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE>:

TfLiteStatus CalculateOpDataPooling(const TfLiteContext* context,
                                    const TfLitePoolParams* params,
                                    const TfLiteTensor* input,
                                    const TfLiteTensor* output,
                                    OpDataPooling* data) {
 800a1a4:	b4f0      	push	{r4, r5, r6, r7}
  int width = SizeOfDimension(input, 2);

  int out_height, out_width;

  data->padding = ComputePaddingHeightWidth(
      params->stride_height, params->stride_width,
 800a1a6:	e9d1 6701 	ldrd	r6, r7, [r1, #4]
  return t->dims->data[dim];
 800a1aa:	6953      	ldr	r3, [r2, #20]
                                    OpDataPooling* data) {
 800a1ac:	9804      	ldr	r0, [sp, #16]
 800a1ae:	e9d3 5402 	ldrd	r5, r4, [r3, #8]
      /*dilation_rate_height=*/1,
      /*dilation_rate_width=*/1, height, width, params->filter_height,
      params->filter_width, params->padding, &out_height, &out_width);
 800a1b2:	e9d1 2303 	ldrd	r2, r3, [r1, #12]
 800a1b6:	7809      	ldrb	r1, [r1, #0]
  if (stride == 0) return 0;
 800a1b8:	b3de      	cbz	r6, 800a232 <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE+0x8e>
  switch (padding) {
 800a1ba:	2901      	cmp	r1, #1
 800a1bc:	d02a      	beq.n	800a214 <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE+0x70>
 800a1be:	2902      	cmp	r1, #2
 800a1c0:	d019      	beq.n	800a1f6 <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE+0x52>
 800a1c2:	f04f 31ff 	mov.w	r1, #4294967295
 800a1c6:	468c      	mov	ip, r1
      ((out_size - 1) * stride + effective_filter_size - in_size);
 800a1c8:	fb01 2206 	mla	r2, r1, r6, r2
 800a1cc:	fb0c 3307 	mla	r3, ip, r7, r3
  int total_padding =
 800a1d0:	1b5b      	subs	r3, r3, r5
 800a1d2:	1b12      	subs	r2, r2, r4
  total_padding = total_padding > 0 ? total_padding : 0;
 800a1d4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a1d8:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
  return total_padding / 2;
 800a1dc:	1054      	asrs	r4, r2, #1
 800a1de:	1059      	asrs	r1, r3, #1
  *offset = total_padding % 2;
 800a1e0:	f002 0201 	and.w	r2, r2, #1
 800a1e4:	f003 0301 	and.w	r3, r3, #1
  data->padding = ComputePaddingHeightWidth(
 800a1e8:	e9c0 4100 	strd	r4, r1, [r0]
 800a1ec:	e9c0 2302 	strd	r2, r3, [r0, #8]

  return kTfLiteOk;
}
 800a1f0:	bcf0      	pop	{r4, r5, r6, r7}
 800a1f2:	2000      	movs	r0, #0
 800a1f4:	4770      	bx	lr
      return (image_size + stride - effective_filter_size) / stride;
 800a1f6:	1931      	adds	r1, r6, r4
 800a1f8:	1a89      	subs	r1, r1, r2
 800a1fa:	fb91 f1f6 	sdiv	r1, r1, r6
      ((out_size - 1) * stride + effective_filter_size - in_size);
 800a1fe:	3901      	subs	r1, #1
  if (stride == 0) return 0;
 800a200:	b1f7      	cbz	r7, 800a240 <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE+0x9c>
      return (image_size + stride - effective_filter_size) / stride;
 800a202:	eb07 0c05 	add.w	ip, r7, r5
 800a206:	ebac 0c03 	sub.w	ip, ip, r3
 800a20a:	fb9c fcf7 	sdiv	ip, ip, r7
      ((out_size - 1) * stride + effective_filter_size - in_size);
 800a20e:	f10c 3cff 	add.w	ip, ip, #4294967295
      return (image_size + stride - effective_filter_size) / stride;
 800a212:	e7d9      	b.n	800a1c8 <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE+0x24>
      return (image_size + stride - 1) / stride;
 800a214:	1931      	adds	r1, r6, r4
 800a216:	3901      	subs	r1, #1
 800a218:	fb91 f1f6 	sdiv	r1, r1, r6
      ((out_size - 1) * stride + effective_filter_size - in_size);
 800a21c:	3901      	subs	r1, #1
  if (stride == 0) return 0;
 800a21e:	b17f      	cbz	r7, 800a240 <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE+0x9c>
      return (image_size + stride - 1) / stride;
 800a220:	eb07 0c05 	add.w	ip, r7, r5
 800a224:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a228:	fb9c fcf7 	sdiv	ip, ip, r7
      ((out_size - 1) * stride + effective_filter_size - in_size);
 800a22c:	f10c 3cff 	add.w	ip, ip, #4294967295
      return (image_size + stride - 1) / stride;
 800a230:	e7ca      	b.n	800a1c8 <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE+0x24>
  if (stride == 0) return 0;
 800a232:	2f00      	cmp	r7, #0
 800a234:	d0c5      	beq.n	800a1c2 <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE+0x1e>
  switch (padding) {
 800a236:	2901      	cmp	r1, #1
 800a238:	d105      	bne.n	800a246 <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE+0xa2>
 800a23a:	f04f 31ff 	mov.w	r1, #4294967295
 800a23e:	e7ef      	b.n	800a220 <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE+0x7c>
      ((out_size - 1) * stride + effective_filter_size - in_size);
 800a240:	f04f 3cff 	mov.w	ip, #4294967295
 800a244:	e7c0      	b.n	800a1c8 <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE+0x24>
  switch (padding) {
 800a246:	2902      	cmp	r1, #2
 800a248:	f04f 31ff 	mov.w	r1, #4294967295
 800a24c:	d0d9      	beq.n	800a202 <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE+0x5e>
 800a24e:	e7ba      	b.n	800a1c6 <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE+0x22>

0800a250 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus PoolingPrepare(TfLiteContext* context, TfLiteNode* node) {
 800a250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  TFLITE_DCHECK(node->builtin_data != nullptr);
 800a254:	f8d1 a010 	ldr.w	sl, [r1, #16]
TfLiteStatus PoolingPrepare(TfLiteContext* context, TfLiteNode* node) {
 800a258:	b082      	sub	sp, #8
  TFLITE_DCHECK(node->builtin_data != nullptr);
 800a25a:	f1ba 0f00 	cmp.w	sl, #0
 800a25e:	f000 808d 	beq.w	800a37c <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x12c>
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);

  TFLITE_DCHECK(node->user_data != nullptr);
 800a262:	f8d1 900c 	ldr.w	r9, [r1, #12]
 800a266:	460c      	mov	r4, r1
 800a268:	f1b9 0f00 	cmp.w	r9, #0
 800a26c:	f000 8086 	beq.w	800a37c <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x12c>
 800a270:	68c7      	ldr	r7, [r0, #12]
  OpDataPooling* data = static_cast<OpDataPooling*>(node->user_data);

  MicroContext* micro_context = GetMicroContext(context);

  TfLiteTensor* input =
 800a272:	4605      	mov	r5, r0
      micro_context->AllocateTempInputTensor(node, kPoolingInputTensor);
 800a274:	2200      	movs	r2, #0
 800a276:	4638      	mov	r0, r7
 800a278:	f7fe fa50 	bl	800871c <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
 800a27c:	4606      	mov	r6, r0
 800a27e:	2800      	cmp	r0, #0
 800a280:	d03e      	beq.n	800a300 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xb0>
  TfLiteTensor* output =
      micro_context->AllocateTempOutputTensor(node, kPoolingOutputTensor);
 800a282:	4621      	mov	r1, r4
 800a284:	2200      	movs	r2, #0
 800a286:	4638      	mov	r0, r7
 800a288:	f7fe fa58 	bl	800873c <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
 800a28c:	4604      	mov	r4, r0
 800a28e:	b348      	cbz	r0, 800a2e4 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x94>

  TF_LITE_ENSURE_STATUS(
 800a290:	4603      	mov	r3, r0
 800a292:	f8cd 9000 	str.w	r9, [sp]
 800a296:	4632      	mov	r2, r6
 800a298:	4651      	mov	r1, sl
 800a29a:	4628      	mov	r0, r5
 800a29c:	f7ff ff82 	bl	800a1a4 <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE>
 800a2a0:	4680      	mov	r8, r0
 800a2a2:	bb48      	cbnz	r0, 800a2f8 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xa8>
      CalculateOpDataPooling(context, params, input, output, data));

  if (input->type == kTfLiteFloat32) {
 800a2a4:	7f30      	ldrb	r0, [r6, #28]
 800a2a6:	2801      	cmp	r0, #1
 800a2a8:	d038      	beq.n	800a31c <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xcc>
    CalculateActivationRange(params->activation, &data->activation_min_f32,
                             &data->activation_max_f32);
  } else if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
 800a2aa:	2809      	cmp	r0, #9
 800a2ac:	d001      	beq.n	800a2b2 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x62>
 800a2ae:	2807      	cmp	r0, #7
 800a2b0:	d144      	bne.n	800a33c <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xec>
    CalculateActivationRangeQuantized(context, params->activation, output,
 800a2b2:	f109 0314 	add.w	r3, r9, #20
 800a2b6:	f89a 1014 	ldrb.w	r1, [sl, #20]
 800a2ba:	9300      	str	r3, [sp, #0]
 800a2bc:	4628      	mov	r0, r5
 800a2be:	f109 0310 	add.w	r3, r9, #16
 800a2c2:	4622      	mov	r2, r4
 800a2c4:	f7fc f890 	bl	80063e8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
    MicroPrintf("Type %s (%d) not supported.", TfLiteTypeGetName(input->type),
                input->type);
    return kTfLiteError;
  }

  micro_context->DeallocateTempTfLiteTensor(input);
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	4631      	mov	r1, r6
 800a2cc:	4638      	mov	r0, r7
 800a2ce:	699b      	ldr	r3, [r3, #24]
 800a2d0:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(output);
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	4638      	mov	r0, r7
 800a2d6:	699b      	ldr	r3, [r3, #24]
 800a2d8:	4621      	mov	r1, r4
 800a2da:	4798      	blx	r3

  return kTfLiteOk;
}
 800a2dc:	4640      	mov	r0, r8
 800a2de:	b002      	add	sp, #8
 800a2e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  TF_LITE_ENSURE(context, output != nullptr);
 800a2e4:	4b26      	ldr	r3, [pc, #152]	; (800a380 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x130>)
 800a2e6:	696c      	ldr	r4, [r5, #20]
 800a2e8:	4a26      	ldr	r2, [pc, #152]	; (800a384 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x134>)
 800a2ea:	9300      	str	r3, [sp, #0]
 800a2ec:	4926      	ldr	r1, [pc, #152]	; (800a388 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x138>)
 800a2ee:	2340      	movs	r3, #64	; 0x40
 800a2f0:	4628      	mov	r0, r5
 800a2f2:	47a0      	blx	r4
 800a2f4:	f04f 0801 	mov.w	r8, #1
}
 800a2f8:	4640      	mov	r0, r8
 800a2fa:	b002      	add	sp, #8
 800a2fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  TF_LITE_ENSURE(context, input != nullptr);
 800a300:	4b22      	ldr	r3, [pc, #136]	; (800a38c <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x13c>)
 800a302:	696c      	ldr	r4, [r5, #20]
 800a304:	4a1f      	ldr	r2, [pc, #124]	; (800a384 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x134>)
 800a306:	9300      	str	r3, [sp, #0]
 800a308:	4628      	mov	r0, r5
 800a30a:	491f      	ldr	r1, [pc, #124]	; (800a388 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x138>)
 800a30c:	233d      	movs	r3, #61	; 0x3d
 800a30e:	47a0      	blx	r4
 800a310:	f04f 0801 	mov.w	r8, #1
}
 800a314:	4640      	mov	r0, r8
 800a316:	b002      	add	sp, #8
 800a318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    CalculateActivationRange(params->activation, &data->activation_min_f32,
 800a31c:	f89a 3014 	ldrb.w	r3, [sl, #20]
// Calculates the useful range of an activation layer given its activation
// tensor.a
template <typename T>
void CalculateActivationRange(TfLiteFusedActivation activation,
                              T* activation_min, T* activation_max) {
  if (activation == kTfLiteActRelu) {
 800a320:	2b01      	cmp	r3, #1
 800a322:	d01c      	beq.n	800a35e <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x10e>
    *activation_min = 0;
    *activation_max = std::numeric_limits<T>::max();
  } else if (activation == kTfLiteActRelu6) {
 800a324:	2b03      	cmp	r3, #3
 800a326:	d013      	beq.n	800a350 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x100>
    *activation_min = 0;
    *activation_max = 6;
  } else if (activation == kTfLiteActReluN1To1) {
 800a328:	2b02      	cmp	r3, #2
 800a32a:	d01f      	beq.n	800a36c <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x11c>
    *activation_min = -1;
    *activation_max = 1;
  } else {
    *activation_min = std::numeric_limits<T>::lowest();
 800a32c:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 800a330:	f8c9 3018 	str.w	r3, [r9, #24]
    *activation_max = std::numeric_limits<T>::max();
 800a334:	4b16      	ldr	r3, [pc, #88]	; (800a390 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x140>)
 800a336:	f8c9 301c 	str.w	r3, [r9, #28]
 800a33a:	e7c5      	b.n	800a2c8 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x78>
    MicroPrintf("Type %s (%d) not supported.", TfLiteTypeGetName(input->type),
 800a33c:	f7fb ff02 	bl	8006144 <TfLiteTypeGetName>
 800a340:	7f32      	ldrb	r2, [r6, #28]
 800a342:	4601      	mov	r1, r0
 800a344:	4813      	ldr	r0, [pc, #76]	; (800a394 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x144>)
 800a346:	f7ff fa49 	bl	80097dc <_Z11MicroPrintfPKcz>
    return kTfLiteError;
 800a34a:	f04f 0801 	mov.w	r8, #1
 800a34e:	e7d3      	b.n	800a2f8 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xa8>
    *activation_min = 0;
 800a350:	2300      	movs	r3, #0
 800a352:	f8c9 3018 	str.w	r3, [r9, #24]
    *activation_max = 6;
 800a356:	4b10      	ldr	r3, [pc, #64]	; (800a398 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x148>)
 800a358:	f8c9 301c 	str.w	r3, [r9, #28]
 800a35c:	e7b4      	b.n	800a2c8 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x78>
    *activation_min = 0;
 800a35e:	2300      	movs	r3, #0
 800a360:	f8c9 3018 	str.w	r3, [r9, #24]
    *activation_max = std::numeric_limits<T>::max();
 800a364:	4b0a      	ldr	r3, [pc, #40]	; (800a390 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x140>)
 800a366:	f8c9 301c 	str.w	r3, [r9, #28]
 800a36a:	e7ad      	b.n	800a2c8 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x78>
    *activation_min = -1;
 800a36c:	4b0b      	ldr	r3, [pc, #44]	; (800a39c <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x14c>)
 800a36e:	f8c9 3018 	str.w	r3, [r9, #24]
    *activation_max = 1;
 800a372:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800a376:	f8c9 301c 	str.w	r3, [r9, #28]
 800a37a:	e7a5      	b.n	800a2c8 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x78>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 800a37c:	f00c fbf6 	bl	8016b6c <abort>
 800a380:	0806c530 	.word	0x0806c530
 800a384:	0806c700 	.word	0x0806c700
 800a388:	0806a3f0 	.word	0x0806a3f0
 800a38c:	0806c508 	.word	0x0806c508
 800a390:	7f7fffff 	.word	0x7f7fffff
 800a394:	0806c73c 	.word	0x0806c73c
 800a398:	40c00000 	.word	0x40c00000
 800a39c:	bf800000 	.word	0xbf800000

0800a3a0 <_ZN6tflite12_GLOBAL__N_121InitQuantizeReferenceEP13TfLiteContextPKcj>:
namespace tflite {
namespace {

void* InitQuantizeReference(TfLiteContext* context, const char* buffer,
                            size_t length) {
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 800a3a0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a3a2:	b10b      	cbz	r3, 800a3a8 <_ZN6tflite12_GLOBAL__N_121InitQuantizeReferenceEP13TfLiteContextPKcj+0x8>
  return context->AllocatePersistentBuffer(context,
 800a3a4:	2120      	movs	r1, #32
 800a3a6:	4718      	bx	r3
                            size_t length) {
 800a3a8:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 800a3aa:	f00c fbdf 	bl	8016b6c <abort>
 800a3ae:	bf00      	nop

0800a3b0 <_ZN6tflite17Register_QUANTIZEEv>:
                                           sizeof(OpDataQuantizeReference));
}

}  // namespace

TFLMRegistration Register_QUANTIZE() {
 800a3b0:	b510      	push	{r4, lr}
  return tflite::micro::RegisterOp(
 800a3b2:	2100      	movs	r1, #0
TFLMRegistration Register_QUANTIZE() {
 800a3b4:	b082      	sub	sp, #8
  return tflite::micro::RegisterOp(
 800a3b6:	e9cd 1100 	strd	r1, r1, [sp]
 800a3ba:	4b04      	ldr	r3, [pc, #16]	; (800a3cc <_ZN6tflite17Register_QUANTIZEEv+0x1c>)
 800a3bc:	4a04      	ldr	r2, [pc, #16]	; (800a3d0 <_ZN6tflite17Register_QUANTIZEEv+0x20>)
 800a3be:	4905      	ldr	r1, [pc, #20]	; (800a3d4 <_ZN6tflite17Register_QUANTIZEEv+0x24>)
TFLMRegistration Register_QUANTIZE() {
 800a3c0:	4604      	mov	r4, r0
  return tflite::micro::RegisterOp(
 800a3c2:	f7ff fe5d 	bl	800a080 <_ZN6tflite5micro10RegisterOpEPFPvP13TfLiteContextPKcjEPF12TfLiteStatusS3_P10TfLiteNodeESC_PFvS3_S1_ESE_>
      InitQuantizeReference, PrepareQuantizeReference, EvalQuantizeReference);
}
 800a3c6:	4620      	mov	r0, r4
 800a3c8:	b002      	add	sp, #8
 800a3ca:	bd10      	pop	{r4, pc}
 800a3cc:	0800a639 	.word	0x0800a639
 800a3d0:	0800a3d9 	.word	0x0800a3d9
 800a3d4:	0800a3a1 	.word	0x0800a3a1

0800a3d8 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode>:
#include "tensorflow/lite/micro/micro_utils.h"

namespace tflite {

TfLiteStatus PrepareQuantizeReference(TfLiteContext* context,
                                      TfLiteNode* node) {
 800a3d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
 800a3dc:	68ce      	ldr	r6, [r1, #12]
                                      TfLiteNode* node) {
 800a3de:	b084      	sub	sp, #16
  TFLITE_DCHECK(node->user_data != nullptr);
 800a3e0:	2e00      	cmp	r6, #0
 800a3e2:	f000 8108 	beq.w	800a5f6 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x21e>
  return node->inputs == nullptr ? 0 : node->inputs->size;
 800a3e6:	680b      	ldr	r3, [r1, #0]
 800a3e8:	460c      	mov	r4, r1
 800a3ea:	4605      	mov	r5, r0
 800a3ec:	b113      	cbz	r3, 800a3f4 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1c>
 800a3ee:	681b      	ldr	r3, [r3, #0]
  auto* data = static_cast<OpDataQuantizeReference*>(node->user_data);

  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
 800a3f0:	2b01      	cmp	r3, #1
 800a3f2:	d010      	beq.n	800a416 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x3e>
 800a3f4:	2401      	movs	r4, #1
 800a3f6:	696e      	ldr	r6, [r5, #20]
 800a3f8:	4a80      	ldr	r2, [pc, #512]	; (800a5fc <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x224>)
 800a3fa:	9201      	str	r2, [sp, #4]
 800a3fc:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a400:	4b7f      	ldr	r3, [pc, #508]	; (800a600 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x228>)
 800a402:	9300      	str	r3, [sp, #0]
 800a404:	4a7f      	ldr	r2, [pc, #508]	; (800a604 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x22c>)
 800a406:	4980      	ldr	r1, [pc, #512]	; (800a608 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x230>)
 800a408:	2324      	movs	r3, #36	; 0x24
 800a40a:	4628      	mov	r0, r5
 800a40c:	47b0      	blx	r6
  data->input_zero_point = input->params.zero_point;

  micro_context->DeallocateTempTfLiteTensor(input);
  micro_context->DeallocateTempTfLiteTensor(output);
  return kTfLiteOk;
}
 800a40e:	4620      	mov	r0, r4
 800a410:	b004      	add	sp, #16
 800a412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  return node->outputs == nullptr ? 0 : node->outputs->size;
 800a416:	684b      	ldr	r3, [r1, #4]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d035      	beq.n	800a488 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xb0>
 800a41c:	f8d3 a000 	ldr.w	sl, [r3]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 800a420:	f1ba 0f01 	cmp.w	sl, #1
 800a424:	d010      	beq.n	800a448 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x70>
 800a426:	6946      	ldr	r6, [r0, #20]
 800a428:	4b74      	ldr	r3, [pc, #464]	; (800a5fc <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x224>)
 800a42a:	9301      	str	r3, [sp, #4]
 800a42c:	2401      	movs	r4, #1
 800a42e:	4b77      	ldr	r3, [pc, #476]	; (800a60c <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x234>)
 800a430:	9300      	str	r3, [sp, #0]
 800a432:	4628      	mov	r0, r5
 800a434:	e9cd a402 	strd	sl, r4, [sp, #8]
 800a438:	4a72      	ldr	r2, [pc, #456]	; (800a604 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x22c>)
 800a43a:	4973      	ldr	r1, [pc, #460]	; (800a608 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x230>)
 800a43c:	2325      	movs	r3, #37	; 0x25
 800a43e:	47b0      	blx	r6
}
 800a440:	4620      	mov	r0, r4
 800a442:	b004      	add	sp, #16
 800a444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a448:	f8d0 800c 	ldr.w	r8, [r0, #12]
  TfLiteTensor* input = micro_context->AllocateTempInputTensor(node, 0);
 800a44c:	2200      	movs	r2, #0
 800a44e:	4640      	mov	r0, r8
 800a450:	f7fe f964 	bl	800871c <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
 800a454:	4607      	mov	r7, r0
 800a456:	b320      	cbz	r0, 800a4a2 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xca>
  TfLiteTensor* output = micro_context->AllocateTempOutputTensor(node, 0);
 800a458:	4621      	mov	r1, r4
 800a45a:	2200      	movs	r2, #0
 800a45c:	4640      	mov	r0, r8
 800a45e:	f7fe f96d 	bl	800873c <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
 800a462:	4681      	mov	r9, r0
 800a464:	b198      	cbz	r0, 800a48e <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xb6>
  TF_LITE_ENSURE_EQ(context, output->quantization.type,
 800a466:	7804      	ldrb	r4, [r0, #0]
 800a468:	2c01      	cmp	r4, #1
 800a46a:	d01f      	beq.n	800a4ac <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xd4>
 800a46c:	e9cd 4a02 	strd	r4, sl, [sp, #8]
 800a470:	4a67      	ldr	r2, [pc, #412]	; (800a610 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x238>)
 800a472:	9201      	str	r2, [sp, #4]
 800a474:	4b67      	ldr	r3, [pc, #412]	; (800a614 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x23c>)
 800a476:	696e      	ldr	r6, [r5, #20]
 800a478:	4a62      	ldr	r2, [pc, #392]	; (800a604 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x22c>)
 800a47a:	9300      	str	r3, [sp, #0]
 800a47c:	4962      	ldr	r1, [pc, #392]	; (800a608 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x230>)
 800a47e:	2330      	movs	r3, #48	; 0x30
 800a480:	4628      	mov	r0, r5
 800a482:	4654      	mov	r4, sl
 800a484:	47b0      	blx	r6
 800a486:	e7c2      	b.n	800a40e <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x36>
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 800a488:	6946      	ldr	r6, [r0, #20]
 800a48a:	469a      	mov	sl, r3
 800a48c:	e7cc      	b.n	800a428 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x50>
  TF_LITE_ENSURE(context, output != nullptr);
 800a48e:	4b62      	ldr	r3, [pc, #392]	; (800a618 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x240>)
 800a490:	696e      	ldr	r6, [r5, #20]
 800a492:	9300      	str	r3, [sp, #0]
 800a494:	232c      	movs	r3, #44	; 0x2c
 800a496:	4a5b      	ldr	r2, [pc, #364]	; (800a604 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x22c>)
 800a498:	4960      	ldr	r1, [pc, #384]	; (800a61c <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x244>)
 800a49a:	4628      	mov	r0, r5
 800a49c:	4654      	mov	r4, sl
 800a49e:	47b0      	blx	r6
 800a4a0:	e7b5      	b.n	800a40e <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x36>
  TF_LITE_ENSURE(context, input != nullptr);
 800a4a2:	4b5f      	ldr	r3, [pc, #380]	; (800a620 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x248>)
 800a4a4:	696e      	ldr	r6, [r5, #20]
 800a4a6:	9300      	str	r3, [sp, #0]
 800a4a8:	232a      	movs	r3, #42	; 0x2a
 800a4aa:	e7f4      	b.n	800a496 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xbe>
  const auto* affine_quantization =
 800a4ac:	6843      	ldr	r3, [r0, #4]
  TF_LITE_ENSURE(context, affine_quantization);
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d035      	beq.n	800a51e <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x146>
  TF_LITE_ENSURE(context, affine_quantization->scale);
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d03b      	beq.n	800a530 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x158>
  TF_LITE_ENSURE(context, affine_quantization->scale->size == 1);
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	2b01      	cmp	r3, #1
 800a4bc:	d008      	beq.n	800a4d0 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xf8>
 800a4be:	4b59      	ldr	r3, [pc, #356]	; (800a624 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x24c>)
 800a4c0:	696e      	ldr	r6, [r5, #20]
 800a4c2:	4a50      	ldr	r2, [pc, #320]	; (800a604 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x22c>)
 800a4c4:	9300      	str	r3, [sp, #0]
 800a4c6:	4955      	ldr	r1, [pc, #340]	; (800a61c <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x244>)
 800a4c8:	2336      	movs	r3, #54	; 0x36
 800a4ca:	4628      	mov	r0, r5
 800a4cc:	47b0      	blx	r6
 800a4ce:	e79e      	b.n	800a40e <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x36>
  TF_LITE_ENSURE(
 800a4d0:	7f3b      	ldrb	r3, [r7, #28]
 800a4d2:	1e5a      	subs	r2, r3, #1
 800a4d4:	2a01      	cmp	r2, #1
 800a4d6:	d90f      	bls.n	800a4f8 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x120>
 800a4d8:	2b09      	cmp	r3, #9
 800a4da:	d804      	bhi.n	800a4e6 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x10e>
 800a4dc:	f44f 7222 	mov.w	r2, #648	; 0x288
 800a4e0:	40da      	lsrs	r2, r3
 800a4e2:	07d2      	lsls	r2, r2, #31
 800a4e4:	d408      	bmi.n	800a4f8 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x120>
 800a4e6:	4b50      	ldr	r3, [pc, #320]	; (800a628 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x250>)
 800a4e8:	696e      	ldr	r6, [r5, #20]
 800a4ea:	4a46      	ldr	r2, [pc, #280]	; (800a604 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x22c>)
 800a4ec:	9300      	str	r3, [sp, #0]
 800a4ee:	494b      	ldr	r1, [pc, #300]	; (800a61c <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x244>)
 800a4f0:	2338      	movs	r3, #56	; 0x38
 800a4f2:	4628      	mov	r0, r5
 800a4f4:	47b0      	blx	r6
 800a4f6:	e78a      	b.n	800a40e <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x36>
  TF_LITE_ENSURE(context, output->type == kTfLiteInt8 ||
 800a4f8:	f899 201c 	ldrb.w	r2, [r9, #28]
 800a4fc:	2a09      	cmp	r2, #9
 800a4fe:	d03f      	beq.n	800a580 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1a8>
 800a500:	2a07      	cmp	r2, #7
 800a502:	d01e      	beq.n	800a542 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x16a>
 800a504:	2a02      	cmp	r2, #2
 800a506:	d01c      	beq.n	800a542 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x16a>
 800a508:	2a03      	cmp	r2, #3
 800a50a:	d06c      	beq.n	800a5e6 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x20e>
 800a50c:	4b47      	ldr	r3, [pc, #284]	; (800a62c <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x254>)
 800a50e:	696e      	ldr	r6, [r5, #20]
 800a510:	4a3c      	ldr	r2, [pc, #240]	; (800a604 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x22c>)
 800a512:	9300      	str	r3, [sp, #0]
 800a514:	4941      	ldr	r1, [pc, #260]	; (800a61c <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x244>)
 800a516:	233c      	movs	r3, #60	; 0x3c
 800a518:	4628      	mov	r0, r5
 800a51a:	47b0      	blx	r6
 800a51c:	e777      	b.n	800a40e <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x36>
  TF_LITE_ENSURE(context, affine_quantization);
 800a51e:	4b44      	ldr	r3, [pc, #272]	; (800a630 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x258>)
 800a520:	696e      	ldr	r6, [r5, #20]
 800a522:	4a38      	ldr	r2, [pc, #224]	; (800a604 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x22c>)
 800a524:	9300      	str	r3, [sp, #0]
 800a526:	493d      	ldr	r1, [pc, #244]	; (800a61c <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x244>)
 800a528:	2334      	movs	r3, #52	; 0x34
 800a52a:	4628      	mov	r0, r5
 800a52c:	47b0      	blx	r6
 800a52e:	e76e      	b.n	800a40e <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x36>
  TF_LITE_ENSURE(context, affine_quantization->scale);
 800a530:	4b40      	ldr	r3, [pc, #256]	; (800a634 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x25c>)
 800a532:	696e      	ldr	r6, [r5, #20]
 800a534:	4a33      	ldr	r2, [pc, #204]	; (800a604 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x22c>)
 800a536:	9300      	str	r3, [sp, #0]
 800a538:	4938      	ldr	r1, [pc, #224]	; (800a61c <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x244>)
 800a53a:	2335      	movs	r3, #53	; 0x35
 800a53c:	4628      	mov	r0, r5
 800a53e:	47b0      	blx	r6
 800a540:	e765      	b.n	800a40e <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x36>
  if ((input->type == kTfLiteInt16 && output->type == kTfLiteInt8) ||
 800a542:	2b07      	cmp	r3, #7
 800a544:	d04a      	beq.n	800a5dc <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x204>
 800a546:	2b09      	cmp	r3, #9
 800a548:	d040      	beq.n	800a5cc <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1f4>
      (input->type == kTfLiteInt8 && output->type == kTfLiteUInt8) ||
 800a54a:	2b03      	cmp	r3, #3
 800a54c:	d144      	bne.n	800a5d8 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x200>
  data->quantization_params.zero_point = output->params.zero_point;
 800a54e:	f8d9 300c 	ldr.w	r3, [r9, #12]
  data->quantization_params.scale = static_cast<double>(output->params.scale);
 800a552:	f8d9 0008 	ldr.w	r0, [r9, #8]
  data->quantization_params.zero_point = output->params.zero_point;
 800a556:	6033      	str	r3, [r6, #0]
  data->quantization_params.scale = static_cast<double>(output->params.scale);
 800a558:	f7f6 f82e 	bl	80005b8 <__aeabi_f2d>
  data->input_zero_point = input->params.zero_point;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	61b3      	str	r3, [r6, #24]
  micro_context->DeallocateTempTfLiteTensor(input);
 800a560:	f8d8 3000 	ldr.w	r3, [r8]
  data->quantization_params.scale = static_cast<double>(output->params.scale);
 800a564:	e9c6 0102 	strd	r0, r1, [r6, #8]
  micro_context->DeallocateTempTfLiteTensor(input);
 800a568:	699b      	ldr	r3, [r3, #24]
 800a56a:	4639      	mov	r1, r7
 800a56c:	4640      	mov	r0, r8
 800a56e:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(output);
 800a570:	f8d8 3000 	ldr.w	r3, [r8]
 800a574:	4649      	mov	r1, r9
 800a576:	699b      	ldr	r3, [r3, #24]
 800a578:	4640      	mov	r0, r8
 800a57a:	4798      	blx	r3
  return kTfLiteOk;
 800a57c:	2400      	movs	r4, #0
 800a57e:	e746      	b.n	800a40e <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x36>
  if ((input->type == kTfLiteInt16 && output->type == kTfLiteInt8) ||
 800a580:	2b07      	cmp	r3, #7
 800a582:	d009      	beq.n	800a598 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1c0>
 800a584:	2b09      	cmp	r3, #9
 800a586:	d007      	beq.n	800a598 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1c0>
      (input->type == kTfLiteInt8 && output->type == kTfLiteUInt8) ||
 800a588:	2b03      	cmp	r3, #3
 800a58a:	d031      	beq.n	800a5f0 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x218>
      (input->type == kTfLiteInt16 && output->type == kTfLiteInt32) ||
 800a58c:	2b02      	cmp	r3, #2
 800a58e:	d1de      	bne.n	800a54e <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x176>
      (input->type == kTfLiteInt32 && output->type == kTfLiteInt8) ||
 800a590:	2a09      	cmp	r2, #9
 800a592:	d001      	beq.n	800a598 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1c0>
      (input->type == kTfLiteInt32 && output->type == kTfLiteInt16)) {
 800a594:	2a07      	cmp	r2, #7
 800a596:	d1da      	bne.n	800a54e <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x176>
    double effective_scale = static_cast<double>(input->params.scale) /
 800a598:	68b8      	ldr	r0, [r7, #8]
 800a59a:	f7f6 f80d 	bl	80005b8 <__aeabi_f2d>
 800a59e:	4604      	mov	r4, r0
                             static_cast<double>(output->params.scale);
 800a5a0:	f8d9 0008 	ldr.w	r0, [r9, #8]
    double effective_scale = static_cast<double>(input->params.scale) /
 800a5a4:	460d      	mov	r5, r1
                             static_cast<double>(output->params.scale);
 800a5a6:	f7f6 f807 	bl	80005b8 <__aeabi_f2d>
 800a5aa:	4602      	mov	r2, r0
 800a5ac:	460b      	mov	r3, r1
    double effective_scale = static_cast<double>(input->params.scale) /
 800a5ae:	4620      	mov	r0, r4
 800a5b0:	4629      	mov	r1, r5
 800a5b2:	f7f6 f983 	bl	80008bc <__aeabi_ddiv>
    QuantizeMultiplier(effective_scale, &data->requantize_output_multiplier,
 800a5b6:	f106 0a14 	add.w	sl, r6, #20
 800a5ba:	f106 0410 	add.w	r4, r6, #16
    double effective_scale = static_cast<double>(input->params.scale) /
 800a5be:	ec41 0b10 	vmov	d0, r0, r1
    QuantizeMultiplier(effective_scale, &data->requantize_output_multiplier,
 800a5c2:	4651      	mov	r1, sl
 800a5c4:	4620      	mov	r0, r4
 800a5c6:	f7fb fe2d 	bl	8006224 <_ZN6tflite18QuantizeMultiplierEdPlPi>
 800a5ca:	e7c0      	b.n	800a54e <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x176>
      (input->type == kTfLiteInt8 && output->type == kTfLiteInt16) ||
 800a5cc:	2a07      	cmp	r2, #7
 800a5ce:	d0e3      	beq.n	800a598 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1c0>
      (input->type == kTfLiteInt8 && output->type == kTfLiteInt32) ||
 800a5d0:	3a02      	subs	r2, #2
 800a5d2:	2a01      	cmp	r2, #1
 800a5d4:	d8bb      	bhi.n	800a54e <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x176>
 800a5d6:	e7df      	b.n	800a598 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1c0>
 800a5d8:	2b07      	cmp	r3, #7
 800a5da:	d1d7      	bne.n	800a58c <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1b4>
      (input->type == kTfLiteInt16 && output->type == kTfLiteInt16) ||
 800a5dc:	2a07      	cmp	r2, #7
 800a5de:	d0db      	beq.n	800a598 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1c0>
      (input->type == kTfLiteInt16 && output->type == kTfLiteInt32) ||
 800a5e0:	2a02      	cmp	r2, #2
 800a5e2:	d1b4      	bne.n	800a54e <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x176>
 800a5e4:	e7d8      	b.n	800a598 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1c0>
  if ((input->type == kTfLiteInt16 && output->type == kTfLiteInt8) ||
 800a5e6:	2b07      	cmp	r3, #7
 800a5e8:	d0b1      	beq.n	800a54e <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x176>
 800a5ea:	2b09      	cmp	r3, #9
 800a5ec:	d0f0      	beq.n	800a5d0 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1f8>
 800a5ee:	e7cb      	b.n	800a588 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1b0>
      (input->type == kTfLiteUInt8 && output->type == kTfLiteInt8) ||
 800a5f0:	2a09      	cmp	r2, #9
 800a5f2:	d0d1      	beq.n	800a598 <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1c0>
 800a5f4:	e7ab      	b.n	800a54e <_ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x176>
  TFLITE_DCHECK(node->user_data != nullptr);
 800a5f6:	f00c fab9 	bl	8016b6c <abort>
 800a5fa:	bf00      	nop
 800a5fc:	0806c7dc 	.word	0x0806c7dc
 800a600:	0806c5bc 	.word	0x0806c5bc
 800a604:	0806c760 	.word	0x0806c760
 800a608:	0806a478 	.word	0x0806a478
 800a60c:	0806c5cc 	.word	0x0806c5cc
 800a610:	0806a494 	.word	0x0806a494
 800a614:	0806c79c 	.word	0x0806c79c
 800a618:	0806c530 	.word	0x0806c530
 800a61c:	0806a3f0 	.word	0x0806a3f0
 800a620:	0806c508 	.word	0x0806c508
 800a624:	0806c7b8 	.word	0x0806c7b8
 800a628:	0806c7e0 	.word	0x0806c7e0
 800a62c:	0806c87c 	.word	0x0806c87c
 800a630:	0806a4e8 	.word	0x0806a4e8
 800a634:	0806a4fc 	.word	0x0806a4fc

0800a638 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus EvalQuantizeReference(TfLiteContext* context, TfLiteNode* node) {
 800a638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a63c:	ed2d 8b02 	vpush	{d8}
  TFLITE_DCHECK(node->user_data != nullptr);
 800a640:	f8d1 800c 	ldr.w	r8, [r1, #12]
TfLiteStatus EvalQuantizeReference(TfLiteContext* context, TfLiteNode* node) {
 800a644:	b09f      	sub	sp, #124	; 0x7c
  TFLITE_DCHECK(node->user_data != nullptr);
 800a646:	f1b8 0f00 	cmp.w	r8, #0
 800a64a:	f000 8381 	beq.w	800ad50 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x718>
  auto* data = static_cast<OpDataQuantizeReference*>(node->user_data);

  const TfLiteEvalTensor* input = tflite::micro::GetEvalInput(context, node, 0);
 800a64e:	2200      	movs	r2, #0
 800a650:	460c      	mov	r4, r1
 800a652:	4606      	mov	r6, r0
 800a654:	f7ff fd20 	bl	800a098 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 800a658:	4605      	mov	r5, r0
  TfLiteEvalTensor* output = tflite::micro::GetEvalOutput(context, node, 0);
 800a65a:	4621      	mov	r1, r4
 800a65c:	4630      	mov	r0, r6
 800a65e:	2200      	movs	r2, #0
 800a660:	f7ff fd34 	bl	800a0cc <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>

  if (input->type == kTfLiteFloat32) {
 800a664:	7a2c      	ldrb	r4, [r5, #8]
 800a666:	2c01      	cmp	r4, #1
  TfLiteEvalTensor* output = tflite::micro::GetEvalOutput(context, node, 0);
 800a668:	4606      	mov	r6, r0
  if (input->type == kTfLiteFloat32) {
 800a66a:	d00d      	beq.n	800a688 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x50>
        MicroPrintf("Input %s, output %s not supported.",
                    TfLiteTypeGetName(input->type),
                    TfLiteTypeGetName(output->type));
        return kTfLiteError;
    }
  } else if (input->type == kTfLiteInt32) {
 800a66c:	1ea3      	subs	r3, r4, #2
 800a66e:	2b07      	cmp	r3, #7
 800a670:	f200 8094 	bhi.w	800a79c <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x164>
 800a674:	e8df f013 	tbh	[pc, r3, lsl #1]
 800a678:	00e400b7 	.word	0x00e400b7
 800a67c:	00920092 	.word	0x00920092
 800a680:	01120092 	.word	0x01120092
 800a684:	01210092 	.word	0x01210092
    switch (output->type) {
 800a688:	7a03      	ldrb	r3, [r0, #8]
 800a68a:	2b07      	cmp	r3, #7
 800a68c:	f000 8130 	beq.w	800a8f0 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x2b8>
 800a690:	2b09      	cmp	r3, #9
 800a692:	f040 8096 	bne.w	800a7c2 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x18a>
            data->quantization_params, tflite::micro::GetTensorShape(input),
 800a696:	4629      	mov	r1, r5
 800a698:	a802      	add	r0, sp, #8
 800a69a:	f7ff fd23 	bl	800a0e4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
            tflite::micro::GetTensorShape(output),
 800a69e:	4631      	mov	r1, r6
 800a6a0:	a809      	add	r0, sp, #36	; 0x24
  return reinterpret_cast<const T*>(tensor->data.raw);
 800a6a2:	682f      	ldr	r7, [r5, #0]
 800a6a4:	f7ff fd1e 	bl	800a0e4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  int32_t DimensionsCount() const { return size_; }
 800a6a8:	9b02      	ldr	r3, [sp, #8]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
 800a6aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
  return reinterpret_cast<T*>(tensor->data.raw);
 800a6ac:	6835      	ldr	r5, [r6, #0]
inline void AffineQuantize(const tflite::QuantizationParams& op_params,
                           const RuntimeShape& input_shape,
                           const InputT* input_data,
                           const RuntimeShape& output_shape,
                           OutputT* output_data) {
  const int32_t zero_point = op_params.zero_point;
 800a6ae:	f8d8 6000 	ldr.w	r6, [r8]
 800a6b2:	4293      	cmp	r3, r2
  const double scale = op_params.scale;
 800a6b4:	e9d8 8902 	ldrd	r8, r9, [r8, #8]
 800a6b8:	f040 834a 	bne.w	800ad50 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x718>
  for (int i = 0; i < dims_count; ++i) {
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	dd40      	ble.n	800a742 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x10a>
    return dims_[i];
 800a6c0:	9c03      	ldr	r4, [sp, #12]
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800a6c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a6c4:	4294      	cmp	r4, r2
 800a6c6:	f040 8343 	bne.w	800ad50 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x718>
  for (int i = 0; i < dims_count; ++i) {
 800a6ca:	2b01      	cmp	r3, #1
 800a6cc:	d037      	beq.n	800a73e <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x106>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800a6ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a6d0:	9904      	ldr	r1, [sp, #16]
 800a6d2:	4291      	cmp	r1, r2
 800a6d4:	f040 833c 	bne.w	800ad50 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x718>
  for (int i = 0; i < dims_count; ++i) {
 800a6d8:	2b02      	cmp	r3, #2
 800a6da:	d019      	beq.n	800a710 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xd8>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800a6dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a6de:	9905      	ldr	r1, [sp, #20]
 800a6e0:	4291      	cmp	r1, r2
 800a6e2:	f040 8335 	bne.w	800ad50 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x718>
  for (int i = 0; i < dims_count; ++i) {
 800a6e6:	2b03      	cmp	r3, #3
 800a6e8:	d012      	beq.n	800a710 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xd8>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800a6ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a6ec:	9906      	ldr	r1, [sp, #24]
 800a6ee:	4291      	cmp	r1, r2
 800a6f0:	f040 832e 	bne.w	800ad50 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x718>
  for (int i = 0; i < dims_count; ++i) {
 800a6f4:	2b04      	cmp	r3, #4
 800a6f6:	d00b      	beq.n	800a710 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xd8>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800a6f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a6fa:	9907      	ldr	r1, [sp, #28]
 800a6fc:	4291      	cmp	r1, r2
 800a6fe:	f040 8327 	bne.w	800ad50 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x718>
  for (int i = 0; i < dims_count; ++i) {
 800a702:	2b05      	cmp	r3, #5
 800a704:	d004      	beq.n	800a710 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0xd8>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800a706:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a708:	9908      	ldr	r1, [sp, #32]
 800a70a:	4291      	cmp	r1, r2
 800a70c:	f040 8320 	bne.w	800ad50 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x718>
      buffer_size *= dims_data[i];
 800a710:	9a04      	ldr	r2, [sp, #16]
    for (int i = 0; i < size_; i++) {
 800a712:	2b02      	cmp	r3, #2
      buffer_size *= dims_data[i];
 800a714:	fb02 f404 	mul.w	r4, r2, r4
    for (int i = 0; i < size_; i++) {
 800a718:	d011      	beq.n	800a73e <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x106>
      buffer_size *= dims_data[i];
 800a71a:	9a05      	ldr	r2, [sp, #20]
    for (int i = 0; i < size_; i++) {
 800a71c:	2b03      	cmp	r3, #3
      buffer_size *= dims_data[i];
 800a71e:	fb02 f404 	mul.w	r4, r2, r4
    for (int i = 0; i < size_; i++) {
 800a722:	d00c      	beq.n	800a73e <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x106>
      buffer_size *= dims_data[i];
 800a724:	9a06      	ldr	r2, [sp, #24]
    for (int i = 0; i < size_; i++) {
 800a726:	2b04      	cmp	r3, #4
      buffer_size *= dims_data[i];
 800a728:	fb02 f404 	mul.w	r4, r2, r4
    for (int i = 0; i < size_; i++) {
 800a72c:	d007      	beq.n	800a73e <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x106>
 800a72e:	2b05      	cmp	r3, #5
      buffer_size *= dims_data[i];
 800a730:	9a07      	ldr	r2, [sp, #28]
 800a732:	bf18      	it	ne
 800a734:	9b08      	ldrne	r3, [sp, #32]
 800a736:	fb02 f404 	mul.w	r4, r2, r4
 800a73a:	bf18      	it	ne
 800a73c:	435c      	mulne	r4, r3
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
  static constexpr int32_t min_val = std::numeric_limits<OutputT>::min();
  static constexpr int32_t max_val = std::numeric_limits<OutputT>::max();

  for (int i = 0; i < flat_size; i++) {
 800a73e:	2c00      	cmp	r4, #0
 800a740:	dd25      	ble.n	800a78e <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x156>
    const InputT val = input_data[i];
    int32_t unclamped =
        static_cast<int32_t>(TfLiteRound(val / static_cast<float>(scale))) +
 800a742:	4640      	mov	r0, r8
 800a744:	4649      	mov	r1, r9
 800a746:	f7f6 fa67 	bl	8000c18 <__aeabi_d2f>
 800a74a:	ee07 0a10 	vmov	s14, r0
 800a74e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800a752:	ee87 8a87 	vdiv.f32	s16, s15, s14
 800a756:	f105 39ff 	add.w	r9, r5, #4294967295
        zero_point;
    int32_t clamped = std::min(std::max(unclamped, min_val), max_val);
    output_data[i] = clamped;
 800a75a:	f06f 087f 	mvn.w	r8, #127	; 0x7f
    const InputT val = input_data[i];
 800a75e:	ecb7 0a01 	vldmia	r7!, {s0}
 800a762:	ee20 0a08 	vmul.f32	s0, s0, s16
 800a766:	f00c f90f 	bl	8016988 <roundf>
        static_cast<int32_t>(TfLiteRound(val / static_cast<float>(scale))) +
 800a76a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800a76e:	464a      	mov	r2, r9
 800a770:	ee17 3a90 	vmov	r3, s15
 800a774:	4433      	add	r3, r6
    output_data[i] = clamped;
 800a776:	2b7f      	cmp	r3, #127	; 0x7f
 800a778:	bfa8      	it	ge
 800a77a:	237f      	movge	r3, #127	; 0x7f
 800a77c:	4543      	cmp	r3, r8
 800a77e:	bfb8      	it	lt
 800a780:	4643      	movlt	r3, r8
 800a782:	f809 3f01 	strb.w	r3, [r9, #1]!
  for (int i = 0; i < flat_size; i++) {
 800a786:	1c93      	adds	r3, r2, #2
 800a788:	1b5b      	subs	r3, r3, r5
 800a78a:	429c      	cmp	r4, r3
 800a78c:	dce7      	bgt.n	800a75e <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x126>
                TfLiteTypeGetName(input->type),
                TfLiteTypeGetName(output->type));
    return kTfLiteError;
  }

  return kTfLiteOk;
 800a78e:	2400      	movs	r4, #0
}
 800a790:	4620      	mov	r0, r4
 800a792:	b01f      	add	sp, #124	; 0x7c
 800a794:	ecbd 8b02 	vpop	{d8}
 800a798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    MicroPrintf("Input %s, output %s not supported.",
 800a79c:	4620      	mov	r0, r4
 800a79e:	f7fb fcd1 	bl	8006144 <TfLiteTypeGetName>
 800a7a2:	9001      	str	r0, [sp, #4]
 800a7a4:	7a30      	ldrb	r0, [r6, #8]
 800a7a6:	f7fb fccd 	bl	8006144 <TfLiteTypeGetName>
 800a7aa:	9901      	ldr	r1, [sp, #4]
 800a7ac:	4602      	mov	r2, r0
 800a7ae:	48c0      	ldr	r0, [pc, #768]	; (800aab0 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x478>)
 800a7b0:	f7ff f814 	bl	80097dc <_Z11MicroPrintfPKcz>
    return kTfLiteError;
 800a7b4:	2401      	movs	r4, #1
}
 800a7b6:	4620      	mov	r0, r4
 800a7b8:	b01f      	add	sp, #124	; 0x7c
 800a7ba:	ecbd 8b02 	vpop	{d8}
 800a7be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        MicroPrintf("Input %s, output %s not supported.",
 800a7c2:	4620      	mov	r0, r4
 800a7c4:	f7fb fcbe 	bl	8006144 <TfLiteTypeGetName>
 800a7c8:	9001      	str	r0, [sp, #4]
 800a7ca:	7a30      	ldrb	r0, [r6, #8]
 800a7cc:	f7fb fcba 	bl	8006144 <TfLiteTypeGetName>
 800a7d0:	9901      	ldr	r1, [sp, #4]
 800a7d2:	4602      	mov	r2, r0
 800a7d4:	48b6      	ldr	r0, [pc, #728]	; (800aab0 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x478>)
 800a7d6:	f7ff f801 	bl	80097dc <_Z11MicroPrintfPKcz>
}
 800a7da:	4620      	mov	r0, r4
 800a7dc:	b01f      	add	sp, #124	; 0x7c
 800a7de:	ecbd 8b02 	vpop	{d8}
 800a7e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    size_t size = ElementCount(*input->dims);
 800a7e6:	6868      	ldr	r0, [r5, #4]
 800a7e8:	f7ff f87a 	bl	80098e0 <_ZN6tflite12ElementCountERK14TfLiteIntArray>
    switch (output->type) {
 800a7ec:	7a33      	ldrb	r3, [r6, #8]
 800a7ee:	2b07      	cmp	r3, #7
 800a7f0:	f000 81c9 	beq.w	800ab86 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x54e>
 800a7f4:	2b09      	cmp	r3, #9
 800a7f6:	d15e      	bne.n	800a8b6 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x27e>
      return;
    }
  }
  static constexpr int32_t kMinOutput = std::numeric_limits<output_type>::min();
  static constexpr int32_t kMaxOutput = std::numeric_limits<output_type>::max();
  for (int i = 0; i < size; ++i) {
 800a7f8:	2800      	cmp	r0, #0
  return reinterpret_cast<const T*>(tensor->data.raw);
 800a7fa:	682b      	ldr	r3, [r5, #0]
        reference_ops::Requantize(
 800a7fc:	f8d8 7010 	ldr.w	r7, [r8, #16]
  return reinterpret_cast<T*>(tensor->data.raw);
 800a800:	6835      	ldr	r5, [r6, #0]
 800a802:	e9d8 6905 	ldrd	r6, r9, [r8, #20]
 800a806:	f8d8 8000 	ldr.w	r8, [r8]
 800a80a:	ddc0      	ble.n	800a78e <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x156>
 800a80c:	3d01      	subs	r5, #1
 800a80e:	f1a3 0b04 	sub.w	fp, r3, #4
 800a812:	182c      	adds	r4, r5, r0
        MultiplyByQuantizedMultiplier(input, effective_scale_multiplier,
                                      effective_scale_shift) +
        output_zeropoint;
    const int32_t clamped_output =
        std::max(std::min(output, kMaxOutput), kMinOutput);
    output_data[i] = static_cast<output_type>(clamped_output);
 800a814:	f06f 0a7f 	mvn.w	sl, #127	; 0x7f
    const int32_t input = input_data[i] - input_zeropoint;
 800a818:	f85b 0f04 	ldr.w	r0, [fp, #4]!
        MultiplyByQuantizedMultiplier(input, effective_scale_multiplier,
 800a81c:	4632      	mov	r2, r6
 800a81e:	eba0 0009 	sub.w	r0, r0, r9
 800a822:	4639      	mov	r1, r7
 800a824:	f7fb fc9a 	bl	800615c <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
                                      effective_scale_shift) +
 800a828:	4440      	add	r0, r8
    output_data[i] = static_cast<output_type>(clamped_output);
 800a82a:	4550      	cmp	r0, sl
 800a82c:	bfb8      	it	lt
 800a82e:	4650      	movlt	r0, sl
 800a830:	287f      	cmp	r0, #127	; 0x7f
 800a832:	bfa8      	it	ge
 800a834:	207f      	movge	r0, #127	; 0x7f
 800a836:	f805 0f01 	strb.w	r0, [r5, #1]!
  for (int i = 0; i < size; ++i) {
 800a83a:	42a5      	cmp	r5, r4
 800a83c:	d1ec      	bne.n	800a818 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x1e0>
 800a83e:	e7a6      	b.n	800a78e <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x156>
    size_t size = ElementCount(*input->dims);
 800a840:	6868      	ldr	r0, [r5, #4]
 800a842:	f7ff f84d 	bl	80098e0 <_ZN6tflite12ElementCountERK14TfLiteIntArray>
    switch (output->type) {
 800a846:	7a33      	ldrb	r3, [r6, #8]
 800a848:	2b09      	cmp	r3, #9
 800a84a:	d134      	bne.n	800a8b6 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x27e>
        reference_ops::Requantize(
 800a84c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a850:	6833      	ldr	r3, [r6, #0]
  return reinterpret_cast<const T*>(tensor->data.raw);
 800a852:	682c      	ldr	r4, [r5, #0]
      (effective_scale_multiplier == 1 << 30 && effective_scale_shift == 1);
 800a854:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800a858:	e9d8 6905 	ldrd	r6, r9, [r8, #20]
 800a85c:	f8d8 8000 	ldr.w	r8, [r8]
 800a860:	f000 80c6 	beq.w	800a9f0 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x3b8>
  for (int i = 0; i < size; ++i) {
 800a864:	2800      	cmp	r0, #0
 800a866:	dd92      	ble.n	800a78e <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x156>
 800a868:	3c01      	subs	r4, #1
 800a86a:	f103 3bff 	add.w	fp, r3, #4294967295
 800a86e:	1825      	adds	r5, r4, r0
    output_data[i] = static_cast<output_type>(clamped_output);
 800a870:	f06f 0a7f 	mvn.w	sl, #127	; 0x7f
    const int32_t input = input_data[i] - input_zeropoint;
 800a874:	f814 0f01 	ldrb.w	r0, [r4, #1]!
        MultiplyByQuantizedMultiplier(input, effective_scale_multiplier,
 800a878:	4632      	mov	r2, r6
 800a87a:	eba0 0009 	sub.w	r0, r0, r9
 800a87e:	4639      	mov	r1, r7
 800a880:	f7fb fc6c 	bl	800615c <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
                                      effective_scale_shift) +
 800a884:	4440      	add	r0, r8
    output_data[i] = static_cast<output_type>(clamped_output);
 800a886:	4550      	cmp	r0, sl
 800a888:	bfb8      	it	lt
 800a88a:	4650      	movlt	r0, sl
 800a88c:	287f      	cmp	r0, #127	; 0x7f
 800a88e:	bfa8      	it	ge
 800a890:	207f      	movge	r0, #127	; 0x7f
  for (int i = 0; i < size; ++i) {
 800a892:	42ac      	cmp	r4, r5
    output_data[i] = static_cast<output_type>(clamped_output);
 800a894:	f80b 0f01 	strb.w	r0, [fp, #1]!
  for (int i = 0; i < size; ++i) {
 800a898:	d1ec      	bne.n	800a874 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x23c>
 800a89a:	e778      	b.n	800a78e <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x156>
    size_t size = ElementCount(*input->dims);
 800a89c:	6868      	ldr	r0, [r5, #4]
 800a89e:	f7ff f81f 	bl	80098e0 <_ZN6tflite12ElementCountERK14TfLiteIntArray>
    switch (output->type) {
 800a8a2:	7a33      	ldrb	r3, [r6, #8]
 800a8a4:	2b07      	cmp	r3, #7
 800a8a6:	f000 8196 	beq.w	800abd6 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x59e>
 800a8aa:	2b09      	cmp	r3, #9
 800a8ac:	f000 81d9 	beq.w	800ac62 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x62a>
 800a8b0:	2b02      	cmp	r3, #2
 800a8b2:	f000 81b8 	beq.w	800ac26 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x5ee>
        MicroPrintf("Input %s, output %s not supported.",
 800a8b6:	7a28      	ldrb	r0, [r5, #8]
 800a8b8:	e771      	b.n	800a79e <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x166>
    size_t size = ElementCount(*input->dims);
 800a8ba:	6868      	ldr	r0, [r5, #4]
 800a8bc:	f7ff f810 	bl	80098e0 <_ZN6tflite12ElementCountERK14TfLiteIntArray>
    switch (output->type) {
 800a8c0:	7a33      	ldrb	r3, [r6, #8]
 800a8c2:	3b02      	subs	r3, #2
 800a8c4:	2b07      	cmp	r3, #7
 800a8c6:	d8f6      	bhi.n	800a8b6 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x27e>
 800a8c8:	a201      	add	r2, pc, #4	; (adr r2, 800a8d0 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x298>)
 800a8ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8ce:	bf00      	nop
 800a8d0:	0800ab4d 	.word	0x0800ab4d
 800a8d4:	0800ab07 	.word	0x0800ab07
 800a8d8:	0800a8b7 	.word	0x0800a8b7
 800a8dc:	0800a8b7 	.word	0x0800a8b7
 800a8e0:	0800a8b7 	.word	0x0800a8b7
 800a8e4:	0800aab9 	.word	0x0800aab9
 800a8e8:	0800a8b7 	.word	0x0800a8b7
 800a8ec:	0800aa67 	.word	0x0800aa67
            data->quantization_params, tflite::micro::GetTensorShape(input),
 800a8f0:	4629      	mov	r1, r5
 800a8f2:	a810      	add	r0, sp, #64	; 0x40
 800a8f4:	f7ff fbf6 	bl	800a0e4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
            tflite::micro::GetTensorShape(output),
 800a8f8:	4631      	mov	r1, r6
 800a8fa:	a817      	add	r0, sp, #92	; 0x5c
 800a8fc:	682d      	ldr	r5, [r5, #0]
 800a8fe:	f7ff fbf1 	bl	800a0e4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  int32_t DimensionsCount() const { return size_; }
 800a902:	9b10      	ldr	r3, [sp, #64]	; 0x40
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
 800a904:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  return reinterpret_cast<T*>(tensor->data.raw);
 800a906:	6837      	ldr	r7, [r6, #0]
  const int32_t zero_point = op_params.zero_point;
 800a908:	f8d8 6000 	ldr.w	r6, [r8]
 800a90c:	4293      	cmp	r3, r2
  const double scale = op_params.scale;
 800a90e:	e9d8 8902 	ldrd	r8, r9, [r8, #8]
 800a912:	f040 821d 	bne.w	800ad50 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x718>
  for (int i = 0; i < dims_count; ++i) {
 800a916:	2b00      	cmp	r3, #0
 800a918:	dd41      	ble.n	800a99e <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x366>
    return dims_[i];
 800a91a:	9c11      	ldr	r4, [sp, #68]	; 0x44
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800a91c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a91e:	42a2      	cmp	r2, r4
 800a920:	f040 8216 	bne.w	800ad50 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x718>
  for (int i = 0; i < dims_count; ++i) {
 800a924:	2b01      	cmp	r3, #1
 800a926:	d037      	beq.n	800a998 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x360>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800a928:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a92a:	9919      	ldr	r1, [sp, #100]	; 0x64
 800a92c:	4291      	cmp	r1, r2
 800a92e:	f040 820f 	bne.w	800ad50 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x718>
  for (int i = 0; i < dims_count; ++i) {
 800a932:	2b02      	cmp	r3, #2
 800a934:	d019      	beq.n	800a96a <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x332>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800a936:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a938:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a93a:	4291      	cmp	r1, r2
 800a93c:	f040 8208 	bne.w	800ad50 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x718>
  for (int i = 0; i < dims_count; ++i) {
 800a940:	2b03      	cmp	r3, #3
 800a942:	d012      	beq.n	800a96a <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x332>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800a944:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a946:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800a948:	4291      	cmp	r1, r2
 800a94a:	f040 8201 	bne.w	800ad50 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x718>
  for (int i = 0; i < dims_count; ++i) {
 800a94e:	2b04      	cmp	r3, #4
 800a950:	d00b      	beq.n	800a96a <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x332>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800a952:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a954:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a956:	4291      	cmp	r1, r2
 800a958:	f040 81fa 	bne.w	800ad50 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x718>
  for (int i = 0; i < dims_count; ++i) {
 800a95c:	2b05      	cmp	r3, #5
 800a95e:	d004      	beq.n	800a96a <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x332>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800a960:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800a962:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a964:	4291      	cmp	r1, r2
 800a966:	f040 81f3 	bne.w	800ad50 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x718>
      buffer_size *= dims_data[i];
 800a96a:	9a12      	ldr	r2, [sp, #72]	; 0x48
    for (int i = 0; i < size_; i++) {
 800a96c:	2b02      	cmp	r3, #2
      buffer_size *= dims_data[i];
 800a96e:	fb02 f404 	mul.w	r4, r2, r4
    for (int i = 0; i < size_; i++) {
 800a972:	d011      	beq.n	800a998 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x360>
      buffer_size *= dims_data[i];
 800a974:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    for (int i = 0; i < size_; i++) {
 800a976:	2b03      	cmp	r3, #3
      buffer_size *= dims_data[i];
 800a978:	fb02 f404 	mul.w	r4, r2, r4
    for (int i = 0; i < size_; i++) {
 800a97c:	d00c      	beq.n	800a998 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x360>
      buffer_size *= dims_data[i];
 800a97e:	9a14      	ldr	r2, [sp, #80]	; 0x50
    for (int i = 0; i < size_; i++) {
 800a980:	2b04      	cmp	r3, #4
      buffer_size *= dims_data[i];
 800a982:	fb02 f404 	mul.w	r4, r2, r4
    for (int i = 0; i < size_; i++) {
 800a986:	d007      	beq.n	800a998 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x360>
 800a988:	2b05      	cmp	r3, #5
      buffer_size *= dims_data[i];
 800a98a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a98c:	bf18      	it	ne
 800a98e:	9b16      	ldrne	r3, [sp, #88]	; 0x58
 800a990:	fb02 f404 	mul.w	r4, r2, r4
 800a994:	bf18      	it	ne
 800a996:	435c      	mulne	r4, r3
  for (int i = 0; i < flat_size; i++) {
 800a998:	2c00      	cmp	r4, #0
 800a99a:	f77f aef8 	ble.w	800a78e <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x156>
        static_cast<int32_t>(TfLiteRound(val / static_cast<float>(scale))) +
 800a99e:	4640      	mov	r0, r8
 800a9a0:	4649      	mov	r1, r9
 800a9a2:	f7f6 f939 	bl	8000c18 <__aeabi_d2f>
 800a9a6:	ee07 0a10 	vmov	s14, r0
 800a9aa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800a9ae:	ee87 8a87 	vdiv.f32	s16, s15, s14
 800a9b2:	46aa      	mov	sl, r5
    output_data[i] = clamped;
 800a9b4:	4d3f      	ldr	r5, [pc, #252]	; (800aab4 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x47c>)
 800a9b6:	f1a7 0902 	sub.w	r9, r7, #2
 800a9ba:	f647 78ff 	movw	r8, #32767	; 0x7fff
  for (int i = 0; i < flat_size; i++) {
 800a9be:	2700      	movs	r7, #0
 800a9c0:	3701      	adds	r7, #1
    const InputT val = input_data[i];
 800a9c2:	ecba 0a01 	vldmia	sl!, {s0}
 800a9c6:	ee20 0a08 	vmul.f32	s0, s0, s16
 800a9ca:	f00b ffdd 	bl	8016988 <roundf>
        static_cast<int32_t>(TfLiteRound(val / static_cast<float>(scale))) +
 800a9ce:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800a9d2:	ee17 3a90 	vmov	r3, s15
 800a9d6:	4433      	add	r3, r6
    output_data[i] = clamped;
 800a9d8:	4543      	cmp	r3, r8
 800a9da:	bfa8      	it	ge
 800a9dc:	4643      	movge	r3, r8
 800a9de:	42ab      	cmp	r3, r5
 800a9e0:	bfb8      	it	lt
 800a9e2:	462b      	movlt	r3, r5
  for (int i = 0; i < flat_size; i++) {
 800a9e4:	42a7      	cmp	r7, r4
    output_data[i] = clamped;
 800a9e6:	f829 3f02 	strh.w	r3, [r9, #2]!
  for (int i = 0; i < flat_size; i++) {
 800a9ea:	dbe9      	blt.n	800a9c0 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x388>
  return kTfLiteOk;
 800a9ec:	2400      	movs	r4, #0
 800a9ee:	e6cf      	b.n	800a790 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x158>
      (effective_scale_multiplier == 1 << 30 && effective_scale_shift == 1);
 800a9f0:	2e01      	cmp	r6, #1
 800a9f2:	f47f af37 	bne.w	800a864 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x22c>
    const int32_t zero_point_diff = input_zeropoint - output_zeropoint;
 800a9f6:	eba9 0208 	sub.w	r2, r9, r8
    if ((mixed_type_int8_uint8 && zero_point_diff == -128) ||
 800a9fa:	2a80      	cmp	r2, #128	; 0x80
 800a9fc:	f47f af32 	bne.w	800a864 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x22c>
      for (int i = 0; i < size; ++i) {
 800aa00:	2800      	cmp	r0, #0
 800aa02:	f77f aec4 	ble.w	800a78e <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x156>
 800aa06:	1c62      	adds	r2, r4, #1
 800aa08:	1a9a      	subs	r2, r3, r2
 800aa0a:	2a02      	cmp	r2, #2
 800aa0c:	f240 8188 	bls.w	800ad20 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x6e8>
 800aa10:	1e42      	subs	r2, r0, #1
 800aa12:	2a04      	cmp	r2, #4
 800aa14:	f240 8184 	bls.w	800ad20 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x6e8>
 800aa18:	f020 0603 	bic.w	r6, r0, #3
 800aa1c:	4619      	mov	r1, r3
 800aa1e:	4625      	mov	r5, r4
 800aa20:	441e      	add	r6, r3
        output_data[i] = input_data[i] ^ 0x80;
 800aa22:	f855 2b04 	ldr.w	r2, [r5], #4
 800aa26:	f082 3280 	eor.w	r2, r2, #2155905152	; 0x80808080
 800aa2a:	f841 2b04 	str.w	r2, [r1], #4
      for (int i = 0; i < size; ++i) {
 800aa2e:	42b1      	cmp	r1, r6
 800aa30:	d1f7      	bne.n	800aa22 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x3ea>
 800aa32:	0781      	lsls	r1, r0, #30
 800aa34:	f020 0203 	bic.w	r2, r0, #3
 800aa38:	f43f aea9 	beq.w	800a78e <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x156>
        output_data[i] = input_data[i] ^ 0x80;
 800aa3c:	5ca1      	ldrb	r1, [r4, r2]
 800aa3e:	f081 0180 	eor.w	r1, r1, #128	; 0x80
 800aa42:	5499      	strb	r1, [r3, r2]
      for (int i = 0; i < size; ++i) {
 800aa44:	1c51      	adds	r1, r2, #1
 800aa46:	4288      	cmp	r0, r1
 800aa48:	f77f aea1 	ble.w	800a78e <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x156>
        output_data[i] = input_data[i] ^ 0x80;
 800aa4c:	5c65      	ldrb	r5, [r4, r1]
      for (int i = 0; i < size; ++i) {
 800aa4e:	3202      	adds	r2, #2
        output_data[i] = input_data[i] ^ 0x80;
 800aa50:	f085 0580 	eor.w	r5, r5, #128	; 0x80
      for (int i = 0; i < size; ++i) {
 800aa54:	4290      	cmp	r0, r2
        output_data[i] = input_data[i] ^ 0x80;
 800aa56:	545d      	strb	r5, [r3, r1]
      for (int i = 0; i < size; ++i) {
 800aa58:	f77f ae99 	ble.w	800a78e <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x156>
        output_data[i] = input_data[i] ^ 0x80;
 800aa5c:	5ca1      	ldrb	r1, [r4, r2]
 800aa5e:	f081 0180 	eor.w	r1, r1, #128	; 0x80
 800aa62:	5499      	strb	r1, [r3, r2]
      for (int i = 0; i < size; ++i) {
 800aa64:	e693      	b.n	800a78e <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x156>
  for (int i = 0; i < size; ++i) {
 800aa66:	2800      	cmp	r0, #0
        reference_ops::Requantize(
 800aa68:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800aa6c:	6833      	ldr	r3, [r6, #0]
  return reinterpret_cast<const T*>(tensor->data.raw);
 800aa6e:	682d      	ldr	r5, [r5, #0]
 800aa70:	e9d8 6905 	ldrd	r6, r9, [r8, #20]
 800aa74:	f8d8 8000 	ldr.w	r8, [r8]
 800aa78:	f77f ae89 	ble.w	800a78e <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x156>
 800aa7c:	3d01      	subs	r5, #1
 800aa7e:	f103 3bff 	add.w	fp, r3, #4294967295
 800aa82:	182c      	adds	r4, r5, r0
    output_data[i] = static_cast<output_type>(clamped_output);
 800aa84:	f06f 0a7f 	mvn.w	sl, #127	; 0x7f
    const int32_t input = input_data[i] - input_zeropoint;
 800aa88:	f915 0f01 	ldrsb.w	r0, [r5, #1]!
        MultiplyByQuantizedMultiplier(input, effective_scale_multiplier,
 800aa8c:	4632      	mov	r2, r6
 800aa8e:	eba0 0009 	sub.w	r0, r0, r9
 800aa92:	4639      	mov	r1, r7
 800aa94:	f7fb fb62 	bl	800615c <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
                                      effective_scale_shift) +
 800aa98:	4440      	add	r0, r8
    output_data[i] = static_cast<output_type>(clamped_output);
 800aa9a:	4550      	cmp	r0, sl
 800aa9c:	bfb8      	it	lt
 800aa9e:	4650      	movlt	r0, sl
 800aaa0:	287f      	cmp	r0, #127	; 0x7f
 800aaa2:	bfa8      	it	ge
 800aaa4:	207f      	movge	r0, #127	; 0x7f
  for (int i = 0; i < size; ++i) {
 800aaa6:	42a5      	cmp	r5, r4
    output_data[i] = static_cast<output_type>(clamped_output);
 800aaa8:	f80b 0f01 	strb.w	r0, [fp, #1]!
  for (int i = 0; i < size; ++i) {
 800aaac:	d1ec      	bne.n	800aa88 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x450>
 800aaae:	e66e      	b.n	800a78e <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x156>
 800aab0:	0806c558 	.word	0x0806c558
 800aab4:	ffff8000 	.word	0xffff8000
 800aab8:	2800      	cmp	r0, #0
        reference_ops::Requantize(
 800aaba:	e9d8 7905 	ldrd	r7, r9, [r8, #20]
 800aabe:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800aac2:	682d      	ldr	r5, [r5, #0]
  return reinterpret_cast<T*>(tensor->data.raw);
 800aac4:	6836      	ldr	r6, [r6, #0]
 800aac6:	f8d8 8000 	ldr.w	r8, [r8]
 800aaca:	f77f ae60 	ble.w	800a78e <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x156>
 800aace:	3d01      	subs	r5, #1
    output_data[i] = static_cast<output_type>(clamped_output);
 800aad0:	f8df b280 	ldr.w	fp, [pc, #640]	; 800ad54 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x71c>
 800aad4:	3e02      	subs	r6, #2
 800aad6:	182c      	adds	r4, r5, r0
 800aad8:	f647 7aff 	movw	sl, #32767	; 0x7fff
    const int32_t input = input_data[i] - input_zeropoint;
 800aadc:	f915 0f01 	ldrsb.w	r0, [r5, #1]!
        MultiplyByQuantizedMultiplier(input, effective_scale_multiplier,
 800aae0:	9101      	str	r1, [sp, #4]
 800aae2:	eba0 0009 	sub.w	r0, r0, r9
 800aae6:	463a      	mov	r2, r7
 800aae8:	f7fb fb38 	bl	800615c <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
                                      effective_scale_shift) +
 800aaec:	4440      	add	r0, r8
    output_data[i] = static_cast<output_type>(clamped_output);
 800aaee:	4558      	cmp	r0, fp
 800aaf0:	bfb8      	it	lt
 800aaf2:	4658      	movlt	r0, fp
 800aaf4:	4550      	cmp	r0, sl
 800aaf6:	bfa8      	it	ge
 800aaf8:	4650      	movge	r0, sl
  for (int i = 0; i < size; ++i) {
 800aafa:	42a5      	cmp	r5, r4
    output_data[i] = static_cast<output_type>(clamped_output);
 800aafc:	f826 0f02 	strh.w	r0, [r6, #2]!
  for (int i = 0; i < size; ++i) {
 800ab00:	9901      	ldr	r1, [sp, #4]
 800ab02:	d1eb      	bne.n	800aadc <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x4a4>
 800ab04:	e643      	b.n	800a78e <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x156>
        reference_ops::Requantize(
 800ab06:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ab0a:	6833      	ldr	r3, [r6, #0]
  return reinterpret_cast<const T*>(tensor->data.raw);
 800ab0c:	682d      	ldr	r5, [r5, #0]
      (effective_scale_multiplier == 1 << 30 && effective_scale_shift == 1);
 800ab0e:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800ab12:	e9d8 6905 	ldrd	r6, r9, [r8, #20]
 800ab16:	f8d8 8000 	ldr.w	r8, [r8]
 800ab1a:	f000 80c8 	beq.w	800acae <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x676>
  for (int i = 0; i < size; ++i) {
 800ab1e:	2800      	cmp	r0, #0
 800ab20:	f77f ae35 	ble.w	800a78e <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x156>
 800ab24:	3d01      	subs	r5, #1
 800ab26:	f103 3aff 	add.w	sl, r3, #4294967295
 800ab2a:	182c      	adds	r4, r5, r0
    const int32_t input = input_data[i] - input_zeropoint;
 800ab2c:	f915 0f01 	ldrsb.w	r0, [r5, #1]!
        MultiplyByQuantizedMultiplier(input, effective_scale_multiplier,
 800ab30:	4632      	mov	r2, r6
 800ab32:	eba0 0009 	sub.w	r0, r0, r9
 800ab36:	4639      	mov	r1, r7
 800ab38:	f7fb fb10 	bl	800615c <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
                                      effective_scale_shift) +
 800ab3c:	4440      	add	r0, r8
    output_data[i] = static_cast<output_type>(clamped_output);
 800ab3e:	f380 0008 	usat	r0, #8, r0
  for (int i = 0; i < size; ++i) {
 800ab42:	42a5      	cmp	r5, r4
    output_data[i] = static_cast<output_type>(clamped_output);
 800ab44:	f80a 0f01 	strb.w	r0, [sl, #1]!
  for (int i = 0; i < size; ++i) {
 800ab48:	d1f0      	bne.n	800ab2c <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x4f4>
 800ab4a:	e620      	b.n	800a78e <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x156>
 800ab4c:	2800      	cmp	r0, #0
        reference_ops::Requantize(
 800ab4e:	f8d8 7010 	ldr.w	r7, [r8, #16]
  return reinterpret_cast<T*>(tensor->data.raw);
 800ab52:	6833      	ldr	r3, [r6, #0]
  return reinterpret_cast<const T*>(tensor->data.raw);
 800ab54:	682d      	ldr	r5, [r5, #0]
 800ab56:	e9d8 6905 	ldrd	r6, r9, [r8, #20]
 800ab5a:	f8d8 8000 	ldr.w	r8, [r8]
 800ab5e:	f77f ae16 	ble.w	800a78e <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x156>
 800ab62:	3d01      	subs	r5, #1
 800ab64:	f1a3 0a04 	sub.w	sl, r3, #4
 800ab68:	182c      	adds	r4, r5, r0
    const int32_t input = input_data[i] - input_zeropoint;
 800ab6a:	f915 0f01 	ldrsb.w	r0, [r5, #1]!
        MultiplyByQuantizedMultiplier(input, effective_scale_multiplier,
 800ab6e:	4632      	mov	r2, r6
 800ab70:	eba0 0009 	sub.w	r0, r0, r9
 800ab74:	4639      	mov	r1, r7
 800ab76:	f7fb faf1 	bl	800615c <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
  for (int i = 0; i < size; ++i) {
 800ab7a:	42ac      	cmp	r4, r5
                                      effective_scale_shift) +
 800ab7c:	4440      	add	r0, r8
    output_data[i] = static_cast<output_type>(clamped_output);
 800ab7e:	f84a 0f04 	str.w	r0, [sl, #4]!
  for (int i = 0; i < size; ++i) {
 800ab82:	d1f2      	bne.n	800ab6a <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x532>
 800ab84:	e603      	b.n	800a78e <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x156>
 800ab86:	2800      	cmp	r0, #0
        reference_ops::Requantize(
 800ab88:	e9d8 7905 	ldrd	r7, r9, [r8, #20]
 800ab8c:	682b      	ldr	r3, [r5, #0]
 800ab8e:	f8d8 1010 	ldr.w	r1, [r8, #16]
  return reinterpret_cast<T*>(tensor->data.raw);
 800ab92:	6835      	ldr	r5, [r6, #0]
 800ab94:	f8d8 8000 	ldr.w	r8, [r8]
 800ab98:	f77f adf9 	ble.w	800a78e <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x156>
 800ab9c:	3d02      	subs	r5, #2
    output_data[i] = static_cast<output_type>(clamped_output);
 800ab9e:	f8df b1b4 	ldr.w	fp, [pc, #436]	; 800ad54 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x71c>
 800aba2:	1f1e      	subs	r6, r3, #4
 800aba4:	eb05 0440 	add.w	r4, r5, r0, lsl #1
 800aba8:	f647 7aff 	movw	sl, #32767	; 0x7fff
    const int32_t input = input_data[i] - input_zeropoint;
 800abac:	f856 0f04 	ldr.w	r0, [r6, #4]!
        MultiplyByQuantizedMultiplier(input, effective_scale_multiplier,
 800abb0:	9101      	str	r1, [sp, #4]
 800abb2:	eba0 0009 	sub.w	r0, r0, r9
 800abb6:	463a      	mov	r2, r7
 800abb8:	f7fb fad0 	bl	800615c <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
                                      effective_scale_shift) +
 800abbc:	4440      	add	r0, r8
    output_data[i] = static_cast<output_type>(clamped_output);
 800abbe:	4558      	cmp	r0, fp
 800abc0:	bfb8      	it	lt
 800abc2:	4658      	movlt	r0, fp
 800abc4:	4550      	cmp	r0, sl
 800abc6:	bfa8      	it	ge
 800abc8:	4650      	movge	r0, sl
 800abca:	f825 0f02 	strh.w	r0, [r5, #2]!
  for (int i = 0; i < size; ++i) {
 800abce:	42ac      	cmp	r4, r5
 800abd0:	9901      	ldr	r1, [sp, #4]
 800abd2:	d1eb      	bne.n	800abac <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x574>
 800abd4:	e5db      	b.n	800a78e <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x156>
 800abd6:	2800      	cmp	r0, #0
        reference_ops::Requantize(
 800abd8:	e9d8 7905 	ldrd	r7, r9, [r8, #20]
 800abdc:	f8d8 1010 	ldr.w	r1, [r8, #16]
  return reinterpret_cast<const T*>(tensor->data.raw);
 800abe0:	682d      	ldr	r5, [r5, #0]
  return reinterpret_cast<T*>(tensor->data.raw);
 800abe2:	6836      	ldr	r6, [r6, #0]
 800abe4:	f8d8 8000 	ldr.w	r8, [r8]
 800abe8:	f77f add1 	ble.w	800a78e <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x156>
 800abec:	3d02      	subs	r5, #2
    output_data[i] = static_cast<output_type>(clamped_output);
 800abee:	f8df b164 	ldr.w	fp, [pc, #356]	; 800ad54 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x71c>
 800abf2:	3e02      	subs	r6, #2
 800abf4:	eb05 0440 	add.w	r4, r5, r0, lsl #1
 800abf8:	f647 7aff 	movw	sl, #32767	; 0x7fff
    const int32_t input = input_data[i] - input_zeropoint;
 800abfc:	f935 0f02 	ldrsh.w	r0, [r5, #2]!
        MultiplyByQuantizedMultiplier(input, effective_scale_multiplier,
 800ac00:	9101      	str	r1, [sp, #4]
 800ac02:	eba0 0009 	sub.w	r0, r0, r9
 800ac06:	463a      	mov	r2, r7
 800ac08:	f7fb faa8 	bl	800615c <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
                                      effective_scale_shift) +
 800ac0c:	4440      	add	r0, r8
    output_data[i] = static_cast<output_type>(clamped_output);
 800ac0e:	4558      	cmp	r0, fp
 800ac10:	bfb8      	it	lt
 800ac12:	4658      	movlt	r0, fp
 800ac14:	4550      	cmp	r0, sl
 800ac16:	bfa8      	it	ge
 800ac18:	4650      	movge	r0, sl
  for (int i = 0; i < size; ++i) {
 800ac1a:	42a5      	cmp	r5, r4
    output_data[i] = static_cast<output_type>(clamped_output);
 800ac1c:	f826 0f02 	strh.w	r0, [r6, #2]!
  for (int i = 0; i < size; ++i) {
 800ac20:	9901      	ldr	r1, [sp, #4]
 800ac22:	d1eb      	bne.n	800abfc <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x5c4>
 800ac24:	e5b3      	b.n	800a78e <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x156>
 800ac26:	2800      	cmp	r0, #0
        reference_ops::Requantize(
 800ac28:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ac2c:	6833      	ldr	r3, [r6, #0]
  return reinterpret_cast<const T*>(tensor->data.raw);
 800ac2e:	682d      	ldr	r5, [r5, #0]
 800ac30:	e9d8 6905 	ldrd	r6, r9, [r8, #20]
 800ac34:	f8d8 8000 	ldr.w	r8, [r8]
 800ac38:	f77f ada9 	ble.w	800a78e <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x156>
 800ac3c:	3d02      	subs	r5, #2
 800ac3e:	f1a3 0a04 	sub.w	sl, r3, #4
 800ac42:	eb05 0440 	add.w	r4, r5, r0, lsl #1
    const int32_t input = input_data[i] - input_zeropoint;
 800ac46:	f935 0f02 	ldrsh.w	r0, [r5, #2]!
        MultiplyByQuantizedMultiplier(input, effective_scale_multiplier,
 800ac4a:	4632      	mov	r2, r6
 800ac4c:	eba0 0009 	sub.w	r0, r0, r9
 800ac50:	4639      	mov	r1, r7
 800ac52:	f7fb fa83 	bl	800615c <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
  for (int i = 0; i < size; ++i) {
 800ac56:	42ac      	cmp	r4, r5
                                      effective_scale_shift) +
 800ac58:	4440      	add	r0, r8
    output_data[i] = static_cast<output_type>(clamped_output);
 800ac5a:	f84a 0f04 	str.w	r0, [sl, #4]!
  for (int i = 0; i < size; ++i) {
 800ac5e:	d1f2      	bne.n	800ac46 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x60e>
 800ac60:	e595      	b.n	800a78e <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x156>
 800ac62:	2800      	cmp	r0, #0
        reference_ops::Requantize(
 800ac64:	f8d8 7010 	ldr.w	r7, [r8, #16]
  return reinterpret_cast<T*>(tensor->data.raw);
 800ac68:	6833      	ldr	r3, [r6, #0]
  return reinterpret_cast<const T*>(tensor->data.raw);
 800ac6a:	682d      	ldr	r5, [r5, #0]
 800ac6c:	e9d8 6905 	ldrd	r6, r9, [r8, #20]
 800ac70:	f8d8 8000 	ldr.w	r8, [r8]
 800ac74:	f77f ad8b 	ble.w	800a78e <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x156>
 800ac78:	3d02      	subs	r5, #2
 800ac7a:	f103 3bff 	add.w	fp, r3, #4294967295
 800ac7e:	eb05 0440 	add.w	r4, r5, r0, lsl #1
    output_data[i] = static_cast<output_type>(clamped_output);
 800ac82:	f06f 0a7f 	mvn.w	sl, #127	; 0x7f
    const int32_t input = input_data[i] - input_zeropoint;
 800ac86:	f935 0f02 	ldrsh.w	r0, [r5, #2]!
        MultiplyByQuantizedMultiplier(input, effective_scale_multiplier,
 800ac8a:	4632      	mov	r2, r6
 800ac8c:	eba0 0009 	sub.w	r0, r0, r9
 800ac90:	4639      	mov	r1, r7
 800ac92:	f7fb fa63 	bl	800615c <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
                                      effective_scale_shift) +
 800ac96:	4440      	add	r0, r8
    output_data[i] = static_cast<output_type>(clamped_output);
 800ac98:	4550      	cmp	r0, sl
 800ac9a:	bfb8      	it	lt
 800ac9c:	4650      	movlt	r0, sl
 800ac9e:	287f      	cmp	r0, #127	; 0x7f
 800aca0:	bfa8      	it	ge
 800aca2:	207f      	movge	r0, #127	; 0x7f
  for (int i = 0; i < size; ++i) {
 800aca4:	42ac      	cmp	r4, r5
    output_data[i] = static_cast<output_type>(clamped_output);
 800aca6:	f80b 0f01 	strb.w	r0, [fp, #1]!
  for (int i = 0; i < size; ++i) {
 800acaa:	d1ec      	bne.n	800ac86 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x64e>
 800acac:	e56f      	b.n	800a78e <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x156>
      (effective_scale_multiplier == 1 << 30 && effective_scale_shift == 1);
 800acae:	2e01      	cmp	r6, #1
 800acb0:	f47f af35 	bne.w	800ab1e <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x4e6>
    const int32_t zero_point_diff = input_zeropoint - output_zeropoint;
 800acb4:	eba9 0208 	sub.w	r2, r9, r8
    if ((mixed_type_int8_uint8 && zero_point_diff == -128) ||
 800acb8:	3280      	adds	r2, #128	; 0x80
 800acba:	f47f af30 	bne.w	800ab1e <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x4e6>
      for (int i = 0; i < size; ++i) {
 800acbe:	2800      	cmp	r0, #0
 800acc0:	f77f ad65 	ble.w	800a78e <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x156>
 800acc4:	1c6a      	adds	r2, r5, #1
 800acc6:	1a9a      	subs	r2, r3, r2
 800acc8:	2a02      	cmp	r2, #2
 800acca:	d935      	bls.n	800ad38 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x700>
 800accc:	1e42      	subs	r2, r0, #1
 800acce:	2a04      	cmp	r2, #4
 800acd0:	d932      	bls.n	800ad38 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x700>
 800acd2:	f020 0403 	bic.w	r4, r0, #3
 800acd6:	4619      	mov	r1, r3
 800acd8:	462e      	mov	r6, r5
 800acda:	441c      	add	r4, r3
        output_data[i] = input_data[i] ^ 0x80;
 800acdc:	f856 2b04 	ldr.w	r2, [r6], #4
 800ace0:	f082 3280 	eor.w	r2, r2, #2155905152	; 0x80808080
 800ace4:	f841 2b04 	str.w	r2, [r1], #4
      for (int i = 0; i < size; ++i) {
 800ace8:	42a1      	cmp	r1, r4
 800acea:	d1f7      	bne.n	800acdc <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x6a4>
 800acec:	0784      	lsls	r4, r0, #30
 800acee:	f020 0203 	bic.w	r2, r0, #3
 800acf2:	f43f ad4c 	beq.w	800a78e <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x156>
        output_data[i] = input_data[i] ^ 0x80;
 800acf6:	5ca9      	ldrb	r1, [r5, r2]
 800acf8:	f081 0180 	eor.w	r1, r1, #128	; 0x80
 800acfc:	5499      	strb	r1, [r3, r2]
      for (int i = 0; i < size; ++i) {
 800acfe:	1c51      	adds	r1, r2, #1
 800ad00:	4288      	cmp	r0, r1
 800ad02:	f77f ad44 	ble.w	800a78e <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x156>
        output_data[i] = input_data[i] ^ 0x80;
 800ad06:	5c6c      	ldrb	r4, [r5, r1]
      for (int i = 0; i < size; ++i) {
 800ad08:	3202      	adds	r2, #2
        output_data[i] = input_data[i] ^ 0x80;
 800ad0a:	f084 0480 	eor.w	r4, r4, #128	; 0x80
      for (int i = 0; i < size; ++i) {
 800ad0e:	4290      	cmp	r0, r2
        output_data[i] = input_data[i] ^ 0x80;
 800ad10:	545c      	strb	r4, [r3, r1]
      for (int i = 0; i < size; ++i) {
 800ad12:	f77f ad3c 	ble.w	800a78e <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x156>
        output_data[i] = input_data[i] ^ 0x80;
 800ad16:	5ca9      	ldrb	r1, [r5, r2]
 800ad18:	f081 0180 	eor.w	r1, r1, #128	; 0x80
 800ad1c:	5499      	strb	r1, [r3, r2]
      for (int i = 0; i < size; ++i) {
 800ad1e:	e536      	b.n	800a78e <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x156>
 800ad20:	3c01      	subs	r4, #1
 800ad22:	3b01      	subs	r3, #1
 800ad24:	4420      	add	r0, r4
        output_data[i] = input_data[i] ^ 0x80;
 800ad26:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 800ad2a:	f082 0280 	eor.w	r2, r2, #128	; 0x80
      for (int i = 0; i < size; ++i) {
 800ad2e:	4284      	cmp	r4, r0
        output_data[i] = input_data[i] ^ 0x80;
 800ad30:	f803 2f01 	strb.w	r2, [r3, #1]!
      for (int i = 0; i < size; ++i) {
 800ad34:	d1f7      	bne.n	800ad26 <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x6ee>
 800ad36:	e52a      	b.n	800a78e <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x156>
 800ad38:	3d01      	subs	r5, #1
 800ad3a:	3b01      	subs	r3, #1
 800ad3c:	182c      	adds	r4, r5, r0
        output_data[i] = input_data[i] ^ 0x80;
 800ad3e:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800ad42:	f082 0280 	eor.w	r2, r2, #128	; 0x80
      for (int i = 0; i < size; ++i) {
 800ad46:	42a5      	cmp	r5, r4
        output_data[i] = input_data[i] ^ 0x80;
 800ad48:	f803 2f01 	strb.w	r2, [r3, #1]!
      for (int i = 0; i < size; ++i) {
 800ad4c:	d1f7      	bne.n	800ad3e <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x706>
 800ad4e:	e51e      	b.n	800a78e <_ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode+0x156>
  TFLITE_DCHECK(node->user_data != nullptr);
 800ad50:	f00b ff0c 	bl	8016b6c <abort>
 800ad54:	ffff8000 	.word	0xffff8000

0800ad58 <_ZN6tflite12_GLOBAL__N_120EvalReshapeReferenceEP13TfLiteContextP10TfLiteNode>:
#include "tensorflow/lite/micro/micro_utils.h"

namespace tflite {
namespace {

TfLiteStatus EvalReshapeReference(TfLiteContext* context, TfLiteNode* node) {
 800ad58:	b570      	push	{r4, r5, r6, lr}
  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kReshapeInputTensor);
 800ad5a:	2200      	movs	r2, #0
TfLiteStatus EvalReshapeReference(TfLiteContext* context, TfLiteNode* node) {
 800ad5c:	b082      	sub	sp, #8
 800ad5e:	4604      	mov	r4, r0
 800ad60:	460e      	mov	r6, r1
      tflite::micro::GetEvalInput(context, node, kReshapeInputTensor);
 800ad62:	f7ff f999 	bl	800a098 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kReshapeOutputTensor);
 800ad66:	4631      	mov	r1, r6
      tflite::micro::GetEvalInput(context, node, kReshapeInputTensor);
 800ad68:	4605      	mov	r5, r0
      tflite::micro::GetEvalOutput(context, node, kReshapeOutputTensor);
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	4620      	mov	r0, r4
 800ad6e:	f7ff f9ad 	bl	800a0cc <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>

  // TODO(b/162522304): storing input bytes in OpData increases some models
  // significantly, possibly due to alignment issues.
  size_t input_bytes;
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(input->type, &input_bytes));
 800ad72:	a901      	add	r1, sp, #4
      tflite::micro::GetEvalOutput(context, node, kReshapeOutputTensor);
 800ad74:	4606      	mov	r6, r0
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(input->type, &input_bytes));
 800ad76:	7a28      	ldrb	r0, [r5, #8]
 800ad78:	f7fc f834 	bl	8006de4 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
 800ad7c:	4604      	mov	r4, r0
 800ad7e:	b110      	cbz	r0, 800ad86 <_ZN6tflite12_GLOBAL__N_120EvalReshapeReferenceEP13TfLiteContextP10TfLiteNode+0x2e>
  if (input->data.raw != output->data.raw) {
    // Otherwise perform reshape with copy.
    memcpy(output->data.raw, input->data.raw, input_bytes);
  }
  return kTfLiteOk;
}
 800ad80:	4620      	mov	r0, r4
 800ad82:	b002      	add	sp, #8
 800ad84:	bd70      	pop	{r4, r5, r6, pc}
  input_bytes *= ElementCount(*input->dims);
 800ad86:	6868      	ldr	r0, [r5, #4]
 800ad88:	f7fe fdaa 	bl	80098e0 <_ZN6tflite12ElementCountERK14TfLiteIntArray>
 800ad8c:	9a01      	ldr	r2, [sp, #4]
  if (input->data.raw != output->data.raw) {
 800ad8e:	6829      	ldr	r1, [r5, #0]
 800ad90:	6833      	ldr	r3, [r6, #0]
  input_bytes *= ElementCount(*input->dims);
 800ad92:	fb00 f202 	mul.w	r2, r0, r2
  if (input->data.raw != output->data.raw) {
 800ad96:	4299      	cmp	r1, r3
  input_bytes *= ElementCount(*input->dims);
 800ad98:	9201      	str	r2, [sp, #4]
  if (input->data.raw != output->data.raw) {
 800ad9a:	d0f1      	beq.n	800ad80 <_ZN6tflite12_GLOBAL__N_120EvalReshapeReferenceEP13TfLiteContextP10TfLiteNode+0x28>
    memcpy(output->data.raw, input->data.raw, input_bytes);
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	f00c fe8a 	bl	8017ab6 <memcpy>
}
 800ada2:	4620      	mov	r0, r4
 800ada4:	b002      	add	sp, #8
 800ada6:	bd70      	pop	{r4, r5, r6, pc}

0800ada8 <_ZN6tflite16Register_RESHAPEEv>:

}  // namespace

TFLMRegistration Register_RESHAPE() {
 800ada8:	b510      	push	{r4, lr}
  return tflite::micro::RegisterOp(nullptr, PrepareReshapeReference,
 800adaa:	2100      	movs	r1, #0
TFLMRegistration Register_RESHAPE() {
 800adac:	b082      	sub	sp, #8
  return tflite::micro::RegisterOp(nullptr, PrepareReshapeReference,
 800adae:	e9cd 1100 	strd	r1, r1, [sp]
 800adb2:	4b04      	ldr	r3, [pc, #16]	; (800adc4 <_ZN6tflite16Register_RESHAPEEv+0x1c>)
 800adb4:	4a04      	ldr	r2, [pc, #16]	; (800adc8 <_ZN6tflite16Register_RESHAPEEv+0x20>)
TFLMRegistration Register_RESHAPE() {
 800adb6:	4604      	mov	r4, r0
  return tflite::micro::RegisterOp(nullptr, PrepareReshapeReference,
 800adb8:	f7ff f962 	bl	800a080 <_ZN6tflite5micro10RegisterOpEPFPvP13TfLiteContextPKcjEPF12TfLiteStatusS3_P10TfLiteNodeESC_PFvS3_S1_ESE_>
                                   EvalReshapeReference);
}
 800adbc:	4620      	mov	r0, r4
 800adbe:	b002      	add	sp, #8
 800adc0:	bd10      	pop	{r4, pc}
 800adc2:	bf00      	nop
 800adc4:	0800ad59 	.word	0x0800ad59
 800adc8:	0800b015 	.word	0x0800b015

0800adcc <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode>:

namespace tflite {

namespace {

TfLiteStatus ReshapeOutput(TfLiteContext* context, TfLiteNode* node) {
 800adcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800add0:	ed2d 8b02 	vpush	{d8}
 800add4:	4681      	mov	r9, r0
 800add6:	b089      	sub	sp, #36	; 0x24
 800add8:	68c0      	ldr	r0, [r0, #12]
 800adda:	9105      	str	r1, [sp, #20]
  MicroContext* micro_context = GetMicroContext(context);

  TfLiteTensor* input =
      micro_context->AllocateTempInputTensor(node, kReshapeInputTensor);
 800addc:	2200      	movs	r2, #0
 800adde:	ee08 0a10 	vmov	s16, r0
 800ade2:	f7fd fc9b 	bl	800871c <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
 800ade6:	9006      	str	r0, [sp, #24]
 800ade8:	2800      	cmp	r0, #0
 800adea:	f000 8098 	beq.w	800af1e <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x152>
  TfLiteTensor* output =
      micro_context->AllocateTempOutputTensor(node, kReshapeOutputTensor);
 800adee:	9905      	ldr	r1, [sp, #20]
 800adf0:	ee18 0a10 	vmov	r0, s16
 800adf4:	2200      	movs	r2, #0
 800adf6:	f7fd fca1 	bl	800873c <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
 800adfa:	9007      	str	r0, [sp, #28]
 800adfc:	2800      	cmp	r0, #0
 800adfe:	d07f      	beq.n	800af00 <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x134>
  return NumElements(t->dims);
 800ae00:	9b06      	ldr	r3, [sp, #24]
 800ae02:	695f      	ldr	r7, [r3, #20]
  return NumElements(dims->data, dims->size);
 800ae04:	f8d7 8000 	ldr.w	r8, [r7]
  for (int i = 0; i < num_dims; ++i) {
 800ae08:	f1b8 0f00 	cmp.w	r8, #0
 800ae0c:	bfd8      	it	le
 800ae0e:	2601      	movle	r6, #1
 800ae10:	dd23      	ble.n	800ae5a <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x8e>
 800ae12:	2600      	movs	r6, #0
  int64_t count = 1;
 800ae14:	f04f 0a01 	mov.w	sl, #1
 800ae18:	46b3      	mov	fp, r6
 800ae1a:	e004      	b.n	800ae26 <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x5a>
    if (count <= 0) {
 800ae1c:	f1ba 0f01 	cmp.w	sl, #1
 800ae20:	f17b 0300 	sbcs.w	r3, fp, #0
 800ae24:	db18      	blt.n	800ae58 <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x8c>
    TF_LITE_ASSERT(dims[i] < std::numeric_limits<int>::max() / count);
 800ae26:	4652      	mov	r2, sl
 800ae28:	465b      	mov	r3, fp
 800ae2a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800ae2e:	2100      	movs	r1, #0
 800ae30:	f7f5 ff42 	bl	8000cb8 <__aeabi_ldivmod>
 800ae34:	f857 5f04 	ldr.w	r5, [r7, #4]!
 800ae38:	17ec      	asrs	r4, r5, #31
 800ae3a:	4285      	cmp	r5, r0
 800ae3c:	eb74 0101 	sbcs.w	r1, r4, r1
 800ae40:	f280 80c5 	bge.w	800afce <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x202>
    count *= dims[i];
 800ae44:	fb0a f404 	mul.w	r4, sl, r4
  for (int i = 0; i < num_dims; ++i) {
 800ae48:	3601      	adds	r6, #1
    count *= dims[i];
 800ae4a:	fb05 440b 	mla	r4, r5, fp, r4
  for (int i = 0; i < num_dims; ++i) {
 800ae4e:	45b0      	cmp	r8, r6
    count *= dims[i];
 800ae50:	fbaa ab05 	umull	sl, fp, sl, r5
 800ae54:	44a3      	add	fp, r4
  for (int i = 0; i < num_dims; ++i) {
 800ae56:	d1e1      	bne.n	800ae1c <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x50>
  // Tensorflow's Reshape allows one of the shape components to have the
  // special -1 value, meaning it will be calculated automatically based on the
  // input. Here we calculate what that dimension should be so that the number
  // of output elements in the same as the number of input elements.
  int num_input_elements = NumElements(input);
 800ae58:	4656      	mov	r6, sl
  return node->inputs == nullptr ? 0 : node->inputs->size;
 800ae5a:	9b05      	ldr	r3, [sp, #20]
  TfLiteIntArray* output_shape = output->dims;
 800ae5c:	9a07      	ldr	r2, [sp, #28]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	6951      	ldr	r1, [r2, #20]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d07e      	beq.n	800af64 <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x198>

  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
      output_shape->size == 1 && output_shape->data[0] == 0) {
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	6808      	ldr	r0, [r1, #0]
 800ae6a:	2b01      	cmp	r3, #1
 800ae6c:	f000 808f 	beq.w	800af8e <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1c2>
    output_shape->size = 0;
  }

  int num_output_elements = 1;
  int stretch_dim = -1;
  for (int i = 0; i < output_shape->size; ++i) {
 800ae70:	2800      	cmp	r0, #0
 800ae72:	f340 8094 	ble.w	800af9e <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1d2>
  for (int i = 0; i < num_dims; ++i) {
 800ae76:	2300      	movs	r3, #0
 800ae78:	f04f 35ff 	mov.w	r5, #4294967295
 800ae7c:	2401      	movs	r4, #1
 800ae7e:	e004      	b.n	800ae8a <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xbe>
 800ae80:	3301      	adds	r3, #1
 800ae82:	4283      	cmp	r3, r0
    int value = output_shape->data[i];
    if (value == -1) {
      TF_LITE_ENSURE_EQ(context, stretch_dim, -1);
      stretch_dim = i;
    } else {
      num_output_elements *= value;
 800ae84:	fb02 f404 	mul.w	r4, r2, r4
  for (int i = 0; i < output_shape->size; ++i) {
 800ae88:	da09      	bge.n	800ae9e <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xd2>
    int value = output_shape->data[i];
 800ae8a:	f851 2f04 	ldr.w	r2, [r1, #4]!
    if (value == -1) {
 800ae8e:	1c57      	adds	r7, r2, #1
 800ae90:	d1f6      	bne.n	800ae80 <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xb4>
      TF_LITE_ENSURE_EQ(context, stretch_dim, -1);
 800ae92:	1c6f      	adds	r7, r5, #1
 800ae94:	d168      	bne.n	800af68 <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x19c>
 800ae96:	461d      	mov	r5, r3
  for (int i = 0; i < output_shape->size; ++i) {
 800ae98:	3301      	adds	r3, #1
 800ae9a:	4283      	cmp	r3, r0
 800ae9c:	dbf5      	blt.n	800ae8a <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xbe>
    }
  }
  if (stretch_dim != -1) {
 800ae9e:	1c6b      	adds	r3, r5, #1
 800aea0:	d013      	beq.n	800aeca <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xfe>
    TfLiteEvalTensor* output_eval =
        tflite::micro::GetEvalOutput(context, node, kReshapeOutputTensor);
 800aea2:	9905      	ldr	r1, [sp, #20]
 800aea4:	2200      	movs	r2, #0
 800aea6:	4648      	mov	r0, r9
 800aea8:	f7ff f910 	bl	800a0cc <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
    TF_LITE_ENSURE_STATUS(tflite::micro::CreateWritableTensorDimsWithCopy(
 800aeac:	9f07      	ldr	r7, [sp, #28]
        tflite::micro::GetEvalOutput(context, node, kReshapeOutputTensor);
 800aeae:	4602      	mov	r2, r0
    TF_LITE_ENSURE_STATUS(tflite::micro::CreateWritableTensorDimsWithCopy(
 800aeb0:	4639      	mov	r1, r7
 800aeb2:	4648      	mov	r0, r9
 800aeb4:	f7ff f92c 	bl	800a110 <_ZN6tflite5micro32CreateWritableTensorDimsWithCopyEP13TfLiteContextP12TfLiteTensorP16TfLiteEvalTensor>
 800aeb8:	bb60      	cbnz	r0, 800af14 <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x148>
        context, output, output_eval));
    output_shape = output->dims;  // output tensor dims were moved
    output_shape->data[stretch_dim] = num_input_elements / num_output_elements;
 800aeba:	fb96 f2f4 	sdiv	r2, r6, r4
 800aebe:	697b      	ldr	r3, [r7, #20]
 800aec0:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    num_output_elements *= output_shape->data[stretch_dim];
 800aec4:	fb02 f404 	mul.w	r4, r2, r4
    output_shape->data[stretch_dim] = num_input_elements / num_output_elements;
 800aec8:	605a      	str	r2, [r3, #4]
  }

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 800aeca:	9b06      	ldr	r3, [sp, #24]
 800aecc:	7f18      	ldrb	r0, [r3, #28]
 800aece:	9b07      	ldr	r3, [sp, #28]
 800aed0:	7f1b      	ldrb	r3, [r3, #28]
 800aed2:	4283      	cmp	r3, r0
 800aed4:	d165      	bne.n	800afa2 <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1d6>
  TF_LITE_ENSURE_EQ(context, num_input_elements, num_output_elements);
 800aed6:	42b4      	cmp	r4, r6
 800aed8:	d030      	beq.n	800af3c <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x170>
 800aeda:	e9cd 6402 	strd	r6, r4, [sp, #8]
 800aede:	4a3f      	ldr	r2, [pc, #252]	; (800afdc <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x210>)
 800aee0:	4b3f      	ldr	r3, [pc, #252]	; (800afe0 <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x214>)
 800aee2:	f8d9 4014 	ldr.w	r4, [r9, #20]
 800aee6:	493f      	ldr	r1, [pc, #252]	; (800afe4 <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x218>)
 800aee8:	e9cd 3200 	strd	r3, r2, [sp]
 800aeec:	4648      	mov	r0, r9
 800aeee:	4a3e      	ldr	r2, [pc, #248]	; (800afe8 <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x21c>)
 800aef0:	234e      	movs	r3, #78	; 0x4e
 800aef2:	47a0      	blx	r4
 800aef4:	2001      	movs	r0, #1

  micro_context->DeallocateTempTfLiteTensor(input);
  micro_context->DeallocateTempTfLiteTensor(output);
  return kTfLiteOk;
}
 800aef6:	b009      	add	sp, #36	; 0x24
 800aef8:	ecbd 8b02 	vpop	{d8}
 800aefc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TF_LITE_ENSURE(context, output != nullptr);
 800af00:	4b3a      	ldr	r3, [pc, #232]	; (800afec <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x220>)
 800af02:	f8d9 4014 	ldr.w	r4, [r9, #20]
 800af06:	4a38      	ldr	r2, [pc, #224]	; (800afe8 <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x21c>)
 800af08:	9300      	str	r3, [sp, #0]
 800af0a:	4648      	mov	r0, r9
 800af0c:	4938      	ldr	r1, [pc, #224]	; (800aff0 <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x224>)
 800af0e:	2328      	movs	r3, #40	; 0x28
 800af10:	47a0      	blx	r4
 800af12:	2001      	movs	r0, #1
}
 800af14:	b009      	add	sp, #36	; 0x24
 800af16:	ecbd 8b02 	vpop	{d8}
 800af1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TF_LITE_ENSURE(context, input != nullptr);
 800af1e:	4b35      	ldr	r3, [pc, #212]	; (800aff4 <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x228>)
 800af20:	f8d9 4014 	ldr.w	r4, [r9, #20]
 800af24:	4a30      	ldr	r2, [pc, #192]	; (800afe8 <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x21c>)
 800af26:	9300      	str	r3, [sp, #0]
 800af28:	4648      	mov	r0, r9
 800af2a:	4931      	ldr	r1, [pc, #196]	; (800aff0 <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x224>)
 800af2c:	2325      	movs	r3, #37	; 0x25
 800af2e:	47a0      	blx	r4
 800af30:	2001      	movs	r0, #1
}
 800af32:	b009      	add	sp, #36	; 0x24
 800af34:	ecbd 8b02 	vpop	{d8}
 800af38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  micro_context->DeallocateTempTfLiteTensor(input);
 800af3c:	ee18 4a10 	vmov	r4, s16
 800af40:	6823      	ldr	r3, [r4, #0]
 800af42:	9906      	ldr	r1, [sp, #24]
 800af44:	699b      	ldr	r3, [r3, #24]
 800af46:	ee18 0a10 	vmov	r0, s16
 800af4a:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(output);
 800af4c:	6823      	ldr	r3, [r4, #0]
 800af4e:	9907      	ldr	r1, [sp, #28]
 800af50:	699b      	ldr	r3, [r3, #24]
 800af52:	ee18 0a10 	vmov	r0, s16
 800af56:	4798      	blx	r3
  return kTfLiteOk;
 800af58:	2000      	movs	r0, #0
}
 800af5a:	b009      	add	sp, #36	; 0x24
 800af5c:	ecbd 8b02 	vpop	{d8}
 800af60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      output_shape->size == 1 && output_shape->data[0] == 0) {
 800af64:	6808      	ldr	r0, [r1, #0]
 800af66:	e783      	b.n	800ae70 <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xa4>
      TF_LITE_ENSURE_EQ(context, stretch_dim, -1);
 800af68:	e9cd 5202 	strd	r5, r2, [sp, #8]
 800af6c:	4922      	ldr	r1, [pc, #136]	; (800aff8 <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x22c>)
 800af6e:	4b23      	ldr	r3, [pc, #140]	; (800affc <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x230>)
 800af70:	f8d9 4014 	ldr.w	r4, [r9, #20]
 800af74:	4a1c      	ldr	r2, [pc, #112]	; (800afe8 <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x21c>)
 800af76:	e9cd 3100 	strd	r3, r1, [sp]
 800af7a:	4648      	mov	r0, r9
 800af7c:	4919      	ldr	r1, [pc, #100]	; (800afe4 <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x218>)
 800af7e:	233d      	movs	r3, #61	; 0x3d
 800af80:	47a0      	blx	r4
 800af82:	2001      	movs	r0, #1
}
 800af84:	b009      	add	sp, #36	; 0x24
 800af86:	ecbd 8b02 	vpop	{d8}
 800af8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
 800af8e:	2801      	cmp	r0, #1
 800af90:	f47f af6e 	bne.w	800ae70 <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xa4>
      output_shape->size == 1 && output_shape->data[0] == 0) {
 800af94:	684b      	ldr	r3, [r1, #4]
 800af96:	2b00      	cmp	r3, #0
 800af98:	f47f af6d 	bne.w	800ae76 <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xaa>
    output_shape->size = 0;
 800af9c:	600b      	str	r3, [r1, #0]
  int num_output_elements = 1;
 800af9e:	2401      	movs	r4, #1
 800afa0:	e793      	b.n	800aeca <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xfe>
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 800afa2:	f8d9 5014 	ldr.w	r5, [r9, #20]
 800afa6:	f7fb f8cd 	bl	8006144 <TfLiteTypeGetName>
 800afaa:	9b07      	ldr	r3, [sp, #28]
 800afac:	4604      	mov	r4, r0
 800afae:	7f18      	ldrb	r0, [r3, #28]
 800afb0:	f7fb f8c8 	bl	8006144 <TfLiteTypeGetName>
 800afb4:	4912      	ldr	r1, [pc, #72]	; (800b000 <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x234>)
 800afb6:	4b13      	ldr	r3, [pc, #76]	; (800b004 <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x238>)
 800afb8:	4a0b      	ldr	r2, [pc, #44]	; (800afe8 <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x21c>)
 800afba:	e9cd 3100 	strd	r3, r1, [sp]
 800afbe:	e9cd 4002 	strd	r4, r0, [sp, #8]
 800afc2:	4911      	ldr	r1, [pc, #68]	; (800b008 <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x23c>)
 800afc4:	4648      	mov	r0, r9
 800afc6:	234d      	movs	r3, #77	; 0x4d
 800afc8:	47a8      	blx	r5
 800afca:	2001      	movs	r0, #1
 800afcc:	e7a2      	b.n	800af14 <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x148>
    TF_LITE_ASSERT(dims[i] < std::numeric_limits<int>::max() / count);
 800afce:	490f      	ldr	r1, [pc, #60]	; (800b00c <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x240>)
 800afd0:	480f      	ldr	r0, [pc, #60]	; (800b010 <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x244>)
 800afd2:	f7fe fc03 	bl	80097dc <_Z11MicroPrintfPKcz>
 800afd6:	f00b fdc9 	bl	8016b6c <abort>
 800afda:	bf00      	nop
 800afdc:	0806c9b4 	.word	0x0806c9b4
 800afe0:	0806c9c8 	.word	0x0806c9c8
 800afe4:	0806a478 	.word	0x0806a478
 800afe8:	0806c8f8 	.word	0x0806c8f8
 800afec:	0806c530 	.word	0x0806c530
 800aff0:	0806a3f0 	.word	0x0806a3f0
 800aff4:	0806c508 	.word	0x0806c508
 800aff8:	0806c96c 	.word	0x0806c96c
 800affc:	0806c970 	.word	0x0806c970
 800b000:	0806c998 	.word	0x0806c998
 800b004:	0806c9a8 	.word	0x0806c9a8
 800b008:	0806c97c 	.word	0x0806c97c
 800b00c:	0806c934 	.word	0x0806c934
 800b010:	0806c968 	.word	0x0806c968

0800b014 <_ZN6tflite23PrepareReshapeReferenceEP13TfLiteContextP10TfLiteNode>:

}  // namespace

TfLiteStatus PrepareReshapeReference(TfLiteContext* context, TfLiteNode* node) {
 800b014:	b5f0      	push	{r4, r5, r6, r7, lr}
  return node->inputs == nullptr ? 0 : node->inputs->size;
 800b016:	680b      	ldr	r3, [r1, #0]
 800b018:	b085      	sub	sp, #20
 800b01a:	4604      	mov	r4, r0
 800b01c:	b11b      	cbz	r3, 800b026 <_ZN6tflite23PrepareReshapeReferenceEP13TfLiteContextP10TfLiteNode+0x12>
  TF_LITE_ENSURE(context, NumInputs(node) == 1 || NumInputs(node) == 2);
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	3b01      	subs	r3, #1
 800b022:	2b01      	cmp	r3, #1
 800b024:	d90a      	bls.n	800b03c <_ZN6tflite23PrepareReshapeReferenceEP13TfLiteContextP10TfLiteNode+0x28>
 800b026:	4b1c      	ldr	r3, [pc, #112]	; (800b098 <_ZN6tflite23PrepareReshapeReferenceEP13TfLiteContextP10TfLiteNode+0x84>)
 800b028:	6965      	ldr	r5, [r4, #20]
 800b02a:	4a1c      	ldr	r2, [pc, #112]	; (800b09c <_ZN6tflite23PrepareReshapeReferenceEP13TfLiteContextP10TfLiteNode+0x88>)
 800b02c:	9300      	str	r3, [sp, #0]
 800b02e:	4620      	mov	r0, r4
 800b030:	491b      	ldr	r1, [pc, #108]	; (800b0a0 <_ZN6tflite23PrepareReshapeReferenceEP13TfLiteContextP10TfLiteNode+0x8c>)
 800b032:	2358      	movs	r3, #88	; 0x58
 800b034:	47a8      	blx	r5
 800b036:	2001      	movs	r0, #1
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
  TF_LITE_ENSURE_EQ(context, ReshapeOutput(context, node), kTfLiteOk);
  return kTfLiteOk;
}
 800b038:	b005      	add	sp, #20
 800b03a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return node->outputs == nullptr ? 0 : node->outputs->size;
 800b03c:	684e      	ldr	r6, [r1, #4]
 800b03e:	460d      	mov	r5, r1
 800b040:	b116      	cbz	r6, 800b048 <_ZN6tflite23PrepareReshapeReferenceEP13TfLiteContextP10TfLiteNode+0x34>
 800b042:	6836      	ldr	r6, [r6, #0]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 800b044:	2e01      	cmp	r6, #1
 800b046:	d00f      	beq.n	800b068 <_ZN6tflite23PrepareReshapeReferenceEP13TfLiteContextP10TfLiteNode+0x54>
 800b048:	4b16      	ldr	r3, [pc, #88]	; (800b0a4 <_ZN6tflite23PrepareReshapeReferenceEP13TfLiteContextP10TfLiteNode+0x90>)
 800b04a:	6967      	ldr	r7, [r4, #20]
 800b04c:	9301      	str	r3, [sp, #4]
 800b04e:	2501      	movs	r5, #1
 800b050:	4b15      	ldr	r3, [pc, #84]	; (800b0a8 <_ZN6tflite23PrepareReshapeReferenceEP13TfLiteContextP10TfLiteNode+0x94>)
 800b052:	9300      	str	r3, [sp, #0]
 800b054:	4620      	mov	r0, r4
 800b056:	e9cd 6502 	strd	r6, r5, [sp, #8]
 800b05a:	4a10      	ldr	r2, [pc, #64]	; (800b09c <_ZN6tflite23PrepareReshapeReferenceEP13TfLiteContextP10TfLiteNode+0x88>)
 800b05c:	4913      	ldr	r1, [pc, #76]	; (800b0ac <_ZN6tflite23PrepareReshapeReferenceEP13TfLiteContextP10TfLiteNode+0x98>)
 800b05e:	2359      	movs	r3, #89	; 0x59
 800b060:	47b8      	blx	r7
 800b062:	4628      	mov	r0, r5
}
 800b064:	b005      	add	sp, #20
 800b066:	bdf0      	pop	{r4, r5, r6, r7, pc}
  TF_LITE_ENSURE_EQ(context, ReshapeOutput(context, node), kTfLiteOk);
 800b068:	f7ff feb0 	bl	800adcc <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode>
 800b06c:	2800      	cmp	r0, #0
 800b06e:	d0e3      	beq.n	800b038 <_ZN6tflite23PrepareReshapeReferenceEP13TfLiteContextP10TfLiteNode+0x24>
 800b070:	4629      	mov	r1, r5
 800b072:	4620      	mov	r0, r4
 800b074:	6965      	ldr	r5, [r4, #20]
 800b076:	f7ff fea9 	bl	800adcc <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode>
 800b07a:	2300      	movs	r3, #0
 800b07c:	9303      	str	r3, [sp, #12]
 800b07e:	4b0c      	ldr	r3, [pc, #48]	; (800b0b0 <_ZN6tflite23PrepareReshapeReferenceEP13TfLiteContextP10TfLiteNode+0x9c>)
 800b080:	4a06      	ldr	r2, [pc, #24]	; (800b09c <_ZN6tflite23PrepareReshapeReferenceEP13TfLiteContextP10TfLiteNode+0x88>)
 800b082:	490a      	ldr	r1, [pc, #40]	; (800b0ac <_ZN6tflite23PrepareReshapeReferenceEP13TfLiteContextP10TfLiteNode+0x98>)
 800b084:	e9cd 3001 	strd	r3, r0, [sp, #4]
 800b088:	4b0a      	ldr	r3, [pc, #40]	; (800b0b4 <_ZN6tflite23PrepareReshapeReferenceEP13TfLiteContextP10TfLiteNode+0xa0>)
 800b08a:	9300      	str	r3, [sp, #0]
 800b08c:	4620      	mov	r0, r4
 800b08e:	235a      	movs	r3, #90	; 0x5a
 800b090:	47a8      	blx	r5
 800b092:	4630      	mov	r0, r6
 800b094:	e7d0      	b.n	800b038 <_ZN6tflite23PrepareReshapeReferenceEP13TfLiteContextP10TfLiteNode+0x24>
 800b096:	bf00      	nop
 800b098:	0806c9dc 	.word	0x0806c9dc
 800b09c:	0806c8f8 	.word	0x0806c8f8
 800b0a0:	0806a3f0 	.word	0x0806a3f0
 800b0a4:	0806c7dc 	.word	0x0806c7dc
 800b0a8:	0806c5cc 	.word	0x0806c5cc
 800b0ac:	0806a478 	.word	0x0806a478
 800b0b0:	0806ca0c 	.word	0x0806ca0c
 800b0b4:	0806ca18 	.word	0x0806ca18

0800b0b8 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
  // Index to buffer for optimizations if applicable.
  int buffer_idx;
};

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 800b0b8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800b0ba:	b10b      	cbz	r3, 800b0c0 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0x8>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 800b0bc:	213c      	movs	r1, #60	; 0x3c
 800b0be:	4718      	bx	r3
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 800b0c0:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 800b0c2:	f00b fd53 	bl	8016b6c <abort>
 800b0c6:	bf00      	nop

0800b0c8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:
}

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 800b0c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
 800b0cc:	f8d1 a00c 	ldr.w	sl, [r1, #12]
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 800b0d0:	b0b3      	sub	sp, #204	; 0xcc
  TFLITE_DCHECK(node->user_data != nullptr);
 800b0d2:	f1ba 0f00 	cmp.w	sl, #0
 800b0d6:	f000 8199 	beq.w	800b40c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x344>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 800b0da:	f8d1 b010 	ldr.w	fp, [r1, #16]
 800b0de:	460c      	mov	r4, r1
 800b0e0:	f1bb 0f00 	cmp.w	fp, #0
 800b0e4:	f000 8192 	beq.w	800b40c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x344>
 800b0e8:	68c7      	ldr	r7, [r0, #12]
  OpData* data = static_cast<OpData*>(node->user_data);

  MicroContext* micro_context = GetMicroContext(context);

  TfLiteTensor* input =
      micro_context->AllocateTempInputTensor(node, kConvInputTensor);
 800b0ea:	4ba7      	ldr	r3, [pc, #668]	; (800b388 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2c0>)
 800b0ec:	4605      	mov	r5, r0
 800b0ee:	681a      	ldr	r2, [r3, #0]
 800b0f0:	4638      	mov	r0, r7
 800b0f2:	f7fd fb13 	bl	800871c <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
 800b0f6:	4606      	mov	r6, r0
 800b0f8:	2800      	cmp	r0, #0
 800b0fa:	f000 80ad 	beq.w	800b258 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x190>
  TfLiteTensor* filter =
      micro_context->AllocateTempInputTensor(node, kConvWeightsTensor);
 800b0fe:	4ba3      	ldr	r3, [pc, #652]	; (800b38c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2c4>)
 800b100:	4621      	mov	r1, r4
 800b102:	681a      	ldr	r2, [r3, #0]
 800b104:	4638      	mov	r0, r7
 800b106:	f7fd fb09 	bl	800871c <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei>
  TF_LITE_ENSURE(context, filter != nullptr);
 800b10a:	4680      	mov	r8, r0
 800b10c:	2800      	cmp	r0, #0
 800b10e:	f000 8096 	beq.w	800b23e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x176>
  TfLiteTensor* output =
      micro_context->AllocateTempOutputTensor(node, kConvOutputTensor);
 800b112:	4b9f      	ldr	r3, [pc, #636]	; (800b390 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2c8>)
 800b114:	4621      	mov	r1, r4
 800b116:	681a      	ldr	r2, [r3, #0]
 800b118:	4638      	mov	r0, r7
 800b11a:	f7fd fb0f 	bl	800873c <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
 800b11e:	4681      	mov	r9, r0
 800b120:	2800      	cmp	r0, #0
 800b122:	f000 80c0 	beq.w	800b2a6 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1de>
  TfLiteTensor* bias =
      micro_context->AllocateTempOutputTensor(node, kConvBiasTensor);
 800b126:	4b9b      	ldr	r3, [pc, #620]	; (800b394 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2cc>)
 800b128:	4621      	mov	r1, r4
 800b12a:	681a      	ldr	r2, [r3, #0]
 800b12c:	4638      	mov	r0, r7
 800b12e:	f7fd fb05 	bl	800873c <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei>
  TfLiteType bias_type = bias != nullptr ? bias->type : kTfLiteNoType;
 800b132:	9009      	str	r0, [sp, #36]	; 0x24
 800b134:	2800      	cmp	r0, #0
 800b136:	f000 80c3 	beq.w	800b2c0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1f8>
 800b13a:	7f03      	ldrb	r3, [r0, #28]
 800b13c:	930a      	str	r3, [sp, #40]	; 0x28

  TF_LITE_ENSURE_EQ(context, input->type, output->type);
 800b13e:	7f33      	ldrb	r3, [r6, #28]
 800b140:	f899 201c 	ldrb.w	r2, [r9, #28]
 800b144:	4293      	cmp	r3, r2
 800b146:	f040 8094 	bne.w	800b272 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1aa>
  TF_LITE_ENSURE_MSG(
 800b14a:	f898 201c 	ldrb.w	r2, [r8, #28]
 800b14e:	4293      	cmp	r3, r2
 800b150:	d008      	beq.n	800b164 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x9c>
 800b152:	2b07      	cmp	r3, #7
 800b154:	f000 809e 	beq.w	800b294 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1cc>
 800b158:	2b09      	cmp	r3, #9
 800b15a:	f040 809e 	bne.w	800b29a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1d2>
 800b15e:	2a12      	cmp	r2, #18
 800b160:	f040 809b 	bne.w	800b29a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1d2>
      input->type == filter->type ||
          (input->type == kTfLiteInt16 && filter->type == kTfLiteInt8) ||
          (input->type == kTfLiteInt8 && filter->type == kTfLiteInt4),
      "Hybrid models are not supported on TFLite Micro.");

  RuntimeShape input_shape = GetTensorShape(input);
 800b164:	a81a      	add	r0, sp, #104	; 0x68
 800b166:	4631      	mov	r1, r6
 800b168:	f7fb f8a0 	bl	80062ac <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  RuntimeShape output_shape = GetTensorShape(output);
 800b16c:	4649      	mov	r1, r9
 800b16e:	a821      	add	r0, sp, #132	; 0x84
 800b170:	f7fb f89c 	bl	80062ac <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    TFLITE_DCHECK_LT(i, size_);
 800b174:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b176:	2900      	cmp	r1, #0
 800b178:	f340 8148 	ble.w	800b40c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x344>
 800b17c:	f8dd c084 	ldr.w	ip, [sp, #132]	; 0x84
    return dims_[i];
 800b180:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    TFLITE_DCHECK_LT(i, size_);
 800b182:	f1bc 0f00 	cmp.w	ip, #0
 800b186:	f340 8141 	ble.w	800b40c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x344>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 800b18a:	9822      	ldr	r0, [sp, #136]	; 0x88
 800b18c:	4283      	cmp	r3, r0
 800b18e:	f040 813d 	bne.w	800b40c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x344>

  // Initialize cmsis_nn input dimensions
  cmsis_nn_dims input_dims;
  input_dims.n = MatchingDim(input_shape, 0, output_shape, 0);
  input_dims.h = input->dims->data[1];
 800b192:	6970      	ldr	r0, [r6, #20]
  input_dims.n = MatchingDim(input_shape, 0, output_shape, 0);
 800b194:	930e      	str	r3, [sp, #56]	; 0x38
  input_dims.h = input->dims->data[1];
 800b196:	6882      	ldr	r2, [r0, #8]
  input_dims.w = input->dims->data[2];
 800b198:	f8d0 e00c 	ldr.w	lr, [r0, #12]
  input_dims.h = input->dims->data[1];
 800b19c:	920b      	str	r2, [sp, #44]	; 0x2c
 800b19e:	2903      	cmp	r1, #3
  input_dims.w = input->dims->data[2];
 800b1a0:	e9cd 2e0f 	strd	r2, lr, [sp, #60]	; 0x3c
 800b1a4:	f340 8132 	ble.w	800b40c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x344>
    return dims_[i];
 800b1a8:	981e      	ldr	r0, [sp, #120]	; 0x78
  input_dims.c = input_shape.Dims(3);
 800b1aa:	9011      	str	r0, [sp, #68]	; 0x44
    TFLITE_DCHECK_LT(i, size_);
 800b1ac:	f1bc 0f03 	cmp.w	ip, #3
 800b1b0:	f340 812c 	ble.w	800b40c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x344>
  filter_dims.w = filter->dims->data[2];
  filter_dims.c = input_dims.c;

  // Initialize cmsis_nn output dimensions
  cmsis_nn_dims output_dims;
  output_dims.n = input_dims.n;
 800b1b4:	9316      	str	r3, [sp, #88]	; 0x58
  filter_dims.h = filter->dims->data[1];
 800b1b6:	f8d8 3014 	ldr.w	r3, [r8, #20]
  output_dims.h = output->dims->data[1];
  output_dims.w = output->dims->data[2];
  output_dims.c = output_shape.Dims(3);

  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
 800b1ba:	7f32      	ldrb	r2, [r6, #28]
  filter_dims.h = filter->dims->data[1];
 800b1bc:	6899      	ldr	r1, [r3, #8]
 800b1be:	910c      	str	r1, [sp, #48]	; 0x30
 800b1c0:	9113      	str	r1, [sp, #76]	; 0x4c
  filter_dims.w = filter->dims->data[2];
 800b1c2:	68d9      	ldr	r1, [r3, #12]
  filter_dims.h = filter->dims->data[1];
 800b1c4:	930d      	str	r3, [sp, #52]	; 0x34
  filter_dims.w = filter->dims->data[2];
 800b1c6:	e9cd 1014 	strd	r1, r0, [sp, #80]	; 0x50
  output_dims.h = output->dims->data[1];
 800b1ca:	f8d9 0014 	ldr.w	r0, [r9, #20]
  filter_dims.n = output_shape.Dims(3);
 800b1ce:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800b1d0:	9312      	str	r3, [sp, #72]	; 0x48
  output_dims.w = output->dims->data[2];
 800b1d2:	e9d0 c002 	ldrd	ip, r0, [r0, #8]
  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
 800b1d6:	2a09      	cmp	r2, #9
  output_dims.w = output->dims->data[2];
 800b1d8:	e9cd c017 	strd	ip, r0, [sp, #92]	; 0x5c
  output_dims.c = output_shape.Dims(3);
 800b1dc:	9319      	str	r3, [sp, #100]	; 0x64
  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
 800b1de:	d071      	beq.n	800b2c4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1fc>
 800b1e0:	2a07      	cmp	r2, #7
 800b1e2:	d06f      	beq.n	800b2c4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1fc>
    data->reference_op_data.per_channel_output_shift =
        static_cast<int32_t*>(context->AllocatePersistentBuffer(
            context, num_channels * sizeof(int32_t)));
  }

  TF_LITE_ENSURE_STATUS(CalculateOpDataConv(
 800b1e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b1e6:	9003      	str	r0, [sp, #12]
 800b1e8:	e9cd 1301 	strd	r1, r3, [sp, #4]
 800b1ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1ee:	9300      	str	r3, [sp, #0]
 800b1f0:	e9cd c204 	strd	ip, r2, [sp, #16]
 800b1f4:	4621      	mov	r1, r4
 800b1f6:	f8cd a018 	str.w	sl, [sp, #24]
 800b1fa:	4673      	mov	r3, lr
 800b1fc:	465a      	mov	r2, fp
 800b1fe:	4628      	mov	r0, r5
 800b200:	f7fe fb84 	bl	800990c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>
 800b204:	4604      	mov	r4, r0
 800b206:	bb18      	cbnz	r0, 800b250 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x188>
      context, node, params, input_dims.w, input_dims.h, filter_dims.w,
      filter_dims.h, output_dims.w, output_dims.h, input->type,
      &data->reference_op_data));

  // CMSIS_NN allows INT64 or nullptr bias data pointer
  if (input->type == kTfLiteInt8 ||
 800b208:	7f33      	ldrb	r3, [r6, #28]
 800b20a:	2b09      	cmp	r3, #9
 800b20c:	d07b      	beq.n	800b306 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x23e>
 800b20e:	2b07      	cmp	r3, #7
 800b210:	d075      	beq.n	800b2fe <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x236>
    } else {
      data->buffer_idx = -1;
    }
  }

  micro_context->DeallocateTempTfLiteTensor(output);
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	4649      	mov	r1, r9
 800b216:	699b      	ldr	r3, [r3, #24]
 800b218:	4638      	mov	r0, r7
 800b21a:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(input);
 800b21c:	683b      	ldr	r3, [r7, #0]
 800b21e:	4631      	mov	r1, r6
 800b220:	699b      	ldr	r3, [r3, #24]
 800b222:	4638      	mov	r0, r7
 800b224:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(filter);
 800b226:	683b      	ldr	r3, [r7, #0]
 800b228:	4641      	mov	r1, r8
 800b22a:	699b      	ldr	r3, [r3, #24]
 800b22c:	4638      	mov	r0, r7
 800b22e:	4798      	blx	r3
  if (bias != nullptr) {
 800b230:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b232:	b169      	cbz	r1, 800b250 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x188>
    micro_context->DeallocateTempTfLiteTensor(bias);
 800b234:	683b      	ldr	r3, [r7, #0]
 800b236:	4638      	mov	r0, r7
 800b238:	699b      	ldr	r3, [r3, #24]
 800b23a:	4798      	blx	r3
  ~RuntimeShape() {}
 800b23c:	e008      	b.n	800b250 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x188>
  TF_LITE_ENSURE(context, filter != nullptr);
 800b23e:	4b56      	ldr	r3, [pc, #344]	; (800b398 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2d0>)
 800b240:	696c      	ldr	r4, [r5, #20]
 800b242:	4a56      	ldr	r2, [pc, #344]	; (800b39c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2d4>)
 800b244:	9300      	str	r3, [sp, #0]
 800b246:	4956      	ldr	r1, [pc, #344]	; (800b3a0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2d8>)
 800b248:	233e      	movs	r3, #62	; 0x3e
 800b24a:	4628      	mov	r0, r5
 800b24c:	47a0      	blx	r4
 800b24e:	2401      	movs	r4, #1
  }

  return kTfLiteOk;
}
 800b250:	4620      	mov	r0, r4
 800b252:	b033      	add	sp, #204	; 0xcc
 800b254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TF_LITE_ENSURE(context, input != nullptr);
 800b258:	4b52      	ldr	r3, [pc, #328]	; (800b3a4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2dc>)
 800b25a:	696c      	ldr	r4, [r5, #20]
 800b25c:	4a4f      	ldr	r2, [pc, #316]	; (800b39c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2d4>)
 800b25e:	9300      	str	r3, [sp, #0]
 800b260:	4628      	mov	r0, r5
 800b262:	494f      	ldr	r1, [pc, #316]	; (800b3a0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2d8>)
 800b264:	233b      	movs	r3, #59	; 0x3b
 800b266:	47a0      	blx	r4
 800b268:	2401      	movs	r4, #1
}
 800b26a:	4620      	mov	r0, r4
 800b26c:	b033      	add	sp, #204	; 0xcc
 800b26e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TF_LITE_ENSURE_EQ(context, input->type, output->type);
 800b272:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800b276:	484c      	ldr	r0, [pc, #304]	; (800b3a8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e0>)
 800b278:	494c      	ldr	r1, [pc, #304]	; (800b3ac <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e4>)
 800b27a:	696c      	ldr	r4, [r5, #20]
 800b27c:	4a47      	ldr	r2, [pc, #284]	; (800b39c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2d4>)
 800b27e:	e9cd 1000 	strd	r1, r0, [sp]
 800b282:	2346      	movs	r3, #70	; 0x46
 800b284:	4628      	mov	r0, r5
 800b286:	494a      	ldr	r1, [pc, #296]	; (800b3b0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e8>)
 800b288:	47a0      	blx	r4
 800b28a:	2401      	movs	r4, #1
}
 800b28c:	4620      	mov	r0, r4
 800b28e:	b033      	add	sp, #204	; 0xcc
 800b290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TF_LITE_ENSURE_MSG(
 800b294:	2a09      	cmp	r2, #9
 800b296:	f43f af65 	beq.w	800b164 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x9c>
 800b29a:	696b      	ldr	r3, [r5, #20]
 800b29c:	4945      	ldr	r1, [pc, #276]	; (800b3b4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2ec>)
 800b29e:	4628      	mov	r0, r5
 800b2a0:	4798      	blx	r3
 800b2a2:	2401      	movs	r4, #1
 800b2a4:	e7d4      	b.n	800b250 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x188>
  TF_LITE_ENSURE(context, output != nullptr);
 800b2a6:	4b44      	ldr	r3, [pc, #272]	; (800b3b8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2f0>)
 800b2a8:	696c      	ldr	r4, [r5, #20]
 800b2aa:	4a3c      	ldr	r2, [pc, #240]	; (800b39c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2d4>)
 800b2ac:	9300      	str	r3, [sp, #0]
 800b2ae:	4628      	mov	r0, r5
 800b2b0:	493b      	ldr	r1, [pc, #236]	; (800b3a0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2d8>)
 800b2b2:	2341      	movs	r3, #65	; 0x41
 800b2b4:	47a0      	blx	r4
 800b2b6:	2401      	movs	r4, #1
}
 800b2b8:	4620      	mov	r0, r4
 800b2ba:	b033      	add	sp, #204	; 0xcc
 800b2bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TfLiteType bias_type = bias != nullptr ? bias->type : kTfLiteNoType;
 800b2c0:	900a      	str	r0, [sp, #40]	; 0x28
 800b2c2:	e73c      	b.n	800b13e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x76>
    const int num_channels = filter->dims->data[kConvQuantizedDimension];
 800b2c4:	4a3d      	ldr	r2, [pc, #244]	; (800b3bc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2f4>)
 800b2c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b2c8:	6812      	ldr	r2, [r2, #0]
 800b2ca:	eb03 0382 	add.w	r3, r3, r2, lsl #2
        static_cast<int32_t*>(context->AllocatePersistentBuffer(
 800b2ce:	4628      	mov	r0, r5
 800b2d0:	6859      	ldr	r1, [r3, #4]
 800b2d2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800b2d4:	0089      	lsls	r1, r1, #2
 800b2d6:	910b      	str	r1, [sp, #44]	; 0x2c
 800b2d8:	4798      	blx	r3
        static_cast<int32_t*>(context->AllocatePersistentBuffer(
 800b2da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b2dc:	6bab      	ldr	r3, [r5, #56]	; 0x38
    data->reference_op_data.per_channel_output_multiplier =
 800b2de:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
        static_cast<int32_t*>(context->AllocatePersistentBuffer(
 800b2e2:	4628      	mov	r0, r5
 800b2e4:	4798      	blx	r3
  TF_LITE_ENSURE_STATUS(CalculateOpDataConv(
 800b2e6:	e9dd 3e0f 	ldrd	r3, lr, [sp, #60]	; 0x3c
 800b2ea:	930b      	str	r3, [sp, #44]	; 0x2c
 800b2ec:	e9dd 3113 	ldrd	r3, r1, [sp, #76]	; 0x4c
    data->reference_op_data.per_channel_output_shift =
 800b2f0:	f8ca 0028 	str.w	r0, [sl, #40]	; 0x28
  TF_LITE_ENSURE_STATUS(CalculateOpDataConv(
 800b2f4:	7f32      	ldrb	r2, [r6, #28]
 800b2f6:	930c      	str	r3, [sp, #48]	; 0x30
 800b2f8:	e9dd c017 	ldrd	ip, r0, [sp, #92]	; 0x5c
 800b2fc:	e772      	b.n	800b1e4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x11c>
       (bias_type == kTfLiteInt64 || bias_type == kTfLiteNoType))) {
 800b2fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b300:	f012 0ffb 	tst.w	r2, #251	; 0xfb
 800b304:	d185      	bne.n	800b212 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x14a>
    conv_params.stride.h = params.stride_height;
 800b306:	f8db 0008 	ldr.w	r0, [fp, #8]
    conv_params.input_offset = -input->params.zero_point;
 800b30a:	68f2      	ldr	r2, [r6, #12]
    conv_params.output_offset = output->params.zero_point;
 800b30c:	f8d9 100c 	ldr.w	r1, [r9, #12]
    conv_params.stride.h = params.stride_height;
 800b310:	902b      	str	r0, [sp, #172]	; 0xac
    conv_params.stride.w = params.stride_width;
 800b312:	f8db 0004 	ldr.w	r0, [fp, #4]
 800b316:	902a      	str	r0, [sp, #168]	; 0xa8
    conv_params.dilation.h = params.dilation_height_factor;
 800b318:	f8db 0014 	ldr.w	r0, [fp, #20]
 800b31c:	902f      	str	r0, [sp, #188]	; 0xbc
    conv_params.dilation.w = params.dilation_width_factor;
 800b31e:	f8db 0010 	ldr.w	r0, [fp, #16]
 800b322:	902e      	str	r0, [sp, #184]	; 0xb8
    conv_params.padding.h = data->reference_op_data.padding.height;
 800b324:	f8da 0004 	ldr.w	r0, [sl, #4]
 800b328:	902d      	str	r0, [sp, #180]	; 0xb4
    conv_params.padding.w = data->reference_op_data.padding.width;
 800b32a:	f8da 0000 	ldr.w	r0, [sl]
 800b32e:	902c      	str	r0, [sp, #176]	; 0xb0
    conv_params.activation.min = data->reference_op_data.output_activation_min;
 800b330:	f8da 002c 	ldr.w	r0, [sl, #44]	; 0x2c
 800b334:	9030      	str	r0, [sp, #192]	; 0xc0
    conv_params.activation.max = data->reference_op_data.output_activation_max;
 800b336:	f8da 0030 	ldr.w	r0, [sl, #48]	; 0x30
 800b33a:	9031      	str	r0, [sp, #196]	; 0xc4
    if (input->type == kTfLiteInt8) {
 800b33c:	2b09      	cmp	r3, #9
    conv_params.input_offset = -input->params.zero_point;
 800b33e:	f1c2 0000 	rsb	r0, r2, #0
    conv_params.output_offset = output->params.zero_point;
 800b342:	9129      	str	r1, [sp, #164]	; 0xa4
    conv_params.input_offset = -input->params.zero_point;
 800b344:	9028      	str	r0, [sp, #160]	; 0xa0
    if (input->type == kTfLiteInt8) {
 800b346:	d054      	beq.n	800b3f2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x32a>
      TF_LITE_ENSURE_EQ(context, input->params.zero_point, 0);
 800b348:	b97a      	cbnz	r2, 800b36a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2a2>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
 800b34a:	2900      	cmp	r1, #0
 800b34c:	d03e      	beq.n	800b3cc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x304>
 800b34e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800b352:	481b      	ldr	r0, [pc, #108]	; (800b3c0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2f8>)
 800b354:	4b1b      	ldr	r3, [pc, #108]	; (800b3c4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2fc>)
 800b356:	696c      	ldr	r4, [r5, #20]
 800b358:	4a10      	ldr	r2, [pc, #64]	; (800b39c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2d4>)
 800b35a:	4915      	ldr	r1, [pc, #84]	; (800b3b0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e8>)
 800b35c:	e9cd 3000 	strd	r3, r0, [sp]
 800b360:	238b      	movs	r3, #139	; 0x8b
 800b362:	4628      	mov	r0, r5
 800b364:	47a0      	blx	r4
 800b366:	2401      	movs	r4, #1
 800b368:	e772      	b.n	800b250 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x188>
      TF_LITE_ENSURE_EQ(context, input->params.zero_point, 0);
 800b36a:	4915      	ldr	r1, [pc, #84]	; (800b3c0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2f8>)
 800b36c:	4b16      	ldr	r3, [pc, #88]	; (800b3c8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x300>)
 800b36e:	2000      	movs	r0, #0
 800b370:	9003      	str	r0, [sp, #12]
 800b372:	696c      	ldr	r4, [r5, #20]
 800b374:	9300      	str	r3, [sp, #0]
 800b376:	e9cd 1201 	strd	r1, r2, [sp, #4]
 800b37a:	238a      	movs	r3, #138	; 0x8a
 800b37c:	4a07      	ldr	r2, [pc, #28]	; (800b39c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2d4>)
 800b37e:	490c      	ldr	r1, [pc, #48]	; (800b3b0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e8>)
 800b380:	4628      	mov	r0, r5
 800b382:	47a0      	blx	r4
 800b384:	2401      	movs	r4, #1
 800b386:	e763      	b.n	800b250 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x188>
 800b388:	0806c548 	.word	0x0806c548
 800b38c:	0806c550 	.word	0x0806c550
 800b390:	0806c54c 	.word	0x0806c54c
 800b394:	0806c544 	.word	0x0806c544
 800b398:	0806c51c 	.word	0x0806c51c
 800b39c:	0806ca38 	.word	0x0806ca38
 800b3a0:	0806a3f0 	.word	0x0806a3f0
 800b3a4:	0806c508 	.word	0x0806c508
 800b3a8:	0806c998 	.word	0x0806c998
 800b3ac:	0806c9a8 	.word	0x0806c9a8
 800b3b0:	0806a478 	.word	0x0806a478
 800b3b4:	0806ca74 	.word	0x0806ca74
 800b3b8:	0806c530 	.word	0x0806c530
 800b3bc:	0806c554 	.word	0x0806c554
 800b3c0:	0806cae0 	.word	0x0806cae0
 800b3c4:	0806cb00 	.word	0x0806cb00
 800b3c8:	0806cae4 	.word	0x0806cae4
      buf_size = arm_convolve_wrapper_s16_get_buffer_size(
 800b3cc:	a90e      	add	r1, sp, #56	; 0x38
 800b3ce:	ab16      	add	r3, sp, #88	; 0x58
 800b3d0:	aa12      	add	r2, sp, #72	; 0x48
 800b3d2:	a828      	add	r0, sp, #160	; 0xa0
 800b3d4:	f001 fa07 	bl	800c7e6 <arm_convolve_wrapper_s16_get_buffer_size>
 800b3d8:	4601      	mov	r1, r0
    if (buf_size > 0) {
 800b3da:	2900      	cmp	r1, #0
 800b3dc:	dd11      	ble.n	800b402 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x33a>
      TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
 800b3de:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800b3e0:	f10a 0238 	add.w	r2, sl, #56	; 0x38
 800b3e4:	4628      	mov	r0, r5
 800b3e6:	4798      	blx	r3
 800b3e8:	2800      	cmp	r0, #0
 800b3ea:	f43f af12 	beq.w	800b212 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x14a>
 800b3ee:	4604      	mov	r4, r0
 800b3f0:	e72e      	b.n	800b250 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x188>
      buf_size = arm_convolve_wrapper_s8_get_buffer_size(
 800b3f2:	a90e      	add	r1, sp, #56	; 0x38
 800b3f4:	ab16      	add	r3, sp, #88	; 0x58
 800b3f6:	aa12      	add	r2, sp, #72	; 0x48
 800b3f8:	a828      	add	r0, sp, #160	; 0xa0
 800b3fa:	f001 fa75 	bl	800c8e8 <arm_convolve_wrapper_s8_get_buffer_size>
 800b3fe:	4601      	mov	r1, r0
 800b400:	e7eb      	b.n	800b3da <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x312>
      data->buffer_idx = -1;
 800b402:	f04f 33ff 	mov.w	r3, #4294967295
 800b406:	f8ca 3038 	str.w	r3, [sl, #56]	; 0x38
 800b40a:	e702      	b.n	800b212 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x14a>
  TFLITE_DCHECK(node->user_data != nullptr);
 800b40c:	f00b fbae 	bl	8016b6c <abort>

0800b410 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelIalL10TfLiteType9EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSG_SG_PSE_.constprop.0>:
                                  input, filter_dims, filter, bias_dims, bias,
                                  output_dims, output);
}

template <typename ActType, typename BiasType, TfLiteType type>
TfLiteStatus EvalQuantizedPerChannel(TfLiteContext* context, TfLiteNode* node,
 800b410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b414:	461e      	mov	r6, r3
  cmsis_nn_conv_params conv_params;
  conv_params.dilation.h = params.dilation_height_factor;
  conv_params.dilation.w = params.dilation_width_factor;

  // Initialize cmsis_nn convolution parameters
  conv_params.input_offset = -data.reference_op_data.input_zero_point;
 800b416:	6913      	ldr	r3, [r2, #16]
TfLiteStatus EvalQuantizedPerChannel(TfLiteContext* context, TfLiteNode* node,
 800b418:	b0c2      	sub	sp, #264	; 0x108
  conv_params.input_offset = -data.reference_op_data.input_zero_point;
 800b41a:	425b      	negs	r3, r3
 800b41c:	9338      	str	r3, [sp, #224]	; 0xe0
  conv_params.dilation.h = params.dilation_height_factor;
 800b41e:	694b      	ldr	r3, [r1, #20]
 800b420:	933f      	str	r3, [sp, #252]	; 0xfc
  conv_params.dilation.w = params.dilation_width_factor;
 800b422:	690b      	ldr	r3, [r1, #16]
 800b424:	933e      	str	r3, [sp, #248]	; 0xf8
  conv_params.output_offset = data.reference_op_data.output_zero_point;
 800b426:	6993      	ldr	r3, [r2, #24]
 800b428:	9339      	str	r3, [sp, #228]	; 0xe4
  conv_params.stride.h = params.stride_height;
 800b42a:	688b      	ldr	r3, [r1, #8]
 800b42c:	933b      	str	r3, [sp, #236]	; 0xec
  conv_params.stride.w = params.stride_width;
 800b42e:	684b      	ldr	r3, [r1, #4]
 800b430:	933a      	str	r3, [sp, #232]	; 0xe8
  conv_params.padding.h = data.reference_op_data.padding.height;
 800b432:	6853      	ldr	r3, [r2, #4]
 800b434:	933d      	str	r3, [sp, #244]	; 0xf4
  conv_params.padding.w = data.reference_op_data.padding.width;
 800b436:	6813      	ldr	r3, [r2, #0]
 800b438:	933c      	str	r3, [sp, #240]	; 0xf0
  conv_params.activation.min = data.reference_op_data.output_activation_min;
 800b43a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
TfLiteStatus EvalQuantizedPerChannel(TfLiteContext* context, TfLiteNode* node,
 800b43c:	f8dd 8128 	ldr.w	r8, [sp, #296]	; 0x128
  conv_params.activation.min = data.reference_op_data.output_activation_min;
 800b440:	9340      	str	r3, [sp, #256]	; 0x100
  conv_params.activation.max = data.reference_op_data.output_activation_max;
 800b442:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800b444:	9341      	str	r3, [sp, #260]	; 0x104
TfLiteStatus EvalQuantizedPerChannel(TfLiteContext* context, TfLiteNode* node,
 800b446:	e9dd 574b 	ldrd	r5, r7, [sp, #300]	; 0x12c

  // Initialize cmsis_nn per channel quantization parameters
  cmsis_nn_per_channel_quant_params quant_params;
  quant_params.multiplier = const_cast<int32_t*>(
      data.reference_op_data.per_channel_output_multiplier);
 800b44a:	6a93      	ldr	r3, [r2, #40]	; 0x28
  quant_params.multiplier = const_cast<int32_t*>(
 800b44c:	9309      	str	r3, [sp, #36]	; 0x24
  quant_params.shift =
      const_cast<int32_t*>(data.reference_op_data.per_channel_output_shift);

  RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 800b44e:	4641      	mov	r1, r8
  quant_params.multiplier = const_cast<int32_t*>(
 800b450:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800b452:	9308      	str	r3, [sp, #32]
TfLiteStatus EvalQuantizedPerChannel(TfLiteContext* context, TfLiteNode* node,
 800b454:	4681      	mov	r9, r0
  RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 800b456:	a81c      	add	r0, sp, #112	; 0x70
TfLiteStatus EvalQuantizedPerChannel(TfLiteContext* context, TfLiteNode* node,
 800b458:	4614      	mov	r4, r2
  RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 800b45a:	f7fe fe43 	bl	800a0e4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 800b45e:	4631      	mov	r1, r6
 800b460:	a823      	add	r0, sp, #140	; 0x8c
 800b462:	f7fe fe3f 	bl	800a0e4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 800b466:	4639      	mov	r1, r7
 800b468:	a82a      	add	r0, sp, #168	; 0xa8
 800b46a:	f7fe fe3b 	bl	800a0e4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  RuntimeShape bias_shape = tflite::micro::GetTensorShape(bias);
 800b46e:	4629      	mov	r1, r5
 800b470:	a831      	add	r0, sp, #196	; 0xc4
 800b472:	f7fe fe37 	bl	800a0e4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>

  // Consistency check.
  TFLITE_DCHECK_LE(conv_params.activation.min, conv_params.activation.max);
 800b476:	e9dd 2340 	ldrd	r2, r3, [sp, #256]	; 0x100
 800b47a:	429a      	cmp	r2, r3
 800b47c:	dc6e      	bgt.n	800b55c <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelIalL10TfLiteType9EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSG_SG_PSE_.constprop.0+0x14c>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 800b47e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b480:	2b04      	cmp	r3, #4
 800b482:	d16b      	bne.n	800b55c <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelIalL10TfLiteType9EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSG_SG_PSE_.constprop.0+0x14c>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 800b484:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800b486:	2b04      	cmp	r3, #4
 800b488:	d168      	bne.n	800b55c <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelIalL10TfLiteType9EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSG_SG_PSE_.constprop.0+0x14c>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 800b48a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800b48c:	2b04      	cmp	r3, #4
 800b48e:	d165      	bne.n	800b55c <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelIalL10TfLiteType9EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSG_SG_PSE_.constprop.0+0x14c>
    return dims_[i];
 800b490:	9824      	ldr	r0, [sp, #144]	; 0x90
 800b492:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800b494:	4298      	cmp	r0, r3
 800b496:	d161      	bne.n	800b55c <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelIalL10TfLiteType9EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSG_SG_PSE_.constprop.0+0x14c>
 800b498:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800b49a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b49c:	4293      	cmp	r3, r2
 800b49e:	d15d      	bne.n	800b55c <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelIalL10TfLiteType9EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSG_SG_PSE_.constprop.0+0x14c>
 800b4a0:	f8dd e074 	ldr.w	lr, [sp, #116]	; 0x74
 800b4a4:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800b4a6:	4596      	cmp	lr, r2
 800b4a8:	d158      	bne.n	800b55c <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelIalL10TfLiteType9EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSG_SG_PSE_.constprop.0+0x14c>
}

// Returns const data for a TfLiteEvalTensor struct that could be null.
template <typename T>
const T* GetOptionalTensorData(const TfLiteEvalTensor* tensor) {
  return tensor == nullptr ? nullptr
 800b4aa:	b18d      	cbz	r5, 800b4d0 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelIalL10TfLiteType9EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSG_SG_PSE_.constprop.0+0xc0>
  const int batch_size = MatchingDim(input_shape, 0, output_shape, 0);
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
  if (tflite::micro::GetOptionalTensorData<BiasType>(bias)) {
 800b4ac:	682a      	ldr	r2, [r5, #0]
 800b4ae:	b17a      	cbz	r2, 800b4d0 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelIalL10TfLiteType9EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSG_SG_PSE_.constprop.0+0xc0>
    for (int i = 0; i < size_; i++) {
 800b4b0:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 800b4b2:	2a00      	cmp	r2, #0
 800b4b4:	dd50      	ble.n	800b558 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelIalL10TfLiteType9EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSG_SG_PSE_.constprop.0+0x148>
 800b4b6:	f10d 0cc4 	add.w	ip, sp, #196	; 0xc4
 800b4ba:	eb0c 0a82 	add.w	sl, ip, r2, lsl #2
    int buffer_size = 1;
 800b4be:	2201      	movs	r2, #1
      buffer_size *= dims_data[i];
 800b4c0:	f85c 1f04 	ldr.w	r1, [ip, #4]!
    for (int i = 0; i < size_; i++) {
 800b4c4:	45d4      	cmp	ip, sl
      buffer_size *= dims_data[i];
 800b4c6:	fb01 f202 	mul.w	r2, r1, r2
    for (int i = 0; i < size_; i++) {
 800b4ca:	d1f9      	bne.n	800b4c0 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelIalL10TfLiteType9EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSG_SG_PSE_.constprop.0+0xb0>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 800b4cc:	4596      	cmp	lr, r2
 800b4ce:	d145      	bne.n	800b55c <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelIalL10TfLiteType9EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSG_SG_PSE_.constprop.0+0x14c>
  // Input
  cmsis_nn_dims input_dims;
  input_dims.n = batch_size;
  input_dims.h = input_shape.Dims(1);
  input_dims.w = input_shape.Dims(2);
  input_dims.c = input_depth;
 800b4d0:	930f      	str	r3, [sp, #60]	; 0x3c
  // Filter
  cmsis_nn_dims filter_dims;
  filter_dims.n = output_depth;
  filter_dims.h = filter_shape.Dims(1);
  filter_dims.w = filter_shape.Dims(2);
  filter_dims.c = input_depth;
 800b4d2:	9313      	str	r3, [sp, #76]	; 0x4c

  // Bias
  cmsis_nn_dims bias_dims;
  bias_dims.n = 1;
 800b4d4:	2301      	movs	r3, #1
  bias_dims.h = 1;
 800b4d6:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
  bias_dims.w = 1;
 800b4da:	9316      	str	r3, [sp, #88]	; 0x58
  output_dims.w = output_shape.Dims(2);
  output_dims.c = output_depth;

  // Initialize cmsis_nn context
  cmsis_nn_context ctx;
  ctx.buf = nullptr;
 800b4dc:	2300      	movs	r3, #0
  ctx.size = 0;
 800b4de:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
  input_dims.h = input_shape.Dims(1);
 800b4e2:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800b4e4:	930d      	str	r3, [sp, #52]	; 0x34
  input_dims.w = input_shape.Dims(2);
 800b4e6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b4e8:	930e      	str	r3, [sp, #56]	; 0x38
  filter_dims.h = filter_shape.Dims(1);
 800b4ea:	9b1e      	ldr	r3, [sp, #120]	; 0x78

  if (data.buffer_idx > -1) {
 800b4ec:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  filter_dims.h = filter_shape.Dims(1);
 800b4ee:	9311      	str	r3, [sp, #68]	; 0x44
  filter_dims.w = filter_shape.Dims(2);
 800b4f0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b4f2:	9312      	str	r3, [sp, #72]	; 0x48
  output_dims.h = output_shape.Dims(1);
 800b4f4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800b4f6:	9319      	str	r3, [sp, #100]	; 0x64
  if (data.buffer_idx > -1) {
 800b4f8:	2900      	cmp	r1, #0
  output_dims.w = output_shape.Dims(2);
 800b4fa:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
  input_dims.n = batch_size;
 800b4fc:	900c      	str	r0, [sp, #48]	; 0x30
  output_dims.n = batch_size;
 800b4fe:	9018      	str	r0, [sp, #96]	; 0x60
  filter_dims.n = output_depth;
 800b500:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  bias_dims.c = output_depth;
 800b504:	f8cd e05c 	str.w	lr, [sp, #92]	; 0x5c
  output_dims.c = output_depth;
 800b508:	f8cd e06c 	str.w	lr, [sp, #108]	; 0x6c
  output_dims.w = output_shape.Dims(2);
 800b50c:	931a      	str	r3, [sp, #104]	; 0x68
  if (data.buffer_idx > -1) {
 800b50e:	db04      	blt.n	800b51a <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelIalL10TfLiteType9EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSG_SG_PSE_.constprop.0+0x10a>
    ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
 800b510:	f8d9 3044 	ldr.w	r3, [r9, #68]	; 0x44
 800b514:	4648      	mov	r0, r9
 800b516:	4798      	blx	r3
 800b518:	900a      	str	r0, [sp, #40]	; 0x28
  TFLITE_DCHECK(tensor != nullptr);
 800b51a:	b1fe      	cbz	r6, 800b55c <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelIalL10TfLiteType9EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSG_SG_PSE_.constprop.0+0x14c>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800b51c:	6833      	ldr	r3, [r6, #0]
  TFLITE_DCHECK(tensor != nullptr);
 800b51e:	f1b8 0f00 	cmp.w	r8, #0
 800b522:	d01b      	beq.n	800b55c <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelIalL10TfLiteType9EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSG_SG_PSE_.constprop.0+0x14c>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800b524:	f8d8 1000 	ldr.w	r1, [r8]
  return tensor == nullptr ? nullptr
 800b528:	b105      	cbz	r5, 800b52c <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelIalL10TfLiteType9EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSG_SG_PSE_.constprop.0+0x11c>
 800b52a:	682d      	ldr	r5, [r5, #0]
  TFLITE_DCHECK(tensor != nullptr);
 800b52c:	b1b7      	cbz	r7, 800b55c <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelIalL10TfLiteType9EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSG_SG_PSE_.constprop.0+0x14c>
    return arm_convolve_wrapper_s8(ctx, conv_params, quant_params, input_dims,
 800b52e:	6838      	ldr	r0, [r7, #0]
 800b530:	9300      	str	r3, [sp, #0]
 800b532:	aa18      	add	r2, sp, #96	; 0x60
 800b534:	e9cd 2005 	strd	r2, r0, [sp, #20]
 800b538:	a814      	add	r0, sp, #80	; 0x50
 800b53a:	aa10      	add	r2, sp, #64	; 0x40
 800b53c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800b540:	e9cd 0503 	strd	r0, r5, [sp, #12]
 800b544:	ab0c      	add	r3, sp, #48	; 0x30
 800b546:	aa08      	add	r2, sp, #32
 800b548:	a938      	add	r1, sp, #224	; 0xe0
 800b54a:	a80a      	add	r0, sp, #40	; 0x28
 800b54c:	f001 ff00 	bl	800d350 <arm_convolve_wrapper_s8>
    // the corresponding arm_convolve_wrapper_[type]_get_buffer_size
  }

  // arm_convolve_wrapper_[type] dispatches the optimized kernel accordingly
  // with the parameters passed
  TFLITE_DCHECK_EQ(
 800b550:	b920      	cbnz	r0, 800b55c <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelIalL10TfLiteType9EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSG_SG_PSE_.constprop.0+0x14c>
          tflite::micro::GetOptionalTensorData<BiasType>(bias), &output_dims,
          tflite::micro::GetTensorData<ActType>(output), type),
      ARM_CMSIS_NN_SUCCESS);

  return kTfLiteOk;
}
 800b552:	b042      	add	sp, #264	; 0x108
 800b554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    int buffer_size = 1;
 800b558:	2201      	movs	r2, #1
 800b55a:	e7b7      	b.n	800b4cc <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelIalL10TfLiteType9EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSG_SG_PSE_.constprop.0+0xbc>
  TFLITE_DCHECK_LE(conv_params.activation.min, conv_params.activation.max);
 800b55c:	f00b fb06 	bl	8016b6c <abort>

0800b560 <_ZN6tflite12_GLOBAL__N_18EvalInt8EP13TfLiteContextP10TfLiteNode>:

  return EvalQuantizedPerChannel<int8_t, int32_t, kTfLiteInt4>(
      context, node, params, data, input, filter, bias, output);
}

TfLiteStatus EvalInt8(TfLiteContext* context, TfLiteNode* node) {
 800b560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kConvInputTensor);
 800b564:	4b19      	ldr	r3, [pc, #100]	; (800b5cc <_ZN6tflite12_GLOBAL__N_18EvalInt8EP13TfLiteContextP10TfLiteNode+0x6c>)
TfLiteStatus EvalInt8(TfLiteContext* context, TfLiteNode* node) {
 800b566:	b084      	sub	sp, #16
      tflite::micro::GetEvalInput(context, node, kConvInputTensor);
 800b568:	681a      	ldr	r2, [r3, #0]
TfLiteStatus EvalInt8(TfLiteContext* context, TfLiteNode* node) {
 800b56a:	460c      	mov	r4, r1
 800b56c:	4605      	mov	r5, r0
      tflite::micro::GetEvalInput(context, node, kConvInputTensor);
 800b56e:	f7fe fd93 	bl	800a098 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kConvWeightsTensor);
 800b572:	4b17      	ldr	r3, [pc, #92]	; (800b5d0 <_ZN6tflite12_GLOBAL__N_18EvalInt8EP13TfLiteContextP10TfLiteNode+0x70>)
 800b574:	4621      	mov	r1, r4
 800b576:	681a      	ldr	r2, [r3, #0]
      tflite::micro::GetEvalInput(context, node, kConvInputTensor);
 800b578:	4607      	mov	r7, r0
      tflite::micro::GetEvalInput(context, node, kConvWeightsTensor);
 800b57a:	4628      	mov	r0, r5
 800b57c:	f7fe fd8c 	bl	800a098 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  return node->inputs == nullptr ? 0 : node->inputs->size;
 800b580:	6826      	ldr	r6, [r4, #0]
 800b582:	4680      	mov	r8, r0
 800b584:	b11e      	cbz	r6, 800b58e <_ZN6tflite12_GLOBAL__N_18EvalInt8EP13TfLiteContextP10TfLiteNode+0x2e>
  const TfLiteEvalTensor* bias =
      (NumInputs(node) == 3)
          ? tflite::micro::GetEvalInput(context, node, kConvBiasTensor)
 800b586:	6833      	ldr	r3, [r6, #0]
 800b588:	2b03      	cmp	r3, #3
 800b58a:	d015      	beq.n	800b5b8 <_ZN6tflite12_GLOBAL__N_18EvalInt8EP13TfLiteContextP10TfLiteNode+0x58>
 800b58c:	2600      	movs	r6, #0
          : nullptr;
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kConvOutputTensor);
 800b58e:	4b11      	ldr	r3, [pc, #68]	; (800b5d4 <_ZN6tflite12_GLOBAL__N_18EvalInt8EP13TfLiteContextP10TfLiteNode+0x74>)
 800b590:	4621      	mov	r1, r4
 800b592:	681a      	ldr	r2, [r3, #0]
 800b594:	4628      	mov	r0, r5
 800b596:	f7fe fd99 	bl	800a0cc <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>

  TFLITE_DCHECK(node->builtin_data != nullptr);
 800b59a:	6921      	ldr	r1, [r4, #16]
 800b59c:	b1a1      	cbz	r1, 800b5c8 <_ZN6tflite12_GLOBAL__N_18EvalInt8EP13TfLiteContextP10TfLiteNode+0x68>
  const auto& params =
      *(reinterpret_cast<TfLiteConvParams*>(node->builtin_data));
  TFLITE_DCHECK(node->user_data != nullptr);
 800b59e:	68e2      	ldr	r2, [r4, #12]
 800b5a0:	b192      	cbz	r2, 800b5c8 <_ZN6tflite12_GLOBAL__N_18EvalInt8EP13TfLiteContextP10TfLiteNode+0x68>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));

  return EvalQuantizedPerChannel<int8_t, int32_t, kTfLiteInt8>(
 800b5a2:	e9cd 6001 	strd	r6, r0, [sp, #4]
 800b5a6:	f8cd 8000 	str.w	r8, [sp]
 800b5aa:	463b      	mov	r3, r7
 800b5ac:	4628      	mov	r0, r5
 800b5ae:	f7ff ff2f 	bl	800b410 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelIalL10TfLiteType9EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSG_SG_PSE_.constprop.0>
      context, node, params, data, input, filter, bias, output);
}
 800b5b2:	b004      	add	sp, #16
 800b5b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          ? tflite::micro::GetEvalInput(context, node, kConvBiasTensor)
 800b5b8:	4b07      	ldr	r3, [pc, #28]	; (800b5d8 <_ZN6tflite12_GLOBAL__N_18EvalInt8EP13TfLiteContextP10TfLiteNode+0x78>)
 800b5ba:	4621      	mov	r1, r4
 800b5bc:	681a      	ldr	r2, [r3, #0]
 800b5be:	4628      	mov	r0, r5
 800b5c0:	f7fe fd6a 	bl	800a098 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 800b5c4:	4606      	mov	r6, r0
 800b5c6:	e7e2      	b.n	800b58e <_ZN6tflite12_GLOBAL__N_18EvalInt8EP13TfLiteContextP10TfLiteNode+0x2e>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 800b5c8:	f00b fad0 	bl	8016b6c <abort>
 800b5cc:	0806c548 	.word	0x0806c548
 800b5d0:	0806c550 	.word	0x0806c550
 800b5d4:	0806c54c 	.word	0x0806c54c
 800b5d8:	0806c544 	.word	0x0806c544

0800b5dc <_ZN6tflite21Register_CONV_2D_INT8Ev>:

TFLMRegistration Register_CONV_2D_INT4() {
  return tflite::micro::RegisterOp(Init, Prepare, EvalInt4);
}

TFLMRegistration Register_CONV_2D_INT8() {
 800b5dc:	b510      	push	{r4, lr}
  return tflite::micro::RegisterOp(Init, Prepare, EvalInt8);
 800b5de:	2100      	movs	r1, #0
TFLMRegistration Register_CONV_2D_INT8() {
 800b5e0:	b082      	sub	sp, #8
  return tflite::micro::RegisterOp(Init, Prepare, EvalInt8);
 800b5e2:	e9cd 1100 	strd	r1, r1, [sp]
 800b5e6:	4b04      	ldr	r3, [pc, #16]	; (800b5f8 <_ZN6tflite21Register_CONV_2D_INT8Ev+0x1c>)
 800b5e8:	4a04      	ldr	r2, [pc, #16]	; (800b5fc <_ZN6tflite21Register_CONV_2D_INT8Ev+0x20>)
 800b5ea:	4905      	ldr	r1, [pc, #20]	; (800b600 <_ZN6tflite21Register_CONV_2D_INT8Ev+0x24>)
TFLMRegistration Register_CONV_2D_INT8() {
 800b5ec:	4604      	mov	r4, r0
  return tflite::micro::RegisterOp(Init, Prepare, EvalInt8);
 800b5ee:	f7fe fd47 	bl	800a080 <_ZN6tflite5micro10RegisterOpEPFPvP13TfLiteContextPKcjEPF12TfLiteStatusS3_P10TfLiteNodeESC_PFvS3_S1_ESE_>
}
 800b5f2:	4620      	mov	r0, r4
 800b5f4:	b002      	add	sp, #8
 800b5f6:	bd10      	pop	{r4, pc}
 800b5f8:	0800b561 	.word	0x0800b561
 800b5fc:	0800b0c9 	.word	0x0800b0c9
 800b600:	0800b0b9 	.word	0x0800b0b9

0800b604 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
  int32_t accum_depth;
  int32_t output_depth;
};

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 800b604:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800b606:	b10b      	cbz	r3, 800b60c <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0x8>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 800b608:	2140      	movs	r1, #64	; 0x40
 800b60a:	4718      	bx	r3
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 800b60c:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 800b60e:	f00b faad 	bl	8016b6c <abort>
 800b612:	bf00      	nop

0800b614 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:
}

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 800b614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
 800b618:	f8d1 800c 	ldr.w	r8, [r1, #12]
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 800b61c:	b0a5      	sub	sp, #148	; 0x94
  TFLITE_DCHECK(node->user_data != nullptr);
 800b61e:	f1b8 0f00 	cmp.w	r8, #0
 800b622:	f000 8159 	beq.w	800b8d8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2c4>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 800b626:	f8d1 a010 	ldr.w	sl, [r1, #16]
 800b62a:	4689      	mov	r9, r1
 800b62c:	f1ba 0f00 	cmp.w	sl, #0
 800b630:	f000 8152 	beq.w	800b8d8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2c4>
 800b634:	68c6      	ldr	r6, [r0, #12]
  const auto params =
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  MicroContext* micro_context = GetMicroContext(context);
  TfLiteTensor* input =
      micro_context->AllocateTempInputTensor(node, kFullyConnectedInputTensor);
 800b636:	4ba9      	ldr	r3, [pc, #676]	; (800b8dc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2c8>)
 800b638:	4604      	mov	r4, r0
 800b63a:	681a      	ldr	r2, [r3, #0]
 800b63c:	4630      	mov	r0, r6
 800b63e:	f7fd f86d 	bl	800871c <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
 800b642:	4605      	mov	r5, r0
 800b644:	2800      	cmp	r0, #0
 800b646:	f000 8093 	beq.w	800b770 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x15c>
  TfLiteTensor* filter = micro_context->AllocateTempInputTensor(
 800b64a:	4ba5      	ldr	r3, [pc, #660]	; (800b8e0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2cc>)
 800b64c:	4649      	mov	r1, r9
 800b64e:	681a      	ldr	r2, [r3, #0]
 800b650:	4630      	mov	r0, r6
 800b652:	f7fd f863 	bl	800871c <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei>
      node, kFullyConnectedWeightsTensor);
  TF_LITE_ENSURE(context, filter != nullptr);
 800b656:	4607      	mov	r7, r0
 800b658:	2800      	cmp	r0, #0
 800b65a:	d07b      	beq.n	800b754 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x140>
  TfLiteTensor* bias =
      micro_context->AllocateTempInputTensor(node, kFullyConnectedBiasTensor);
 800b65c:	4ba1      	ldr	r3, [pc, #644]	; (800b8e4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2d0>)
 800b65e:	4649      	mov	r1, r9
 800b660:	681a      	ldr	r2, [r3, #0]
 800b662:	4630      	mov	r0, r6
 800b664:	f7fd f85a 	bl	800871c <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei>
  TfLiteTensor* output = micro_context->AllocateTempOutputTensor(
 800b668:	4b9f      	ldr	r3, [pc, #636]	; (800b8e8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2d4>)
      micro_context->AllocateTempInputTensor(node, kFullyConnectedBiasTensor);
 800b66a:	9005      	str	r0, [sp, #20]
  TfLiteTensor* output = micro_context->AllocateTempOutputTensor(
 800b66c:	4649      	mov	r1, r9
 800b66e:	681a      	ldr	r2, [r3, #0]
 800b670:	4630      	mov	r0, r6
 800b672:	f7fd f863 	bl	800873c <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei>
      node, kFullyConnectedOutputTensor);
  TF_LITE_ENSURE(context, output != nullptr);
 800b676:	4681      	mov	r9, r0
 800b678:	2800      	cmp	r0, #0
 800b67a:	f000 80a4 	beq.w	800b7c6 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1b2>

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 800b67e:	7f28      	ldrb	r0, [r5, #28]
 800b680:	f899 301c 	ldrb.w	r3, [r9, #28]
 800b684:	4283      	cmp	r3, r0
 800b686:	f040 8081 	bne.w	800b78c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x178>

  const RuntimeShape filter_shape = GetTensorShape(filter);
 800b68a:	4639      	mov	r1, r7
 800b68c:	a80f      	add	r0, sp, #60	; 0x3c
 800b68e:	f7fa fe0d 	bl	80062ac <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const RuntimeShape output_shape = GetTensorShape(output);
 800b692:	4649      	mov	r1, r9
 800b694:	a816      	add	r0, sp, #88	; 0x58
 800b696:	f7fa fe09 	bl	80062ac <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const int filter_dim_count = filter_shape.DimensionsCount();
  const int output_dim_count = output_shape.DimensionsCount();
  cmsis_nn_dims filter_dims;
  filter_dims.n = filter_shape.Dims(filter_dim_count - 1);
 800b69a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  int32_t DimensionsCount() const { return size_; }
 800b69c:	f8dd b058 	ldr.w	fp, [sp, #88]	; 0x58
    TFLITE_DCHECK_GE(i, 0);
 800b6a0:	3b01      	subs	r3, #1
 800b6a2:	f100 8119 	bmi.w	800b8d8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2c4>
    return dims_[i];
 800b6a6:	aa24      	add	r2, sp, #144	; 0x90
 800b6a8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    TFLITE_DCHECK_GE(i, 0);
 800b6ac:	f1bb 0001 	subs.w	r0, fp, #1
    return dims_[i];
 800b6b0:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800b6b4:	9307      	str	r3, [sp, #28]
  filter_dims.h = 1;
 800b6b6:	f04f 0201 	mov.w	r2, #1
  filter_dims.w = 1;
 800b6ba:	e9cd 2208 	strd	r2, r2, [sp, #32]
    TFLITE_DCHECK_GE(i, 0);
 800b6be:	f100 810b 	bmi.w	800b8d8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2c4>
  filter_dims.c = output_shape.Dims(output_dim_count - 1);

  data->accum_depth = filter_shape.Dims(filter_dim_count - 1);
 800b6c2:	f8c8 3038 	str.w	r3, [r8, #56]	; 0x38
    return dims_[i];
 800b6c6:	ab24      	add	r3, sp, #144	; 0x90
 800b6c8:	eb03 0380 	add.w	r3, r3, r0, lsl #2
inline int FlatSizeSkipDim(const RuntimeShape& shape, int skip_dim) {
  const int dims_count = shape.DimensionsCount();
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
  const auto* dims_data = shape.DimsData();
  int flat_size = 1;
  for (int i = 0; i < dims_count; ++i) {
 800b6cc:	f1bb 0f00 	cmp.w	fp, #0
 800b6d0:	f853 cc34 	ldr.w	ip, [r3, #-52]
  filter_dims.c = output_shape.Dims(output_dim_count - 1);
 800b6d4:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 800b6d8:	dd0b      	ble.n	800b6f2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xde>
 800b6da:	2300      	movs	r3, #0
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 800b6dc:	4298      	cmp	r0, r3
 800b6de:	d06e      	beq.n	800b7be <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1aa>
 800b6e0:	a916      	add	r1, sp, #88	; 0x58
 800b6e2:	eb01 0183 	add.w	r1, r1, r3, lsl #2
  for (int i = 0; i < dims_count; ++i) {
 800b6e6:	3301      	adds	r3, #1
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 800b6e8:	6849      	ldr	r1, [r1, #4]
  for (int i = 0; i < dims_count; ++i) {
 800b6ea:	459b      	cmp	fp, r3
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 800b6ec:	fb01 f202 	mul.w	r2, r1, r2
  for (int i = 0; i < dims_count; ++i) {
 800b6f0:	d1f4      	bne.n	800b6dc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xc8>
  data->batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
  data->output_depth = output_shape.Dims(output_dim_count - 1);

  // Set buffer index to a reset value
  data->buffer_idx = -1;
 800b6f2:	f04f 33ff 	mov.w	r3, #4294967295
  TF_LITE_ENSURE_STATUS(CalculateOpDataFullyConnected(
 800b6f6:	f89a 1000 	ldrb.w	r1, [sl]
  data->batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
 800b6fa:	f8c8 2034 	str.w	r2, [r8, #52]	; 0x34
  TF_LITE_ENSURE_STATUS(CalculateOpDataFullyConnected(
 800b6fe:	7f2a      	ldrb	r2, [r5, #28]
  data->buffer_idx = -1;
 800b700:	f8c8 302c 	str.w	r3, [r8, #44]	; 0x2c
  TF_LITE_ENSURE_STATUS(CalculateOpDataFullyConnected(
 800b704:	9b05      	ldr	r3, [sp, #20]
  data->output_depth = output_shape.Dims(output_dim_count - 1);
 800b706:	f8c8 c03c 	str.w	ip, [r8, #60]	; 0x3c
  TF_LITE_ENSURE_STATUS(CalculateOpDataFullyConnected(
 800b70a:	4620      	mov	r0, r4
 800b70c:	e9cd 7300 	strd	r7, r3, [sp]
 800b710:	e9cd 9802 	strd	r9, r8, [sp, #8]
 800b714:	462b      	mov	r3, r5
 800b716:	f7fe fc6f 	bl	8009ff8 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>
 800b71a:	4682      	mov	sl, r0
 800b71c:	bb20      	cbnz	r0, 800b768 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x154>
      context, params->activation, input->type, input, filter, bias, output,
      &(data->reference_op_data)));

  int32_t buf_size = 0;

  if (input->type == kTfLiteInt16) {
 800b71e:	7f2b      	ldrb	r3, [r5, #28]
 800b720:	2b07      	cmp	r3, #7
 800b722:	d05b      	beq.n	800b7dc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1c8>
    TF_LITE_ENSURE_EQ(context, input->params.zero_point, 0);
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
    buf_size = arm_fully_connected_s16_get_buffer_size(&filter_dims);
  } else if (input->type == kTfLiteInt8 &&
 800b724:	2b09      	cmp	r3, #9
 800b726:	d06f      	beq.n	800b808 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1f4>
  if (buf_size > 0) {
    TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
        context, buf_size, &data->buffer_idx));
  }

  micro_context->DeallocateTempTfLiteTensor(output);
 800b728:	6833      	ldr	r3, [r6, #0]
 800b72a:	4649      	mov	r1, r9
 800b72c:	699b      	ldr	r3, [r3, #24]
 800b72e:	4630      	mov	r0, r6
 800b730:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(input);
 800b732:	6833      	ldr	r3, [r6, #0]
 800b734:	4629      	mov	r1, r5
 800b736:	699b      	ldr	r3, [r3, #24]
 800b738:	4630      	mov	r0, r6
 800b73a:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(filter);
 800b73c:	6833      	ldr	r3, [r6, #0]
 800b73e:	4639      	mov	r1, r7
 800b740:	699b      	ldr	r3, [r3, #24]
 800b742:	4630      	mov	r0, r6
 800b744:	4798      	blx	r3
  if (bias != nullptr) {
 800b746:	9905      	ldr	r1, [sp, #20]
 800b748:	b171      	cbz	r1, 800b768 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x154>
    micro_context->DeallocateTempTfLiteTensor(bias);
 800b74a:	6833      	ldr	r3, [r6, #0]
 800b74c:	4630      	mov	r0, r6
 800b74e:	699b      	ldr	r3, [r3, #24]
 800b750:	4798      	blx	r3
 800b752:	e009      	b.n	800b768 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x154>
  TF_LITE_ENSURE(context, filter != nullptr);
 800b754:	4b65      	ldr	r3, [pc, #404]	; (800b8ec <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2d8>)
 800b756:	6965      	ldr	r5, [r4, #20]
 800b758:	4a65      	ldr	r2, [pc, #404]	; (800b8f0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2dc>)
 800b75a:	9300      	str	r3, [sp, #0]
 800b75c:	4965      	ldr	r1, [pc, #404]	; (800b8f4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e0>)
 800b75e:	2348      	movs	r3, #72	; 0x48
 800b760:	4620      	mov	r0, r4
 800b762:	47a8      	blx	r5
 800b764:	f04f 0a01 	mov.w	sl, #1
  }

  return kTfLiteOk;
}
 800b768:	4650      	mov	r0, sl
 800b76a:	b025      	add	sp, #148	; 0x94
 800b76c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TF_LITE_ENSURE(context, input != nullptr);
 800b770:	4b61      	ldr	r3, [pc, #388]	; (800b8f8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e4>)
 800b772:	6965      	ldr	r5, [r4, #20]
 800b774:	4a5e      	ldr	r2, [pc, #376]	; (800b8f0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2dc>)
 800b776:	9300      	str	r3, [sp, #0]
 800b778:	4620      	mov	r0, r4
 800b77a:	495e      	ldr	r1, [pc, #376]	; (800b8f4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e0>)
 800b77c:	2345      	movs	r3, #69	; 0x45
 800b77e:	47a8      	blx	r5
 800b780:	f04f 0a01 	mov.w	sl, #1
}
 800b784:	4650      	mov	r0, sl
 800b786:	b025      	add	sp, #148	; 0x94
 800b788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 800b78c:	6966      	ldr	r6, [r4, #20]
 800b78e:	f7fa fcd9 	bl	8006144 <TfLiteTypeGetName>
 800b792:	4605      	mov	r5, r0
 800b794:	f899 001c 	ldrb.w	r0, [r9, #28]
 800b798:	f7fa fcd4 	bl	8006144 <TfLiteTypeGetName>
 800b79c:	4957      	ldr	r1, [pc, #348]	; (800b8fc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e8>)
 800b79e:	4b58      	ldr	r3, [pc, #352]	; (800b900 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2ec>)
 800b7a0:	4a53      	ldr	r2, [pc, #332]	; (800b8f0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2dc>)
 800b7a2:	e9cd 3100 	strd	r3, r1, [sp]
 800b7a6:	e9cd 5002 	strd	r5, r0, [sp, #8]
 800b7aa:	4956      	ldr	r1, [pc, #344]	; (800b904 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2f0>)
 800b7ac:	4620      	mov	r0, r4
 800b7ae:	234f      	movs	r3, #79	; 0x4f
 800b7b0:	47b0      	blx	r6
 800b7b2:	f04f 0a01 	mov.w	sl, #1
}
 800b7b6:	4650      	mov	r0, sl
 800b7b8:	b025      	add	sp, #148	; 0x94
 800b7ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7be:	1c43      	adds	r3, r0, #1
 800b7c0:	459b      	cmp	fp, r3
 800b7c2:	d18b      	bne.n	800b6dc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xc8>
 800b7c4:	e795      	b.n	800b6f2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xde>
  TF_LITE_ENSURE(context, output != nullptr);
 800b7c6:	4b50      	ldr	r3, [pc, #320]	; (800b908 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2f4>)
 800b7c8:	6965      	ldr	r5, [r4, #20]
 800b7ca:	4a49      	ldr	r2, [pc, #292]	; (800b8f0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2dc>)
 800b7cc:	9300      	str	r3, [sp, #0]
 800b7ce:	4949      	ldr	r1, [pc, #292]	; (800b8f4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e0>)
 800b7d0:	234d      	movs	r3, #77	; 0x4d
 800b7d2:	4620      	mov	r0, r4
 800b7d4:	47a8      	blx	r5
 800b7d6:	f04f 0a01 	mov.w	sl, #1
 800b7da:	e7c5      	b.n	800b768 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x154>
    TF_LITE_ENSURE_EQ(context, input->params.zero_point, 0);
 800b7dc:	68eb      	ldr	r3, [r5, #12]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d154      	bne.n	800b88c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x278>
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
 800b7e2:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d05f      	beq.n	800b8aa <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x296>
 800b7ea:	e9cd 3002 	strd	r3, r0, [sp, #8]
 800b7ee:	4947      	ldr	r1, [pc, #284]	; (800b90c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2f8>)
 800b7f0:	4a47      	ldr	r2, [pc, #284]	; (800b910 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2fc>)
 800b7f2:	6965      	ldr	r5, [r4, #20]
 800b7f4:	2369      	movs	r3, #105	; 0x69
 800b7f6:	e9cd 2100 	strd	r2, r1, [sp]
 800b7fa:	4620      	mov	r0, r4
 800b7fc:	4a3c      	ldr	r2, [pc, #240]	; (800b8f0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2dc>)
 800b7fe:	4945      	ldr	r1, [pc, #276]	; (800b914 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x300>)
 800b800:	47a8      	blx	r5
 800b802:	f04f 0a01 	mov.w	sl, #1
 800b806:	e7af      	b.n	800b768 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x154>
  } else if (input->type == kTfLiteInt8 &&
 800b808:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d18b      	bne.n	800b728 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x114>
             data->reference_op_data.filter_zero_point == 0 &&
 800b810:	7f3b      	ldrb	r3, [r7, #28]
 800b812:	2b12      	cmp	r3, #18
 800b814:	d088      	beq.n	800b728 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x114>
    const RuntimeShape input_shape = GetTensorShape(input);
 800b816:	4629      	mov	r1, r5
 800b818:	a81d      	add	r0, sp, #116	; 0x74
 800b81a:	f7fa fd47 	bl	80062ac <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    TFLITE_DCHECK_GE(output_dim_count, 2);
 800b81e:	f1bb 0f01 	cmp.w	fp, #1
 800b822:	d059      	beq.n	800b8d8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2c4>
    TFLITE_DCHECK_LE(output_dim_count, 4);
 800b824:	f1bb 0f04 	cmp.w	fp, #4
 800b828:	dc56      	bgt.n	800b8d8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2c4>
    if (output_dim_count > 2 && data->accum_depth % 4 == 0) {
 800b82a:	f1bb 0f02 	cmp.w	fp, #2
 800b82e:	d041      	beq.n	800b8b4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2a0>
 800b830:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
 800b834:	079b      	lsls	r3, r3, #30
 800b836:	d13d      	bne.n	800b8b4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2a0>
              context, data->output_depth * sizeof(int32_t)));
 800b838:	f8d8 103c 	ldr.w	r1, [r8, #60]	; 0x3c
          static_cast<int32_t*>(context->AllocatePersistentBuffer(
 800b83c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b83e:	0089      	lsls	r1, r1, #2
 800b840:	4620      	mov	r0, r4
 800b842:	4798      	blx	r3
              context, data->output_depth * sizeof(int32_t)));
 800b844:	f8d8 103c 	ldr.w	r1, [r8, #60]	; 0x3c
          static_cast<int32_t*>(context->AllocatePersistentBuffer(
 800b848:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      data->per_channel_output_multiplier =
 800b84a:	f8c8 0024 	str.w	r0, [r8, #36]	; 0x24
          static_cast<int32_t*>(context->AllocatePersistentBuffer(
 800b84e:	0089      	lsls	r1, r1, #2
 800b850:	4620      	mov	r0, r4
 800b852:	4798      	blx	r3
      input_dims.n = data->batches;
 800b854:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
 800b858:	930b      	str	r3, [sp, #44]	; 0x2c
      input_dims.c = data->accum_depth;
 800b85a:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
      data->per_channel_output_shift =
 800b85e:	f8c8 0028 	str.w	r0, [r8, #40]	; 0x28
      input_dims.c = data->accum_depth;
 800b862:	930e      	str	r3, [sp, #56]	; 0x38
      buf_size = arm_convolve_1x1_s8_fast_get_buffer_size(&input_dims);
 800b864:	a80b      	add	r0, sp, #44	; 0x2c
      input_dims.h = 1;
 800b866:	2301      	movs	r3, #1
      input_dims.w = 1;
 800b868:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
      buf_size = arm_convolve_1x1_s8_fast_get_buffer_size(&input_dims);
 800b86c:	f001 f831 	bl	800c8d2 <arm_convolve_1x1_s8_fast_get_buffer_size>
 800b870:	4601      	mov	r1, r0
  if (buf_size > 0) {
 800b872:	2900      	cmp	r1, #0
 800b874:	f77f af58 	ble.w	800b728 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x114>
    TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
 800b878:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b87a:	f108 022c 	add.w	r2, r8, #44	; 0x2c
 800b87e:	4620      	mov	r0, r4
 800b880:	4798      	blx	r3
 800b882:	2800      	cmp	r0, #0
 800b884:	f43f af50 	beq.w	800b728 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x114>
 800b888:	4682      	mov	sl, r0
  ~RuntimeShape() {}
 800b88a:	e76d      	b.n	800b768 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x154>
    TF_LITE_ENSURE_EQ(context, input->params.zero_point, 0);
 800b88c:	e9cd 3002 	strd	r3, r0, [sp, #8]
 800b890:	491e      	ldr	r1, [pc, #120]	; (800b90c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2f8>)
 800b892:	4a21      	ldr	r2, [pc, #132]	; (800b918 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x304>)
 800b894:	6965      	ldr	r5, [r4, #20]
 800b896:	2368      	movs	r3, #104	; 0x68
 800b898:	e9cd 2100 	strd	r2, r1, [sp]
 800b89c:	4620      	mov	r0, r4
 800b89e:	4a14      	ldr	r2, [pc, #80]	; (800b8f0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2dc>)
 800b8a0:	491c      	ldr	r1, [pc, #112]	; (800b914 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x300>)
 800b8a2:	47a8      	blx	r5
 800b8a4:	f04f 0a01 	mov.w	sl, #1
 800b8a8:	e75e      	b.n	800b768 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x154>
    buf_size = arm_fully_connected_s16_get_buffer_size(&filter_dims);
 800b8aa:	a807      	add	r0, sp, #28
 800b8ac:	f003 fc1c 	bl	800f0e8 <arm_fully_connected_s16_get_buffer_size>
 800b8b0:	4601      	mov	r1, r0
 800b8b2:	e7de      	b.n	800b872 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x25e>
      buf_size = arm_fully_connected_s8_get_buffer_size(&filter_dims);
 800b8b4:	a807      	add	r0, sp, #28
 800b8b6:	f003 fc2d 	bl	800f114 <arm_fully_connected_s8_get_buffer_size>
      if (buf_size > 0) {
 800b8ba:	1e01      	subs	r1, r0, #0
 800b8bc:	f77f af34 	ble.w	800b728 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x114>
            context->AllocatePersistentBuffer(context, buf_size));
 800b8c0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b8c2:	4620      	mov	r0, r4
 800b8c4:	4798      	blx	r3
        arm_vector_sum_s8(data->kernel_sums, filter_dims.n, data->output_depth,
 800b8c6:	f8d8 203c 	ldr.w	r2, [r8, #60]	; 0x3c
 800b8ca:	693b      	ldr	r3, [r7, #16]
 800b8cc:	9907      	ldr	r1, [sp, #28]
        data->kernel_sums = static_cast<int32_t*>(
 800b8ce:	f8c8 0030 	str.w	r0, [r8, #48]	; 0x30
        arm_vector_sum_s8(data->kernel_sums, filter_dims.n, data->output_depth,
 800b8d2:	f003 fc76 	bl	800f1c2 <arm_vector_sum_s8>
  if (buf_size > 0) {
 800b8d6:	e727      	b.n	800b728 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x114>
  TFLITE_DCHECK(node->user_data != nullptr);
 800b8d8:	f00b f948 	bl	8016b6c <abort>
 800b8dc:	0806c660 	.word	0x0806c660
 800b8e0:	0806c668 	.word	0x0806c668
 800b8e4:	0806c65c 	.word	0x0806c65c
 800b8e8:	0806c664 	.word	0x0806c664
 800b8ec:	0806c51c 	.word	0x0806c51c
 800b8f0:	0806cb1c 	.word	0x0806cb1c
 800b8f4:	0806a3f0 	.word	0x0806a3f0
 800b8f8:	0806c508 	.word	0x0806c508
 800b8fc:	0806c998 	.word	0x0806c998
 800b900:	0806c9a8 	.word	0x0806c9a8
 800b904:	0806c97c 	.word	0x0806c97c
 800b908:	0806c530 	.word	0x0806c530
 800b90c:	0806cae0 	.word	0x0806cae0
 800b910:	0806cb00 	.word	0x0806cb00
 800b914:	0806a478 	.word	0x0806a478
 800b918:	0806cae4 	.word	0x0806cae4

0800b91c <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0>:
      ARM_CMSIS_NN_SUCCESS);

  return kTfLiteOk;
}

TfLiteStatus EvalQuantizedInt8(TfLiteContext* context, TfLiteNode* node,
 800b91c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b920:	b0b5      	sub	sp, #212	; 0xd4
 800b922:	4681      	mov	r9, r0
 800b924:	f8dd a0fc 	ldr.w	sl, [sp, #252]	; 0xfc
 800b928:	f8dd 80f8 	ldr.w	r8, [sp, #248]	; 0xf8
 800b92c:	460c      	mov	r4, r1
                               const OpData& data,
                               const TfLiteEvalTensor* input,
                               const TfLiteEvalTensor* filter,
                               const TfLiteEvalTensor* bias,
                               TfLiteEvalTensor* output) {
  const RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 800b92e:	a823      	add	r0, sp, #140	; 0x8c
 800b930:	4651      	mov	r1, sl
TfLiteStatus EvalQuantizedInt8(TfLiteContext* context, TfLiteNode* node,
 800b932:	461f      	mov	r7, r3
 800b934:	4616      	mov	r6, r2
  const RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 800b936:	f7fe fbd5 	bl	800a0e4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  int32_t DimensionsCount() const { return size_; }
 800b93a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
  const int output_dim_count = output_shape.DimensionsCount();
  TFLITE_DCHECK_GE(output_dim_count, 2);
 800b93e:	f1ab 0302 	sub.w	r3, fp, #2
 800b942:	2b02      	cmp	r3, #2
 800b944:	f200 80ec 	bhi.w	800bb20 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x204>
  filter_dims->c = data.output_depth;
 800b948:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b94a:	9315      	str	r3, [sp, #84]	; 0x54
  bias_dims->c = data.output_depth;
 800b94c:	9319      	str	r3, [sp, #100]	; 0x64
  output_dims->c = data.output_depth;
 800b94e:	931d      	str	r3, [sp, #116]	; 0x74
  input_dims->n = data.batches;
 800b950:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b952:	930e      	str	r3, [sp, #56]	; 0x38
  output_dims->n = data.batches;
 800b954:	931a      	str	r3, [sp, #104]	; 0x68
  input_dims->c = data.accum_depth;
 800b956:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  if (data.buffer_idx > -1) {
 800b958:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  filter_dims->n = data.accum_depth;
 800b95a:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  ctx->buf = nullptr;
 800b95e:	2300      	movs	r3, #0
  ctx->size = 0;
 800b960:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
  quant_params->multiplier = data.reference_op_data.output_multiplier;
 800b964:	6863      	ldr	r3, [r4, #4]
 800b966:	9309      	str	r3, [sp, #36]	; 0x24
  input_dims->h = 1;
 800b968:	2501      	movs	r5, #1
  quant_params->multiplier = data.reference_op_data.output_multiplier;
 800b96a:	6823      	ldr	r3, [r4, #0]
  bias_dims->w = 1;
 800b96c:	9518      	str	r5, [sp, #96]	; 0x60
  if (data.buffer_idx > -1) {
 800b96e:	2900      	cmp	r1, #0
  input_dims->w = 1;
 800b970:	e9cd 550f 	strd	r5, r5, [sp, #60]	; 0x3c
  filter_dims->w = 1;
 800b974:	e9cd 5513 	strd	r5, r5, [sp, #76]	; 0x4c
  bias_dims->h = 1;
 800b978:	e9cd 5516 	strd	r5, r5, [sp, #88]	; 0x58
  output_dims->w = 1;
 800b97c:	e9cd 551b 	strd	r5, r5, [sp, #108]	; 0x6c
  quant_params->multiplier = data.reference_op_data.output_multiplier;
 800b980:	9308      	str	r3, [sp, #32]
  if (data.buffer_idx > -1) {
 800b982:	db04      	blt.n	800b98e <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x72>
    ctx->buf = context->GetScratchBuffer(context, data.buffer_idx);
 800b984:	f8d9 3044 	ldr.w	r3, [r9, #68]	; 0x44
 800b988:	4648      	mov	r0, r9
 800b98a:	4798      	blx	r3
 800b98c:	900a      	str	r0, [sp, #40]	; 0x28
  return tensor == nullptr ? nullptr
 800b98e:	f1b8 0f00 	cmp.w	r8, #0
 800b992:	d001      	beq.n	800b998 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x7c>
 800b994:	f8d8 8000 	ldr.w	r8, [r8]
                       &bias_dims, &output_dims, &ctx, data);

  const int32_t* bias_data =
      tflite::micro::GetOptionalTensorData<int32_t>(bias);

  if (output_dim_count > 2 && data.accum_depth % 4 == 0) {
 800b998:	f1bb 0f02 	cmp.w	fp, #2
 800b99c:	d003      	beq.n	800b9a6 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x8a>
 800b99e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b9a0:	f011 0103 	ands.w	r1, r1, #3
 800b9a4:	d030      	beq.n	800ba08 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0xec>
            tflite::micro::GetTensorData<int8_t>(filter), &bias_dims, bias_data,
            &output_dims, tflite::micro::GetTensorData<int8_t>(output)),
        ARM_CMSIS_NN_SUCCESS);
  } else {
    cmsis_nn_fc_params fc_params;
    fc_params.input_offset = -data.reference_op_data.input_zero_point;
 800b9a6:	6963      	ldr	r3, [r4, #20]
 800b9a8:	425b      	negs	r3, r3
 800b9aa:	931e      	str	r3, [sp, #120]	; 0x78
    fc_params.output_offset = data.reference_op_data.output_zero_point;
 800b9ac:	69e3      	ldr	r3, [r4, #28]
 800b9ae:	9320      	str	r3, [sp, #128]	; 0x80
    fc_params.filter_offset = 0;
    fc_params.activation.min = data.reference_op_data.output_activation_min;
 800b9b0:	68a3      	ldr	r3, [r4, #8]
 800b9b2:	9321      	str	r3, [sp, #132]	; 0x84
    fc_params.activation.max = data.reference_op_data.output_activation_max;
 800b9b4:	68e3      	ldr	r3, [r4, #12]
 800b9b6:	9322      	str	r3, [sp, #136]	; 0x88

    ctx.buf = data.kernel_sums;
 800b9b8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b9ba:	930a      	str	r3, [sp, #40]	; 0x28
    fc_params.filter_offset = 0;
 800b9bc:	2400      	movs	r4, #0
 800b9be:	941f      	str	r4, [sp, #124]	; 0x7c
  TFLITE_DCHECK(tensor != nullptr);
 800b9c0:	2e00      	cmp	r6, #0
 800b9c2:	f000 80ad 	beq.w	800bb20 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x204>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800b9c6:	6833      	ldr	r3, [r6, #0]
  TFLITE_DCHECK(tensor != nullptr);
 800b9c8:	2f00      	cmp	r7, #0
 800b9ca:	f000 80a9 	beq.w	800bb20 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x204>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800b9ce:	683a      	ldr	r2, [r7, #0]
  TFLITE_DCHECK(tensor != nullptr);
 800b9d0:	f1ba 0f00 	cmp.w	sl, #0
 800b9d4:	f000 80a4 	beq.w	800bb20 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x204>
    TF_LITE_ENSURE_EQ(
 800b9d8:	9202      	str	r2, [sp, #8]
 800b9da:	9300      	str	r3, [sp, #0]
 800b9dc:	f8cd 8010 	str.w	r8, [sp, #16]
 800b9e0:	f8da 3000 	ldr.w	r3, [sl]
 800b9e4:	9306      	str	r3, [sp, #24]
 800b9e6:	ab1a      	add	r3, sp, #104	; 0x68
 800b9e8:	9305      	str	r3, [sp, #20]
 800b9ea:	ab16      	add	r3, sp, #88	; 0x58
 800b9ec:	9303      	str	r3, [sp, #12]
 800b9ee:	ab12      	add	r3, sp, #72	; 0x48
 800b9f0:	9301      	str	r3, [sp, #4]
 800b9f2:	aa08      	add	r2, sp, #32
 800b9f4:	ab0e      	add	r3, sp, #56	; 0x38
 800b9f6:	a91e      	add	r1, sp, #120	; 0x78
 800b9f8:	a80a      	add	r0, sp, #40	; 0x28
 800b9fa:	f003 fb97 	bl	800f12c <arm_fully_connected_s8>
 800b9fe:	2800      	cmp	r0, #0
 800ba00:	d168      	bne.n	800bad4 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x1b8>
            tflite::micro::GetTensorData<int8_t>(filter), &bias_dims, bias_data,
            &output_dims, tflite::micro::GetTensorData<int8_t>(output)),
        ARM_CMSIS_NN_SUCCESS);
  }
  return kTfLiteOk;
}
 800ba02:	b035      	add	sp, #212	; 0xd4
 800ba04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    conv_params.input_offset = -data.reference_op_data.input_zero_point;
 800ba08:	6963      	ldr	r3, [r4, #20]
    for (int i = 0; i < data.output_depth; i++) {
 800ba0a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        const_cast<int32_t*>(data.per_channel_output_multiplier);
 800ba0c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    per_channel_quant_params.multiplier =
 800ba0e:	900c      	str	r0, [sp, #48]	; 0x30
    conv_params.input_offset = -data.reference_op_data.input_zero_point;
 800ba10:	425b      	negs	r3, r3
 800ba12:	932a      	str	r3, [sp, #168]	; 0xa8
    conv_params.dilation.h = 1;
 800ba14:	2301      	movs	r3, #1
    conv_params.dilation.w = 1;
 800ba16:	e9cd 3330 	strd	r3, r3, [sp, #192]	; 0xc0
    conv_params.stride.w = 1;
 800ba1a:	e9cd 332c 	strd	r3, r3, [sp, #176]	; 0xb0
    conv_params.output_offset = data.reference_op_data.output_zero_point;
 800ba1e:	69e3      	ldr	r3, [r4, #28]
 800ba20:	932b      	str	r3, [sp, #172]	; 0xac
    conv_params.activation.min = data.reference_op_data.output_activation_min;
 800ba22:	68e3      	ldr	r3, [r4, #12]
 800ba24:	9333      	str	r3, [sp, #204]	; 0xcc
 800ba26:	68a3      	ldr	r3, [r4, #8]
 800ba28:	9332      	str	r3, [sp, #200]	; 0xc8
    for (int i = 0; i < data.output_depth; i++) {
 800ba2a:	2a00      	cmp	r2, #0
        const_cast<int32_t*>(data.per_channel_output_shift);
 800ba2c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    per_channel_quant_params.shift =
 800ba2e:	930d      	str	r3, [sp, #52]	; 0x34
    conv_params.padding.w = 0;
 800ba30:	e9cd 112e 	strd	r1, r1, [sp, #184]	; 0xb8
    for (int i = 0; i < data.output_depth; i++) {
 800ba34:	dd0b      	ble.n	800ba4e <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x132>
 800ba36:	3804      	subs	r0, #4
 800ba38:	3b04      	subs	r3, #4
      per_channel_quant_params.multiplier[i] = quant_params.multiplier;
 800ba3a:	9a08      	ldr	r2, [sp, #32]
 800ba3c:	f840 2f04 	str.w	r2, [r0, #4]!
      per_channel_quant_params.shift[i] = quant_params.shift;
 800ba40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba42:	f843 2f04 	str.w	r2, [r3, #4]!
    for (int i = 0; i < data.output_depth; i++) {
 800ba46:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800ba48:	3101      	adds	r1, #1
 800ba4a:	4291      	cmp	r1, r2
 800ba4c:	dbf5      	blt.n	800ba3a <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x11e>
  TFLITE_DCHECK(tensor != nullptr);
 800ba4e:	2e00      	cmp	r6, #0
 800ba50:	d066      	beq.n	800bb20 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x204>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800ba52:	6833      	ldr	r3, [r6, #0]
  TFLITE_DCHECK(tensor != nullptr);
 800ba54:	2f00      	cmp	r7, #0
 800ba56:	d063      	beq.n	800bb20 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x204>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800ba58:	683a      	ldr	r2, [r7, #0]
  TFLITE_DCHECK(tensor != nullptr);
 800ba5a:	f1ba 0f00 	cmp.w	sl, #0
 800ba5e:	d05f      	beq.n	800bb20 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x204>
    TF_LITE_ENSURE_EQ(
 800ba60:	9202      	str	r2, [sp, #8]
 800ba62:	9300      	str	r3, [sp, #0]
 800ba64:	f8cd 8010 	str.w	r8, [sp, #16]
 800ba68:	f8da 3000 	ldr.w	r3, [sl]
 800ba6c:	9306      	str	r3, [sp, #24]
 800ba6e:	ab1a      	add	r3, sp, #104	; 0x68
 800ba70:	9305      	str	r3, [sp, #20]
 800ba72:	ab16      	add	r3, sp, #88	; 0x58
 800ba74:	9303      	str	r3, [sp, #12]
 800ba76:	ab12      	add	r3, sp, #72	; 0x48
 800ba78:	9301      	str	r3, [sp, #4]
 800ba7a:	aa0c      	add	r2, sp, #48	; 0x30
 800ba7c:	ab0e      	add	r3, sp, #56	; 0x38
 800ba7e:	a92a      	add	r1, sp, #168	; 0xa8
 800ba80:	a80a      	add	r0, sp, #40	; 0x28
 800ba82:	f000 fe3e 	bl	800c702 <arm_convolve_1x1_s8_fast>
 800ba86:	2800      	cmp	r0, #0
 800ba88:	d0bb      	beq.n	800ba02 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0xe6>
 800ba8a:	ab1a      	add	r3, sp, #104	; 0x68
 800ba8c:	e9cd 8304 	strd	r8, r3, [sp, #16]
 800ba90:	ab16      	add	r3, sp, #88	; 0x58
 800ba92:	9303      	str	r3, [sp, #12]
 800ba94:	ab12      	add	r3, sp, #72	; 0x48
 800ba96:	9301      	str	r3, [sp, #4]
 800ba98:	f8da 3000 	ldr.w	r3, [sl]
 800ba9c:	9306      	str	r3, [sp, #24]
 800ba9e:	683b      	ldr	r3, [r7, #0]
 800baa0:	9302      	str	r3, [sp, #8]
 800baa2:	6833      	ldr	r3, [r6, #0]
 800baa4:	9300      	str	r3, [sp, #0]
 800baa6:	aa0c      	add	r2, sp, #48	; 0x30
 800baa8:	ab0e      	add	r3, sp, #56	; 0x38
 800baaa:	a92a      	add	r1, sp, #168	; 0xa8
 800baac:	a80a      	add	r0, sp, #40	; 0x28
 800baae:	f8d9 4014 	ldr.w	r4, [r9, #20]
 800bab2:	f000 fe26 	bl	800c702 <arm_convolve_1x1_s8_fast>
 800bab6:	491b      	ldr	r1, [pc, #108]	; (800bb24 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x208>)
 800bab8:	4b1b      	ldr	r3, [pc, #108]	; (800bb28 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x20c>)
 800baba:	2200      	movs	r2, #0
 800babc:	e9cd 0202 	strd	r0, r2, [sp, #8]
 800bac0:	e9cd 3100 	strd	r3, r1, [sp]
 800bac4:	4648      	mov	r0, r9
 800bac6:	4a19      	ldr	r2, [pc, #100]	; (800bb2c <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x210>)
 800bac8:	4919      	ldr	r1, [pc, #100]	; (800bb30 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x214>)
 800baca:	f44f 7391 	mov.w	r3, #290	; 0x122
 800bace:	47a0      	blx	r4
 800bad0:	2001      	movs	r0, #1
 800bad2:	e796      	b.n	800ba02 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0xe6>
    TF_LITE_ENSURE_EQ(
 800bad4:	ab1a      	add	r3, sp, #104	; 0x68
 800bad6:	e9cd 8304 	strd	r8, r3, [sp, #16]
 800bada:	ab16      	add	r3, sp, #88	; 0x58
 800badc:	9303      	str	r3, [sp, #12]
 800bade:	ab12      	add	r3, sp, #72	; 0x48
 800bae0:	9301      	str	r3, [sp, #4]
 800bae2:	f8da 3000 	ldr.w	r3, [sl]
 800bae6:	9306      	str	r3, [sp, #24]
 800bae8:	683b      	ldr	r3, [r7, #0]
 800baea:	9302      	str	r3, [sp, #8]
 800baec:	6833      	ldr	r3, [r6, #0]
 800baee:	9300      	str	r3, [sp, #0]
 800baf0:	aa08      	add	r2, sp, #32
 800baf2:	ab0e      	add	r3, sp, #56	; 0x38
 800baf4:	a91e      	add	r1, sp, #120	; 0x78
 800baf6:	a80a      	add	r0, sp, #40	; 0x28
 800baf8:	f8d9 5014 	ldr.w	r5, [r9, #20]
 800bafc:	f003 fb16 	bl	800f12c <arm_fully_connected_s8>
 800bb00:	4908      	ldr	r1, [pc, #32]	; (800bb24 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x208>)
 800bb02:	4b0c      	ldr	r3, [pc, #48]	; (800bb34 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x218>)
 800bb04:	4a09      	ldr	r2, [pc, #36]	; (800bb2c <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x210>)
 800bb06:	e9cd 3100 	strd	r3, r1, [sp]
 800bb0a:	e9cd 0402 	strd	r0, r4, [sp, #8]
 800bb0e:	4908      	ldr	r1, [pc, #32]	; (800bb30 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x214>)
 800bb10:	4648      	mov	r0, r9
 800bb12:	f240 1333 	movw	r3, #307	; 0x133
 800bb16:	47a8      	blx	r5
 800bb18:	2001      	movs	r0, #1
}
 800bb1a:	b035      	add	sp, #212	; 0xd4
 800bb1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TFLITE_DCHECK_GE(output_dim_count, 2);
 800bb20:	f00b f824 	bl	8016b6c <abort>
 800bb24:	0806cb60 	.word	0x0806cb60
 800bb28:	0806cc80 	.word	0x0806cc80
 800bb2c:	0806cb1c 	.word	0x0806cb1c
 800bb30:	0806a478 	.word	0x0806a478
 800bb34:	0806cd94 	.word	0x0806cd94

0800bb38 <_ZN6tflite12_GLOBAL__N_18EvalInt8EP13TfLiteContextP10TfLiteNode>:
// function internally calls EvalQuantizedInt8, and there is similar name
// aliasing in the Eval function too). We will be attempting to have a more
// descriptive naming convention but holding off on that for now, since the
// renaming might be coupled with reducing code duplication and some additional
// refactoring.
TfLiteStatus EvalInt8(TfLiteContext* context, TfLiteNode* node) {
 800bb38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedInputTensor);
 800bb3c:	4b1c      	ldr	r3, [pc, #112]	; (800bbb0 <_ZN6tflite12_GLOBAL__N_18EvalInt8EP13TfLiteContextP10TfLiteNode+0x78>)
TfLiteStatus EvalInt8(TfLiteContext* context, TfLiteNode* node) {
 800bb3e:	b082      	sub	sp, #8
      tflite::micro::GetEvalInput(context, node, kFullyConnectedInputTensor);
 800bb40:	681a      	ldr	r2, [r3, #0]
TfLiteStatus EvalInt8(TfLiteContext* context, TfLiteNode* node) {
 800bb42:	460c      	mov	r4, r1
 800bb44:	4605      	mov	r5, r0
      tflite::micro::GetEvalInput(context, node, kFullyConnectedInputTensor);
 800bb46:	f7fe faa7 	bl	800a098 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedWeightsTensor);
 800bb4a:	4b1a      	ldr	r3, [pc, #104]	; (800bbb4 <_ZN6tflite12_GLOBAL__N_18EvalInt8EP13TfLiteContextP10TfLiteNode+0x7c>)
 800bb4c:	4621      	mov	r1, r4
 800bb4e:	681a      	ldr	r2, [r3, #0]
      tflite::micro::GetEvalInput(context, node, kFullyConnectedInputTensor);
 800bb50:	4606      	mov	r6, r0
      tflite::micro::GetEvalInput(context, node, kFullyConnectedWeightsTensor);
 800bb52:	4628      	mov	r0, r5
 800bb54:	f7fe faa0 	bl	800a098 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  const TfLiteEvalTensor* bias =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedBiasTensor);
 800bb58:	4b17      	ldr	r3, [pc, #92]	; (800bbb8 <_ZN6tflite12_GLOBAL__N_18EvalInt8EP13TfLiteContextP10TfLiteNode+0x80>)
 800bb5a:	4621      	mov	r1, r4
 800bb5c:	681a      	ldr	r2, [r3, #0]
      tflite::micro::GetEvalInput(context, node, kFullyConnectedWeightsTensor);
 800bb5e:	4607      	mov	r7, r0
      tflite::micro::GetEvalInput(context, node, kFullyConnectedBiasTensor);
 800bb60:	4628      	mov	r0, r5
 800bb62:	f7fe fa99 	bl	800a098 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kFullyConnectedOutputTensor);
 800bb66:	4b15      	ldr	r3, [pc, #84]	; (800bbbc <_ZN6tflite12_GLOBAL__N_18EvalInt8EP13TfLiteContextP10TfLiteNode+0x84>)
 800bb68:	4621      	mov	r1, r4
 800bb6a:	681a      	ldr	r2, [r3, #0]
      tflite::micro::GetEvalInput(context, node, kFullyConnectedBiasTensor);
 800bb6c:	4680      	mov	r8, r0
      tflite::micro::GetEvalOutput(context, node, kFullyConnectedOutputTensor);
 800bb6e:	4628      	mov	r0, r5
 800bb70:	f7fe faac 	bl	800a0cc <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>

  TFLITE_DCHECK(node->user_data != nullptr);
 800bb74:	68e1      	ldr	r1, [r4, #12]
 800bb76:	b1c1      	cbz	r1, 800bbaa <_ZN6tflite12_GLOBAL__N_18EvalInt8EP13TfLiteContextP10TfLiteNode+0x72>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));

  // Checks in Prepare ensure input, output and filter types are all the same.
  if (input->type != kTfLiteInt8) {
 800bb78:	7a33      	ldrb	r3, [r6, #8]
 800bb7a:	2b09      	cmp	r3, #9
 800bb7c:	d00b      	beq.n	800bb96 <_ZN6tflite12_GLOBAL__N_18EvalInt8EP13TfLiteContextP10TfLiteNode+0x5e>
    MicroPrintf("Type %s (%d) not supported.", TfLiteTypeGetName(input->type),
 800bb7e:	4618      	mov	r0, r3
 800bb80:	f7fa fae0 	bl	8006144 <TfLiteTypeGetName>
 800bb84:	7a32      	ldrb	r2, [r6, #8]
 800bb86:	4601      	mov	r1, r0
 800bb88:	480d      	ldr	r0, [pc, #52]	; (800bbc0 <_ZN6tflite12_GLOBAL__N_18EvalInt8EP13TfLiteContextP10TfLiteNode+0x88>)
 800bb8a:	f7fd fe27 	bl	80097dc <_Z11MicroPrintfPKcz>
                input->type);
    return kTfLiteError;
 800bb8e:	2001      	movs	r0, #1
  }

  return EvalQuantizedInt8(context, node, data, input, filter, bias, output);
}
 800bb90:	b002      	add	sp, #8
 800bb92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return EvalQuantizedInt8(context, node, data, input, filter, bias, output);
 800bb96:	e9cd 8000 	strd	r8, r0, [sp]
 800bb9a:	463b      	mov	r3, r7
 800bb9c:	4632      	mov	r2, r6
 800bb9e:	4628      	mov	r0, r5
 800bba0:	f7ff febc 	bl	800b91c <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0>
}
 800bba4:	b002      	add	sp, #8
 800bba6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  TFLITE_DCHECK(node->user_data != nullptr);
 800bbaa:	f00a ffdf 	bl	8016b6c <abort>
 800bbae:	bf00      	nop
 800bbb0:	0806c660 	.word	0x0806c660
 800bbb4:	0806c668 	.word	0x0806c668
 800bbb8:	0806c65c 	.word	0x0806c65c
 800bbbc:	0806c664 	.word	0x0806c664
 800bbc0:	0806c73c 	.word	0x0806c73c

0800bbc4 <_ZN6tflite29Register_FULLY_CONNECTED_INT8Ev>:

TFLMRegistration Register_FULLY_CONNECTED_INT4() {
  return tflite::micro::RegisterOp(Init, Prepare, EvalInt4);
}

TFLMRegistration Register_FULLY_CONNECTED_INT8() {
 800bbc4:	b510      	push	{r4, lr}
  return tflite::micro::RegisterOp(Init, Prepare, EvalInt8);
 800bbc6:	2100      	movs	r1, #0
TFLMRegistration Register_FULLY_CONNECTED_INT8() {
 800bbc8:	b082      	sub	sp, #8
  return tflite::micro::RegisterOp(Init, Prepare, EvalInt8);
 800bbca:	e9cd 1100 	strd	r1, r1, [sp]
 800bbce:	4b04      	ldr	r3, [pc, #16]	; (800bbe0 <_ZN6tflite29Register_FULLY_CONNECTED_INT8Ev+0x1c>)
 800bbd0:	4a04      	ldr	r2, [pc, #16]	; (800bbe4 <_ZN6tflite29Register_FULLY_CONNECTED_INT8Ev+0x20>)
 800bbd2:	4905      	ldr	r1, [pc, #20]	; (800bbe8 <_ZN6tflite29Register_FULLY_CONNECTED_INT8Ev+0x24>)
TFLMRegistration Register_FULLY_CONNECTED_INT8() {
 800bbd4:	4604      	mov	r4, r0
  return tflite::micro::RegisterOp(Init, Prepare, EvalInt8);
 800bbd6:	f7fe fa53 	bl	800a080 <_ZN6tflite5micro10RegisterOpEPFPvP13TfLiteContextPKcjEPF12TfLiteStatusS3_P10TfLiteNodeESC_PFvS3_S1_ESE_>
}
 800bbda:	4620      	mov	r0, r4
 800bbdc:	b002      	add	sp, #8
 800bbde:	bd10      	pop	{r4, pc}
 800bbe0:	0800bb39 	.word	0x0800bb39
 800bbe4:	0800b615 	.word	0x0800b615
 800bbe8:	0800b605 	.word	0x0800b605

0800bbec <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:

  return kTfLiteOk;
}

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 800bbec:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800bbee:	b10b      	cbz	r3, 800bbf4 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0x8>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 800bbf0:	2124      	movs	r1, #36	; 0x24
 800bbf2:	4718      	bx	r3
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 800bbf4:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 800bbf6:	f00a ffb9 	bl	8016b6c <abort>
 800bbfa:	bf00      	nop

0800bbfc <_ZN6tflite12_GLOBAL__N_110MaxPrepareEP13TfLiteContextP10TfLiteNode>:
}

TfLiteStatus MaxPrepare(TfLiteContext* context, TfLiteNode* node) {
 800bbfc:	b510      	push	{r4, lr}
 800bbfe:	460c      	mov	r4, r1
  TF_LITE_ENSURE_STATUS(PoolingPrepare(context, node));
 800bc00:	f7fe fb26 	bl	800a250 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode>
 800bc04:	b918      	cbnz	r0, 800bc0e <_ZN6tflite12_GLOBAL__N_110MaxPrepareEP13TfLiteContextP10TfLiteNode+0x12>
  // Set buffer index to a reset value
  static_cast<OpData*>(node->user_data)->buffer_idx = -1;
 800bc06:	68e3      	ldr	r3, [r4, #12]
 800bc08:	f04f 32ff 	mov.w	r2, #4294967295
 800bc0c:	621a      	str	r2, [r3, #32]
  return kTfLiteOk;
}
 800bc0e:	bd10      	pop	{r4, pc}

0800bc10 <_ZN6tflite12_GLOBAL__N_116MaxEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS0_6OpDataEPK16TfLiteEvalTensorPSC_.constprop.0.isra.0>:
TfLiteStatus MaxEvalQuantized(TfLiteContext* context, const TfLiteNode* node,
 800bc10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc14:	461d      	mov	r5, r3
  TFLITE_DCHECK((input->type == kTfLiteInt8) || (input->type == kTfLiteInt16));
 800bc16:	7a1b      	ldrb	r3, [r3, #8]
TfLiteStatus MaxEvalQuantized(TfLiteContext* context, const TfLiteNode* node,
 800bc18:	b0a6      	sub	sp, #152	; 0x98
  TFLITE_DCHECK((input->type == kTfLiteInt8) || (input->type == kTfLiteInt16));
 800bc1a:	2b09      	cmp	r3, #9
TfLiteStatus MaxEvalQuantized(TfLiteContext* context, const TfLiteNode* node,
 800bc1c:	f8dd 80b0 	ldr.w	r8, [sp, #176]	; 0xb0
 800bc20:	4607      	mov	r7, r0
 800bc22:	460e      	mov	r6, r1
 800bc24:	4614      	mov	r4, r2
  TFLITE_DCHECK((input->type == kTfLiteInt8) || (input->type == kTfLiteInt16));
 800bc26:	d001      	beq.n	800bc2c <_ZN6tflite12_GLOBAL__N_116MaxEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS0_6OpDataEPK16TfLiteEvalTensorPSC_.constprop.0.isra.0+0x1c>
 800bc28:	2b07      	cmp	r3, #7
 800bc2a:	d165      	bne.n	800bcf8 <_ZN6tflite12_GLOBAL__N_116MaxEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS0_6OpDataEPK16TfLiteEvalTensorPSC_.constprop.0.isra.0+0xe8>
  RuntimeShape input_shape = micro::GetTensorShape(input);
 800bc2c:	4629      	mov	r1, r5
 800bc2e:	a818      	add	r0, sp, #96	; 0x60
 800bc30:	f7fe fa58 	bl	800a0e4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 800bc34:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800bc36:	2b04      	cmp	r3, #4
 800bc38:	d15e      	bne.n	800bcf8 <_ZN6tflite12_GLOBAL__N_116MaxEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS0_6OpDataEPK16TfLiteEvalTensorPSC_.constprop.0.isra.0+0xe8>
  RuntimeShape output_shape = micro::GetTensorShape(output);
 800bc3a:	4641      	mov	r1, r8
 800bc3c:	a81f      	add	r0, sp, #124	; 0x7c
 800bc3e:	f7fe fa51 	bl	800a0e4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 800bc42:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800bc44:	2b04      	cmp	r3, #4
 800bc46:	d157      	bne.n	800bcf8 <_ZN6tflite12_GLOBAL__N_116MaxEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS0_6OpDataEPK16TfLiteEvalTensorPSC_.constprop.0.isra.0+0xe8>
    TFLITE_DCHECK_LT(i, size_);
 800bc48:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800bc4a:	2b03      	cmp	r3, #3
 800bc4c:	dd54      	ble.n	800bcf8 <_ZN6tflite12_GLOBAL__N_116MaxEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS0_6OpDataEPK16TfLiteEvalTensorPSC_.constprop.0.isra.0+0xe8>
    return dims_[i];
 800bc4e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 800bc50:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800bc52:	4293      	cmp	r3, r2
 800bc54:	d150      	bne.n	800bcf8 <_ZN6tflite12_GLOBAL__N_116MaxEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS0_6OpDataEPK16TfLiteEvalTensorPSC_.constprop.0.isra.0+0xe8>
  input_dims->c = depth;
 800bc56:	9309      	str	r3, [sp, #36]	; 0x24
  output_dims->c = depth;
 800bc58:	930d      	str	r3, [sp, #52]	; 0x34
  input_dims->n = 1;
 800bc5a:	2301      	movs	r3, #1
 800bc5c:	9306      	str	r3, [sp, #24]
  output_dims->n = 1;
 800bc5e:	930a      	str	r3, [sp, #40]	; 0x28
  filter_dims->n = 1;
 800bc60:	930e      	str	r3, [sp, #56]	; 0x38
  filter_dims->c = 1;
 800bc62:	9311      	str	r3, [sp, #68]	; 0x44
  input_dims->h = input_shape.Dims(1);
 800bc64:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800bc66:	9307      	str	r3, [sp, #28]
  input_dims->w = input_shape.Dims(2);
 800bc68:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bc6a:	9308      	str	r3, [sp, #32]
  output_dims->h = output_shape.Dims(1);
 800bc6c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bc6e:	930b      	str	r3, [sp, #44]	; 0x2c
  output_dims->w = output_shape.Dims(2);
 800bc70:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bc72:	930c      	str	r3, [sp, #48]	; 0x30
  pool_params->stride.w = params->stride_width;
 800bc74:	68b3      	ldr	r3, [r6, #8]
 800bc76:	9313      	str	r3, [sp, #76]	; 0x4c
 800bc78:	6873      	ldr	r3, [r6, #4]
 800bc7a:	9312      	str	r3, [sp, #72]	; 0x48
  pool_params->padding.w = data.reference_op_data.padding.width;
 800bc7c:	6863      	ldr	r3, [r4, #4]
 800bc7e:	9315      	str	r3, [sp, #84]	; 0x54
 800bc80:	6923      	ldr	r3, [r4, #16]
 800bc82:	9316      	str	r3, [sp, #88]	; 0x58
 800bc84:	6963      	ldr	r3, [r4, #20]
 800bc86:	9317      	str	r3, [sp, #92]	; 0x5c
 800bc88:	6823      	ldr	r3, [r4, #0]
 800bc8a:	9314      	str	r3, [sp, #80]	; 0x50
  filter_dims->h = params->filter_height;
 800bc8c:	6933      	ldr	r3, [r6, #16]
  pool_params->padding.w = data.reference_op_data.padding.width;
 800bc8e:	6a21      	ldr	r1, [r4, #32]
  filter_dims->h = params->filter_height;
 800bc90:	930f      	str	r3, [sp, #60]	; 0x3c
  filter_dims->w = params->filter_width;
 800bc92:	68f3      	ldr	r3, [r6, #12]
 800bc94:	9310      	str	r3, [sp, #64]	; 0x40
  ctx->buf = nullptr;
 800bc96:	2300      	movs	r3, #0
  if (data.buffer_idx > -1) {
 800bc98:	4299      	cmp	r1, r3
  ctx->size = 0;
 800bc9a:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if (data.buffer_idx > -1) {
 800bc9e:	db03      	blt.n	800bca8 <_ZN6tflite12_GLOBAL__N_116MaxEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS0_6OpDataEPK16TfLiteEvalTensorPSC_.constprop.0.isra.0+0x98>
    ctx->buf = context->GetScratchBuffer(context, data.buffer_idx);
 800bca0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bca2:	4638      	mov	r0, r7
 800bca4:	4798      	blx	r3
 800bca6:	9004      	str	r0, [sp, #16]
  if (input->type == kTfLiteInt8) {
 800bca8:	7a2b      	ldrb	r3, [r5, #8]
 800bcaa:	2b09      	cmp	r3, #9
  return reinterpret_cast<const T*>(tensor->data.raw);
 800bcac:	682b      	ldr	r3, [r5, #0]
 800bcae:	d012      	beq.n	800bcd6 <_ZN6tflite12_GLOBAL__N_116MaxEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS0_6OpDataEPK16TfLiteEvalTensorPSC_.constprop.0.isra.0+0xc6>
  TFLITE_DCHECK(tensor != nullptr);
 800bcb0:	f1b8 0f00 	cmp.w	r8, #0
 800bcb4:	d020      	beq.n	800bcf8 <_ZN6tflite12_GLOBAL__N_116MaxEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS0_6OpDataEPK16TfLiteEvalTensorPSC_.constprop.0.isra.0+0xe8>
    TFLITE_DCHECK_EQ(
 800bcb6:	f8d8 0000 	ldr.w	r0, [r8]
 800bcba:	a90a      	add	r1, sp, #40	; 0x28
 800bcbc:	aa0e      	add	r2, sp, #56	; 0x38
 800bcbe:	e9cd 1001 	strd	r1, r0, [sp, #4]
 800bcc2:	9200      	str	r2, [sp, #0]
 800bcc4:	a912      	add	r1, sp, #72	; 0x48
 800bcc6:	aa06      	add	r2, sp, #24
 800bcc8:	a804      	add	r0, sp, #16
 800bcca:	f00a faa0 	bl	801620e <arm_max_pool_s16>
 800bcce:	b998      	cbnz	r0, 800bcf8 <_ZN6tflite12_GLOBAL__N_116MaxEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS0_6OpDataEPK16TfLiteEvalTensorPSC_.constprop.0.isra.0+0xe8>
}
 800bcd0:	b026      	add	sp, #152	; 0x98
 800bcd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcd6:	f1b8 0f00 	cmp.w	r8, #0
 800bcda:	d00d      	beq.n	800bcf8 <_ZN6tflite12_GLOBAL__N_116MaxEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS0_6OpDataEPK16TfLiteEvalTensorPSC_.constprop.0.isra.0+0xe8>
    TFLITE_DCHECK_EQ(
 800bcdc:	f8d8 0000 	ldr.w	r0, [r8]
 800bce0:	a90a      	add	r1, sp, #40	; 0x28
 800bce2:	aa0e      	add	r2, sp, #56	; 0x38
 800bce4:	e9cd 1001 	strd	r1, r0, [sp, #4]
 800bce8:	9200      	str	r2, [sp, #0]
 800bcea:	a912      	add	r1, sp, #72	; 0x48
 800bcec:	aa06      	add	r2, sp, #24
 800bcee:	a804      	add	r0, sp, #16
 800bcf0:	f00a fc76 	bl	80165e0 <arm_max_pool_s8>
 800bcf4:	2800      	cmp	r0, #0
 800bcf6:	d0eb      	beq.n	800bcd0 <_ZN6tflite12_GLOBAL__N_116MaxEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS0_6OpDataEPK16TfLiteEvalTensorPSC_.constprop.0.isra.0+0xc0>
  TFLITE_DCHECK((input->type == kTfLiteInt8) || (input->type == kTfLiteInt16));
 800bcf8:	f00a ff38 	bl	8016b6c <abort>

0800bcfc <_ZN6tflite12_GLOBAL__N_111MaxEvalInt8EP13TfLiteContextP10TfLiteNode>:
  }

  return kTfLiteOk;
}

TfLiteStatus MaxEvalInt8(TfLiteContext* context, TfLiteNode* node) {
 800bcfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TFLITE_DCHECK(node->builtin_data != nullptr);
 800bd00:	690f      	ldr	r7, [r1, #16]
TfLiteStatus MaxEvalInt8(TfLiteContext* context, TfLiteNode* node) {
 800bd02:	b082      	sub	sp, #8
  TFLITE_DCHECK(node->builtin_data != nullptr);
 800bd04:	b1ff      	cbz	r7, 800bd46 <_ZN6tflite12_GLOBAL__N_111MaxEvalInt8EP13TfLiteContextP10TfLiteNode+0x4a>
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);

  TFLITE_DCHECK(node->user_data != nullptr);
 800bd06:	f8d1 800c 	ldr.w	r8, [r1, #12]
 800bd0a:	460c      	mov	r4, r1
 800bd0c:	f1b8 0f00 	cmp.w	r8, #0
 800bd10:	d019      	beq.n	800bd46 <_ZN6tflite12_GLOBAL__N_111MaxEvalInt8EP13TfLiteContextP10TfLiteNode+0x4a>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));

  const TfLiteEvalTensor* input =
      micro::GetEvalInput(context, node, kPoolingInputTensor);
 800bd12:	4b0e      	ldr	r3, [pc, #56]	; (800bd4c <_ZN6tflite12_GLOBAL__N_111MaxEvalInt8EP13TfLiteContextP10TfLiteNode+0x50>)
 800bd14:	681a      	ldr	r2, [r3, #0]
 800bd16:	4606      	mov	r6, r0
 800bd18:	f7fe f9be 	bl	800a098 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  TFLITE_DCHECK(input->type == kTfLiteInt8);
 800bd1c:	7a03      	ldrb	r3, [r0, #8]
 800bd1e:	2b09      	cmp	r3, #9
      micro::GetEvalInput(context, node, kPoolingInputTensor);
 800bd20:	4605      	mov	r5, r0
  TFLITE_DCHECK(input->type == kTfLiteInt8);
 800bd22:	d110      	bne.n	800bd46 <_ZN6tflite12_GLOBAL__N_111MaxEvalInt8EP13TfLiteContextP10TfLiteNode+0x4a>
  TfLiteEvalTensor* output =
      micro::GetEvalOutput(context, node, kPoolingOutputTensor);
 800bd24:	4b0a      	ldr	r3, [pc, #40]	; (800bd50 <_ZN6tflite12_GLOBAL__N_111MaxEvalInt8EP13TfLiteContextP10TfLiteNode+0x54>)
 800bd26:	4621      	mov	r1, r4
 800bd28:	681a      	ldr	r2, [r3, #0]
 800bd2a:	4630      	mov	r0, r6
 800bd2c:	f7fe f9ce 	bl	800a0cc <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>

  MaxEvalQuantized(context, node, params, data, input, output);
 800bd30:	462b      	mov	r3, r5
 800bd32:	9000      	str	r0, [sp, #0]
 800bd34:	4642      	mov	r2, r8
 800bd36:	4630      	mov	r0, r6
 800bd38:	4639      	mov	r1, r7
 800bd3a:	f7ff ff69 	bl	800bc10 <_ZN6tflite12_GLOBAL__N_116MaxEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS0_6OpDataEPK16TfLiteEvalTensorPSC_.constprop.0.isra.0>
  return kTfLiteOk;
}
 800bd3e:	2000      	movs	r0, #0
 800bd40:	b002      	add	sp, #8
 800bd42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  TFLITE_DCHECK(node->builtin_data != nullptr);
 800bd46:	f00a ff11 	bl	8016b6c <abort>
 800bd4a:	bf00      	nop
 800bd4c:	0806c758 	.word	0x0806c758
 800bd50:	0806c75c 	.word	0x0806c75c

0800bd54 <_ZN6tflite25Register_MAX_POOL_2D_INT8Ev>:

TFLMRegistration Register_AVERAGE_POOL_2D() {
  return tflite::micro::RegisterOp(Init, AveragePrepare, AverageEval);
}

TFLMRegistration Register_MAX_POOL_2D_INT8() {
 800bd54:	b510      	push	{r4, lr}
  return tflite::micro::RegisterOp(Init, MaxPrepare, MaxEvalInt8);
 800bd56:	2100      	movs	r1, #0
TFLMRegistration Register_MAX_POOL_2D_INT8() {
 800bd58:	b082      	sub	sp, #8
  return tflite::micro::RegisterOp(Init, MaxPrepare, MaxEvalInt8);
 800bd5a:	e9cd 1100 	strd	r1, r1, [sp]
 800bd5e:	4b04      	ldr	r3, [pc, #16]	; (800bd70 <_ZN6tflite25Register_MAX_POOL_2D_INT8Ev+0x1c>)
 800bd60:	4a04      	ldr	r2, [pc, #16]	; (800bd74 <_ZN6tflite25Register_MAX_POOL_2D_INT8Ev+0x20>)
 800bd62:	4905      	ldr	r1, [pc, #20]	; (800bd78 <_ZN6tflite25Register_MAX_POOL_2D_INT8Ev+0x24>)
TFLMRegistration Register_MAX_POOL_2D_INT8() {
 800bd64:	4604      	mov	r4, r0
  return tflite::micro::RegisterOp(Init, MaxPrepare, MaxEvalInt8);
 800bd66:	f7fe f98b 	bl	800a080 <_ZN6tflite5micro10RegisterOpEPFPvP13TfLiteContextPKcjEPF12TfLiteStatusS3_P10TfLiteNodeESC_PFvS3_S1_ESE_>
}
 800bd6a:	4620      	mov	r0, r4
 800bd6c:	b002      	add	sp, #8
 800bd6e:	bd10      	pop	{r4, pc}
 800bd70:	0800bcfd 	.word	0x0800bcfd
 800bd74:	0800bbfd 	.word	0x0800bbfd
 800bd78:	0800bbed 	.word	0x0800bbed

0800bd7c <_ZNK6tflite19GreedyMemoryPlanner21preserves_all_tensorsEv>:
  }

  // Returns False because the GreedyMemoryPlanner doesn't preserves all tensors
  // after invocation. Do to the fact that tensors that tensor data for tensors
  // that aren't being used during a phase of invocation are overwritten.
  bool preserves_all_tensors() const override { return false; }
 800bd7c:	2000      	movs	r0, #0
 800bd7e:	4770      	bx	lr

0800bd80 <_ZN6tflite19GreedyMemoryPlanner4InitEPhi>:

TfLiteStatus GreedyMemoryPlanner::Init(unsigned char* scratch_buffer,
                                       int scratch_buffer_size) {
  // Reset internal states
  buffer_count_ = 0;
  need_to_calculate_offsets_ = true;
 800bd80:	2301      	movs	r3, #1
                                       int scratch_buffer_size) {
 800bd82:	b410      	push	{r4}
  need_to_calculate_offsets_ = true;
 800bd84:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28

  // Allocate the arrays we need within the scratch buffer arena.
  max_buffer_count_ = scratch_buffer_size / per_buffer_size();
 800bd88:	f103 33cc 	add.w	r3, r3, #3435973836	; 0xcccccccc
 800bd8c:	fba3 3202 	umull	r3, r2, r3, r2
 800bd90:	0952      	lsrs	r2, r2, #5

  unsigned char* next_free = scratch_buffer;
  requirements_ = reinterpret_cast<BufferRequirements*>(next_free);
 800bd92:	60c1      	str	r1, [r0, #12]
  next_free += sizeof(BufferRequirements) * max_buffer_count_;
 800bd94:	eb01 1102 	add.w	r1, r1, r2, lsl #4

  buffer_sizes_sorted_ = reinterpret_cast<int*>(next_free);
  next_free += sizeof(int) * max_buffer_count_;
 800bd98:	eb01 0382 	add.w	r3, r1, r2, lsl #2

  buffer_ids_sorted_ = reinterpret_cast<int*>(next_free);
 800bd9c:	e9c0 1304 	strd	r1, r3, [r0, #16]
  max_buffer_count_ = scratch_buffer_size / per_buffer_size();
 800bda0:	6042      	str	r2, [r0, #4]
  next_free += sizeof(int) * max_buffer_count_;
 800bda2:	eb03 0382 	add.w	r3, r3, r2, lsl #2

  buffers_sorted_by_offset_ = reinterpret_cast<ListEntry*>(next_free);
  next_free += sizeof(ListEntry) * max_buffer_count_;
 800bda6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  buffer_count_ = 0;
 800bdaa:	2400      	movs	r4, #0
  next_free += sizeof(ListEntry) * max_buffer_count_;
 800bdac:	eb03 0282 	add.w	r2, r3, r2, lsl #2
  buffer_count_ = 0;
 800bdb0:	6084      	str	r4, [r0, #8]
  buffers_sorted_by_offset_ = reinterpret_cast<ListEntry*>(next_free);
 800bdb2:	6183      	str	r3, [r0, #24]

  buffer_offsets_ = reinterpret_cast<int*>(next_free);
 800bdb4:	6242      	str	r2, [r0, #36]	; 0x24
  return kTfLiteOk;
}
 800bdb6:	4620      	mov	r0, r4
 800bdb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bdbc:	4770      	bx	lr
 800bdbe:	bf00      	nop

0800bdc0 <_ZN6tflite19GreedyMemoryPlannerD1Ev>:

GreedyMemoryPlanner::~GreedyMemoryPlanner() {
  // We don't own the scratch buffer, so don't deallocate anything.
}
 800bdc0:	4770      	bx	lr
 800bdc2:	bf00      	nop

0800bdc4 <_ZN6tflite19GreedyMemoryPlanner14GetBufferCountEv>:
    MicroPrintf("%s%d: %s (%dk)", t < 10 ? " " : "", t, (const char*)line,
                (memory_use + 1023) / 1024);
  }
}

int GreedyMemoryPlanner::GetBufferCount() { return buffer_count_; }
 800bdc4:	6880      	ldr	r0, [r0, #8]
 800bdc6:	4770      	bx	lr

0800bdc8 <_ZN6tflite19GreedyMemoryPlannerD0Ev>:
GreedyMemoryPlanner::~GreedyMemoryPlanner() {
 800bdc8:	b510      	push	{r4, lr}
}
 800bdca:	212c      	movs	r1, #44	; 0x2c
GreedyMemoryPlanner::~GreedyMemoryPlanner() {
 800bdcc:	4604      	mov	r4, r0
}
 800bdce:	f00a fce2 	bl	8016796 <_ZdlPvj>
 800bdd2:	4620      	mov	r0, r4
 800bdd4:	bd10      	pop	{r4, pc}
 800bdd6:	bf00      	nop

0800bdd8 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEiii>:
                                            int last_time_used) {
 800bdd8:	b538      	push	{r3, r4, r5, lr}
  if (buffer_count_ >= max_buffer_count_) {
 800bdda:	e9d0 5401 	ldrd	r5, r4, [r0, #4]
 800bdde:	42ac      	cmp	r4, r5
 800bde0:	da12      	bge.n	800be08 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEiii+0x30>
  BufferRequirements* current = &requirements_[buffer_count_];
 800bde2:	68c5      	ldr	r5, [r0, #12]
 800bde4:	ea4f 1c04 	mov.w	ip, r4, lsl #4
  current->size = size;
 800bde8:	f845 100c 	str.w	r1, [r5, ip]
  BufferRequirements* current = &requirements_[buffer_count_];
 800bdec:	eb05 1104 	add.w	r1, r5, r4, lsl #4
  ++buffer_count_;
 800bdf0:	3401      	adds	r4, #1
  current->first_time_used = first_time_used;
 800bdf2:	608a      	str	r2, [r1, #8]
  current->last_time_used = last_time_used;
 800bdf4:	60cb      	str	r3, [r1, #12]
  current->offline_offset = kOnlinePlannedBuffer;
 800bdf6:	f04f 32ff 	mov.w	r2, #4294967295
  need_to_calculate_offsets_ = true;
 800bdfa:	2301      	movs	r3, #1
  current->offline_offset = kOnlinePlannedBuffer;
 800bdfc:	604a      	str	r2, [r1, #4]
  ++buffer_count_;
 800bdfe:	6084      	str	r4, [r0, #8]
  need_to_calculate_offsets_ = true;
 800be00:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
  return kTfLiteOk;
 800be04:	2000      	movs	r0, #0
}
 800be06:	bd38      	pop	{r3, r4, r5, pc}
    MicroPrintf("Too many buffers (max is %d)", max_buffer_count_);
 800be08:	4802      	ldr	r0, [pc, #8]	; (800be14 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEiii+0x3c>)
 800be0a:	4629      	mov	r1, r5
 800be0c:	f7fd fce6 	bl	80097dc <_Z11MicroPrintfPKcz>
    return kTfLiteError;
 800be10:	2001      	movs	r0, #1
}
 800be12:	bd38      	pop	{r3, r4, r5, pc}
 800be14:	0806ce98 	.word	0x0806ce98

0800be18 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEiiii>:
                                            int offline_offset) {
 800be18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (AddBuffer(size, first_time_used, last_time_used) != kTfLiteOk) {
 800be1c:	6804      	ldr	r4, [r0, #0]
 800be1e:	f8df a05c 	ldr.w	sl, [pc, #92]	; 800be7c <_ZN6tflite19GreedyMemoryPlanner9AddBufferEiiii+0x64>
 800be22:	f8d4 9008 	ldr.w	r9, [r4, #8]
  BufferRequirements* current = &requirements_[buffer_count_];
 800be26:	e9d0 4e02 	ldrd	r4, lr, [r0, #8]
 800be2a:	45d1      	cmp	r9, sl
 800be2c:	eb0e 1804 	add.w	r8, lr, r4, lsl #4
  if (AddBuffer(size, first_time_used, last_time_used) != kTfLiteOk) {
 800be30:	d117      	bne.n	800be62 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEiiii+0x4a>
 800be32:	460f      	mov	r7, r1
  if (buffer_count_ >= max_buffer_count_) {
 800be34:	6841      	ldr	r1, [r0, #4]
 800be36:	428c      	cmp	r4, r1
 800be38:	da18      	bge.n	800be6c <_ZN6tflite19GreedyMemoryPlanner9AddBufferEiiii+0x54>
 800be3a:	ea4f 1b04 	mov.w	fp, r4, lsl #4
  current->size = size;
 800be3e:	461d      	mov	r5, r3
  ++buffer_count_;
 800be40:	3401      	adds	r4, #1
  need_to_calculate_offsets_ = true;
 800be42:	2301      	movs	r3, #1
  current->size = size;
 800be44:	f84e 700b 	str.w	r7, [lr, fp]
  current->first_time_used = first_time_used;
 800be48:	f8c8 2008 	str.w	r2, [r8, #8]
  current->last_time_used = last_time_used;
 800be4c:	f8c8 500c 	str.w	r5, [r8, #12]
  ++buffer_count_;
 800be50:	6084      	str	r4, [r0, #8]
  need_to_calculate_offsets_ = true;
 800be52:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
  current->offline_offset = offline_offset;
 800be56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be58:	f8c8 3004 	str.w	r3, [r8, #4]
  return kTfLiteOk;
 800be5c:	2000      	movs	r0, #0
}
 800be5e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (AddBuffer(size, first_time_used, last_time_used) != kTfLiteOk) {
 800be62:	47c8      	blx	r9
 800be64:	2800      	cmp	r0, #0
 800be66:	d0f6      	beq.n	800be56 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEiiii+0x3e>
    return kTfLiteError;
 800be68:	2001      	movs	r0, #1
 800be6a:	e7f8      	b.n	800be5e <_ZN6tflite19GreedyMemoryPlanner9AddBufferEiiii+0x46>
    MicroPrintf("Too many buffers (max is %d)", max_buffer_count_);
 800be6c:	4802      	ldr	r0, [pc, #8]	; (800be78 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEiiii+0x60>)
 800be6e:	f7fd fcb5 	bl	80097dc <_Z11MicroPrintfPKcz>
    return kTfLiteError;
 800be72:	2001      	movs	r0, #1
}
 800be74:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be78:	0806ce98 	.word	0x0806ce98
 800be7c:	0800bdd9 	.word	0x0800bdd9

0800be80 <_ZN6tflite19GreedyMemoryPlannerC1Ev>:
GreedyMemoryPlanner::GreedyMemoryPlanner() {}
 800be80:	4b01      	ldr	r3, [pc, #4]	; (800be88 <_ZN6tflite19GreedyMemoryPlannerC1Ev+0x8>)
 800be82:	6003      	str	r3, [r0, #0]
 800be84:	4770      	bx	lr
 800be86:	bf00      	nop
 800be88:	0806cf3c 	.word	0x0806cf3c

0800be8c <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>:
  if (!need_to_calculate_offsets_ || (buffer_count_ == 0)) {
 800be8c:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 800be90:	2b00      	cmp	r3, #0
 800be92:	f000 80b8 	beq.w	800c006 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x17a>
 800be96:	f8d0 c008 	ldr.w	ip, [r0, #8]
 800be9a:	f1bc 0f00 	cmp.w	ip, #0
 800be9e:	f000 80b2 	beq.w	800c006 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x17a>
void GreedyMemoryPlanner::CalculateOffsetsIfNeeded() {
 800bea2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  need_to_calculate_offsets_ = false;
 800bea6:	f04f 0200 	mov.w	r2, #0
    if (requirements_[i].offline_offset == kOnlinePlannedBuffer) {
 800beaa:	68c5      	ldr	r5, [r0, #12]
  need_to_calculate_offsets_ = false;
 800beac:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
void GreedyMemoryPlanner::CalculateOffsetsIfNeeded() {
 800beb0:	b083      	sub	sp, #12
  for (int i = 0; i < buffer_count_; ++i) {
 800beb2:	f340 8111 	ble.w	800c0d8 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x24c>
    buffer_offsets_[buffer_id] = 0;
 800beb6:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800beb8:	9101      	str	r1, [sp, #4]
                     &buffer_ids_sorted_[idx_from_head],
 800beba:	e9d0 eb04 	ldrd	lr, fp, [r0, #16]
 800bebe:	4689      	mov	r9, r1
 800bec0:	462c      	mov	r4, r5
 800bec2:	1d2f      	adds	r7, r5, #4
  int idx_from_head = 0;
 800bec4:	4611      	mov	r1, r2
 800bec6:	4698      	mov	r8, r3
    if (requirements_[i].offline_offset == kOnlinePlannedBuffer) {
 800bec8:	6866      	ldr	r6, [r4, #4]
 800beca:	1c73      	adds	r3, r6, #1
 800becc:	f000 809c 	beq.w	800c008 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x17c>
      buffer_sizes_sorted_[idx_from_head] = requirements_[i].size;
 800bed0:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800bed4:	f84e 6021 	str.w	r6, [lr, r1, lsl #2]
      buffer_ids_sorted_[idx_from_head] = i;
 800bed8:	f84b 2021 	str.w	r2, [fp, r1, lsl #2]
      buffer_offsets_[i] = requirements_[i].offline_offset;
 800bedc:	6866      	ldr	r6, [r4, #4]
 800bede:	f849 6b04 	str.w	r6, [r9], #4
  for (int i = 0; i < buffer_count_; ++i) {
 800bee2:	6886      	ldr	r6, [r0, #8]
 800bee4:	3201      	adds	r2, #1
 800bee6:	4296      	cmp	r6, r2
      idx_from_head++;
 800bee8:	f101 0101 	add.w	r1, r1, #1
  for (int i = 0; i < buffer_count_; ++i) {
 800beec:	f104 0410 	add.w	r4, r4, #16
 800bef0:	f107 0710 	add.w	r7, r7, #16
 800bef4:	dce8      	bgt.n	800bec8 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x3c>
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
 800bef6:	eb0e 0e81 	add.w	lr, lr, r1, lsl #2
 800befa:	eba6 0c01 	sub.w	ip, r6, r1
 800befe:	4643      	mov	r3, r8
 800bf00:	eb0b 0181 	add.w	r1, fp, r1, lsl #2
void ReverseSortInPlace(int* values, int* ids, int size) {
 800bf04:	f1ae 0904 	sub.w	r9, lr, #4
 800bf08:	eb09 098c 	add.w	r9, r9, ip, lsl #2
    for (int i = 1; i < size; ++i) {
 800bf0c:	f1bc 0f01 	cmp.w	ip, #1
 800bf10:	dd16      	ble.n	800bf40 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xb4>
 800bf12:	460c      	mov	r4, r1
 800bf14:	4672      	mov	r2, lr
    any_swapped = false;
 800bf16:	f04f 0800 	mov.w	r8, #0
      if (values[i - 1] < values[i]) {
 800bf1a:	6816      	ldr	r6, [r2, #0]
 800bf1c:	f852 7f04 	ldr.w	r7, [r2, #4]!
 800bf20:	42be      	cmp	r6, r7
 800bf22:	da06      	bge.n	800bf32 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xa6>
        values[i] = value_temp;
 800bf24:	e942 7601 	strd	r7, r6, [r2, #-4]
        ids[i - 1] = ids[i];
 800bf28:	e9d4 6700 	ldrd	r6, r7, [r4]
 800bf2c:	e9c4 7600 	strd	r7, r6, [r4]
        any_swapped = true;
 800bf30:	4698      	mov	r8, r3
    for (int i = 1; i < size; ++i) {
 800bf32:	4591      	cmp	r9, r2
 800bf34:	f104 0404 	add.w	r4, r4, #4
 800bf38:	d1ef      	bne.n	800bf1a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x8e>
  do {
 800bf3a:	f1b8 0f00 	cmp.w	r8, #0
 800bf3e:	d1e5      	bne.n	800bf0c <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x80>
  ListEntry* first_entry = &buffers_sorted_by_offset_[first_entry_index_];
 800bf40:	6984      	ldr	r4, [r0, #24]
  next_free_entry_ = 1;
 800bf42:	2201      	movs	r2, #1
 800bf44:	61c2      	str	r2, [r0, #28]
  first_entry_index_ = 0;
 800bf46:	2300      	movs	r3, #0
  first_entry->next_entry_index = -1;  // to mark the entry as end of list
 800bf48:	f04f 32ff 	mov.w	r2, #4294967295
  first_entry_index_ = 0;
 800bf4c:	6203      	str	r3, [r0, #32]
  first_entry->next_entry_index = -1;  // to mark the entry as end of list
 800bf4e:	60a2      	str	r2, [r4, #8]
  int buffer_id = buffer_ids_sorted_[0];
 800bf50:	f8db 2000 	ldr.w	r2, [fp]
  first_entry->requirements_index = buffer_id;
 800bf54:	6062      	str	r2, [r4, #4]
  if (requirements_[buffer_id].offline_offset == kOnlinePlannedBuffer) {
 800bf56:	eb05 1102 	add.w	r1, r5, r2, lsl #4
 800bf5a:	6849      	ldr	r1, [r1, #4]
 800bf5c:	3101      	adds	r1, #1
 800bf5e:	f000 80b7 	beq.w	800c0d0 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x244>
  first_entry->offset = buffer_offsets_[buffer_id];
 800bf62:	9b01      	ldr	r3, [sp, #4]
 800bf64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf68:	6023      	str	r3, [r4, #0]
  for (int i = 1; i < buffer_count_; ++i) {
 800bf6a:	6883      	ldr	r3, [r0, #8]
 800bf6c:	2b01      	cmp	r3, #1
 800bf6e:	dd47      	ble.n	800c000 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x174>
 800bf70:	46a0      	mov	r8, r4
 800bf72:	f04f 0901 	mov.w	r9, #1
 800bf76:	f8cd b000 	str.w	fp, [sp]
 800bf7a:	e008      	b.n	800bf8e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x102>
      first_entry->next_entry_index = first_entry_index_;
 800bf7c:	6a03      	ldr	r3, [r0, #32]
 800bf7e:	6093      	str	r3, [r2, #8]
      first_entry_index_ = new_entry_index;
 800bf80:	4690      	mov	r8, r2
 800bf82:	6206      	str	r6, [r0, #32]
  for (int i = 1; i < buffer_count_; ++i) {
 800bf84:	6883      	ldr	r3, [r0, #8]
 800bf86:	f109 0901 	add.w	r9, r9, #1
 800bf8a:	454b      	cmp	r3, r9
 800bf8c:	dd38      	ble.n	800c000 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x174>
    buffer_id = buffer_ids_sorted_[i];
 800bf8e:	9b00      	ldr	r3, [sp, #0]
 800bf90:	f853 7f04 	ldr.w	r7, [r3, #4]!
 800bf94:	9300      	str	r3, [sp, #0]
    BufferRequirements* wanted_requirements = &requirements_[buffer_id];
 800bf96:	eb05 1307 	add.w	r3, r5, r7, lsl #4
 800bf9a:	013a      	lsls	r2, r7, #4
    if (wanted_requirements->offline_offset == kOnlinePlannedBuffer) {
 800bf9c:	6859      	ldr	r1, [r3, #4]
    const int wanted_first_time_used = wanted_requirements->first_time_used;
 800bf9e:	f8d3 e008 	ldr.w	lr, [r3, #8]
    const int wanted_size = wanted_requirements->size;
 800bfa2:	f855 a002 	ldr.w	sl, [r5, r2]
    const int wanted_last_time_used = wanted_requirements->last_time_used;
 800bfa6:	f8d3 c00c 	ldr.w	ip, [r3, #12]
    if (wanted_requirements->offline_offset == kOnlinePlannedBuffer) {
 800bfaa:	1c4e      	adds	r6, r1, #1
 800bfac:	d040      	beq.n	800c030 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1a4>
    buffer_offsets_[buffer_id] = candidate_offset;
 800bfae:	9b01      	ldr	r3, [sp, #4]
 800bfb0:	f843 1027 	str.w	r1, [r3, r7, lsl #2]
    ListEntry* new_entry = &buffers_sorted_by_offset_[next_free_entry_];
 800bfb4:	69c6      	ldr	r6, [r0, #28]
 800bfb6:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    ++next_free_entry_;
 800bfba:	1c73      	adds	r3, r6, #1
    new_entry->offset = candidate_offset;
 800bfbc:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
    ListEntry* new_entry = &buffers_sorted_by_offset_[next_free_entry_];
 800bfc0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    new_entry->requirements_index = buffer_id;
 800bfc4:	6057      	str	r7, [r2, #4]
    ++next_free_entry_;
 800bfc6:	61c3      	str	r3, [r0, #28]
    if (first_entry->offset > candidate_offset) {
 800bfc8:	f8d8 3000 	ldr.w	r3, [r8]
 800bfcc:	428b      	cmp	r3, r1
 800bfce:	dcd5      	bgt.n	800bf7c <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xf0>
 800bfd0:	46c4      	mov	ip, r8
 800bfd2:	e004      	b.n	800bfde <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x152>
        if (next_entry->offset > candidate_offset) {
 800bfd4:	f854 7027 	ldr.w	r7, [r4, r7, lsl #2]
 800bfd8:	428f      	cmp	r7, r1
 800bfda:	dc75      	bgt.n	800c0c8 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x23c>
 800bfdc:	46f4      	mov	ip, lr
        const int next_entry_index = current_entry->next_entry_index;
 800bfde:	f8dc 3008 	ldr.w	r3, [ip, #8]
        ListEntry* next_entry = &buffers_sorted_by_offset_[next_entry_index];
 800bfe2:	eb03 0743 	add.w	r7, r3, r3, lsl #1
        if (next_entry_index == -1) {
 800bfe6:	f1b3 3fff 	cmp.w	r3, #4294967295
        ListEntry* next_entry = &buffers_sorted_by_offset_[next_entry_index];
 800bfea:	eb04 0e87 	add.w	lr, r4, r7, lsl #2
        if (next_entry_index == -1) {
 800bfee:	d1f1      	bne.n	800bfd4 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x148>
          current_entry->next_entry_index = new_entry_index;
 800bff0:	f8cc 6008 	str.w	r6, [ip, #8]
          new_entry->next_entry_index = -1;
 800bff4:	6093      	str	r3, [r2, #8]
  for (int i = 1; i < buffer_count_; ++i) {
 800bff6:	6883      	ldr	r3, [r0, #8]
 800bff8:	f109 0901 	add.w	r9, r9, #1
 800bffc:	454b      	cmp	r3, r9
 800bffe:	dcc6      	bgt.n	800bf8e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x102>
}
 800c000:	b003      	add	sp, #12
 800c002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c006:	4770      	bx	lr
      idx_from_tail--;
 800c008:	f10c 3cff 	add.w	ip, ip, #4294967295
      buffer_sizes_sorted_[idx_from_tail] = requirements_[i].size;
 800c00c:	f857 3c04 	ldr.w	r3, [r7, #-4]
 800c010:	f84e 302c 	str.w	r3, [lr, ip, lsl #2]
      buffer_ids_sorted_[idx_from_tail] = i;
 800c014:	f84b 202c 	str.w	r2, [fp, ip, lsl #2]
      buffer_offsets_[i] = -1;
 800c018:	f849 6b04 	str.w	r6, [r9], #4
  for (int i = 0; i < buffer_count_; ++i) {
 800c01c:	6886      	ldr	r6, [r0, #8]
 800c01e:	3201      	adds	r2, #1
 800c020:	4296      	cmp	r6, r2
 800c022:	f104 0410 	add.w	r4, r4, #16
 800c026:	f107 0710 	add.w	r7, r7, #16
 800c02a:	f73f af4d 	bgt.w	800bec8 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x3c>
 800c02e:	e762      	b.n	800bef6 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x6a>
      ListEntry* prior_entry = nullptr;
 800c030:	2600      	movs	r6, #0
    int candidate_offset = 0;
 800c032:	4631      	mov	r1, r6
  if (start == nullptr) {
 800c034:	b30e      	cbz	r6, 800c07a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1ee>
    if (start->next_entry_index == -1) {
 800c036:	68b3      	ldr	r3, [r6, #8]
 800c038:	1c5a      	adds	r2, r3, #1
 800c03a:	d03c      	beq.n	800c0b6 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x22a>
    candidate_next_entry = &buffers_sorted_by_offset_[start->next_entry_index];
 800c03c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c040:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c044:	468b      	mov	fp, r1
      &requirements_[entry->requirements_index];
 800c046:	685a      	ldr	r2, [r3, #4]
  const BufferRequirements* entry_requirements =
 800c048:	eb05 1202 	add.w	r2, r5, r2, lsl #4
  if (entry_requirements->first_time_used > last_time_used) {
 800c04c:	6891      	ldr	r1, [r2, #8]
 800c04e:	458c      	cmp	ip, r1
 800c050:	db1f      	blt.n	800c092 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x206>
  if (first_time_used > entry_requirements->last_time_used) {
 800c052:	68d2      	ldr	r2, [r2, #12]
 800c054:	4596      	cmp	lr, r2
 800c056:	dc1c      	bgt.n	800c092 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x206>
        if (prior_entry) {
 800c058:	4659      	mov	r1, fp
 800c05a:	b316      	cbz	r6, 800c0a2 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x216>
          const int prior_entry_offset =
 800c05c:	e9d6 6200 	ldrd	r6, r2, [r6]
              prior_entry->offset + candidate_requirements->size;
 800c060:	0112      	lsls	r2, r2, #4
          const int prior_entry_offset =
 800c062:	58aa      	ldr	r2, [r5, r2]
 800c064:	4432      	add	r2, r6
 800c066:	4291      	cmp	r1, r2
 800c068:	bfb8      	it	lt
 800c06a:	4611      	movlt	r1, r2
        const int gap = next_entry->offset - candidate_offset;
 800c06c:	681a      	ldr	r2, [r3, #0]
 800c06e:	1a52      	subs	r2, r2, r1
        if (gap >= wanted_size) {
 800c070:	4592      	cmp	sl, r2
 800c072:	dd9c      	ble.n	800bfae <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x122>
    int candidate_offset = 0;
 800c074:	461e      	mov	r6, r3
  if (start == nullptr) {
 800c076:	2e00      	cmp	r6, #0
 800c078:	d1dd      	bne.n	800c036 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1aa>
    candidate_next_entry = &buffers_sorted_by_offset_[first_entry_index_];
 800c07a:	6a03      	ldr	r3, [r0, #32]
 800c07c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c080:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c084:	468b      	mov	fp, r1
      &requirements_[entry->requirements_index];
 800c086:	685a      	ldr	r2, [r3, #4]
  const BufferRequirements* entry_requirements =
 800c088:	eb05 1202 	add.w	r2, r5, r2, lsl #4
  if (entry_requirements->first_time_used > last_time_used) {
 800c08c:	6891      	ldr	r1, [r2, #8]
 800c08e:	458c      	cmp	ip, r1
 800c090:	dadf      	bge.n	800c052 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1c6>
    if (candidate_next_entry->next_entry_index == -1) {
 800c092:	689b      	ldr	r3, [r3, #8]
 800c094:	1c5a      	adds	r2, r3, #1
        &buffers_sorted_by_offset_[candidate_next_entry->next_entry_index];
 800c096:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    if (candidate_next_entry->next_entry_index == -1) {
 800c09a:	d008      	beq.n	800c0ae <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x222>
    candidate_next_entry =
 800c09c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
 800c0a0:	e7d1      	b.n	800c046 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1ba>
        const int gap = next_entry->offset - candidate_offset;
 800c0a2:	681a      	ldr	r2, [r3, #0]
 800c0a4:	1a52      	subs	r2, r2, r1
        if (gap >= wanted_size) {
 800c0a6:	4592      	cmp	sl, r2
 800c0a8:	dd81      	ble.n	800bfae <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x122>
    int candidate_offset = 0;
 800c0aa:	461e      	mov	r6, r3
 800c0ac:	e7e3      	b.n	800c076 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1ea>
        if (prior_entry) {
 800c0ae:	4659      	mov	r1, fp
 800c0b0:	2e00      	cmp	r6, #0
 800c0b2:	f43f af7c 	beq.w	800bfae <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x122>
          const int prior_entry_offset =
 800c0b6:	e9d6 2300 	ldrd	r2, r3, [r6]
              prior_entry->offset + candidate_requirements->size;
 800c0ba:	011b      	lsls	r3, r3, #4
          const int prior_entry_offset =
 800c0bc:	58eb      	ldr	r3, [r5, r3]
 800c0be:	4413      	add	r3, r2
 800c0c0:	4299      	cmp	r1, r3
 800c0c2:	bfb8      	it	lt
 800c0c4:	4619      	movlt	r1, r3
        if (next_entry == nullptr) {
 800c0c6:	e772      	b.n	800bfae <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x122>
          new_entry->next_entry_index = current_entry->next_entry_index;
 800c0c8:	6093      	str	r3, [r2, #8]
          current_entry->next_entry_index = new_entry_index;
 800c0ca:	f8cc 6008 	str.w	r6, [ip, #8]
          break;
 800c0ce:	e759      	b.n	800bf84 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xf8>
    buffer_offsets_[buffer_id] = 0;
 800c0d0:	9901      	ldr	r1, [sp, #4]
 800c0d2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800c0d6:	e747      	b.n	800bf68 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xdc>
                     &buffer_ids_sorted_[idx_from_head],
 800c0d8:	e9d0 eb04 	ldrd	lr, fp, [r0, #16]
    buffer_offsets_[buffer_id] = 0;
 800c0dc:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800c0de:	9201      	str	r2, [sp, #4]
 800c0e0:	4659      	mov	r1, fp
 800c0e2:	e70f      	b.n	800bf04 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x78>

0800c0e4 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>:
size_t GreedyMemoryPlanner::GetMaximumMemorySize() {
 800c0e4:	b570      	push	{r4, r5, r6, lr}
  CalculateOffsetsIfNeeded();
 800c0e6:	f7ff fed1 	bl	800be8c <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
size_t GreedyMemoryPlanner::GetMaximumMemorySize() {
 800c0ea:	4605      	mov	r5, r0
  if (buffer_count_ == 0) {
 800c0ec:	6880      	ldr	r0, [r0, #8]
 800c0ee:	b1c8      	cbz	r0, 800c124 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x40>
  ListEntry* entry = &buffers_sorted_by_offset_[first_entry_index_];
 800c0f0:	6a2b      	ldr	r3, [r5, #32]
 800c0f2:	69ac      	ldr	r4, [r5, #24]
 800c0f4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  while (entry) {
 800c0f8:	eb14 0383 	adds.w	r3, r4, r3, lsl #2
 800c0fc:	d013      	beq.n	800c126 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x42>
        &requirements_[entry->requirements_index];
 800c0fe:	68ee      	ldr	r6, [r5, #12]
  size_t max_size = 0;
 800c100:	2000      	movs	r0, #0
 800c102:	e002      	b.n	800c10a <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x26>
  while (entry) {
 800c104:	eb14 0383 	adds.w	r3, r4, r3, lsl #2
 800c108:	d00c      	beq.n	800c124 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x40>
    const size_t current_size = entry->offset + requirements->size;
 800c10a:	e9d3 5200 	ldrd	r5, r2, [r3]
 800c10e:	0111      	lsls	r1, r2, #4
    if (entry->next_entry_index == -1) {
 800c110:	689a      	ldr	r2, [r3, #8]
    const size_t current_size = entry->offset + requirements->size;
 800c112:	5871      	ldr	r1, [r6, r1]
 800c114:	4429      	add	r1, r5
 800c116:	4288      	cmp	r0, r1
    entry = &buffers_sorted_by_offset_[entry->next_entry_index];
 800c118:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800c11c:	bf38      	it	cc
 800c11e:	4608      	movcc	r0, r1
    if (entry->next_entry_index == -1) {
 800c120:	3201      	adds	r2, #1
 800c122:	d1ef      	bne.n	800c104 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x20>
}
 800c124:	bd70      	pop	{r4, r5, r6, pc}
    return 0;
 800c126:	4618      	mov	r0, r3
}
 800c128:	bd70      	pop	{r4, r5, r6, pc}
 800c12a:	bf00      	nop

0800c12c <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv>:
void GreedyMemoryPlanner::PrintMemoryPlan() {
 800c12c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c130:	b09d      	sub	sp, #116	; 0x74
  CalculateOffsetsIfNeeded();
 800c132:	f7ff feab 	bl	800be8c <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  for (int i = 0; i < buffer_count_; ++i) {
 800c136:	f8d0 8008 	ldr.w	r8, [r0, #8]
 800c13a:	f1b8 0f00 	cmp.w	r8, #0
void GreedyMemoryPlanner::PrintMemoryPlan() {
 800c13e:	4605      	mov	r5, r0
  for (int i = 0; i < buffer_count_; ++i) {
 800c140:	f340 8125 	ble.w	800c38e <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x262>
    MicroPrintf("%c (id=%d): size=%d, offset=%d, first_used=%d last_used=%d",
 800c144:	4e94      	ldr	r6, [pc, #592]	; (800c398 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x26c>)
  for (int i = 0; i < buffer_count_; ++i) {
 800c146:	2400      	movs	r4, #0
 800c148:	e01c      	b.n	800c184 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x58>
  } else if (i < 36) {
 800c14a:	2c23      	cmp	r4, #35	; 0x23
 800c14c:	dd20      	ble.n	800c190 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x64>
  } else if (i < 62) {
 800c14e:	2c3d      	cmp	r4, #61	; 0x3d
    return 'A' + (i - 36);
 800c150:	f104 011d 	add.w	r1, r4, #29
    MicroPrintf("%c (id=%d): size=%d, offset=%d, first_used=%d last_used=%d",
 800c154:	bfd4      	ite	le
 800c156:	b2c9      	uxtble	r1, r1
 800c158:	212a      	movgt	r1, #42	; 0x2a
                GetOrdinalCharacter(i), i, requirements_[i].size,
 800c15a:	68eb      	ldr	r3, [r5, #12]
 800c15c:	0120      	lsls	r0, r4, #4
 800c15e:	eb03 1204 	add.w	r2, r3, r4, lsl #4
    MicroPrintf("%c (id=%d): size=%d, offset=%d, first_used=%d last_used=%d",
 800c162:	581b      	ldr	r3, [r3, r0]
 800c164:	68d0      	ldr	r0, [r2, #12]
 800c166:	9002      	str	r0, [sp, #8]
 800c168:	6890      	ldr	r0, [r2, #8]
 800c16a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800c16c:	9001      	str	r0, [sp, #4]
 800c16e:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 800c172:	9000      	str	r0, [sp, #0]
 800c174:	4622      	mov	r2, r4
 800c176:	4630      	mov	r0, r6
 800c178:	f7fd fb30 	bl	80097dc <_Z11MicroPrintfPKcz>
  for (int i = 0; i < buffer_count_; ++i) {
 800c17c:	68ab      	ldr	r3, [r5, #8]
 800c17e:	3401      	adds	r4, #1
 800c180:	42a3      	cmp	r3, r4
 800c182:	dd09      	ble.n	800c198 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x6c>
  if (i < 10) {
 800c184:	2c09      	cmp	r4, #9
 800c186:	dce0      	bgt.n	800c14a <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x1e>
    return '0' + i;
 800c188:	f104 0130 	add.w	r1, r4, #48	; 0x30
    MicroPrintf("%c (id=%d): size=%d, offset=%d, first_used=%d last_used=%d",
 800c18c:	b2c9      	uxtb	r1, r1
    return '0' + i;
 800c18e:	e7e4      	b.n	800c15a <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x2e>
    return 'a' + (i - 10);
 800c190:	f104 0157 	add.w	r1, r4, #87	; 0x57
    MicroPrintf("%c (id=%d): size=%d, offset=%d, first_used=%d last_used=%d",
 800c194:	b2c9      	uxtb	r1, r1
    return 'a' + (i - 10);
 800c196:	e7e0      	b.n	800c15a <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x2e>
  for (int i = 0; i < buffer_count_; ++i) {
 800c198:	2b00      	cmp	r3, #0
 800c19a:	4698      	mov	r8, r3
 800c19c:	f340 80f7 	ble.w	800c38e <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x262>
    const int offset = buffer_offsets_[i];
 800c1a0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800c1a2:	68eb      	ldr	r3, [r5, #12]
 800c1a4:	3804      	subs	r0, #4
  int max_time = 0;
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	eb00 0788 	add.w	r7, r0, r8, lsl #2
  int max_size = kLineWidth;
 800c1ac:	2650      	movs	r6, #80	; 0x50
 800c1ae:	4611      	mov	r1, r2
 800c1b0:	46ac      	mov	ip, r5
    const int size = offset + requirements->size;
 800c1b2:	681a      	ldr	r2, [r3, #0]
 800c1b4:	f850 5f04 	ldr.w	r5, [r0, #4]!
 800c1b8:	68dc      	ldr	r4, [r3, #12]
 800c1ba:	442a      	add	r2, r5
 800c1bc:	4296      	cmp	r6, r2
 800c1be:	bfb8      	it	lt
 800c1c0:	4616      	movlt	r6, r2
    if (last_time_used > max_time) {
 800c1c2:	42a1      	cmp	r1, r4
 800c1c4:	bfb8      	it	lt
 800c1c6:	4621      	movlt	r1, r4
  for (int i = 0; i < buffer_count_; ++i) {
 800c1c8:	42b8      	cmp	r0, r7
 800c1ca:	f103 0310 	add.w	r3, r3, #16
 800c1ce:	d1f0      	bne.n	800c1b2 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x86>
 800c1d0:	9105      	str	r1, [sp, #20]
 800c1d2:	4665      	mov	r5, ip
  for (int t = 0; t <= max_time; ++t) {
 800c1d4:	2400      	movs	r4, #0
          line[n] = GetOrdinalCharacter(i);
 800c1d6:	2721      	movs	r7, #33	; 0x21
      line[c] = '.';
 800c1d8:	2250      	movs	r2, #80	; 0x50
 800c1da:	212e      	movs	r1, #46	; 0x2e
 800c1dc:	a807      	add	r0, sp, #28
 800c1de:	f00b fb85 	bl	80178ec <memset>
    for (int i = 0; i < buffer_count_; ++i) {
 800c1e2:	f1b8 0f00 	cmp.w	r8, #0
 800c1e6:	bfd8      	it	le
 800c1e8:	2300      	movle	r3, #0
 800c1ea:	f340 808c 	ble.w	800c306 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x1da>
 800c1ee:	f108 39ff 	add.w	r9, r8, #4294967295
      BufferRequirements* requirements = &requirements_[i];
 800c1f2:	68e8      	ldr	r0, [r5, #12]
    for (int i = 0; i < buffer_count_; ++i) {
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	f1b9 0f09 	cmp.w	r9, #9
 800c1fa:	bfa8      	it	ge
 800c1fc:	f04f 0909 	movge.w	r9, #9
 800c200:	4601      	mov	r1, r0
      BufferRequirements* requirements = &requirements_[i];
 800c202:	f04f 0e30 	mov.w	lr, #48	; 0x30
    int memory_use = 0;
 800c206:	4694      	mov	ip, r2
      if ((t < requirements->first_time_used) ||
 800c208:	688b      	ldr	r3, [r1, #8]
 800c20a:	42a3      	cmp	r3, r4
 800c20c:	dc29      	bgt.n	800c262 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x136>
 800c20e:	68cb      	ldr	r3, [r1, #12]
 800c210:	42a3      	cmp	r3, r4
 800c212:	db26      	blt.n	800c262 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x136>
      const int offset = buffer_offsets_[i];
 800c214:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
      if (offset == -1) {
 800c21a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c21e:	d020      	beq.n	800c262 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x136>
      const int size = requirements->size;
 800c220:	f8d1 a000 	ldr.w	sl, [r1]
      memory_use += size;
 800c224:	44d4      	add	ip, sl
      const int line_end = ((offset + size) * kLineWidth) / max_size;
 800c226:	449a      	add	sl, r3
 800c228:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
      const int line_start = (offset * kLineWidth) / max_size;
 800c22c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800c230:	011b      	lsls	r3, r3, #4
      const int line_end = ((offset + size) * kLineWidth) / max_size;
 800c232:	ea4f 1a0a 	mov.w	sl, sl, lsl #4
      const int line_start = (offset * kLineWidth) / max_size;
 800c236:	fb93 f3f6 	sdiv	r3, r3, r6
      const int line_end = ((offset + size) * kLineWidth) / max_size;
 800c23a:	fb9a faf6 	sdiv	sl, sl, r6
      for (int n = line_start; n < line_end; ++n) {
 800c23e:	4553      	cmp	r3, sl
 800c240:	da0f      	bge.n	800c262 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x136>
 800c242:	f10d 0b1c 	add.w	fp, sp, #28
 800c246:	3b01      	subs	r3, #1
 800c248:	445b      	add	r3, fp
 800c24a:	f10d 0b1b 	add.w	fp, sp, #27
 800c24e:	44da      	add	sl, fp
        if (line[n] == '.') {
 800c250:	f813 bf01 	ldrb.w	fp, [r3, #1]!
 800c254:	f1bb 0f2e 	cmp.w	fp, #46	; 0x2e
 800c258:	f000 8093 	beq.w	800c382 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x256>
      for (int n = line_start; n < line_end; ++n) {
 800c25c:	4553      	cmp	r3, sl
          line[n] = GetOrdinalCharacter(i);
 800c25e:	701f      	strb	r7, [r3, #0]
      for (int n = line_start; n < line_end; ++n) {
 800c260:	d1f6      	bne.n	800c250 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x124>
    for (int i = 0; i < buffer_count_; ++i) {
 800c262:	3201      	adds	r2, #1
 800c264:	f10e 0e01 	add.w	lr, lr, #1
 800c268:	454a      	cmp	r2, r9
 800c26a:	f101 0110 	add.w	r1, r1, #16
 800c26e:	fa5f fe8e 	uxtb.w	lr, lr
 800c272:	ddc9      	ble.n	800c208 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0xdc>
 800c274:	4542      	cmp	r2, r8
 800c276:	da3f      	bge.n	800c2f8 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x1cc>
 800c278:	f102 0157 	add.w	r1, r2, #87	; 0x57
 800c27c:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 800c280:	b2c9      	uxtb	r1, r1
          line[n] = GetOrdinalCharacter(i);
 800c282:	f04f 0e2a 	mov.w	lr, #42	; 0x2a
      if ((t < requirements->first_time_used) ||
 800c286:	6883      	ldr	r3, [r0, #8]
 800c288:	429c      	cmp	r4, r3
 800c28a:	db2e      	blt.n	800c2ea <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x1be>
 800c28c:	68c3      	ldr	r3, [r0, #12]
 800c28e:	429c      	cmp	r4, r3
 800c290:	dc2b      	bgt.n	800c2ea <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x1be>
      const int offset = buffer_offsets_[i];
 800c292:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
      if (offset == -1) {
 800c298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c29c:	d025      	beq.n	800c2ea <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x1be>
      const int size = requirements->size;
 800c29e:	f8d0 9000 	ldr.w	r9, [r0]
      memory_use += size;
 800c2a2:	44cc      	add	ip, r9
      const int line_end = ((offset + size) * kLineWidth) / max_size;
 800c2a4:	4499      	add	r9, r3
 800c2a6:	eb09 0989 	add.w	r9, r9, r9, lsl #2
      const int line_start = (offset * kLineWidth) / max_size;
 800c2aa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800c2ae:	011b      	lsls	r3, r3, #4
      const int line_end = ((offset + size) * kLineWidth) / max_size;
 800c2b0:	ea4f 1909 	mov.w	r9, r9, lsl #4
      const int line_start = (offset * kLineWidth) / max_size;
 800c2b4:	fb93 f3f6 	sdiv	r3, r3, r6
      const int line_end = ((offset + size) * kLineWidth) / max_size;
 800c2b8:	fb99 f9f6 	sdiv	r9, r9, r6
      for (int n = line_start; n < line_end; ++n) {
 800c2bc:	454b      	cmp	r3, r9
 800c2be:	da14      	bge.n	800c2ea <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x1be>
 800c2c0:	f10d 0a1c 	add.w	sl, sp, #28
 800c2c4:	3b01      	subs	r3, #1
 800c2c6:	4453      	add	r3, sl
 800c2c8:	2a3d      	cmp	r2, #61	; 0x3d
 800c2ca:	f10d 0a1b 	add.w	sl, sp, #27
 800c2ce:	44d1      	add	r9, sl
 800c2d0:	dc30      	bgt.n	800c334 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x208>
 800c2d2:	2a23      	cmp	r2, #35	; 0x23
 800c2d4:	dd3a      	ble.n	800c34c <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x220>
    return 'A' + (i - 36);
 800c2d6:	f102 0b1d 	add.w	fp, r2, #29
        if (line[n] == '.') {
 800c2da:	f813 af01 	ldrb.w	sl, [r3, #1]!
 800c2de:	f1ba 0f2e 	cmp.w	sl, #46	; 0x2e
 800c2e2:	d03c      	beq.n	800c35e <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x232>
      for (int n = line_start; n < line_end; ++n) {
 800c2e4:	4599      	cmp	r9, r3
          line[n] = GetOrdinalCharacter(i);
 800c2e6:	701f      	strb	r7, [r3, #0]
      for (int n = line_start; n < line_end; ++n) {
 800c2e8:	d1f7      	bne.n	800c2da <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x1ae>
    for (int i = 0; i < buffer_count_; ++i) {
 800c2ea:	3201      	adds	r2, #1
 800c2ec:	3101      	adds	r1, #1
 800c2ee:	4590      	cmp	r8, r2
 800c2f0:	f100 0010 	add.w	r0, r0, #16
 800c2f4:	b2c9      	uxtb	r1, r1
 800c2f6:	d1c6      	bne.n	800c286 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x15a>
                (memory_use + 1023) / 1024);
 800c2f8:	f20c 33ff 	addw	r3, ip, #1023	; 0x3ff
    MicroPrintf("%s%d: %s (%dk)", t < 10 ? " " : "", t, (const char*)line,
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	bfb8      	it	lt
 800c300:	f20c 73fe 	addwlt	r3, ip, #2046	; 0x7fe
 800c304:	129b      	asrs	r3, r3, #10
    line[kLineWidth] = 0;
 800c306:	2200      	movs	r2, #0
    MicroPrintf("%s%d: %s (%dk)", t < 10 ? " " : "", t, (const char*)line,
 800c308:	2c09      	cmp	r4, #9
    line[kLineWidth] = 0;
 800c30a:	f88d 206c 	strb.w	r2, [sp, #108]	; 0x6c
    MicroPrintf("%s%d: %s (%dk)", t < 10 ? " " : "", t, (const char*)line,
 800c30e:	4622      	mov	r2, r4
 800c310:	dd2a      	ble.n	800c368 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x23c>
 800c312:	9300      	str	r3, [sp, #0]
 800c314:	4921      	ldr	r1, [pc, #132]	; (800c39c <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x270>)
 800c316:	4822      	ldr	r0, [pc, #136]	; (800c3a0 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x274>)
 800c318:	ab07      	add	r3, sp, #28
 800c31a:	f7fd fa5f 	bl	80097dc <_Z11MicroPrintfPKcz>
  for (int t = 0; t <= max_time; ++t) {
 800c31e:	9b05      	ldr	r3, [sp, #20]
 800c320:	3401      	adds	r4, #1
 800c322:	42a3      	cmp	r3, r4
 800c324:	db2a      	blt.n	800c37c <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x250>
    for (int i = 0; i < buffer_count_; ++i) {
 800c326:	f8d5 8008 	ldr.w	r8, [r5, #8]
 800c32a:	e755      	b.n	800c1d8 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0xac>
      for (int n = line_start; n < line_end; ++n) {
 800c32c:	4599      	cmp	r9, r3
          line[n] = GetOrdinalCharacter(i);
 800c32e:	f883 e000 	strb.w	lr, [r3]
      for (int n = line_start; n < line_end; ++n) {
 800c332:	d0da      	beq.n	800c2ea <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x1be>
        if (line[n] == '.') {
 800c334:	f813 af01 	ldrb.w	sl, [r3, #1]!
 800c338:	f1ba 0f2e 	cmp.w	sl, #46	; 0x2e
 800c33c:	d0f6      	beq.n	800c32c <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x200>
      for (int n = line_start; n < line_end; ++n) {
 800c33e:	4599      	cmp	r9, r3
          line[n] = GetOrdinalCharacter(i);
 800c340:	701f      	strb	r7, [r3, #0]
      for (int n = line_start; n < line_end; ++n) {
 800c342:	d1f7      	bne.n	800c334 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x208>
 800c344:	e7d1      	b.n	800c2ea <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x1be>
 800c346:	454b      	cmp	r3, r9
          line[n] = GetOrdinalCharacter(i);
 800c348:	7019      	strb	r1, [r3, #0]
      for (int n = line_start; n < line_end; ++n) {
 800c34a:	d0ce      	beq.n	800c2ea <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x1be>
        if (line[n] == '.') {
 800c34c:	f813 af01 	ldrb.w	sl, [r3, #1]!
 800c350:	f1ba 0f2e 	cmp.w	sl, #46	; 0x2e
 800c354:	d0f7      	beq.n	800c346 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x21a>
      for (int n = line_start; n < line_end; ++n) {
 800c356:	454b      	cmp	r3, r9
          line[n] = GetOrdinalCharacter(i);
 800c358:	701f      	strb	r7, [r3, #0]
      for (int n = line_start; n < line_end; ++n) {
 800c35a:	d1f7      	bne.n	800c34c <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x220>
 800c35c:	e7c5      	b.n	800c2ea <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x1be>
 800c35e:	4599      	cmp	r9, r3
          line[n] = GetOrdinalCharacter(i);
 800c360:	f883 b000 	strb.w	fp, [r3]
      for (int n = line_start; n < line_end; ++n) {
 800c364:	d1b9      	bne.n	800c2da <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x1ae>
 800c366:	e7c0      	b.n	800c2ea <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x1be>
    MicroPrintf("%s%d: %s (%dk)", t < 10 ? " " : "", t, (const char*)line,
 800c368:	9300      	str	r3, [sp, #0]
 800c36a:	490e      	ldr	r1, [pc, #56]	; (800c3a4 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x278>)
 800c36c:	480c      	ldr	r0, [pc, #48]	; (800c3a0 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x274>)
 800c36e:	ab07      	add	r3, sp, #28
 800c370:	f7fd fa34 	bl	80097dc <_Z11MicroPrintfPKcz>
  for (int t = 0; t <= max_time; ++t) {
 800c374:	9b05      	ldr	r3, [sp, #20]
 800c376:	3401      	adds	r4, #1
 800c378:	429c      	cmp	r4, r3
 800c37a:	ddd4      	ble.n	800c326 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x1fa>
}
 800c37c:	b01d      	add	sp, #116	; 0x74
 800c37e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      for (int n = line_start; n < line_end; ++n) {
 800c382:	4553      	cmp	r3, sl
          line[n] = GetOrdinalCharacter(i);
 800c384:	f883 e000 	strb.w	lr, [r3]
      for (int n = line_start; n < line_end; ++n) {
 800c388:	f47f af62 	bne.w	800c250 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x124>
 800c38c:	e769      	b.n	800c262 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x136>
  int max_time = 0;
 800c38e:	2300      	movs	r3, #0
 800c390:	9305      	str	r3, [sp, #20]
  int max_size = kLineWidth;
 800c392:	2650      	movs	r6, #80	; 0x50
 800c394:	e71e      	b.n	800c1d4 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0xa8>
 800c396:	bf00      	nop
 800c398:	0806ceb8 	.word	0x0806ceb8
 800c39c:	08019b84 	.word	0x08019b84
 800c3a0:	0806cef4 	.word	0x0806cef4
 800c3a4:	0806cf04 	.word	0x0806cf04

0800c3a8 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEiPi>:

TfLiteStatus GreedyMemoryPlanner::GetOffsetForBuffer(int buffer_index,
                                                     int* offset) {
 800c3a8:	b570      	push	{r4, r5, r6, lr}
 800c3aa:	460c      	mov	r4, r1
 800c3ac:	4616      	mov	r6, r2
  CalculateOffsetsIfNeeded();
 800c3ae:	f7ff fd6d 	bl	800be8c <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  if ((buffer_index < 0) || (buffer_index >= buffer_count_)) {
 800c3b2:	2c00      	cmp	r4, #0
 800c3b4:	6882      	ldr	r2, [r0, #8]
 800c3b6:	db07      	blt.n	800c3c8 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEiPi+0x20>
 800c3b8:	42a2      	cmp	r2, r4
 800c3ba:	dd05      	ble.n	800c3c8 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEiPi+0x20>
    MicroPrintf("buffer index %d is outside range 0 to %d", buffer_index,
                buffer_count_);
    return kTfLiteError;
  }
  *offset = buffer_offsets_[buffer_index];
 800c3bc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800c3be:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800c3c2:	6033      	str	r3, [r6, #0]
  return kTfLiteOk;
 800c3c4:	2000      	movs	r0, #0
}
 800c3c6:	bd70      	pop	{r4, r5, r6, pc}
    MicroPrintf("buffer index %d is outside range 0 to %d", buffer_index,
 800c3c8:	4802      	ldr	r0, [pc, #8]	; (800c3d4 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEiPi+0x2c>)
 800c3ca:	4621      	mov	r1, r4
 800c3cc:	f7fd fa06 	bl	80097dc <_Z11MicroPrintfPKcz>
 800c3d0:	2001      	movs	r0, #1
}
 800c3d2:	bd70      	pop	{r4, r5, r6, pc}
 800c3d4:	0806cf08 	.word	0x0806cf08

0800c3d8 <_ZN6tflite18MicroMemoryPlanner15PrintMemoryPlanEv>:
  // after invocation, and False if it doesn't.
  virtual bool preserves_all_tensors() const = 0;

  virtual void PrintMemoryPlan() {
    // Default does nothing.
  }
 800c3d8:	4770      	bx	lr
 800c3da:	bf00      	nop

0800c3dc <_ZNK6tflite19LinearMemoryPlanner21preserves_all_tensorsEv>:
  int GetBufferCount() override;
  TfLiteStatus GetOffsetForBuffer(int buffer_index, int* offset) override;

  // Returns True because the LinearMemoryPlanner preserves all tensors after
  // invocation.
  bool preserves_all_tensors() const override { return true; }
 800c3dc:	2001      	movs	r0, #1
 800c3de:	4770      	bx	lr

0800c3e0 <_ZN6tflite19LinearMemoryPlannerD1Ev>:

namespace tflite {

LinearMemoryPlanner::LinearMemoryPlanner()
    : current_buffer_count_(0), next_free_offset_(0) {}
LinearMemoryPlanner::~LinearMemoryPlanner() {}
 800c3e0:	4770      	bx	lr
 800c3e2:	bf00      	nop

0800c3e4 <_ZN6tflite19LinearMemoryPlanner20GetMaximumMemorySizeEv>:
  next_free_offset_ += size;
  ++current_buffer_count_;
  return kTfLiteOk;
}

size_t LinearMemoryPlanner::GetMaximumMemorySize() { return next_free_offset_; }
 800c3e4:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 800c3e8:	6880      	ldr	r0, [r0, #8]
 800c3ea:	4770      	bx	lr

0800c3ec <_ZN6tflite19LinearMemoryPlanner14GetBufferCountEv>:

int LinearMemoryPlanner::GetBufferCount() { return current_buffer_count_; }
 800c3ec:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 800c3f0:	6840      	ldr	r0, [r0, #4]
 800c3f2:	4770      	bx	lr

0800c3f4 <_ZN6tflite19LinearMemoryPlannerD0Ev>:
LinearMemoryPlanner::~LinearMemoryPlanner() {}
 800c3f4:	b510      	push	{r4, lr}
 800c3f6:	f241 010c 	movw	r1, #4108	; 0x100c
 800c3fa:	4604      	mov	r4, r0
 800c3fc:	f00a f9cb 	bl	8016796 <_ZdlPvj>
 800c400:	4620      	mov	r0, r4
 800c402:	bd10      	pop	{r4, pc}

0800c404 <_ZN6tflite19LinearMemoryPlanner9AddBufferEiii>:
  if (current_buffer_count_ >= kMaxBufferCount) {
 800c404:	f500 5280 	add.w	r2, r0, #4096	; 0x1000
                                            int last_time_used) {
 800c408:	b510      	push	{r4, lr}
  if (current_buffer_count_ >= kMaxBufferCount) {
 800c40a:	6853      	ldr	r3, [r2, #4]
 800c40c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c410:	da09      	bge.n	800c426 <_ZN6tflite19LinearMemoryPlanner9AddBufferEiii+0x22>
  buffer_offsets_[current_buffer_count_] = next_free_offset_;
 800c412:	6894      	ldr	r4, [r2, #8]
 800c414:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  next_free_offset_ += size;
 800c418:	4421      	add	r1, r4
  ++current_buffer_count_;
 800c41a:	3301      	adds	r3, #1
  buffer_offsets_[current_buffer_count_] = next_free_offset_;
 800c41c:	6044      	str	r4, [r0, #4]
  ++current_buffer_count_;
 800c41e:	e9c2 3101 	strd	r3, r1, [r2, #4]
  return kTfLiteOk;
 800c422:	2000      	movs	r0, #0
}
 800c424:	bd10      	pop	{r4, pc}
    MicroPrintf("Too many buffers (max is %d)", kMaxBufferCount);
 800c426:	4803      	ldr	r0, [pc, #12]	; (800c434 <_ZN6tflite19LinearMemoryPlanner9AddBufferEiii+0x30>)
 800c428:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c42c:	f7fd f9d6 	bl	80097dc <_Z11MicroPrintfPKcz>
 800c430:	2001      	movs	r0, #1
}
 800c432:	bd10      	pop	{r4, pc}
 800c434:	0806ce98 	.word	0x0806ce98

0800c438 <_ZN6tflite19LinearMemoryPlanner18GetOffsetForBufferEiPi>:

TfLiteStatus LinearMemoryPlanner::GetOffsetForBuffer(int buffer_index,
                                                     int* offset) {
  if ((buffer_index < 0) || (buffer_index >= current_buffer_count_)) {
 800c438:	2900      	cmp	r1, #0
                                                     int* offset) {
 800c43a:	b508      	push	{r3, lr}
  if ((buffer_index < 0) || (buffer_index >= current_buffer_count_)) {
 800c43c:	db0a      	blt.n	800c454 <_ZN6tflite19LinearMemoryPlanner18GetOffsetForBufferEiPi+0x1c>
 800c43e:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 800c442:	685b      	ldr	r3, [r3, #4]
 800c444:	428b      	cmp	r3, r1
 800c446:	dd08      	ble.n	800c45a <_ZN6tflite19LinearMemoryPlanner18GetOffsetForBufferEiPi+0x22>
    MicroPrintf("buffer index %d is outside range 0 to %d", buffer_index,
                current_buffer_count_);
    return kTfLiteError;
  }
  *offset = buffer_offsets_[buffer_index];
 800c448:	eb00 0181 	add.w	r1, r0, r1, lsl #2
  return kTfLiteOk;
 800c44c:	2000      	movs	r0, #0
  *offset = buffer_offsets_[buffer_index];
 800c44e:	684b      	ldr	r3, [r1, #4]
 800c450:	6013      	str	r3, [r2, #0]
}
 800c452:	bd08      	pop	{r3, pc}
  if ((buffer_index < 0) || (buffer_index >= current_buffer_count_)) {
 800c454:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 800c458:	6843      	ldr	r3, [r0, #4]
    MicroPrintf("buffer index %d is outside range 0 to %d", buffer_index,
 800c45a:	4803      	ldr	r0, [pc, #12]	; (800c468 <_ZN6tflite19LinearMemoryPlanner18GetOffsetForBufferEiPi+0x30>)
 800c45c:	461a      	mov	r2, r3
 800c45e:	f7fd f9bd 	bl	80097dc <_Z11MicroPrintfPKcz>
 800c462:	2001      	movs	r0, #1
}
 800c464:	bd08      	pop	{r3, pc}
 800c466:	bf00      	nop
 800c468:	0806cf08 	.word	0x0806cf08

0800c46c <_ZN6tflite19LinearMemoryPlannerC1Ev>:
LinearMemoryPlanner::LinearMemoryPlanner()
 800c46c:	b410      	push	{r4}
    : current_buffer_count_(0), next_free_offset_(0) {}
 800c46e:	4c05      	ldr	r4, [pc, #20]	; (800c484 <_ZN6tflite19LinearMemoryPlannerC1Ev+0x18>)
 800c470:	6004      	str	r4, [r0, #0]
 800c472:	f500 5280 	add.w	r2, r0, #4096	; 0x1000
 800c476:	2100      	movs	r1, #0
 800c478:	e9c2 1101 	strd	r1, r1, [r2, #4]
 800c47c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c480:	4770      	bx	lr
 800c482:	bf00      	nop
 800c484:	0806cf6c 	.word	0x0806cf6c

0800c488 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteType>:
#include "tensorflow/lite/core/api/flatbuffer_conversions.h"
#include "tensorflow/lite/micro/tflite_bridge/micro_error_reporter.h"
#include "tensorflow/lite/schema/schema_generated.h"

namespace tflite {
TfLiteStatus ConvertTensorType(TensorType tensor_type, TfLiteType* type) {
 800c488:	b510      	push	{r4, lr}
 800c48a:	b082      	sub	sp, #8
 800c48c:	4604      	mov	r4, r0
 800c48e:	9101      	str	r1, [sp, #4]
  return ConvertTensorType(tensor_type, type, tflite::GetMicroErrorReporter());
 800c490:	f000 f82c 	bl	800c4ec <_ZN6tflite21GetMicroErrorReporterEv>
 800c494:	9901      	ldr	r1, [sp, #4]
 800c496:	4602      	mov	r2, r0
 800c498:	4620      	mov	r0, r4
}
 800c49a:	b002      	add	sp, #8
 800c49c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return ConvertTensorType(tensor_type, type, tflite::GetMicroErrorReporter());
 800c4a0:	f7f9 bbca 	b.w	8005c38 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>

0800c4a4 <_ZN6tflite24CallBuiltinParseFunctionEPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvES3_S7_S9_>:

TfLiteStatus CallBuiltinParseFunction(TfLiteBridgeBuiltinParseFunction parser,
                                      const Operator* op,
                                      BuiltinDataAllocator* allocator,
                                      void** builtin_data) {
 800c4a4:	b530      	push	{r4, r5, lr}
 800c4a6:	b083      	sub	sp, #12
 800c4a8:	460d      	mov	r5, r1
 800c4aa:	e9cd 3200 	strd	r3, r2, [sp]
 800c4ae:	4604      	mov	r4, r0
  return parser(op, tflite::GetMicroErrorReporter(), allocator, builtin_data);
 800c4b0:	f000 f81c 	bl	800c4ec <_ZN6tflite21GetMicroErrorReporterEv>
 800c4b4:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c4b8:	4601      	mov	r1, r0
 800c4ba:	46a4      	mov	ip, r4
 800c4bc:	4628      	mov	r0, r5
}
 800c4be:	b003      	add	sp, #12
 800c4c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  return parser(op, tflite::GetMicroErrorReporter(), allocator, builtin_data);
 800c4c4:	4760      	bx	ip
 800c4c6:	bf00      	nop

0800c4c8 <_ZN6tflite18MicroErrorReporterD1Ev>:
namespace tflite {
// Get a pointer to a singleton global error reporter.
ErrorReporter* GetMicroErrorReporter();
class MicroErrorReporter : public ErrorReporter {
 public:
  ~MicroErrorReporter() override {}
 800c4c8:	4770      	bx	lr
 800c4ca:	bf00      	nop

0800c4cc <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list>:
    error_reporter_ = new (micro_error_reporter_buffer) MicroErrorReporter();
  }
  return error_reporter_;
}

int MicroErrorReporter::Report(const char* format, va_list args) {
 800c4cc:	b508      	push	{r3, lr}
  VMicroPrintf(format, args);
 800c4ce:	4608      	mov	r0, r1
 800c4d0:	4611      	mov	r1, r2
 800c4d2:	f7fd f979 	bl	80097c8 <_Z12VMicroPrintfPKcSt9__va_list>
  return 0;
}
 800c4d6:	2000      	movs	r0, #0
 800c4d8:	bd08      	pop	{r3, pc}
 800c4da:	bf00      	nop

0800c4dc <_ZN6tflite18MicroErrorReporterD0Ev>:
 800c4dc:	b510      	push	{r4, lr}
 800c4de:	2104      	movs	r1, #4
 800c4e0:	4604      	mov	r4, r0
 800c4e2:	f00a f958 	bl	8016796 <_ZdlPvj>
 800c4e6:	4620      	mov	r0, r4
 800c4e8:	bd10      	pop	{r4, pc}
 800c4ea:	bf00      	nop

0800c4ec <_ZN6tflite21GetMicroErrorReporterEv>:
  if (error_reporter_ == nullptr) {
 800c4ec:	4b04      	ldr	r3, [pc, #16]	; (800c500 <_ZN6tflite21GetMicroErrorReporterEv+0x14>)
 800c4ee:	6818      	ldr	r0, [r3, #0]
 800c4f0:	b100      	cbz	r0, 800c4f4 <_ZN6tflite21GetMicroErrorReporterEv+0x8>
}
 800c4f2:	4770      	bx	lr
class MicroErrorReporter : public ErrorReporter {
 800c4f4:	4803      	ldr	r0, [pc, #12]	; (800c504 <_ZN6tflite21GetMicroErrorReporterEv+0x18>)
 800c4f6:	4a04      	ldr	r2, [pc, #16]	; (800c508 <_ZN6tflite21GetMicroErrorReporterEv+0x1c>)
 800c4f8:	6002      	str	r2, [r0, #0]
    error_reporter_ = new (micro_error_reporter_buffer) MicroErrorReporter();
 800c4fa:	6018      	str	r0, [r3, #0]
}
 800c4fc:	4770      	bx	lr
 800c4fe:	bf00      	nop
 800c500:	20009cbc 	.word	0x20009cbc
 800c504:	20009cc0 	.word	0x20009cc0
 800c508:	0806cf9c 	.word	0x0806cf9c

0800c50c <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>:
// assigned to the `deprecated_builtin_code` field. In such cases, the
// value of the `builtin_code` field should be used for the builtin operator
// code. In the case, the maximum value of the two fields will be the value of
// the `builtin_code` as the right value.

BuiltinOperator GetBuiltinCode(const OperatorCode* op_code) {
 800c50c:	b508      	push	{r3, lr}
  // Caller should guarantee that the given argument value is not a nullptr.
  TFLITE_DCHECK(op_code != nullptr);
 800c50e:	b1b0      	cbz	r0, 800c53e <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x32>
    return data_ - ReadScalar<soffset_t>(data_);
 800c510:	6803      	ldr	r3, [r0, #0]
 800c512:	1ac3      	subs	r3, r0, r3
  return EndianScalar(*reinterpret_cast<const T *>(p));
 800c514:	881a      	ldrh	r2, [r3, #0]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 800c516:	2a0a      	cmp	r2, #10
 800c518:	d909      	bls.n	800c52e <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x22>
 800c51a:	895a      	ldrh	r2, [r3, #10]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 800c51c:	b102      	cbz	r2, 800c520 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x14>
 800c51e:	5882      	ldr	r2, [r0, r2]
 800c520:	889b      	ldrh	r3, [r3, #4]
 800c522:	b943      	cbnz	r3, 800c536 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x2a>
 800c524:	4618      	mov	r0, r3
    max(const _Tp& __a, const _Tp& __b)
 800c526:	4290      	cmp	r0, r2
 800c528:	bfb8      	it	lt
 800c52a:	4610      	movlt	r0, r2

  return std::max(
      op_code->builtin_code(),
      static_cast<BuiltinOperator>(op_code->deprecated_builtin_code()));
}
 800c52c:	bd08      	pop	{r3, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 800c52e:	2a04      	cmp	r2, #4
 800c530:	d803      	bhi.n	800c53a <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x2e>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 800c532:	2000      	movs	r0, #0
 800c534:	bd08      	pop	{r3, pc}
      static_cast<BuiltinOperator>(op_code->deprecated_builtin_code()));
 800c536:	56c0      	ldrsb	r0, [r0, r3]
 800c538:	e7f5      	b.n	800c526 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x1a>
 800c53a:	2200      	movs	r2, #0
 800c53c:	e7f0      	b.n	800c520 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x14>
  TFLITE_DCHECK(op_code != nullptr);
 800c53e:	f00a fb15 	bl	8016b6c <abort>
 800c542:	bf00      	nop

0800c544 <arm_convolve_1_x_n_s8>:
                                          const int8_t *filter_data,
                                          const cmsis_nn_dims *bias_dims,
                                          const int32_t *bias_data,
                                          const cmsis_nn_dims *output_dims,
                                          int8_t *output_data)
{
 800c544:	b580      	push	{r7, lr}
 800c546:	b08e      	sub	sp, #56	; 0x38
 800c548:	af08      	add	r7, sp, #32
 800c54a:	60f8      	str	r0, [r7, #12]
 800c54c:	60b9      	str	r1, [r7, #8]
 800c54e:	607a      	str	r2, [r7, #4]
 800c550:	603b      	str	r3, [r7, #0]
    arm_cmsis_nn_status status = ARM_CMSIS_NN_SUCCESS;
 800c552:	2300      	movs	r3, #0
 800c554:	75fb      	strb	r3, [r7, #23]
    int32_t buffer_size = arm_convolve_1_x_n_s8_get_buffer_size(input_dims, filter_dims);
 800c556:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c558:	6838      	ldr	r0, [r7, #0]
 800c55a:	f000 f9ac 	bl	800c8b6 <arm_convolve_1_x_n_s8_get_buffer_size>
 800c55e:	6138      	str	r0, [r7, #16]
    /* The wrapper API is the ultimate reference for argument check */
    if ((input_dims->h != 1) || conv_params->dilation.w != 1 || (buffer_size != 0 && ctx->buf == NULL) ||
 800c560:	683b      	ldr	r3, [r7, #0]
 800c562:	685b      	ldr	r3, [r3, #4]
 800c564:	2b01      	cmp	r3, #1
 800c566:	d118      	bne.n	800c59a <arm_convolve_1_x_n_s8+0x56>
 800c568:	68bb      	ldr	r3, [r7, #8]
 800c56a:	699b      	ldr	r3, [r3, #24]
 800c56c:	2b01      	cmp	r3, #1
 800c56e:	d114      	bne.n	800c59a <arm_convolve_1_x_n_s8+0x56>
 800c570:	693b      	ldr	r3, [r7, #16]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d003      	beq.n	800c57e <arm_convolve_1_x_n_s8+0x3a>
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d00d      	beq.n	800c59a <arm_convolve_1_x_n_s8+0x56>
        conv_params->stride.w == 0 || (conv_params->stride.w * input_dims->c % 4 != 0))
 800c57e:	68bb      	ldr	r3, [r7, #8]
 800c580:	689b      	ldr	r3, [r3, #8]
    if ((input_dims->h != 1) || conv_params->dilation.w != 1 || (buffer_size != 0 && ctx->buf == NULL) ||
 800c582:	2b00      	cmp	r3, #0
 800c584:	d009      	beq.n	800c59a <arm_convolve_1_x_n_s8+0x56>
        conv_params->stride.w == 0 || (conv_params->stride.w * input_dims->c % 4 != 0))
 800c586:	68bb      	ldr	r3, [r7, #8]
 800c588:	689b      	ldr	r3, [r3, #8]
 800c58a:	683a      	ldr	r2, [r7, #0]
 800c58c:	68d2      	ldr	r2, [r2, #12]
 800c58e:	fb02 f303 	mul.w	r3, r2, r3
 800c592:	f003 0303 	and.w	r3, r3, #3
 800c596:	2b00      	cmp	r3, #0
 800c598:	d002      	beq.n	800c5a0 <arm_convolve_1_x_n_s8+0x5c>
    {
        status = ARM_CMSIS_NN_ARG_ERROR;
 800c59a:	23ff      	movs	r3, #255	; 0xff
 800c59c:	75fb      	strb	r3, [r7, #23]
        goto out;
 800c59e:	e015      	b.n	800c5cc <arm_convolve_1_x_n_s8+0x88>
        }
        /* Advance to the next batch */
        input_data += (input_x * input_ch);
    }
#else
    status = arm_convolve_s8(ctx,
 800c5a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5a2:	9306      	str	r3, [sp, #24]
 800c5a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5a6:	9305      	str	r3, [sp, #20]
 800c5a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5aa:	9304      	str	r3, [sp, #16]
 800c5ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5ae:	9303      	str	r3, [sp, #12]
 800c5b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5b2:	9302      	str	r3, [sp, #8]
 800c5b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5b6:	9301      	str	r3, [sp, #4]
 800c5b8:	6a3b      	ldr	r3, [r7, #32]
 800c5ba:	9300      	str	r3, [sp, #0]
 800c5bc:	683b      	ldr	r3, [r7, #0]
 800c5be:	687a      	ldr	r2, [r7, #4]
 800c5c0:	68b9      	ldr	r1, [r7, #8]
 800c5c2:	68f8      	ldr	r0, [r7, #12]
 800c5c4:	f000 f9e3 	bl	800c98e <arm_convolve_s8>
 800c5c8:	4603      	mov	r3, r0
 800c5ca:	75fb      	strb	r3, [r7, #23]

#endif

out:
    /* Return to application */
    return status;
 800c5cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	3718      	adds	r7, #24
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	bd80      	pop	{r7, pc}

0800c5d8 <arm_convolve_1x1_s8>:
                                        const int8_t *filter_data,
                                        const cmsis_nn_dims *bias_dims,
                                        const int32_t *bias_data,
                                        const cmsis_nn_dims *output_dims,
                                        int8_t *output_data)
{
 800c5d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c5da:	b09d      	sub	sp, #116	; 0x74
 800c5dc:	af0a      	add	r7, sp, #40	; 0x28
 800c5de:	6178      	str	r0, [r7, #20]
 800c5e0:	6139      	str	r1, [r7, #16]
 800c5e2:	60fa      	str	r2, [r7, #12]
 800c5e4:	60bb      	str	r3, [r7, #8]
    (void)ctx;
    (void)filter_dims;
    (void)bias_dims;
    if (conv_params->padding.w != 0 || conv_params->padding.h != 0)
 800c5e6:	693b      	ldr	r3, [r7, #16]
 800c5e8:	691b      	ldr	r3, [r3, #16]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d103      	bne.n	800c5f6 <arm_convolve_1x1_s8+0x1e>
 800c5ee:	693b      	ldr	r3, [r7, #16]
 800c5f0:	695b      	ldr	r3, [r3, #20]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d002      	beq.n	800c5fc <arm_convolve_1x1_s8+0x24>
    {
        return ARM_CMSIS_NN_ARG_ERROR;
 800c5f6:	f04f 33ff 	mov.w	r3, #4294967295
 800c5fa:	e07e      	b.n	800c6fa <arm_convolve_1x1_s8+0x122>
    }

    const int32_t lhs_rows = output_dims->w;
 800c5fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c5fe:	689b      	ldr	r3, [r3, #8]
 800c600:	63fb      	str	r3, [r7, #60]	; 0x3c
    const int32_t rhs_rows = output_dims->c;
 800c602:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c604:	68db      	ldr	r3, [r3, #12]
 800c606:	63bb      	str	r3, [r7, #56]	; 0x38
    const int32_t rhs_cols = input_dims->c;
 800c608:	68bb      	ldr	r3, [r7, #8]
 800c60a:	68db      	ldr	r3, [r3, #12]
 800c60c:	637b      	str	r3, [r7, #52]	; 0x34
    const int32_t stride_w = conv_params->stride.w;
 800c60e:	693b      	ldr	r3, [r7, #16]
 800c610:	689b      	ldr	r3, [r3, #8]
 800c612:	633b      	str	r3, [r7, #48]	; 0x30
    const int32_t input_inc = input_dims->w * conv_params->stride.h * rhs_cols;
 800c614:	68bb      	ldr	r3, [r7, #8]
 800c616:	689b      	ldr	r3, [r3, #8]
 800c618:	693a      	ldr	r2, [r7, #16]
 800c61a:	68d2      	ldr	r2, [r2, #12]
 800c61c:	fb03 f202 	mul.w	r2, r3, r2
 800c620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c622:	fb02 f303 	mul.w	r3, r2, r3
 800c626:	62fb      	str	r3, [r7, #44]	; 0x2c
    const int32_t output_inc = output_dims->w * rhs_rows;
 800c628:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c62a:	689a      	ldr	r2, [r3, #8]
 800c62c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c62e:	fb02 f303 	mul.w	r3, r2, r3
 800c632:	62bb      	str	r3, [r7, #40]	; 0x28
    const int32_t output_h = output_dims->h;
 800c634:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c636:	685b      	ldr	r3, [r3, #4]
 800c638:	627b      	str	r3, [r7, #36]	; 0x24
    const int32_t batch = input_dims->n;
 800c63a:	68bb      	ldr	r3, [r7, #8]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	623b      	str	r3, [r7, #32]
    const int8_t *input_data_ref = input_data;
 800c640:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c642:	61fb      	str	r3, [r7, #28]

    for (int i_batch = 0; i_batch < batch; i_batch++)
 800c644:	2300      	movs	r3, #0
 800c646:	647b      	str	r3, [r7, #68]	; 0x44
 800c648:	e052      	b.n	800c6f0 <arm_convolve_1x1_s8+0x118>
    {
        input_data = input_data_ref + (i_batch * rhs_cols * input_dims->w * input_dims->h);
 800c64a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c64c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c64e:	fb02 f303 	mul.w	r3, r2, r3
 800c652:	68ba      	ldr	r2, [r7, #8]
 800c654:	6892      	ldr	r2, [r2, #8]
 800c656:	fb02 f303 	mul.w	r3, r2, r3
 800c65a:	68ba      	ldr	r2, [r7, #8]
 800c65c:	6852      	ldr	r2, [r2, #4]
 800c65e:	fb02 f303 	mul.w	r3, r2, r3
 800c662:	461a      	mov	r2, r3
 800c664:	69fb      	ldr	r3, [r7, #28]
 800c666:	4413      	add	r3, r2
 800c668:	663b      	str	r3, [r7, #96]	; 0x60
        for (int i_output_h = 0; i_output_h < output_h; i_output_h++)
 800c66a:	2300      	movs	r3, #0
 800c66c:	643b      	str	r3, [r7, #64]	; 0x40
 800c66e:	e038      	b.n	800c6e2 <arm_convolve_1x1_s8+0x10a>
            // Process one input row
            arm_cmsis_nn_status result = arm_nn_mat_mult_nt_t_s8(input_data,
                                                                 filter_data,
                                                                 bias_data,
                                                                 output_data,
                                                                 quant_params->multiplier,
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	607b      	str	r3, [r7, #4]
                                                                 quant_params->shift,
 800c676:	68fa      	ldr	r2, [r7, #12]
 800c678:	6852      	ldr	r2, [r2, #4]
                                                                 lhs_rows,
                                                                 rhs_rows,
                                                                 rhs_cols,
                                                                 conv_params->input_offset,
 800c67a:	6939      	ldr	r1, [r7, #16]
 800c67c:	6809      	ldr	r1, [r1, #0]
                                                                 conv_params->output_offset,
 800c67e:	6938      	ldr	r0, [r7, #16]
 800c680:	6840      	ldr	r0, [r0, #4]
                                                                 conv_params->activation.min,
 800c682:	693c      	ldr	r4, [r7, #16]
 800c684:	6a24      	ldr	r4, [r4, #32]
                                                                 conv_params->activation.max,
 800c686:	693d      	ldr	r5, [r7, #16]
 800c688:	6a6d      	ldr	r5, [r5, #36]	; 0x24
            arm_cmsis_nn_status result = arm_nn_mat_mult_nt_t_s8(input_data,
 800c68a:	6b7e      	ldr	r6, [r7, #52]	; 0x34
 800c68c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c68e:	fb03 f606 	mul.w	r6, r3, r6
 800c692:	9609      	str	r6, [sp, #36]	; 0x24
 800c694:	9508      	str	r5, [sp, #32]
 800c696:	9407      	str	r4, [sp, #28]
 800c698:	9006      	str	r0, [sp, #24]
 800c69a:	9105      	str	r1, [sp, #20]
 800c69c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c69e:	9104      	str	r1, [sp, #16]
 800c6a0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c6a2:	9103      	str	r1, [sp, #12]
 800c6a4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c6a6:	9102      	str	r1, [sp, #8]
 800c6a8:	9201      	str	r2, [sp, #4]
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	9300      	str	r3, [sp, #0]
 800c6ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c6b0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800c6b2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c6b4:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800c6b6:	f002 fd93 	bl	800f1e0 <arm_nn_mat_mult_nt_t_s8>
 800c6ba:	4603      	mov	r3, r0
 800c6bc:	76fb      	strb	r3, [r7, #27]
                                                                 rhs_cols * stride_w);
            if (result != ARM_CMSIS_NN_SUCCESS)
 800c6be:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d002      	beq.n	800c6cc <arm_convolve_1x1_s8+0xf4>
            {
                return result;
 800c6c6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c6ca:	e016      	b.n	800c6fa <arm_convolve_1x1_s8+0x122>
            }
            input_data += input_inc;
 800c6cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6ce:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c6d0:	4413      	add	r3, r2
 800c6d2:	663b      	str	r3, [r7, #96]	; 0x60
            output_data += output_inc;
 800c6d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6d6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c6d8:	4413      	add	r3, r2
 800c6da:	67bb      	str	r3, [r7, #120]	; 0x78
        for (int i_output_h = 0; i_output_h < output_h; i_output_h++)
 800c6dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c6de:	3301      	adds	r3, #1
 800c6e0:	643b      	str	r3, [r7, #64]	; 0x40
 800c6e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c6e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6e6:	429a      	cmp	r2, r3
 800c6e8:	dbc2      	blt.n	800c670 <arm_convolve_1x1_s8+0x98>
    for (int i_batch = 0; i_batch < batch; i_batch++)
 800c6ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c6ec:	3301      	adds	r3, #1
 800c6ee:	647b      	str	r3, [r7, #68]	; 0x44
 800c6f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c6f2:	6a3b      	ldr	r3, [r7, #32]
 800c6f4:	429a      	cmp	r2, r3
 800c6f6:	dba8      	blt.n	800c64a <arm_convolve_1x1_s8+0x72>
        }
    }

    /* Return to application */
    return ARM_CMSIS_NN_SUCCESS;
 800c6f8:	2300      	movs	r3, #0
}
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	374c      	adds	r7, #76	; 0x4c
 800c6fe:	46bd      	mov	sp, r7
 800c700:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c702 <arm_convolve_1x1_s8_fast>:
                                             const int8_t *filter_data,
                                             const cmsis_nn_dims *bias_dims,
                                             const int32_t *bias_data,
                                             const cmsis_nn_dims *output_dims,
                                             int8_t *output_data)
{
 800c702:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c704:	b093      	sub	sp, #76	; 0x4c
 800c706:	af0a      	add	r7, sp, #40	; 0x28
 800c708:	60f8      	str	r0, [r7, #12]
 800c70a:	60b9      	str	r1, [r7, #8]
 800c70c:	607a      	str	r2, [r7, #4]
 800c70e:	603b      	str	r3, [r7, #0]
    if (conv_params->padding.w != 0 || conv_params->padding.h != 0 || conv_params->stride.w != 1 ||
 800c710:	68bb      	ldr	r3, [r7, #8]
 800c712:	691b      	ldr	r3, [r3, #16]
 800c714:	2b00      	cmp	r3, #0
 800c716:	d10b      	bne.n	800c730 <arm_convolve_1x1_s8_fast+0x2e>
 800c718:	68bb      	ldr	r3, [r7, #8]
 800c71a:	695b      	ldr	r3, [r3, #20]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d107      	bne.n	800c730 <arm_convolve_1x1_s8_fast+0x2e>
 800c720:	68bb      	ldr	r3, [r7, #8]
 800c722:	689b      	ldr	r3, [r3, #8]
 800c724:	2b01      	cmp	r3, #1
 800c726:	d103      	bne.n	800c730 <arm_convolve_1x1_s8_fast+0x2e>
        conv_params->stride.h != 1)
 800c728:	68bb      	ldr	r3, [r7, #8]
 800c72a:	68db      	ldr	r3, [r3, #12]
    if (conv_params->padding.w != 0 || conv_params->padding.h != 0 || conv_params->stride.w != 1 ||
 800c72c:	2b01      	cmp	r3, #1
 800c72e:	d002      	beq.n	800c736 <arm_convolve_1x1_s8_fast+0x34>
    {
        return ARM_CMSIS_NN_ARG_ERROR;
 800c730:	f04f 33ff 	mov.w	r3, #4294967295
 800c734:	e031      	b.n	800c79a <arm_convolve_1x1_s8_fast+0x98>

    (void)ctx;
    (void)filter_dims;
    (void)bias_dims;

    const int32_t lhs_rows = input_dims->w * input_dims->h * input_dims->n;
 800c736:	683b      	ldr	r3, [r7, #0]
 800c738:	689b      	ldr	r3, [r3, #8]
 800c73a:	683a      	ldr	r2, [r7, #0]
 800c73c:	6852      	ldr	r2, [r2, #4]
 800c73e:	fb02 f303 	mul.w	r3, r2, r3
 800c742:	683a      	ldr	r2, [r7, #0]
 800c744:	6812      	ldr	r2, [r2, #0]
 800c746:	fb02 f303 	mul.w	r3, r2, r3
 800c74a:	61fb      	str	r3, [r7, #28]
    const int32_t rhs_rows = output_dims->c;
 800c74c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c74e:	68db      	ldr	r3, [r3, #12]
 800c750:	61bb      	str	r3, [r7, #24]
    const int32_t rhs_cols = input_dims->c;
 800c752:	683b      	ldr	r3, [r7, #0]
 800c754:	68db      	ldr	r3, [r3, #12]
 800c756:	617b      	str	r3, [r7, #20]

    arm_nn_mat_mult_nt_t_s8(input_data,
                            filter_data,
                            bias_data,
                            output_data,
                            quant_params->multiplier,
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	681b      	ldr	r3, [r3, #0]
                            quant_params->shift,
 800c75c:	687a      	ldr	r2, [r7, #4]
 800c75e:	6852      	ldr	r2, [r2, #4]
                            lhs_rows,
                            rhs_rows,
                            rhs_cols,
                            conv_params->input_offset,
 800c760:	68b9      	ldr	r1, [r7, #8]
 800c762:	6809      	ldr	r1, [r1, #0]
                            conv_params->output_offset,
 800c764:	68b8      	ldr	r0, [r7, #8]
 800c766:	6840      	ldr	r0, [r0, #4]
                            conv_params->activation.min,
 800c768:	68bc      	ldr	r4, [r7, #8]
 800c76a:	6a24      	ldr	r4, [r4, #32]
                            conv_params->activation.max,
 800c76c:	68bd      	ldr	r5, [r7, #8]
 800c76e:	6a6d      	ldr	r5, [r5, #36]	; 0x24
    arm_nn_mat_mult_nt_t_s8(input_data,
 800c770:	697e      	ldr	r6, [r7, #20]
 800c772:	9609      	str	r6, [sp, #36]	; 0x24
 800c774:	9508      	str	r5, [sp, #32]
 800c776:	9407      	str	r4, [sp, #28]
 800c778:	9006      	str	r0, [sp, #24]
 800c77a:	9105      	str	r1, [sp, #20]
 800c77c:	6979      	ldr	r1, [r7, #20]
 800c77e:	9104      	str	r1, [sp, #16]
 800c780:	69b9      	ldr	r1, [r7, #24]
 800c782:	9103      	str	r1, [sp, #12]
 800c784:	69f9      	ldr	r1, [r7, #28]
 800c786:	9102      	str	r1, [sp, #8]
 800c788:	9201      	str	r2, [sp, #4]
 800c78a:	9300      	str	r3, [sp, #0]
 800c78c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c78e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c790:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c792:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c794:	f002 fd24 	bl	800f1e0 <arm_nn_mat_mult_nt_t_s8>
                            rhs_cols);

    /* Return to application */
    return ARM_CMSIS_NN_SUCCESS;
 800c798:	2300      	movs	r3, #0
}
 800c79a:	4618      	mov	r0, r3
 800c79c:	3724      	adds	r7, #36	; 0x24
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c7a2 <arm_convolve_fast_s16_get_buffer_size_dsp>:
 * @{
 */

__STATIC_INLINE int32_t arm_convolve_fast_s16_get_buffer_size_dsp(const cmsis_nn_dims *input_dims,
                                                                  const cmsis_nn_dims *filter_dims)
{
 800c7a2:	b480      	push	{r7}
 800c7a4:	b083      	sub	sp, #12
 800c7a6:	af00      	add	r7, sp, #0
 800c7a8:	6078      	str	r0, [r7, #4]
 800c7aa:	6039      	str	r1, [r7, #0]
    return (2 * input_dims->c * filter_dims->w * filter_dims->h) * (int32_t)sizeof(int16_t);
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	68db      	ldr	r3, [r3, #12]
 800c7b0:	683a      	ldr	r2, [r7, #0]
 800c7b2:	6892      	ldr	r2, [r2, #8]
 800c7b4:	fb02 f303 	mul.w	r3, r2, r3
 800c7b8:	683a      	ldr	r2, [r7, #0]
 800c7ba:	6852      	ldr	r2, [r2, #4]
 800c7bc:	fb02 f303 	mul.w	r3, r2, r3
 800c7c0:	009b      	lsls	r3, r3, #2
}
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	370c      	adds	r7, #12
 800c7c6:	46bd      	mov	sp, r7
 800c7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7cc:	4770      	bx	lr

0800c7ce <arm_convolve_s16_get_buffer_size>:
    return 0;
#endif
}

int32_t arm_convolve_s16_get_buffer_size(const cmsis_nn_dims *input_dims, const cmsis_nn_dims *filter_dims)
{
 800c7ce:	b480      	push	{r7}
 800c7d0:	b083      	sub	sp, #12
 800c7d2:	af00      	add	r7, sp, #0
 800c7d4:	6078      	str	r0, [r7, #4]
 800c7d6:	6039      	str	r1, [r7, #0]
    (void)input_dims;
    (void)filter_dims;
    return 0;
 800c7d8:	2300      	movs	r3, #0
}
 800c7da:	4618      	mov	r0, r3
 800c7dc:	370c      	adds	r7, #12
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e4:	4770      	bx	lr

0800c7e6 <arm_convolve_wrapper_s16_get_buffer_size>:
 */
int32_t arm_convolve_wrapper_s16_get_buffer_size(const cmsis_nn_conv_params *conv_params,
                                                 const cmsis_nn_dims *input_dims,
                                                 const cmsis_nn_dims *filter_dims,
                                                 const cmsis_nn_dims *output_dims)
{
 800c7e6:	b580      	push	{r7, lr}
 800c7e8:	b084      	sub	sp, #16
 800c7ea:	af00      	add	r7, sp, #0
 800c7ec:	60f8      	str	r0, [r7, #12]
 800c7ee:	60b9      	str	r1, [r7, #8]
 800c7f0:	607a      	str	r2, [r7, #4]
 800c7f2:	603b      	str	r3, [r7, #0]

#if defined(ARM_MATH_DSP) && !defined(ARM_MATH_MVEI)
    return arm_convolve_wrapper_s16_get_buffer_size_dsp(conv_params, input_dims, filter_dims, output_dims);
 800c7f4:	683b      	ldr	r3, [r7, #0]
 800c7f6:	687a      	ldr	r2, [r7, #4]
 800c7f8:	68b9      	ldr	r1, [r7, #8]
 800c7fa:	68f8      	ldr	r0, [r7, #12]
 800c7fc:	f000 f805 	bl	800c80a <arm_convolve_wrapper_s16_get_buffer_size_dsp>
 800c800:	4603      	mov	r3, r0
    (void)output_dims;

    // MVE and scalar implementation have same buffer requirements
    return arm_convolve_s16_get_buffer_size(input_dims, filter_dims);
#endif
}
 800c802:	4618      	mov	r0, r3
 800c804:	3710      	adds	r7, #16
 800c806:	46bd      	mov	sp, r7
 800c808:	bd80      	pop	{r7, pc}

0800c80a <arm_convolve_wrapper_s16_get_buffer_size_dsp>:

int32_t arm_convolve_wrapper_s16_get_buffer_size_dsp(const cmsis_nn_conv_params *conv_params,
                                                     const cmsis_nn_dims *input_dims,
                                                     const cmsis_nn_dims *filter_dims,
                                                     const cmsis_nn_dims *output_dims)
{
 800c80a:	b580      	push	{r7, lr}
 800c80c:	b084      	sub	sp, #16
 800c80e:	af00      	add	r7, sp, #0
 800c810:	60f8      	str	r0, [r7, #12]
 800c812:	60b9      	str	r1, [r7, #8]
 800c814:	607a      	str	r2, [r7, #4]
 800c816:	603b      	str	r3, [r7, #0]
    (void)output_dims;

    if (filter_dims->w * filter_dims->h * input_dims->c < 512 &&
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	689b      	ldr	r3, [r3, #8]
 800c81c:	687a      	ldr	r2, [r7, #4]
 800c81e:	6852      	ldr	r2, [r2, #4]
 800c820:	fb02 f303 	mul.w	r3, r2, r3
 800c824:	68ba      	ldr	r2, [r7, #8]
 800c826:	68d2      	ldr	r2, [r2, #12]
 800c828:	fb02 f303 	mul.w	r3, r2, r3
 800c82c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c830:	da0d      	bge.n	800c84e <arm_convolve_wrapper_s16_get_buffer_size_dsp+0x44>
        (conv_params->dilation.w == 1 && conv_params->dilation.h == 1))
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	699b      	ldr	r3, [r3, #24]
    if (filter_dims->w * filter_dims->h * input_dims->c < 512 &&
 800c836:	2b01      	cmp	r3, #1
 800c838:	d109      	bne.n	800c84e <arm_convolve_wrapper_s16_get_buffer_size_dsp+0x44>
        (conv_params->dilation.w == 1 && conv_params->dilation.h == 1))
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	69db      	ldr	r3, [r3, #28]
 800c83e:	2b01      	cmp	r3, #1
 800c840:	d105      	bne.n	800c84e <arm_convolve_wrapper_s16_get_buffer_size_dsp+0x44>
    {
        return arm_convolve_fast_s16_get_buffer_size_dsp(input_dims, filter_dims);
 800c842:	6879      	ldr	r1, [r7, #4]
 800c844:	68b8      	ldr	r0, [r7, #8]
 800c846:	f7ff ffac 	bl	800c7a2 <arm_convolve_fast_s16_get_buffer_size_dsp>
 800c84a:	4603      	mov	r3, r0
 800c84c:	e004      	b.n	800c858 <arm_convolve_wrapper_s16_get_buffer_size_dsp+0x4e>
    }
    else
    {

        return arm_convolve_s16_get_buffer_size(input_dims, filter_dims);
 800c84e:	6879      	ldr	r1, [r7, #4]
 800c850:	68b8      	ldr	r0, [r7, #8]
 800c852:	f7ff ffbc 	bl	800c7ce <arm_convolve_s16_get_buffer_size>
 800c856:	4603      	mov	r3, r0
    }
}
 800c858:	4618      	mov	r0, r3
 800c85a:	3710      	adds	r7, #16
 800c85c:	46bd      	mov	sp, r7
 800c85e:	bd80      	pop	{r7, pc}

0800c860 <arm_convolve_s8_get_buffer_size>:
    (void)filter_dims;
    return 0;
}

int32_t arm_convolve_s8_get_buffer_size(const cmsis_nn_dims *input_dims, const cmsis_nn_dims *filter_dims)
{
 800c860:	b480      	push	{r7}
 800c862:	b087      	sub	sp, #28
 800c864:	af00      	add	r7, sp, #0
 800c866:	6078      	str	r0, [r7, #4]
 800c868:	6039      	str	r1, [r7, #0]
#if defined(ARM_MATH_MVEI)
    return arm_convolve_s8_get_buffer_size_mve(input_dims, filter_dims);
#else
    const int32_t rhs_cols = filter_dims->w * filter_dims->h * input_dims->c;
 800c86a:	683b      	ldr	r3, [r7, #0]
 800c86c:	689b      	ldr	r3, [r3, #8]
 800c86e:	683a      	ldr	r2, [r7, #0]
 800c870:	6852      	ldr	r2, [r2, #4]
 800c872:	fb02 f303 	mul.w	r3, r2, r3
 800c876:	687a      	ldr	r2, [r7, #4]
 800c878:	68d2      	ldr	r2, [r2, #12]
 800c87a:	fb02 f303 	mul.w	r3, r2, r3
 800c87e:	617b      	str	r3, [r7, #20]
    const int32_t remainder = rhs_cols % 4;
 800c880:	697b      	ldr	r3, [r7, #20]
 800c882:	425a      	negs	r2, r3
 800c884:	f003 0303 	and.w	r3, r3, #3
 800c888:	f002 0203 	and.w	r2, r2, #3
 800c88c:	bf58      	it	pl
 800c88e:	4253      	negpl	r3, r2
 800c890:	613b      	str	r3, [r7, #16]
    const int32_t aligned_rhs_cols = remainder != 0 ? rhs_cols + 4 - remainder : rhs_cols;
 800c892:	693b      	ldr	r3, [r7, #16]
 800c894:	2b00      	cmp	r3, #0
 800c896:	d004      	beq.n	800c8a2 <arm_convolve_s8_get_buffer_size+0x42>
 800c898:	697b      	ldr	r3, [r7, #20]
 800c89a:	1d1a      	adds	r2, r3, #4
 800c89c:	693b      	ldr	r3, [r7, #16]
 800c89e:	1ad3      	subs	r3, r2, r3
 800c8a0:	e000      	b.n	800c8a4 <arm_convolve_s8_get_buffer_size+0x44>
 800c8a2:	697b      	ldr	r3, [r7, #20]
 800c8a4:	60fb      	str	r3, [r7, #12]
    return (2 * aligned_rhs_cols) * (int32_t)sizeof(int16_t);
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	009b      	lsls	r3, r3, #2
#endif
}
 800c8aa:	4618      	mov	r0, r3
 800c8ac:	371c      	adds	r7, #28
 800c8ae:	46bd      	mov	sp, r7
 800c8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b4:	4770      	bx	lr

0800c8b6 <arm_convolve_1_x_n_s8_get_buffer_size>:

int32_t arm_convolve_1_x_n_s8_get_buffer_size(const cmsis_nn_dims *input_dims, const cmsis_nn_dims *filter_dims)
{
 800c8b6:	b580      	push	{r7, lr}
 800c8b8:	b082      	sub	sp, #8
 800c8ba:	af00      	add	r7, sp, #0
 800c8bc:	6078      	str	r0, [r7, #4]
 800c8be:	6039      	str	r1, [r7, #0]
#if !defined(ARM_MATH_MVEI)
    return arm_convolve_s8_get_buffer_size(input_dims, filter_dims);
 800c8c0:	6839      	ldr	r1, [r7, #0]
 800c8c2:	6878      	ldr	r0, [r7, #4]
 800c8c4:	f7ff ffcc 	bl	800c860 <arm_convolve_s8_get_buffer_size>
 800c8c8:	4603      	mov	r3, r0
#else
    return arm_convolve_1_x_n_s8_get_buffer_size_mve(input_dims, filter_dims);
#endif
}
 800c8ca:	4618      	mov	r0, r3
 800c8cc:	3708      	adds	r7, #8
 800c8ce:	46bd      	mov	sp, r7
 800c8d0:	bd80      	pop	{r7, pc}

0800c8d2 <arm_convolve_1x1_s8_fast_get_buffer_size>:

int32_t arm_convolve_1x1_s8_fast_get_buffer_size(const cmsis_nn_dims *input_dims)
{
 800c8d2:	b480      	push	{r7}
 800c8d4:	b083      	sub	sp, #12
 800c8d6:	af00      	add	r7, sp, #0
 800c8d8:	6078      	str	r0, [r7, #4]
    (void)input_dims;
    return 0;
 800c8da:	2300      	movs	r3, #0
}
 800c8dc:	4618      	mov	r0, r3
 800c8de:	370c      	adds	r7, #12
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e6:	4770      	bx	lr

0800c8e8 <arm_convolve_wrapper_s8_get_buffer_size>:
 */
int32_t arm_convolve_wrapper_s8_get_buffer_size(const cmsis_nn_conv_params *conv_params,
                                                const cmsis_nn_dims *input_dims,
                                                const cmsis_nn_dims *filter_dims,
                                                const cmsis_nn_dims *output_dims)
{
 800c8e8:	b580      	push	{r7, lr}
 800c8ea:	b084      	sub	sp, #16
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	60f8      	str	r0, [r7, #12]
 800c8f0:	60b9      	str	r1, [r7, #8]
 800c8f2:	607a      	str	r2, [r7, #4]
 800c8f4:	603b      	str	r3, [r7, #0]
#if defined(ARM_MATH_MVEI)
    return arm_convolve_wrapper_s8_get_buffer_size_mve(conv_params, input_dims, filter_dims, output_dims);
#else
    (void)output_dims;
    if ((conv_params->padding.w == 0) && (conv_params->padding.h == 0) && (filter_dims->w == 1) &&
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	691b      	ldr	r3, [r3, #16]
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d122      	bne.n	800c944 <arm_convolve_wrapper_s8_get_buffer_size+0x5c>
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	695b      	ldr	r3, [r3, #20]
 800c902:	2b00      	cmp	r3, #0
 800c904:	d11e      	bne.n	800c944 <arm_convolve_wrapper_s8_get_buffer_size+0x5c>
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	689b      	ldr	r3, [r3, #8]
 800c90a:	2b01      	cmp	r3, #1
 800c90c:	d11a      	bne.n	800c944 <arm_convolve_wrapper_s8_get_buffer_size+0x5c>
        (filter_dims->h == 1) && (conv_params->dilation.w == 1 && conv_params->dilation.h == 1))
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	685b      	ldr	r3, [r3, #4]
    if ((conv_params->padding.w == 0) && (conv_params->padding.h == 0) && (filter_dims->w == 1) &&
 800c912:	2b01      	cmp	r3, #1
 800c914:	d116      	bne.n	800c944 <arm_convolve_wrapper_s8_get_buffer_size+0x5c>
        (filter_dims->h == 1) && (conv_params->dilation.w == 1 && conv_params->dilation.h == 1))
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	699b      	ldr	r3, [r3, #24]
 800c91a:	2b01      	cmp	r3, #1
 800c91c:	d112      	bne.n	800c944 <arm_convolve_wrapper_s8_get_buffer_size+0x5c>
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	69db      	ldr	r3, [r3, #28]
 800c922:	2b01      	cmp	r3, #1
 800c924:	d10e      	bne.n	800c944 <arm_convolve_wrapper_s8_get_buffer_size+0x5c>
    {
        if ((conv_params->stride.w == 1) && (conv_params->stride.h == 1))
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	689b      	ldr	r3, [r3, #8]
 800c92a:	2b01      	cmp	r3, #1
 800c92c:	d108      	bne.n	800c940 <arm_convolve_wrapper_s8_get_buffer_size+0x58>
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	68db      	ldr	r3, [r3, #12]
 800c932:	2b01      	cmp	r3, #1
 800c934:	d104      	bne.n	800c940 <arm_convolve_wrapper_s8_get_buffer_size+0x58>
        {
            return arm_convolve_1x1_s8_fast_get_buffer_size(input_dims);
 800c936:	68b8      	ldr	r0, [r7, #8]
 800c938:	f7ff ffcb 	bl	800c8d2 <arm_convolve_1x1_s8_fast_get_buffer_size>
 800c93c:	4603      	mov	r3, r0
 800c93e:	e022      	b.n	800c986 <arm_convolve_wrapper_s8_get_buffer_size+0x9e>
        }
        else
        {
            return 0;
 800c940:	2300      	movs	r3, #0
 800c942:	e020      	b.n	800c986 <arm_convolve_wrapper_s8_get_buffer_size+0x9e>
        }
    }
    else if ((input_dims->h == 1) && (conv_params->dilation.w == 1) && (filter_dims->h == 1) &&
 800c944:	68bb      	ldr	r3, [r7, #8]
 800c946:	685b      	ldr	r3, [r3, #4]
 800c948:	2b01      	cmp	r3, #1
 800c94a:	d117      	bne.n	800c97c <arm_convolve_wrapper_s8_get_buffer_size+0x94>
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	699b      	ldr	r3, [r3, #24]
 800c950:	2b01      	cmp	r3, #1
 800c952:	d113      	bne.n	800c97c <arm_convolve_wrapper_s8_get_buffer_size+0x94>
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	685b      	ldr	r3, [r3, #4]
 800c958:	2b01      	cmp	r3, #1
 800c95a:	d10f      	bne.n	800c97c <arm_convolve_wrapper_s8_get_buffer_size+0x94>
             (conv_params->stride.w * input_dims->c % 4 == 0))
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	689b      	ldr	r3, [r3, #8]
 800c960:	68ba      	ldr	r2, [r7, #8]
 800c962:	68d2      	ldr	r2, [r2, #12]
 800c964:	fb02 f303 	mul.w	r3, r2, r3
 800c968:	f003 0303 	and.w	r3, r3, #3
    else if ((input_dims->h == 1) && (conv_params->dilation.w == 1) && (filter_dims->h == 1) &&
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d105      	bne.n	800c97c <arm_convolve_wrapper_s8_get_buffer_size+0x94>
    {
        return arm_convolve_1_x_n_s8_get_buffer_size(input_dims, filter_dims);
 800c970:	6879      	ldr	r1, [r7, #4]
 800c972:	68b8      	ldr	r0, [r7, #8]
 800c974:	f7ff ff9f 	bl	800c8b6 <arm_convolve_1_x_n_s8_get_buffer_size>
 800c978:	4603      	mov	r3, r0
 800c97a:	e004      	b.n	800c986 <arm_convolve_wrapper_s8_get_buffer_size+0x9e>
    }
    else
    {
        return arm_convolve_s8_get_buffer_size(input_dims, filter_dims);
 800c97c:	6879      	ldr	r1, [r7, #4]
 800c97e:	68b8      	ldr	r0, [r7, #8]
 800c980:	f7ff ff6e 	bl	800c860 <arm_convolve_s8_get_buffer_size>
 800c984:	4603      	mov	r3, r0
    }
#endif
}
 800c986:	4618      	mov	r0, r3
 800c988:	3710      	adds	r7, #16
 800c98a:	46bd      	mov	sp, r7
 800c98c:	bd80      	pop	{r7, pc}

0800c98e <arm_convolve_s8>:
                                    const int8_t *filter_data,
                                    const cmsis_nn_dims *bias_dims,
                                    const int32_t *bias_data,
                                    const cmsis_nn_dims *output_dims,
                                    int8_t *output_data)
{
 800c98e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c992:	b0e5      	sub	sp, #404	; 0x194
 800c994:	af08      	add	r7, sp, #32
 800c996:	f507 76b8 	add.w	r6, r7, #368	; 0x170
 800c99a:	f5a6 76ae 	sub.w	r6, r6, #348	; 0x15c
 800c99e:	6030      	str	r0, [r6, #0]
 800c9a0:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 800c9a4:	f5a0 70b0 	sub.w	r0, r0, #352	; 0x160
 800c9a8:	6001      	str	r1, [r0, #0]
 800c9aa:	f507 71b8 	add.w	r1, r7, #368	; 0x170
 800c9ae:	f5a1 71b2 	sub.w	r1, r1, #356	; 0x164
 800c9b2:	600a      	str	r2, [r1, #0]
 800c9b4:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 800c9b8:	f5a2 72b4 	sub.w	r2, r2, #360	; 0x168
 800c9bc:	6013      	str	r3, [r2, #0]
    (void)bias_dims;

    if (ctx->buf == NULL)
 800c9be:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800c9c2:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d103      	bne.n	800c9d6 <arm_convolve_s8+0x48>
    {
        return ARM_CMSIS_NN_ARG_ERROR;
 800c9ce:	f04f 33ff 	mov.w	r3, #4294967295
 800c9d2:	f000 bcb7 	b.w	800d344 <arm_convolve_s8+0x9b6>
    }
    int16_t *buffer_a = (int16_t *)ctx->buf;
 800c9d6:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800c9da:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138

    const int32_t input_batches = input_dims->n;
 800c9e6:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800c9ea:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    const uint16_t input_x = input_dims->w;
 800c9f6:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800c9fa:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	689b      	ldr	r3, [r3, #8]
 800ca02:	f8a7 3132 	strh.w	r3, [r7, #306]	; 0x132
    const uint16_t input_y = input_dims->h;
 800ca06:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800ca0a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	685b      	ldr	r3, [r3, #4]
 800ca12:	f8a7 3130 	strh.w	r3, [r7, #304]	; 0x130
    const uint16_t input_ch = input_dims->c;
 800ca16:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800ca1a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	68db      	ldr	r3, [r3, #12]
 800ca22:	f8a7 312e 	strh.w	r3, [r7, #302]	; 0x12e
    const uint16_t kernel_x = filter_dims->w;
 800ca26:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800ca2a:	689b      	ldr	r3, [r3, #8]
 800ca2c:	f8a7 312c 	strh.w	r3, [r7, #300]	; 0x12c
    const uint16_t kernel_y = filter_dims->h;
 800ca30:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800ca34:	685b      	ldr	r3, [r3, #4]
 800ca36:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
    const uint16_t output_x = output_dims->w;
 800ca3a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800ca3e:	689b      	ldr	r3, [r3, #8]
 800ca40:	f8a7 3128 	strh.w	r3, [r7, #296]	; 0x128
    const uint16_t output_y = output_dims->h;
 800ca44:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800ca48:	685b      	ldr	r3, [r3, #4]
 800ca4a:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
    const uint16_t output_ch = output_dims->c;
 800ca4e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800ca52:	68db      	ldr	r3, [r3, #12]
 800ca54:	f8a7 3124 	strh.w	r3, [r7, #292]	; 0x124

    const uint16_t pad_x = conv_params->padding.w;
 800ca58:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800ca5c:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	691b      	ldr	r3, [r3, #16]
 800ca64:	f8a7 3122 	strh.w	r3, [r7, #290]	; 0x122
    const uint16_t pad_y = conv_params->padding.h;
 800ca68:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800ca6c:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	695b      	ldr	r3, [r3, #20]
 800ca74:	f8a7 3120 	strh.w	r3, [r7, #288]	; 0x120
    const uint16_t stride_x = conv_params->stride.w;
 800ca78:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800ca7c:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	689b      	ldr	r3, [r3, #8]
 800ca84:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e
    const uint16_t stride_y = conv_params->stride.h;
 800ca88:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800ca8c:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	68db      	ldr	r3, [r3, #12]
 800ca94:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
    const int32_t dilation_x = conv_params->dilation.w;
 800ca98:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800ca9c:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	699b      	ldr	r3, [r3, #24]
 800caa4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    const int32_t dilation_y = conv_params->dilation.h;
 800caa8:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800caac:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	69db      	ldr	r3, [r3, #28]
 800cab4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    const int32_t out_offset = conv_params->output_offset;
 800cab8:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800cabc:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	685b      	ldr	r3, [r3, #4]
 800cac4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    const int32_t out_activation_min = conv_params->activation.min;
 800cac8:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800cacc:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	6a1b      	ldr	r3, [r3, #32]
 800cad4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    const int32_t out_activation_max = conv_params->activation.max;
 800cad8:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800cadc:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cae4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    const int32_t rhs_cols = kernel_x * kernel_y * input_ch;
 800cae8:	f8b7 312c 	ldrh.w	r3, [r7, #300]	; 0x12c
 800caec:	f8b7 212a 	ldrh.w	r2, [r7, #298]	; 0x12a
 800caf0:	fb02 f303 	mul.w	r3, r2, r3
 800caf4:	f8b7 212e 	ldrh.w	r2, [r7, #302]	; 0x12e
 800caf8:	fb02 f303 	mul.w	r3, r2, r3
 800cafc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    const int32_t input_offset = conv_params->input_offset;
 800cb00:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800cb04:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

    int32_t *output_mult = quant_params->multiplier;
 800cb10:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800cb14:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    int32_t *output_shift = quant_params->shift;
 800cb20:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800cb24:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	685b      	ldr	r3, [r3, #4]
 800cb2c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

    int i_batch;
    for (i_batch = 0; i_batch < input_batches; i_batch++)
 800cb30:	2300      	movs	r3, #0
 800cb32:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 800cb36:	e3fd      	b.n	800d334 <arm_convolve_s8+0x9a6>
#if defined(ARM_MATH_MVEI)
        /* Generate up to four columns from the input tensor a GEMM computation */
        int8_t *im2col_buf = (int8_t *)buffer_a;
        const int32_t rhs_rows = output_dims->c;
#else
        const int32_t remainder = rhs_cols % 4;
 800cb38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cb3c:	425a      	negs	r2, r3
 800cb3e:	f003 0303 	and.w	r3, r3, #3
 800cb42:	f002 0203 	and.w	r2, r2, #3
 800cb46:	bf58      	it	pl
 800cb48:	4253      	negpl	r3, r2
 800cb4a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
        const int32_t aligned_rhs_cols = remainder != 0 ? rhs_cols + 4 - remainder : rhs_cols;
 800cb4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d006      	beq.n	800cb64 <arm_convolve_s8+0x1d6>
 800cb56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cb5a:	1d1a      	adds	r2, r3, #4
 800cb5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cb60:	1ad3      	subs	r3, r2, r3
 800cb62:	e001      	b.n	800cb68 <arm_convolve_s8+0x1da>
 800cb64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cb68:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

        /* Use as a ping-pong buffer for unordered elements */
        int8_t *im2col_buf = (int8_t *)buffer_a + aligned_rhs_cols * 2;
 800cb6c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800cb70:	005b      	lsls	r3, r3, #1
 800cb72:	461a      	mov	r2, r3
 800cb74:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800cb78:	4413      	add	r3, r2
 800cb7a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
        int16_t *im2col_buf_start_s16 = buffer_a;
 800cb7e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800cb82:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
#endif
        int8_t *out = output_data;
 800cb86:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800cb8a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
        int32_t lhs_rows = 0;
 800cb8e:	2300      	movs	r3, #0
 800cb90:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

        /* This part implements the im2col function */
        for (int i_out_y = 0; i_out_y < output_y; i_out_y++)
 800cb94:	2300      	movs	r3, #0
 800cb96:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800cb9a:	e118      	b.n	800cdce <arm_convolve_s8+0x440>
        {
            for (int i_out_x = 0; i_out_x < output_x; i_out_x++)
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800cba2:	e101      	b.n	800cda8 <arm_convolve_s8+0x41a>
            {
                const int32_t base_idx_x = stride_x * i_out_x - pad_x;
 800cba4:	f8b7 311e 	ldrh.w	r3, [r7, #286]	; 0x11e
 800cba8:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 800cbac:	fb03 f202 	mul.w	r2, r3, r2
 800cbb0:	f8b7 3122 	ldrh.w	r3, [r7, #290]	; 0x122
 800cbb4:	1ad3      	subs	r3, r2, r3
 800cbb6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
                const int32_t base_idx_y = stride_y * i_out_y - pad_y;
 800cbba:	f8b7 311c 	ldrh.w	r3, [r7, #284]	; 0x11c
 800cbbe:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 800cbc2:	fb03 f202 	mul.w	r2, r3, r2
 800cbc6:	f8b7 3120 	ldrh.w	r3, [r7, #288]	; 0x120
 800cbca:	1ad3      	subs	r3, r2, r3
 800cbcc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

                for (int32_t i_ker_y = 0; i_ker_y < kernel_y; i_ker_y++)
 800cbd0:	2300      	movs	r3, #0
 800cbd2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800cbd6:	e084      	b.n	800cce2 <arm_convolve_s8+0x354>
                {
                    for (int32_t i_ker_x = 0; i_ker_x < kernel_x; i_ker_x++)
 800cbd8:	2300      	movs	r3, #0
 800cbda:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800cbde:	e075      	b.n	800cccc <arm_convolve_s8+0x33e>
                    {
                        const int32_t k_y = base_idx_y + dilation_y * i_ker_y;
 800cbe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cbe4:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 800cbe8:	fb02 f303 	mul.w	r3, r2, r3
 800cbec:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800cbf0:	4413      	add	r3, r2
 800cbf2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
                        const int32_t k_x = base_idx_x + dilation_x * i_ker_x;
 800cbf6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800cbfa:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800cbfe:	fb02 f303 	mul.w	r3, r2, r3
 800cc02:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800cc06:	4413      	add	r3, r2
 800cc08:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

                        if (k_y < 0 || k_y >= input_y || k_x < 0 || k_x >= input_x)
 800cc0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	db0f      	blt.n	800cc34 <arm_convolve_s8+0x2a6>
 800cc14:	f8b7 3130 	ldrh.w	r3, [r7, #304]	; 0x130
 800cc18:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800cc1c:	429a      	cmp	r2, r3
 800cc1e:	da09      	bge.n	800cc34 <arm_convolve_s8+0x2a6>
 800cc20:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	db05      	blt.n	800cc34 <arm_convolve_s8+0x2a6>
 800cc28:	f8b7 3132 	ldrh.w	r3, [r7, #306]	; 0x132
 800cc2c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800cc30:	429a      	cmp	r2, r3
 800cc32:	db1b      	blt.n	800cc6c <arm_convolve_s8+0x2de>
                        {
                            arm_memset_s8(im2col_buf, (int8_t)-input_offset, sizeof(int8_t) * input_ch);
 800cc34:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800cc38:	b2db      	uxtb	r3, r3
 800cc3a:	425b      	negs	r3, r3
 800cc3c:	b2db      	uxtb	r3, r3
 800cc3e:	b259      	sxtb	r1, r3
 800cc40:	f8b7 312e 	ldrh.w	r3, [r7, #302]	; 0x12e
 800cc44:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 800cc48:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 800cc4c:	460a      	mov	r2, r1
 800cc4e:	f887 20cf 	strb.w	r2, [r7, #207]	; 0xcf
 800cc52:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
                   "1:                                                    \n"
                   : [in] "+r"(dst)
                   : [cnt] "r"(block_size), [set_val] "r"(val)
                   : "q0", "memory", "r14");
#else
    memset(dst, val, block_size);
 800cc56:	f997 30cf 	ldrsb.w	r3, [r7, #207]	; 0xcf
 800cc5a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800cc5e:	4619      	mov	r1, r3
 800cc60:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 800cc64:	f00a fe42 	bl	80178ec <memset>
#endif
}
 800cc68:	bf00      	nop
 800cc6a:	e023      	b.n	800ccb4 <arm_convolve_s8+0x326>
                        }
                        else
                        {
                            arm_memcpy_s8(im2col_buf, input_data + (k_y * input_x + k_x) * input_ch, input_ch);
 800cc6c:	f8b7 3132 	ldrh.w	r3, [r7, #306]	; 0x132
 800cc70:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800cc74:	fb03 f202 	mul.w	r2, r3, r2
 800cc78:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cc7c:	4413      	add	r3, r2
 800cc7e:	f8b7 212e 	ldrh.w	r2, [r7, #302]	; 0x12e
 800cc82:	fb02 f303 	mul.w	r3, r2, r3
 800cc86:	461a      	mov	r2, r3
 800cc88:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800cc8c:	441a      	add	r2, r3
 800cc8e:	f8b7 312e 	ldrh.w	r3, [r7, #302]	; 0x12e
 800cc92:	f8d7 1168 	ldr.w	r1, [r7, #360]	; 0x168
 800cc96:	f8c7 10c4 	str.w	r1, [r7, #196]	; 0xc4
 800cc9a:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 800cc9e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                   "1:                                                    \n"
                   : [in] "+r"(src), [out] "+r"(dst)
                   : [cnt] "r"(block_size)
                   : "q0", "memory", "r14");
#else
    memcpy(dst, src, block_size);
 800cca2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800cca6:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 800ccaa:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 800ccae:	f00a ff02 	bl	8017ab6 <memcpy>
#endif
}
 800ccb2:	bf00      	nop
                        }
                        im2col_buf += input_ch;
 800ccb4:	f8b7 312e 	ldrh.w	r3, [r7, #302]	; 0x12e
 800ccb8:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 800ccbc:	4413      	add	r3, r2
 800ccbe:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
                    for (int32_t i_ker_x = 0; i_ker_x < kernel_x; i_ker_x++)
 800ccc2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800ccc6:	3301      	adds	r3, #1
 800ccc8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800cccc:	f8b7 312c 	ldrh.w	r3, [r7, #300]	; 0x12c
 800ccd0:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800ccd4:	429a      	cmp	r2, r3
 800ccd6:	db83      	blt.n	800cbe0 <arm_convolve_s8+0x252>
                for (int32_t i_ker_y = 0; i_ker_y < kernel_y; i_ker_y++)
 800ccd8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800ccdc:	3301      	adds	r3, #1
 800ccde:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800cce2:	f8b7 312a 	ldrh.w	r3, [r7, #298]	; 0x12a
 800cce6:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 800ccea:	429a      	cmp	r2, r3
 800ccec:	f6ff af74 	blt.w	800cbd8 <arm_convolve_s8+0x24a>
                    }
                }
                lhs_rows++;
 800ccf0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800ccf4:	3301      	adds	r3, #1
 800ccf6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
                }
#else
    #if defined(ARM_MATH_DSP)
                /* Copy one column with input offset and no ordering */
                arm_s8_to_s16_unordered_with_offset(
                    im2col_buf - rhs_cols, im2col_buf_start_s16, rhs_cols, (int16_t)input_offset);
 800ccfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ccfe:	425b      	negs	r3, r3
 800cd00:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 800cd04:	18d0      	adds	r0, r2, r3
                arm_s8_to_s16_unordered_with_offset(
 800cd06:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800cd0a:	b21b      	sxth	r3, r3
 800cd0c:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800cd10:	f8d7 1164 	ldr.w	r1, [r7, #356]	; 0x164
 800cd14:	f009 f90c 	bl	8015f30 <arm_s8_to_s16_unordered_with_offset>
    #else
                arm_q7_to_q15_with_offset(im2col_buf - rhs_cols, im2col_buf_start_s16, rhs_cols, (int16_t)input_offset);
    #endif
                im2col_buf_start_s16 += aligned_rhs_cols;
 800cd18:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800cd1c:	005b      	lsls	r3, r3, #1
 800cd1e:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 800cd22:	4413      	add	r3, r2
 800cd24:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164

                if (lhs_rows == 2)
 800cd28:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800cd2c:	2b02      	cmp	r3, #2
 800cd2e:	d136      	bne.n	800cd9e <arm_convolve_s8+0x410>
                {
                    out = arm_nn_mat_mult_kernel_s8_s16(filter_data,
 800cd30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cd34:	b21b      	sxth	r3, r3
 800cd36:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800cd3a:	b212      	sxth	r2, r2
 800cd3c:	f8b7 0124 	ldrh.w	r0, [r7, #292]	; 0x124
 800cd40:	f8d7 1160 	ldr.w	r1, [r7, #352]	; 0x160
 800cd44:	9107      	str	r1, [sp, #28]
 800cd46:	f8d7 11a8 	ldr.w	r1, [r7, #424]	; 0x1a8
 800cd4a:	9106      	str	r1, [sp, #24]
 800cd4c:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 800cd50:	9105      	str	r1, [sp, #20]
 800cd52:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 800cd56:	9104      	str	r1, [sp, #16]
 800cd58:	9203      	str	r2, [sp, #12]
 800cd5a:	9302      	str	r3, [sp, #8]
 800cd5c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800cd60:	9301      	str	r3, [sp, #4]
 800cd62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cd66:	9300      	str	r3, [sp, #0]
 800cd68:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800cd6c:	4602      	mov	r2, r0
 800cd6e:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 800cd72:	f8d7 01a0 	ldr.w	r0, [r7, #416]	; 0x1a0
 800cd76:	f000 fb83 	bl	800d480 <arm_nn_mat_mult_kernel_s8_s16>
 800cd7a:	f8c7 0160 	str.w	r0, [r7, #352]	; 0x160
                                                        aligned_rhs_cols,
                                                        bias_data,
                                                        out);

                    /* counter reset */
                    im2col_buf_start_s16 = buffer_a;
 800cd7e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800cd82:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
                    im2col_buf = (int8_t *)buffer_a + aligned_rhs_cols * 2;
 800cd86:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800cd8a:	005b      	lsls	r3, r3, #1
 800cd8c:	461a      	mov	r2, r3
 800cd8e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800cd92:	4413      	add	r3, r2
 800cd94:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
                    lhs_rows = 0;
 800cd98:	2300      	movs	r3, #0
 800cd9a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
            for (int i_out_x = 0; i_out_x < output_x; i_out_x++)
 800cd9e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800cda2:	3301      	adds	r3, #1
 800cda4:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800cda8:	f8b7 3128 	ldrh.w	r3, [r7, #296]	; 0x128
 800cdac:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 800cdb0:	429a      	cmp	r2, r3
 800cdb2:	f6ff aef7 	blt.w	800cba4 <arm_convolve_s8+0x216>
                }
#endif
            }

            if (out == NULL)
 800cdb6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d102      	bne.n	800cdc4 <arm_convolve_s8+0x436>
            {
                return ARM_CMSIS_NN_NO_IMPL_ERROR;
 800cdbe:	f06f 0301 	mvn.w	r3, #1
 800cdc2:	e2bf      	b.n	800d344 <arm_convolve_s8+0x9b6>
        for (int i_out_y = 0; i_out_y < output_y; i_out_y++)
 800cdc4:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800cdc8:	3301      	adds	r3, #1
 800cdca:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800cdce:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 800cdd2:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 800cdd6:	429a      	cmp	r2, r3
 800cdd8:	f6ff aee0 	blt.w	800cb9c <arm_convolve_s8+0x20e>
            }
        }

        /* Handle left over columns */
        if (lhs_rows != 0)
 800cddc:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	f000 8282 	beq.w	800d2ea <arm_convolve_s8+0x95c>
            out += lhs_rows * rhs_rows;
            lhs_rows = 0;
            im2col_buf = (int8_t *)buffer_a;
#else // #if defined(ARM_MATH_MVEI)

            const int8_t *ker_a = filter_data;
 800cde6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800cdea:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
            int i;

            for (i = 0; i < output_ch; i++)
 800cdee:	2300      	movs	r3, #0
 800cdf0:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 800cdf4:	e272      	b.n	800d2dc <arm_convolve_s8+0x94e>
            {
                /* Load the accumulator with bias first */
                int32_t sum = 0;
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
                if (bias_data)
 800cdfc:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d008      	beq.n	800ce16 <arm_convolve_s8+0x488>
                {
                    sum = bias_data[i];
 800ce04:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800ce08:	009b      	lsls	r3, r3, #2
 800ce0a:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 800ce0e:	4413      	add	r3, r2
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
                }

                const int16_t *ip_as_col = buffer_a;
 800ce16:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800ce1a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800ce1e:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800ce22:	601a      	str	r2, [r3, #0]

    #if defined(ARM_MATH_DSP)
                /* 4 multiply and accumulates are done in one loop. */
                uint16_t col_count = rhs_cols / 4;
 800ce24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	da00      	bge.n	800ce2e <arm_convolve_s8+0x4a0>
 800ce2c:	3303      	adds	r3, #3
 800ce2e:	109b      	asrs	r3, r3, #2
 800ce30:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
                while (col_count)
 800ce34:	e0e5      	b.n	800d002 <arm_convolve_s8+0x674>
 800ce36:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800ce3a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800ce3e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800ce42:	601a      	str	r2, [r3, #0]
 800ce44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ce48:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ce4c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ce50:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800ce54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ce58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    memcpy(&val, *in_s8, 4);
 800ce5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	461a      	mov	r2, r3
 800ce66:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800ce6a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800ce6e:	601a      	str	r2, [r3, #0]
    *in_s8 += 4;
 800ce70:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	1d1a      	adds	r2, r3, #4
 800ce78:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ce7c:	601a      	str	r2, [r3, #0]
    return (val);
 800ce7e:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800ce82:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800ce86:	681b      	ldr	r3, [r3, #0]
    int32_t inA = arm_nn_read_s8x4_ia(&source);
 800ce88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    *out2 = SXTB16(ROR((uint32_t)inA, 8));
 800ce8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ce90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ce94:	2308      	movs	r3, #8
 800ce96:	67fb      	str	r3, [r7, #124]	; 0x7c
    return (result);
}

__STATIC_FORCEINLINE uint32_t ROR(uint32_t op1, uint32_t op2)
{
    op2 %= 32U;
 800ce98:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ce9a:	f003 031f 	and.w	r3, r3, #31
 800ce9e:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (op2 == 0U)
 800cea0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d102      	bne.n	800ceac <arm_convolve_s8+0x51e>
    {
        return op1;
 800cea6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ceaa:	e004      	b.n	800ceb6 <arm_convolve_s8+0x528>
    }
    return (op1 >> op2) | (op1 << (32U - op2));
 800ceac:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ceb0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ceb2:	fa62 f303 	ror.w	r3, r2, r3
 800ceb6:	67bb      	str	r3, [r7, #120]	; 0x78
    __ASM("sxtb16 %0, %1" : "=r"(result) : "r"(op1));
 800ceb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ceba:	fa2f f383 	sxtb16	r3, r3
 800cebe:	677b      	str	r3, [r7, #116]	; 0x74
    return (result);
 800cec0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cec2:	461a      	mov	r2, r3
 800cec4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cec8:	601a      	str	r2, [r3, #0]
    *out1 = SXTB16(inA);
 800ceca:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800cece:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800ced2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800ced6:	601a      	str	r2, [r3, #0]
    __ASM("sxtb16 %0, %1" : "=r"(result) : "r"(op1));
 800ced8:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800cedc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	fa2f f283 	sxtb16	r2, r3
 800cee6:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800ceea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ceee:	601a      	str	r2, [r3, #0]
    return (result);
 800cef0:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800cef4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	461a      	mov	r2, r3
 800cefc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cf00:	601a      	str	r2, [r3, #0]
    return source;
 800cf02:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800cf06:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800cf0a:	681b      	ldr	r3, [r3, #0]
                {
                    int32_t ker_a1, ker_a2;
                    int32_t ip_b1, ip_b2;

                    ker_a = read_and_pad_reordered(ker_a, &ker_a1, &ker_a2);
 800cf0c:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800cf10:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800cf14:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    memcpy(&val, *in_q15, 4);
 800cf18:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	461a      	mov	r2, r3
 800cf22:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800cf26:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800cf2a:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 800cf2c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	1d1a      	adds	r2, r3, #4
 800cf34:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cf38:	601a      	str	r2, [r3, #0]
    return (val);
 800cf3a:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800cf3e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800cf42:	681b      	ldr	r3, [r3, #0]

                    ip_b1 = arm_nn_read_q15x2_ia(&ip_as_col);
 800cf44:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
                    sum = SMLAD(ker_a1, ip_b1, sum);
 800cf48:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800cf4c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	4619      	mov	r1, r3
 800cf54:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800cf58:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800cf5c:	f8c7 10a4 	str.w	r1, [r7, #164]	; 0xa4
 800cf60:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 800cf64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    __ASM volatile("smlad %0, %1, %2, %3" : "=r"(result) : "r"(op1), "r"(op2), "r"(op3));
 800cf68:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800cf6c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800cf70:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800cf74:	fb23 1302 	smlad	r3, r3, r2, r1
 800cf78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    return (result);
 800cf7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cf80:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 800cf84:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800cf88:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    memcpy(&val, *in_q15, 4);
 800cf8c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	461a      	mov	r2, r3
 800cf96:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800cf9a:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800cf9e:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 800cfa0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	1d1a      	adds	r2, r3, #4
 800cfa8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800cfac:	601a      	str	r2, [r3, #0]
    return (val);
 800cfae:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800cfb2:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800cfb6:	681b      	ldr	r3, [r3, #0]
                    ip_b2 = arm_nn_read_q15x2_ia(&ip_as_col);
 800cfb8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                    sum = SMLAD(ker_a2, ip_b2, sum);
 800cfbc:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800cfc0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	4619      	mov	r1, r3
 800cfc8:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800cfcc:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800cfd0:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 800cfd4:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800cfd8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    __ASM volatile("smlad %0, %1, %2, %3" : "=r"(result) : "r"(op1), "r"(op2), "r"(op3));
 800cfdc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800cfe0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800cfe4:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 800cfe8:	fb23 1302 	smlad	r3, r3, r2, r1
 800cfec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    return (result);
 800cff0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800cff4:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140

                    col_count--;
 800cff8:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 800cffc:	3b01      	subs	r3, #1
 800cffe:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
                while (col_count)
 800d002:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 800d006:	2b00      	cmp	r3, #0
 800d008:	f47f af15 	bne.w	800ce36 <arm_convolve_s8+0x4a8>
                }
                /* Handle left over mac */
                col_count = rhs_cols & 0x3;
 800d00c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d010:	b29b      	uxth	r3, r3
 800d012:	f003 0303 	and.w	r3, r3, #3
 800d016:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
    #else
                uint16_t col_count = rhs_cols;
    #endif
                while (col_count)
 800d01a:	e025      	b.n	800d068 <arm_convolve_s8+0x6da>
                {
                    int8_t ker_a1 = *ker_a++;
 800d01c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d020:	1c5a      	adds	r2, r3, #1
 800d022:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800d026:	781b      	ldrb	r3, [r3, #0]
 800d028:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
                    int16_t ip_b1 = *ip_as_col++;
 800d02c:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800d030:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	1c99      	adds	r1, r3, #2
 800d038:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 800d03c:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 800d040:	6011      	str	r1, [r2, #0]
 800d042:	881b      	ldrh	r3, [r3, #0]
 800d044:	f8a7 30ec 	strh.w	r3, [r7, #236]	; 0xec
                    sum += ker_a1 * ip_b1;
 800d048:	f997 30ef 	ldrsb.w	r3, [r7, #239]	; 0xef
 800d04c:	f9b7 20ec 	ldrsh.w	r2, [r7, #236]	; 0xec
 800d050:	fb02 f303 	mul.w	r3, r2, r3
 800d054:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 800d058:	4413      	add	r3, r2
 800d05a:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
                    col_count--;
 800d05e:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 800d062:	3b01      	subs	r3, #1
 800d064:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
                while (col_count)
 800d068:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d1d5      	bne.n	800d01c <arm_convolve_s8+0x68e>
                }

                sum = arm_nn_requantize(sum, output_mult[i], output_shift[i]);
 800d070:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800d074:	009b      	lsls	r3, r3, #2
 800d076:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 800d07a:	4413      	add	r3, r2
 800d07c:	6819      	ldr	r1, [r3, #0]
 800d07e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800d082:	009b      	lsls	r3, r3, #2
 800d084:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 800d088:	4413      	add	r3, r2
 800d08a:	681a      	ldr	r2, [r3, #0]
 800d08c:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800d090:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d094:	f8d7 0140 	ldr.w	r0, [r7, #320]	; 0x140
 800d098:	6018      	str	r0, [r3, #0]
 800d09a:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800d09e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800d0a2:	6019      	str	r1, [r3, #0]
 800d0a4:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800d0a8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800d0ac:	601a      	str	r2, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800d0ae:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800d0b2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d0bc:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 800d0c0:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800d0c4:	6812      	ldr	r2, [r2, #0]
 800d0c6:	409a      	lsls	r2, r3
 800d0c8:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800d0cc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800d0d0:	601a      	str	r2, [r3, #0]
 800d0d2:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800d0d6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800d0da:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 800d0de:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800d0e2:	6812      	ldr	r2, [r2, #0]
 800d0e4:	601a      	str	r2, [r3, #0]
    int32_t result = 0;
 800d0e6:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800d0ea:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800d0ee:	2200      	movs	r2, #0
 800d0f0:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 800d0f2:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800d0f6:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800d0fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800d0fe:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 800d100:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800d104:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800d108:	2200      	movs	r2, #0
 800d10a:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (int64_t)m1 * m2;
 800d10c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800d110:	f507 71b8 	add.w	r1, r7, #368	; 0x170
 800d114:	f5a1 718a 	sub.w	r1, r1, #276	; 0x114
 800d118:	6809      	ldr	r1, [r1, #0]
 800d11a:	17c8      	asrs	r0, r1, #31
 800d11c:	4688      	mov	r8, r1
 800d11e:	4681      	mov	r9, r0
 800d120:	f507 71b8 	add.w	r1, r7, #368	; 0x170
 800d124:	f5a1 718c 	sub.w	r1, r1, #280	; 0x118
 800d128:	6809      	ldr	r1, [r1, #0]
 800d12a:	17c8      	asrs	r0, r1, #31
 800d12c:	468a      	mov	sl, r1
 800d12e:	4683      	mov	fp, r0
 800d130:	fb0a f009 	mul.w	r0, sl, r9
 800d134:	fb08 f10b 	mul.w	r1, r8, fp
 800d138:	4401      	add	r1, r0
 800d13a:	fba8 450a 	umull	r4, r5, r8, sl
 800d13e:	4429      	add	r1, r5
 800d140:	460d      	mov	r5, r1
 800d142:	1911      	adds	r1, r2, r4
 800d144:	6039      	str	r1, [r7, #0]
 800d146:	416b      	adcs	r3, r5
 800d148:	607b      	str	r3, [r7, #4]
 800d14a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d14e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    result = (int32_t)(mult.long_long >> 31);
 800d152:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800d156:	f04f 0200 	mov.w	r2, #0
 800d15a:	f04f 0300 	mov.w	r3, #0
 800d15e:	0fc2      	lsrs	r2, r0, #31
 800d160:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800d164:	17cb      	asrs	r3, r1, #31
 800d166:	f507 71b8 	add.w	r1, r7, #368	; 0x170
 800d16a:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 800d16e:	4613      	mov	r3, r2
 800d170:	600b      	str	r3, [r1, #0]
    return result;
 800d172:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800d176:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800d17a:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800d17c:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800d180:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	2b00      	cmp	r3, #0
 800d188:	dc06      	bgt.n	800d198 <arm_convolve_s8+0x80a>
 800d18a:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800d18e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	425b      	negs	r3, r3
 800d196:	e000      	b.n	800d19a <arm_convolve_s8+0x80c>
 800d198:	2300      	movs	r3, #0
 800d19a:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 800d19e:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 800d1a2:	6011      	str	r1, [r2, #0]
 800d1a4:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 800d1a8:	f5a2 7292 	sub.w	r2, r2, #292	; 0x124
 800d1ac:	6013      	str	r3, [r2, #0]
    int32_t result = 0;
 800d1ae:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800d1b2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800d1b6:	2200      	movs	r2, #0
 800d1b8:	601a      	str	r2, [r3, #0]
    const int32_t remainder_mask = (1 << exponent) - 1;
 800d1ba:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800d1be:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800d1c2:	2201      	movs	r2, #1
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	409a      	lsls	r2, r3
 800d1c8:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800d1cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800d1d0:	3a01      	subs	r2, #1
 800d1d2:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 800d1d4:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800d1d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800d1dc:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 800d1e0:	f5a2 7190 	sub.w	r1, r2, #288	; 0x120
 800d1e4:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 800d1e8:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800d1ec:	6809      	ldr	r1, [r1, #0]
 800d1ee:	6812      	ldr	r2, [r2, #0]
 800d1f0:	400a      	ands	r2, r1
 800d1f2:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 800d1f4:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800d1f8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800d1fc:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 800d200:	f5a2 7190 	sub.w	r1, r2, #288	; 0x120
 800d204:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 800d208:	f5a2 7292 	sub.w	r2, r2, #292	; 0x124
 800d20c:	6809      	ldr	r1, [r1, #0]
 800d20e:	6812      	ldr	r2, [r2, #0]
 800d210:	fa41 f202 	asr.w	r2, r1, r2
 800d214:	601a      	str	r2, [r3, #0]
    int32_t threshold = remainder_mask >> 1;
 800d216:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800d21a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800d21e:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 800d222:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800d226:	6812      	ldr	r2, [r2, #0]
 800d228:	1052      	asrs	r2, r2, #1
 800d22a:	601a      	str	r2, [r3, #0]
    if (result < 0)
 800d22c:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800d230:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	2b00      	cmp	r3, #0
 800d238:	da0a      	bge.n	800d250 <arm_convolve_s8+0x8c2>
        threshold++;
 800d23a:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800d23e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800d242:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 800d246:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800d24a:	6812      	ldr	r2, [r2, #0]
 800d24c:	3201      	adds	r2, #1
 800d24e:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 800d250:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800d254:	f5a3 7298 	sub.w	r2, r3, #304	; 0x130
 800d258:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800d25c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800d260:	6812      	ldr	r2, [r2, #0]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	429a      	cmp	r2, r3
 800d266:	dd0a      	ble.n	800d27e <arm_convolve_s8+0x8f0>
        result++;
 800d268:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800d26c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800d270:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 800d274:	f5a2 7294 	sub.w	r2, r2, #296	; 0x128
 800d278:	6812      	ldr	r2, [r2, #0]
 800d27a:	3201      	adds	r2, #1
 800d27c:	601a      	str	r2, [r3, #0]
    return result;
 800d27e:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800d282:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800d286:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800d288:	bf00      	nop
 800d28a:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
                sum += out_offset;
 800d28e:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 800d292:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800d296:	4413      	add	r3, r2
 800d298:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
                sum = MAX(sum, out_activation_min);
 800d29c:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 800d2a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d2a4:	4293      	cmp	r3, r2
 800d2a6:	bfb8      	it	lt
 800d2a8:	4613      	movlt	r3, r2
 800d2aa:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
                sum = MIN(sum, out_activation_max);
 800d2ae:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 800d2b2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d2b6:	4293      	cmp	r3, r2
 800d2b8:	bfa8      	it	ge
 800d2ba:	4613      	movge	r3, r2
 800d2bc:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
                *out++ = (int8_t)sum;
 800d2c0:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800d2c4:	1c5a      	adds	r2, r3, #1
 800d2c6:	f8c7 2160 	str.w	r2, [r7, #352]	; 0x160
 800d2ca:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 800d2ce:	b252      	sxtb	r2, r2
 800d2d0:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < output_ch; i++)
 800d2d2:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800d2d6:	3301      	adds	r3, #1
 800d2d8:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 800d2dc:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 800d2e0:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800d2e4:	429a      	cmp	r2, r3
 800d2e6:	f6ff ad86 	blt.w	800cdf6 <arm_convolve_s8+0x468>
            }
#endif // #if defined(ARM_MATH_MVEI)
        }

        /* Advance to the next batch */
        input_data += (input_x * input_y * input_ch);
 800d2ea:	f8b7 3132 	ldrh.w	r3, [r7, #306]	; 0x132
 800d2ee:	f8b7 2130 	ldrh.w	r2, [r7, #304]	; 0x130
 800d2f2:	fb02 f303 	mul.w	r3, r2, r3
 800d2f6:	f8b7 212e 	ldrh.w	r2, [r7, #302]	; 0x12e
 800d2fa:	fb02 f303 	mul.w	r3, r2, r3
 800d2fe:	461a      	mov	r2, r3
 800d300:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800d304:	4413      	add	r3, r2
 800d306:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
        output_data += (output_x * output_y * output_ch);
 800d30a:	f8b7 3128 	ldrh.w	r3, [r7, #296]	; 0x128
 800d30e:	f8b7 2126 	ldrh.w	r2, [r7, #294]	; 0x126
 800d312:	fb02 f303 	mul.w	r3, r2, r3
 800d316:	f8b7 2124 	ldrh.w	r2, [r7, #292]	; 0x124
 800d31a:	fb02 f303 	mul.w	r3, r2, r3
 800d31e:	461a      	mov	r2, r3
 800d320:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800d324:	4413      	add	r3, r2
 800d326:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
    for (i_batch = 0; i_batch < input_batches; i_batch++)
 800d32a:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800d32e:	3301      	adds	r3, #1
 800d330:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 800d334:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 800d338:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800d33c:	429a      	cmp	r2, r3
 800d33e:	f6ff abfb 	blt.w	800cb38 <arm_convolve_s8+0x1aa>
    }

    /* Return to application */
    return ARM_CMSIS_NN_SUCCESS;
 800d342:	2300      	movs	r3, #0
}
 800d344:	4618      	mov	r0, r3
 800d346:	f507 77ba 	add.w	r7, r7, #372	; 0x174
 800d34a:	46bd      	mov	sp, r7
 800d34c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d350 <arm_convolve_wrapper_s8>:
                                            const int8_t *filter_data,
                                            const cmsis_nn_dims *bias_dims,
                                            const int32_t *bias_data,
                                            const cmsis_nn_dims *output_dims,
                                            int8_t *output_data)
{
 800d350:	b580      	push	{r7, lr}
 800d352:	b08c      	sub	sp, #48	; 0x30
 800d354:	af08      	add	r7, sp, #32
 800d356:	60f8      	str	r0, [r7, #12]
 800d358:	60b9      	str	r1, [r7, #8]
 800d35a:	607a      	str	r2, [r7, #4]
 800d35c:	603b      	str	r3, [r7, #0]
    if ((conv_params->padding.w == 0) && (conv_params->padding.h == 0) && (filter_dims->w == 1) &&
 800d35e:	68bb      	ldr	r3, [r7, #8]
 800d360:	691b      	ldr	r3, [r3, #16]
 800d362:	2b00      	cmp	r3, #0
 800d364:	d147      	bne.n	800d3f6 <arm_convolve_wrapper_s8+0xa6>
 800d366:	68bb      	ldr	r3, [r7, #8]
 800d368:	695b      	ldr	r3, [r3, #20]
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d143      	bne.n	800d3f6 <arm_convolve_wrapper_s8+0xa6>
 800d36e:	69fb      	ldr	r3, [r7, #28]
 800d370:	689b      	ldr	r3, [r3, #8]
 800d372:	2b01      	cmp	r3, #1
 800d374:	d13f      	bne.n	800d3f6 <arm_convolve_wrapper_s8+0xa6>
        (filter_dims->h == 1) && (conv_params->dilation.w == 1 && conv_params->dilation.h == 1))
 800d376:	69fb      	ldr	r3, [r7, #28]
 800d378:	685b      	ldr	r3, [r3, #4]
    if ((conv_params->padding.w == 0) && (conv_params->padding.h == 0) && (filter_dims->w == 1) &&
 800d37a:	2b01      	cmp	r3, #1
 800d37c:	d13b      	bne.n	800d3f6 <arm_convolve_wrapper_s8+0xa6>
        (filter_dims->h == 1) && (conv_params->dilation.w == 1 && conv_params->dilation.h == 1))
 800d37e:	68bb      	ldr	r3, [r7, #8]
 800d380:	699b      	ldr	r3, [r3, #24]
 800d382:	2b01      	cmp	r3, #1
 800d384:	d137      	bne.n	800d3f6 <arm_convolve_wrapper_s8+0xa6>
 800d386:	68bb      	ldr	r3, [r7, #8]
 800d388:	69db      	ldr	r3, [r3, #28]
 800d38a:	2b01      	cmp	r3, #1
 800d38c:	d133      	bne.n	800d3f6 <arm_convolve_wrapper_s8+0xa6>
    {
        if ((conv_params->stride.w == 1) && (conv_params->stride.h == 1))
 800d38e:	68bb      	ldr	r3, [r7, #8]
 800d390:	689b      	ldr	r3, [r3, #8]
 800d392:	2b01      	cmp	r3, #1
 800d394:	d119      	bne.n	800d3ca <arm_convolve_wrapper_s8+0x7a>
 800d396:	68bb      	ldr	r3, [r7, #8]
 800d398:	68db      	ldr	r3, [r3, #12]
 800d39a:	2b01      	cmp	r3, #1
 800d39c:	d115      	bne.n	800d3ca <arm_convolve_wrapper_s8+0x7a>
        {
            return arm_convolve_1x1_s8_fast(ctx,
 800d39e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3a0:	9306      	str	r3, [sp, #24]
 800d3a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3a4:	9305      	str	r3, [sp, #20]
 800d3a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3a8:	9304      	str	r3, [sp, #16]
 800d3aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3ac:	9303      	str	r3, [sp, #12]
 800d3ae:	6a3b      	ldr	r3, [r7, #32]
 800d3b0:	9302      	str	r3, [sp, #8]
 800d3b2:	69fb      	ldr	r3, [r7, #28]
 800d3b4:	9301      	str	r3, [sp, #4]
 800d3b6:	69bb      	ldr	r3, [r7, #24]
 800d3b8:	9300      	str	r3, [sp, #0]
 800d3ba:	683b      	ldr	r3, [r7, #0]
 800d3bc:	687a      	ldr	r2, [r7, #4]
 800d3be:	68b9      	ldr	r1, [r7, #8]
 800d3c0:	68f8      	ldr	r0, [r7, #12]
 800d3c2:	f7ff f99e 	bl	800c702 <arm_convolve_1x1_s8_fast>
 800d3c6:	4603      	mov	r3, r0
 800d3c8:	e056      	b.n	800d478 <arm_convolve_wrapper_s8+0x128>
                                            output_dims,
                                            output_data);
        }
        else
        {
            return arm_convolve_1x1_s8(ctx,
 800d3ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3cc:	9306      	str	r3, [sp, #24]
 800d3ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3d0:	9305      	str	r3, [sp, #20]
 800d3d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3d4:	9304      	str	r3, [sp, #16]
 800d3d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3d8:	9303      	str	r3, [sp, #12]
 800d3da:	6a3b      	ldr	r3, [r7, #32]
 800d3dc:	9302      	str	r3, [sp, #8]
 800d3de:	69fb      	ldr	r3, [r7, #28]
 800d3e0:	9301      	str	r3, [sp, #4]
 800d3e2:	69bb      	ldr	r3, [r7, #24]
 800d3e4:	9300      	str	r3, [sp, #0]
 800d3e6:	683b      	ldr	r3, [r7, #0]
 800d3e8:	687a      	ldr	r2, [r7, #4]
 800d3ea:	68b9      	ldr	r1, [r7, #8]
 800d3ec:	68f8      	ldr	r0, [r7, #12]
 800d3ee:	f7ff f8f3 	bl	800c5d8 <arm_convolve_1x1_s8>
 800d3f2:	4603      	mov	r3, r0
 800d3f4:	e040      	b.n	800d478 <arm_convolve_wrapper_s8+0x128>
                                       bias_data,
                                       output_dims,
                                       output_data);
        }
    }
    else if ((input_dims->h == 1) && conv_params->dilation.w == 1 && (filter_dims->h == 1) &&
 800d3f6:	683b      	ldr	r3, [r7, #0]
 800d3f8:	685b      	ldr	r3, [r3, #4]
 800d3fa:	2b01      	cmp	r3, #1
 800d3fc:	d127      	bne.n	800d44e <arm_convolve_wrapper_s8+0xfe>
 800d3fe:	68bb      	ldr	r3, [r7, #8]
 800d400:	699b      	ldr	r3, [r3, #24]
 800d402:	2b01      	cmp	r3, #1
 800d404:	d123      	bne.n	800d44e <arm_convolve_wrapper_s8+0xfe>
 800d406:	69fb      	ldr	r3, [r7, #28]
 800d408:	685b      	ldr	r3, [r3, #4]
 800d40a:	2b01      	cmp	r3, #1
 800d40c:	d11f      	bne.n	800d44e <arm_convolve_wrapper_s8+0xfe>
             ((conv_params->stride.w * input_dims->c) % 4 == 0))
 800d40e:	68bb      	ldr	r3, [r7, #8]
 800d410:	689b      	ldr	r3, [r3, #8]
 800d412:	683a      	ldr	r2, [r7, #0]
 800d414:	68d2      	ldr	r2, [r2, #12]
 800d416:	fb02 f303 	mul.w	r3, r2, r3
 800d41a:	f003 0303 	and.w	r3, r3, #3
    else if ((input_dims->h == 1) && conv_params->dilation.w == 1 && (filter_dims->h == 1) &&
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d115      	bne.n	800d44e <arm_convolve_wrapper_s8+0xfe>
    {
        return arm_convolve_1_x_n_s8(ctx,
 800d422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d424:	9306      	str	r3, [sp, #24]
 800d426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d428:	9305      	str	r3, [sp, #20]
 800d42a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d42c:	9304      	str	r3, [sp, #16]
 800d42e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d430:	9303      	str	r3, [sp, #12]
 800d432:	6a3b      	ldr	r3, [r7, #32]
 800d434:	9302      	str	r3, [sp, #8]
 800d436:	69fb      	ldr	r3, [r7, #28]
 800d438:	9301      	str	r3, [sp, #4]
 800d43a:	69bb      	ldr	r3, [r7, #24]
 800d43c:	9300      	str	r3, [sp, #0]
 800d43e:	683b      	ldr	r3, [r7, #0]
 800d440:	687a      	ldr	r2, [r7, #4]
 800d442:	68b9      	ldr	r1, [r7, #8]
 800d444:	68f8      	ldr	r0, [r7, #12]
 800d446:	f7ff f87d 	bl	800c544 <arm_convolve_1_x_n_s8>
 800d44a:	4603      	mov	r3, r0
 800d44c:	e014      	b.n	800d478 <arm_convolve_wrapper_s8+0x128>
                                     output_dims,
                                     output_data);
    }
    else
    {
        return arm_convolve_s8(ctx,
 800d44e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d450:	9306      	str	r3, [sp, #24]
 800d452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d454:	9305      	str	r3, [sp, #20]
 800d456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d458:	9304      	str	r3, [sp, #16]
 800d45a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d45c:	9303      	str	r3, [sp, #12]
 800d45e:	6a3b      	ldr	r3, [r7, #32]
 800d460:	9302      	str	r3, [sp, #8]
 800d462:	69fb      	ldr	r3, [r7, #28]
 800d464:	9301      	str	r3, [sp, #4]
 800d466:	69bb      	ldr	r3, [r7, #24]
 800d468:	9300      	str	r3, [sp, #0]
 800d46a:	683b      	ldr	r3, [r7, #0]
 800d46c:	687a      	ldr	r2, [r7, #4]
 800d46e:	68b9      	ldr	r1, [r7, #8]
 800d470:	68f8      	ldr	r0, [r7, #12]
 800d472:	f7ff fa8c 	bl	800c98e <arm_convolve_s8>
 800d476:	4603      	mov	r3, r0
                               bias_dims,
                               bias_data,
                               output_dims,
                               output_data);
    }
}
 800d478:	4618      	mov	r0, r3
 800d47a:	3710      	adds	r7, #16
 800d47c:	46bd      	mov	sp, r7
 800d47e:	bd80      	pop	{r7, pc}

0800d480 <arm_nn_mat_mult_kernel_s8_s16>:
                                      const int16_t activation_max,
                                      const int32_t num_col_a,
                                      const int32_t aligned_num_col_a,
                                      const int32_t *const output_bias,
                                      int8_t *out_0)
{
 800d480:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800d484:	f5ad 6d83 	sub.w	sp, sp, #1048	; 0x418
 800d488:	af00      	add	r7, sp, #0
 800d48a:	f507 6483 	add.w	r4, r7, #1048	; 0x418
 800d48e:	f5a4 7459 	sub.w	r4, r4, #868	; 0x364
 800d492:	6020      	str	r0, [r4, #0]
 800d494:	f507 6083 	add.w	r0, r7, #1048	; 0x418
 800d498:	f5a0 705a 	sub.w	r0, r0, #872	; 0x368
 800d49c:	6001      	str	r1, [r0, #0]
 800d49e:	4611      	mov	r1, r2
 800d4a0:	f507 6283 	add.w	r2, r7, #1048	; 0x418
 800d4a4:	f5a2 725c 	sub.w	r2, r2, #880	; 0x370
 800d4a8:	6013      	str	r3, [r2, #0]
 800d4aa:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800d4ae:	f2a3 326a 	subw	r2, r3, #874	; 0x36a
 800d4b2:	460b      	mov	r3, r1
 800d4b4:	8013      	strh	r3, [r2, #0]
#if !defined(ARM_MATH_MVEI)
    /* set up the second output pointers */
    int8_t *out_1 = out_0 + output_ch;
 800d4b6:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800d4ba:	f2a3 336a 	subw	r3, r3, #874	; 0x36a
 800d4be:	881a      	ldrh	r2, [r3, #0]
 800d4c0:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 800d4c4:	4413      	add	r3, r2
 800d4c6:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
    const int32_t *bias = output_bias;
 800d4ca:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 800d4ce:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410

    uint16_t row_count = output_ch / 2;
 800d4d2:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800d4d6:	f2a3 336a 	subw	r3, r3, #874	; 0x36a
 800d4da:	881b      	ldrh	r3, [r3, #0]
 800d4dc:	085b      	lsrs	r3, r3, #1
 800d4de:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
    const int8_t *ip_a0 = input_a;
 800d4e2:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800d4e6:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
    /* this loop over rows in A */
    while (row_count)
 800d4f0:	f001 b88e 	b.w	800e610 <arm_nn_mat_mult_kernel_s8_s16+0x1190>
    {
        /* setup pointers for B */
        const int16_t *ip_b0 = input_b;
 800d4f4:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800d4f8:	f5a3 7234 	sub.w	r2, r3, #720	; 0x2d0
 800d4fc:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800d500:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	6013      	str	r3, [r2, #0]
        const int16_t *ip_b1 = ip_b0 + aligned_num_col_a;
 800d508:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800d50c:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 800d510:	681a      	ldr	r2, [r3, #0]
 800d512:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 800d516:	005b      	lsls	r3, r3, #1
 800d518:	441a      	add	r2, r3
 800d51a:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800d51e:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 800d522:	601a      	str	r2, [r3, #0]

        /* align the second pointer for A */
        const int8_t *ip_a1 = ip_a0 + num_col_a;
 800d524:	f8d7 2448 	ldr.w	r2, [r7, #1096]	; 0x448
 800d528:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 800d52c:	4413      	add	r3, r2
 800d52e:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404

        int32_t ch_0_out_0 = 0;
 800d532:	2300      	movs	r3, #0
 800d534:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
        int32_t ch_0_out_1 = 0;
 800d538:	2300      	movs	r3, #0
 800d53a:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
        int32_t ch_1_out_0 = 0;
 800d53e:	2300      	movs	r3, #0
 800d540:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
        int32_t ch_1_out_1 = 0;
 800d544:	2300      	movs	r3, #0
 800d546:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
        /* Init accumulator with bias for channel N and N + 1 */
        if (bias)
 800d54a:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d019      	beq.n	800d586 <arm_nn_mat_mult_kernel_s8_s16+0x106>
        {
            ch_0_out_0 = *bias;
 800d552:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
            ch_0_out_1 = *bias++;
 800d55c:	f8d7 2410 	ldr.w	r2, [r7, #1040]	; 0x410
 800d560:	1d13      	adds	r3, r2, #4
 800d562:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
 800d566:	6813      	ldr	r3, [r2, #0]
 800d568:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
            ch_1_out_0 = *bias;
 800d56c:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
            ch_1_out_1 = *bias++;
 800d576:	f8d7 2410 	ldr.w	r2, [r7, #1040]	; 0x410
 800d57a:	1d13      	adds	r3, r2, #4
 800d57c:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
 800d580:	6813      	ldr	r3, [r2, #0]
 800d582:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
        }

    #if defined(ARM_MATH_DSP)
        int32_t col_count = num_col_a / 4;
 800d586:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	da00      	bge.n	800d590 <arm_nn_mat_mult_kernel_s8_s16+0x110>
 800d58e:	3303      	adds	r3, #3
 800d590:	109b      	asrs	r3, r3, #2
 800d592:	f8c7 33f0 	str.w	r3, [r7, #1008]	; 0x3f0
        /* accumulate over the vector */
        while (col_count)
 800d596:	e2ac      	b.n	800daf2 <arm_nn_mat_mult_kernel_s8_s16+0x672>
 800d598:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800d59c:	f5a3 729a 	sub.w	r2, r3, #308	; 0x134
 800d5a0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800d5a4:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q15, 4);
 800d5a6:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800d5aa:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	461a      	mov	r2, r3
 800d5b6:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800d5ba:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 800d5be:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 800d5c0:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800d5c4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	1d1a      	adds	r2, r3, #4
 800d5ce:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800d5d2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	601a      	str	r2, [r3, #0]
    return (val);
 800d5da:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800d5de:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 800d5e2:	681b      	ldr	r3, [r3, #0]
        {
            int32_t a01, a02, a11, a12;
            int32_t b0 = arm_nn_read_q15x2_ia(&ip_b0);
 800d5e4:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 800d5e8:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800d5ec:	f5a3 7298 	sub.w	r2, r3, #304	; 0x130
 800d5f0:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 800d5f4:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q15, 4);
 800d5f6:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800d5fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	461a      	mov	r2, r3
 800d606:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800d60a:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 800d60e:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 800d610:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800d614:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	1d1a      	adds	r2, r3, #4
 800d61e:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800d622:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	601a      	str	r2, [r3, #0]
    return (val);
 800d62a:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800d62e:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 800d632:	681b      	ldr	r3, [r3, #0]
            int32_t b1 = arm_nn_read_q15x2_ia(&ip_b1);
 800d634:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
 800d638:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800d63c:	f5a3 7245 	sub.w	r2, r3, #788	; 0x314
 800d640:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 800d644:	6013      	str	r3, [r2, #0]
 800d646:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800d64a:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 800d64e:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800d652:	6013      	str	r3, [r2, #0]
 800d654:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800d658:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 800d65c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800d660:	6013      	str	r3, [r2, #0]
 800d662:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800d666:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 800d66a:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800d66e:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_s8, 4);
 800d670:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800d674:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	461a      	mov	r2, r3
 800d680:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800d684:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 800d688:	601a      	str	r2, [r3, #0]
    *in_s8 += 4;
 800d68a:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800d68e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	1d1a      	adds	r2, r3, #4
 800d698:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800d69c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	601a      	str	r2, [r3, #0]
    return (val);
 800d6a4:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800d6a8:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 800d6ac:	681a      	ldr	r2, [r3, #0]
    int32_t inA = arm_nn_read_s8x4_ia(&source);
 800d6ae:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800d6b2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800d6b6:	601a      	str	r2, [r3, #0]
    *out2 = SXTB16(ROR((uint32_t)inA, 8));
 800d6b8:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800d6bc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800d6c0:	681a      	ldr	r2, [r3, #0]
 800d6c2:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800d6c6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800d6ca:	601a      	str	r2, [r3, #0]
 800d6cc:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800d6d0:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 800d6d4:	2308      	movs	r3, #8
 800d6d6:	6013      	str	r3, [r2, #0]
    op2 %= 32U;
 800d6d8:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800d6dc:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 800d6e0:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800d6e4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	f003 031f 	and.w	r3, r3, #31
 800d6ee:	6013      	str	r3, [r2, #0]
    if (op2 == 0U)
 800d6f0:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800d6f4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d105      	bne.n	800d70a <arm_nn_mat_mult_kernel_s8_s16+0x28a>
        return op1;
 800d6fe:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800d702:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800d706:	681a      	ldr	r2, [r3, #0]
 800d708:	e00a      	b.n	800d720 <arm_nn_mat_mult_kernel_s8_s16+0x2a0>
    return (op1 >> op2) | (op1 << (32U - op2));
 800d70a:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800d70e:	f5a3 728c 	sub.w	r2, r3, #280	; 0x118
 800d712:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800d716:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800d71a:	6812      	ldr	r2, [r2, #0]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	41da      	rors	r2, r3
 800d720:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800d724:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800d728:	601a      	str	r2, [r3, #0]
    __ASM("sxtb16 %0, %1" : "=r"(result) : "r"(op1));
 800d72a:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800d72e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	fa2f f283 	sxtb16	r2, r3
 800d738:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800d73c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800d740:	601a      	str	r2, [r3, #0]
    return (result);
 800d742:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800d746:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	461a      	mov	r2, r3
 800d74e:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800d752:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	601a      	str	r2, [r3, #0]
    *out1 = SXTB16(inA);
 800d75a:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800d75e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800d762:	681a      	ldr	r2, [r3, #0]
 800d764:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800d768:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800d76c:	601a      	str	r2, [r3, #0]
    __ASM("sxtb16 %0, %1" : "=r"(result) : "r"(op1));
 800d76e:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800d772:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	fa2f f283 	sxtb16	r2, r3
 800d77c:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800d780:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800d784:	601a      	str	r2, [r3, #0]
    return (result);
 800d786:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800d78a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	461a      	mov	r2, r3
 800d792:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800d796:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	601a      	str	r2, [r3, #0]
    return source;
 800d79e:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800d7a2:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 800d7a6:	681b      	ldr	r3, [r3, #0]

            ip_a0 = read_and_pad_reordered(ip_a0, &a01, &a02);
 800d7a8:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
 800d7ac:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800d7b0:	f5a3 7247 	sub.w	r2, r3, #796	; 0x31c
 800d7b4:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 800d7b8:	6013      	str	r3, [r2, #0]
 800d7ba:	f507 738a 	add.w	r3, r7, #276	; 0x114
 800d7be:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338
 800d7c2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d7c6:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 800d7ca:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800d7ce:	f8c7 3330 	str.w	r3, [r7, #816]	; 0x330
    memcpy(&val, *in_s8, 4);
 800d7d2:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	461a      	mov	r2, r3
 800d7dc:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800d7e0:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 800d7e4:	601a      	str	r2, [r3, #0]
    *in_s8 += 4;
 800d7e6:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	1d1a      	adds	r2, r3, #4
 800d7ee:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 800d7f2:	601a      	str	r2, [r3, #0]
    return (val);
 800d7f4:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800d7f8:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 800d7fc:	681b      	ldr	r3, [r3, #0]
    int32_t inA = arm_nn_read_s8x4_ia(&source);
 800d7fe:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
    *out2 = SXTB16(ROR((uint32_t)inA, 8));
 800d802:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 800d806:	f8c7 3328 	str.w	r3, [r7, #808]	; 0x328
 800d80a:	2308      	movs	r3, #8
 800d80c:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
    op2 %= 32U;
 800d810:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 800d814:	f003 031f 	and.w	r3, r3, #31
 800d818:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
    if (op2 == 0U)
 800d81c:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 800d820:	2b00      	cmp	r3, #0
 800d822:	d102      	bne.n	800d82a <arm_nn_mat_mult_kernel_s8_s16+0x3aa>
        return op1;
 800d824:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 800d828:	e005      	b.n	800d836 <arm_nn_mat_mult_kernel_s8_s16+0x3b6>
    return (op1 >> op2) | (op1 << (32U - op2));
 800d82a:	f8d7 2328 	ldr.w	r2, [r7, #808]	; 0x328
 800d82e:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 800d832:	fa62 f303 	ror.w	r3, r2, r3
 800d836:	f8c7 3320 	str.w	r3, [r7, #800]	; 0x320
    __ASM("sxtb16 %0, %1" : "=r"(result) : "r"(op1));
 800d83a:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 800d83e:	fa2f f383 	sxtb16	r3, r3
 800d842:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
    return (result);
 800d846:	f8d7 331c 	ldr.w	r3, [r7, #796]	; 0x31c
 800d84a:	461a      	mov	r2, r3
 800d84c:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 800d850:	601a      	str	r2, [r3, #0]
    *out1 = SXTB16(inA);
 800d852:	f8d7 232c 	ldr.w	r2, [r7, #812]	; 0x32c
 800d856:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800d85a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800d85e:	601a      	str	r2, [r3, #0]
    __ASM("sxtb16 %0, %1" : "=r"(result) : "r"(op1));
 800d860:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800d864:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	fa2f f283 	sxtb16	r2, r3
 800d86e:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800d872:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d876:	601a      	str	r2, [r3, #0]
    return (result);
 800d878:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800d87c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	461a      	mov	r2, r3
 800d884:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 800d888:	601a      	str	r2, [r3, #0]
    return source;
 800d88a:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800d88e:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 800d892:	681b      	ldr	r3, [r3, #0]
            ip_a1 = read_and_pad_reordered(ip_a1, &a11, &a12);
 800d894:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404

            ch_0_out_0 = SMLAD(a01, b0, ch_0_out_0);
 800d898:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800d89c:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	4619      	mov	r1, r3
 800d8a4:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 800d8a8:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 800d8ac:	f8c7 1348 	str.w	r1, [r7, #840]	; 0x348
 800d8b0:	f8c7 2344 	str.w	r2, [r7, #836]	; 0x344
 800d8b4:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
    __ASM volatile("smlad %0, %1, %2, %3" : "=r"(result) : "r"(op1), "r"(op2), "r"(op3));
 800d8b8:	f8d7 1348 	ldr.w	r1, [r7, #840]	; 0x348
 800d8bc:	f8d7 2344 	ldr.w	r2, [r7, #836]	; 0x344
 800d8c0:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 800d8c4:	fb21 3302 	smlad	r3, r1, r2, r3
 800d8c8:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
    return (result);
 800d8cc:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 800d8d0:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
            ch_0_out_1 = SMLAD(a01, b1, ch_0_out_1);
 800d8d4:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800d8d8:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	4619      	mov	r1, r3
 800d8e0:	f8d7 23c4 	ldr.w	r2, [r7, #964]	; 0x3c4
 800d8e4:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 800d8e8:	f8c7 1358 	str.w	r1, [r7, #856]	; 0x358
 800d8ec:	f8c7 2354 	str.w	r2, [r7, #852]	; 0x354
 800d8f0:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
    __ASM volatile("smlad %0, %1, %2, %3" : "=r"(result) : "r"(op1), "r"(op2), "r"(op3));
 800d8f4:	f8d7 1358 	ldr.w	r1, [r7, #856]	; 0x358
 800d8f8:	f8d7 2354 	ldr.w	r2, [r7, #852]	; 0x354
 800d8fc:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 800d900:	fb21 3302 	smlad	r3, r1, r2, r3
 800d904:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    return (result);
 800d908:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800d90c:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
            ch_1_out_0 = SMLAD(a11, b0, ch_1_out_0);
 800d910:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800d914:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	4619      	mov	r1, r3
 800d91c:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 800d920:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 800d924:	f8c7 1368 	str.w	r1, [r7, #872]	; 0x368
 800d928:	f8c7 2364 	str.w	r2, [r7, #868]	; 0x364
 800d92c:	f8c7 3360 	str.w	r3, [r7, #864]	; 0x360
    __ASM volatile("smlad %0, %1, %2, %3" : "=r"(result) : "r"(op1), "r"(op2), "r"(op3));
 800d930:	f8d7 1368 	ldr.w	r1, [r7, #872]	; 0x368
 800d934:	f8d7 2364 	ldr.w	r2, [r7, #868]	; 0x364
 800d938:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 800d93c:	fb21 3302 	smlad	r3, r1, r2, r3
 800d940:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
    return (result);
 800d944:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 800d948:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
            ch_1_out_1 = SMLAD(a11, b1, ch_1_out_1);
 800d94c:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800d950:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	4619      	mov	r1, r3
 800d958:	f8d7 23c4 	ldr.w	r2, [r7, #964]	; 0x3c4
 800d95c:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 800d960:	f8c7 1378 	str.w	r1, [r7, #888]	; 0x378
 800d964:	f8c7 2374 	str.w	r2, [r7, #884]	; 0x374
 800d968:	f8c7 3370 	str.w	r3, [r7, #880]	; 0x370
    __ASM volatile("smlad %0, %1, %2, %3" : "=r"(result) : "r"(op1), "r"(op2), "r"(op3));
 800d96c:	f8d7 1378 	ldr.w	r1, [r7, #888]	; 0x378
 800d970:	f8d7 2374 	ldr.w	r2, [r7, #884]	; 0x374
 800d974:	f8d7 3370 	ldr.w	r3, [r7, #880]	; 0x370
 800d978:	fb21 3302 	smlad	r3, r1, r2, r3
 800d97c:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
    return (result);
 800d980:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 800d984:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
 800d988:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800d98c:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c
    memcpy(&val, *in_q15, 4);
 800d990:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	461a      	mov	r2, r3
 800d99a:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800d99e:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 800d9a2:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 800d9a4:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	1d1a      	adds	r2, r3, #4
 800d9ac:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 800d9b0:	601a      	str	r2, [r3, #0]
    return (val);
 800d9b2:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800d9b6:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 800d9ba:	681b      	ldr	r3, [r3, #0]

            b0 = arm_nn_read_q15x2_ia(&ip_b0);
 800d9bc:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 800d9c0:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 800d9c4:	f8c7 3380 	str.w	r3, [r7, #896]	; 0x380
    memcpy(&val, *in_q15, 4);
 800d9c8:	f8d7 3380 	ldr.w	r3, [r7, #896]	; 0x380
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	461a      	mov	r2, r3
 800d9d2:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800d9d6:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 800d9da:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 800d9dc:	f8d7 3380 	ldr.w	r3, [r7, #896]	; 0x380
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	1d1a      	adds	r2, r3, #4
 800d9e4:	f8d7 3380 	ldr.w	r3, [r7, #896]	; 0x380
 800d9e8:	601a      	str	r2, [r3, #0]
    return (val);
 800d9ea:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800d9ee:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 800d9f2:	681b      	ldr	r3, [r3, #0]
            b1 = arm_nn_read_q15x2_ia(&ip_b1);
 800d9f4:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4

            ch_0_out_0 = SMLAD(a02, b0, ch_0_out_0);
 800d9f8:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800d9fc:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	4619      	mov	r1, r3
 800da04:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 800da08:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 800da0c:	f8c7 1390 	str.w	r1, [r7, #912]	; 0x390
 800da10:	f8c7 238c 	str.w	r2, [r7, #908]	; 0x38c
 800da14:	f8c7 3388 	str.w	r3, [r7, #904]	; 0x388
    __ASM volatile("smlad %0, %1, %2, %3" : "=r"(result) : "r"(op1), "r"(op2), "r"(op3));
 800da18:	f8d7 1390 	ldr.w	r1, [r7, #912]	; 0x390
 800da1c:	f8d7 238c 	ldr.w	r2, [r7, #908]	; 0x38c
 800da20:	f8d7 3388 	ldr.w	r3, [r7, #904]	; 0x388
 800da24:	fb21 3302 	smlad	r3, r1, r2, r3
 800da28:	f8c7 3384 	str.w	r3, [r7, #900]	; 0x384
    return (result);
 800da2c:	f8d7 3384 	ldr.w	r3, [r7, #900]	; 0x384
 800da30:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
            ch_0_out_1 = SMLAD(a02, b1, ch_0_out_1);
 800da34:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800da38:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	4619      	mov	r1, r3
 800da40:	f8d7 23c4 	ldr.w	r2, [r7, #964]	; 0x3c4
 800da44:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 800da48:	f8c7 13a0 	str.w	r1, [r7, #928]	; 0x3a0
 800da4c:	f8c7 239c 	str.w	r2, [r7, #924]	; 0x39c
 800da50:	f8c7 3398 	str.w	r3, [r7, #920]	; 0x398
    __ASM volatile("smlad %0, %1, %2, %3" : "=r"(result) : "r"(op1), "r"(op2), "r"(op3));
 800da54:	f8d7 13a0 	ldr.w	r1, [r7, #928]	; 0x3a0
 800da58:	f8d7 239c 	ldr.w	r2, [r7, #924]	; 0x39c
 800da5c:	f8d7 3398 	ldr.w	r3, [r7, #920]	; 0x398
 800da60:	fb21 3302 	smlad	r3, r1, r2, r3
 800da64:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
    return (result);
 800da68:	f8d7 3394 	ldr.w	r3, [r7, #916]	; 0x394
 800da6c:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
            ch_1_out_0 = SMLAD(a12, b0, ch_1_out_0);
 800da70:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800da74:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	4619      	mov	r1, r3
 800da7c:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 800da80:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 800da84:	f8c7 13b0 	str.w	r1, [r7, #944]	; 0x3b0
 800da88:	f8c7 23ac 	str.w	r2, [r7, #940]	; 0x3ac
 800da8c:	f8c7 33a8 	str.w	r3, [r7, #936]	; 0x3a8
    __ASM volatile("smlad %0, %1, %2, %3" : "=r"(result) : "r"(op1), "r"(op2), "r"(op3));
 800da90:	f8d7 13b0 	ldr.w	r1, [r7, #944]	; 0x3b0
 800da94:	f8d7 23ac 	ldr.w	r2, [r7, #940]	; 0x3ac
 800da98:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 800da9c:	fb21 3302 	smlad	r3, r1, r2, r3
 800daa0:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
    return (result);
 800daa4:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 800daa8:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
            ch_1_out_1 = SMLAD(a12, b1, ch_1_out_1);
 800daac:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800dab0:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	4619      	mov	r1, r3
 800dab8:	f8d7 23c4 	ldr.w	r2, [r7, #964]	; 0x3c4
 800dabc:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 800dac0:	f8c7 13c0 	str.w	r1, [r7, #960]	; 0x3c0
 800dac4:	f8c7 23bc 	str.w	r2, [r7, #956]	; 0x3bc
 800dac8:	f8c7 33b8 	str.w	r3, [r7, #952]	; 0x3b8
    __ASM volatile("smlad %0, %1, %2, %3" : "=r"(result) : "r"(op1), "r"(op2), "r"(op3));
 800dacc:	f8d7 13c0 	ldr.w	r1, [r7, #960]	; 0x3c0
 800dad0:	f8d7 23bc 	ldr.w	r2, [r7, #956]	; 0x3bc
 800dad4:	f8d7 33b8 	ldr.w	r3, [r7, #952]	; 0x3b8
 800dad8:	fb21 3302 	smlad	r3, r1, r2, r3
 800dadc:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
    return (result);
 800dae0:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 800dae4:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4

            col_count--;
 800dae8:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	; 0x3f0
 800daec:	3b01      	subs	r3, #1
 800daee:	f8c7 33f0 	str.w	r3, [r7, #1008]	; 0x3f0
        while (col_count)
 800daf2:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	; 0x3f0
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	f47f ad4e 	bne.w	800d598 <arm_nn_mat_mult_kernel_s8_s16+0x118>
        } /* while over col_count */
        col_count = num_col_a & 0x3;
 800dafc:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 800db00:	f003 0303 	and.w	r3, r3, #3
 800db04:	f8c7 33f0 	str.w	r3, [r7, #1008]	; 0x3f0
    #else
        int32_t col_count = num_col_a;
    #endif
        while (col_count)
 800db08:	e05c      	b.n	800dbc4 <arm_nn_mat_mult_kernel_s8_s16+0x744>
        {
            int8_t a0 = *ip_a0++;
 800db0a:	f8d7 2408 	ldr.w	r2, [r7, #1032]	; 0x408
 800db0e:	1c53      	adds	r3, r2, #1
 800db10:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
 800db14:	7813      	ldrb	r3, [r2, #0]
 800db16:	f887 33d3 	strb.w	r3, [r7, #979]	; 0x3d3
            int16_t b0 = *ip_b0++;
 800db1a:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800db1e:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 800db22:	6819      	ldr	r1, [r3, #0]
 800db24:	1c8a      	adds	r2, r1, #2
 800db26:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800db2a:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 800db2e:	601a      	str	r2, [r3, #0]
 800db30:	880b      	ldrh	r3, [r1, #0]
 800db32:	f8a7 33d0 	strh.w	r3, [r7, #976]	; 0x3d0
            int8_t a1 = *ip_a1++;
 800db36:	f8d7 2404 	ldr.w	r2, [r7, #1028]	; 0x404
 800db3a:	1c53      	adds	r3, r2, #1
 800db3c:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 800db40:	7813      	ldrb	r3, [r2, #0]
 800db42:	f887 33cf 	strb.w	r3, [r7, #975]	; 0x3cf
            int16_t b1 = *ip_b1++;
 800db46:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800db4a:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 800db4e:	6819      	ldr	r1, [r3, #0]
 800db50:	1c8a      	adds	r2, r1, #2
 800db52:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800db56:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 800db5a:	601a      	str	r2, [r3, #0]
 800db5c:	880b      	ldrh	r3, [r1, #0]
 800db5e:	f8a7 33cc 	strh.w	r3, [r7, #972]	; 0x3cc

            ch_0_out_0 += a0 * b0;
 800db62:	f997 23d3 	ldrsb.w	r2, [r7, #979]	; 0x3d3
 800db66:	f9b7 33d0 	ldrsh.w	r3, [r7, #976]	; 0x3d0
 800db6a:	fb03 f202 	mul.w	r2, r3, r2
 800db6e:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 800db72:	4413      	add	r3, r2
 800db74:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
            ch_0_out_1 += a0 * b1;
 800db78:	f997 23d3 	ldrsb.w	r2, [r7, #979]	; 0x3d3
 800db7c:	f9b7 33cc 	ldrsh.w	r3, [r7, #972]	; 0x3cc
 800db80:	fb03 f202 	mul.w	r2, r3, r2
 800db84:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 800db88:	4413      	add	r3, r2
 800db8a:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
            ch_1_out_0 += a1 * b0;
 800db8e:	f997 23cf 	ldrsb.w	r2, [r7, #975]	; 0x3cf
 800db92:	f9b7 33d0 	ldrsh.w	r3, [r7, #976]	; 0x3d0
 800db96:	fb03 f202 	mul.w	r2, r3, r2
 800db9a:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 800db9e:	4413      	add	r3, r2
 800dba0:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
            ch_1_out_1 += a1 * b1;
 800dba4:	f997 23cf 	ldrsb.w	r2, [r7, #975]	; 0x3cf
 800dba8:	f9b7 33cc 	ldrsh.w	r3, [r7, #972]	; 0x3cc
 800dbac:	fb03 f202 	mul.w	r2, r3, r2
 800dbb0:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 800dbb4:	4413      	add	r3, r2
 800dbb6:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
            col_count--;
 800dbba:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	; 0x3f0
 800dbbe:	3b01      	subs	r3, #1
 800dbc0:	f8c7 33f0 	str.w	r3, [r7, #1008]	; 0x3f0
        while (col_count)
 800dbc4:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	; 0x3f0
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d19e      	bne.n	800db0a <arm_nn_mat_mult_kernel_s8_s16+0x68a>
        } /* while over col_count */

        ch_0_out_0 = arm_nn_requantize(ch_0_out_0, *out_mult, *out_shift);
 800dbcc:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 800dbd0:	6818      	ldr	r0, [r3, #0]
 800dbd2:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800dbd6:	f5a3 735c 	sub.w	r3, r3, #880	; 0x370
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	6819      	ldr	r1, [r3, #0]
 800dbde:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800dbe2:	f5a3 72e4 	sub.w	r2, r3, #456	; 0x1c8
 800dbe6:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 800dbea:	6013      	str	r3, [r2, #0]
 800dbec:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800dbf0:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 800dbf4:	6018      	str	r0, [r3, #0]
 800dbf6:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800dbfa:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800dbfe:	6019      	str	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800dc00:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800dc04:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 800dc0e:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800dc12:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	fa03 f202 	lsl.w	r2, r3, r2
 800dc1c:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800dc20:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800dc24:	601a      	str	r2, [r3, #0]
 800dc26:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800dc2a:	f5a3 72ec 	sub.w	r2, r3, #472	; 0x1d8
 800dc2e:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800dc32:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	6013      	str	r3, [r2, #0]
    int32_t result = 0;
 800dc3a:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800dc3e:	f5a3 72ee 	sub.w	r2, r3, #476	; 0x1dc
 800dc42:	2300      	movs	r3, #0
 800dc44:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 800dc46:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800dc4a:	f5a3 7238 	sub.w	r2, r3, #736	; 0x2e0
 800dc4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800dc52:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 800dc54:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800dc58:	f5a3 7238 	sub.w	r2, r3, #736	; 0x2e0
 800dc5c:	2300      	movs	r3, #0
 800dc5e:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (int64_t)m1 * m2;
 800dc60:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 800dc64:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800dc68:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	17da      	asrs	r2, r3, #31
 800dc70:	66bb      	str	r3, [r7, #104]	; 0x68
 800dc72:	66fa      	str	r2, [r7, #108]	; 0x6c
 800dc74:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800dc78:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	17da      	asrs	r2, r3, #31
 800dc80:	663b      	str	r3, [r7, #96]	; 0x60
 800dc82:	667a      	str	r2, [r7, #100]	; 0x64
 800dc84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dc86:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800dc88:	fb02 f203 	mul.w	r2, r2, r3
 800dc8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dc8e:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 800dc90:	fb04 f303 	mul.w	r3, r4, r3
 800dc94:	4413      	add	r3, r2
 800dc96:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800dc98:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 800dc9a:	fba2 4204 	umull	r4, r2, r2, r4
 800dc9e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800dca2:	4622      	mov	r2, r4
 800dca4:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 800dca8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800dcac:	4413      	add	r3, r2
 800dcae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800dcb2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800dcb6:	18c3      	adds	r3, r0, r3
 800dcb8:	633b      	str	r3, [r7, #48]	; 0x30
 800dcba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800dcbe:	eb41 0303 	adc.w	r3, r1, r3
 800dcc2:	637b      	str	r3, [r7, #52]	; 0x34
 800dcc4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800dcc8:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
    result = (int32_t)(mult.long_long >> 31);
 800dccc:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800dcd0:	f04f 0000 	mov.w	r0, #0
 800dcd4:	f04f 0100 	mov.w	r1, #0
 800dcd8:	0fd0      	lsrs	r0, r2, #31
 800dcda:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800dcde:	17d9      	asrs	r1, r3, #31
 800dce0:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800dce4:	f5a3 72ee 	sub.w	r2, r3, #476	; 0x1dc
 800dce8:	4603      	mov	r3, r0
 800dcea:	6013      	str	r3, [r2, #0]
    return result;
 800dcec:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800dcf0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800dcf4:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800dcf6:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800dcfa:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	dc06      	bgt.n	800dd12 <arm_nn_mat_mult_kernel_s8_s16+0x892>
 800dd04:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800dd08:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	425a      	negs	r2, r3
 800dd10:	e000      	b.n	800dd14 <arm_nn_mat_mult_kernel_s8_s16+0x894>
 800dd12:	2200      	movs	r2, #0
 800dd14:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800dd18:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800dd1c:	6019      	str	r1, [r3, #0]
 800dd1e:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800dd22:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800dd26:	601a      	str	r2, [r3, #0]
    int32_t result = 0;
 800dd28:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800dd2c:	f5a3 72f4 	sub.w	r2, r3, #488	; 0x1e8
 800dd30:	2300      	movs	r3, #0
 800dd32:	6013      	str	r3, [r2, #0]
    const int32_t remainder_mask = (1 << exponent) - 1;
 800dd34:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800dd38:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800dd3c:	2201      	movs	r2, #1
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	fa02 f103 	lsl.w	r1, r2, r3
 800dd44:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800dd48:	f5a3 72f6 	sub.w	r2, r3, #492	; 0x1ec
 800dd4c:	1e4b      	subs	r3, r1, #1
 800dd4e:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 800dd50:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800dd54:	f5a3 71f8 	sub.w	r1, r3, #496	; 0x1f0
 800dd58:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800dd5c:	f5a3 72f0 	sub.w	r2, r3, #480	; 0x1e0
 800dd60:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800dd64:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800dd68:	6812      	ldr	r2, [r2, #0]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	4013      	ands	r3, r2
 800dd6e:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 800dd70:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800dd74:	f5a3 71f4 	sub.w	r1, r3, #488	; 0x1e8
 800dd78:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800dd7c:	f5a3 72f0 	sub.w	r2, r3, #480	; 0x1e0
 800dd80:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800dd84:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800dd88:	6812      	ldr	r2, [r2, #0]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	fa42 f303 	asr.w	r3, r2, r3
 800dd90:	600b      	str	r3, [r1, #0]
    int32_t threshold = remainder_mask >> 1;
 800dd92:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800dd96:	f5a3 72fa 	sub.w	r2, r3, #500	; 0x1f4
 800dd9a:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800dd9e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	105b      	asrs	r3, r3, #1
 800dda6:	6013      	str	r3, [r2, #0]
    if (result < 0)
 800dda8:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800ddac:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	da0a      	bge.n	800ddcc <arm_nn_mat_mult_kernel_s8_s16+0x94c>
        threshold++;
 800ddb6:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800ddba:	f5a3 72fa 	sub.w	r2, r3, #500	; 0x1f4
 800ddbe:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800ddc2:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	3301      	adds	r3, #1
 800ddca:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 800ddcc:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800ddd0:	f5a3 72f8 	sub.w	r2, r3, #496	; 0x1f0
 800ddd4:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800ddd8:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800dddc:	6812      	ldr	r2, [r2, #0]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	429a      	cmp	r2, r3
 800dde2:	dd0a      	ble.n	800ddfa <arm_nn_mat_mult_kernel_s8_s16+0x97a>
        result++;
 800dde4:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800dde8:	f5a3 72f4 	sub.w	r2, r3, #488	; 0x1e8
 800ddec:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800ddf0:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	3301      	adds	r3, #1
 800ddf8:	6013      	str	r3, [r2, #0]
    return result;
 800ddfa:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800ddfe:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800de02:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800de04:	bf00      	nop
 800de06:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
        ch_0_out_0 += out_offset;
 800de0a:	f8d7 2400 	ldr.w	r2, [r7, #1024]	; 0x400
 800de0e:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 800de12:	4413      	add	r3, r2
 800de14:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
        ch_0_out_0 = MAX(ch_0_out_0, activation_min);
 800de18:	f9b7 2440 	ldrsh.w	r2, [r7, #1088]	; 0x440
 800de1c:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 800de20:	4293      	cmp	r3, r2
 800de22:	bfb8      	it	lt
 800de24:	4613      	movlt	r3, r2
 800de26:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
        ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 800de2a:	f9b7 2444 	ldrsh.w	r2, [r7, #1092]	; 0x444
 800de2e:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 800de32:	4293      	cmp	r3, r2
 800de34:	bfa8      	it	ge
 800de36:	4613      	movge	r3, r2
 800de38:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
        *out_0++ = (int8_t)ch_0_out_0;
 800de3c:	f8d7 2454 	ldr.w	r2, [r7, #1108]	; 0x454
 800de40:	1c53      	adds	r3, r2, #1
 800de42:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
 800de46:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 800de4a:	b25b      	sxtb	r3, r3
 800de4c:	7013      	strb	r3, [r2, #0]

        ch_0_out_1 = arm_nn_requantize(ch_0_out_1, *out_mult, *out_shift);
 800de4e:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 800de52:	6818      	ldr	r0, [r3, #0]
 800de54:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800de58:	f5a3 735c 	sub.w	r3, r3, #880	; 0x370
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	6819      	ldr	r1, [r3, #0]
 800de60:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800de64:	f5a3 72cc 	sub.w	r2, r3, #408	; 0x198
 800de68:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 800de6c:	6013      	str	r3, [r2, #0]
 800de6e:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800de72:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800de76:	6018      	str	r0, [r3, #0]
 800de78:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800de7c:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800de80:	6019      	str	r1, [r3, #0]
 800de82:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800de86:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 800de90:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800de94:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	fa03 f202 	lsl.w	r2, r3, r2
 800de9e:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800dea2:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 800dea6:	601a      	str	r2, [r3, #0]
 800dea8:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800deac:	f5a3 72d4 	sub.w	r2, r3, #424	; 0x1a8
 800deb0:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800deb4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	6013      	str	r3, [r2, #0]
    int32_t result = 0;
 800debc:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800dec0:	f5a3 72d6 	sub.w	r2, r3, #428	; 0x1ac
 800dec4:	2300      	movs	r3, #0
 800dec6:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 800dec8:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800decc:	f5a3 723a 	sub.w	r2, r3, #744	; 0x2e8
 800ded0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ded4:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 800ded6:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800deda:	f5a3 723a 	sub.w	r2, r3, #744	; 0x2e8
 800dede:	2300      	movs	r3, #0
 800dee0:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (int64_t)m1 * m2;
 800dee2:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 800dee6:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800deea:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	17da      	asrs	r2, r3, #31
 800def2:	67bb      	str	r3, [r7, #120]	; 0x78
 800def4:	67fa      	str	r2, [r7, #124]	; 0x7c
 800def6:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800defa:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	17da      	asrs	r2, r3, #31
 800df02:	673b      	str	r3, [r7, #112]	; 0x70
 800df04:	677a      	str	r2, [r7, #116]	; 0x74
 800df06:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800df08:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800df0a:	fb02 f203 	mul.w	r2, r2, r3
 800df0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800df10:	6fbc      	ldr	r4, [r7, #120]	; 0x78
 800df12:	fb04 f303 	mul.w	r3, r4, r3
 800df16:	4413      	add	r3, r2
 800df18:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800df1a:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 800df1c:	fba2 5604 	umull	r5, r6, r2, r4
 800df20:	4433      	add	r3, r6
 800df22:	461e      	mov	r6, r3
 800df24:	1943      	adds	r3, r0, r5
 800df26:	63bb      	str	r3, [r7, #56]	; 0x38
 800df28:	eb41 0306 	adc.w	r3, r1, r6
 800df2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800df2e:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800df32:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
    result = (int32_t)(mult.long_long >> 31);
 800df36:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 800df3a:	f04f 0000 	mov.w	r0, #0
 800df3e:	f04f 0100 	mov.w	r1, #0
 800df42:	0fd0      	lsrs	r0, r2, #31
 800df44:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800df48:	17d9      	asrs	r1, r3, #31
 800df4a:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800df4e:	f5a3 72d6 	sub.w	r2, r3, #428	; 0x1ac
 800df52:	4603      	mov	r3, r0
 800df54:	6013      	str	r3, [r2, #0]
    return result;
 800df56:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800df5a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800df5e:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800df60:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800df64:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	dc06      	bgt.n	800df7c <arm_nn_mat_mult_kernel_s8_s16+0xafc>
 800df6e:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800df72:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	425a      	negs	r2, r3
 800df7a:	e000      	b.n	800df7e <arm_nn_mat_mult_kernel_s8_s16+0xafe>
 800df7c:	2200      	movs	r2, #0
 800df7e:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800df82:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800df86:	6019      	str	r1, [r3, #0]
 800df88:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800df8c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800df90:	601a      	str	r2, [r3, #0]
    int32_t result = 0;
 800df92:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800df96:	f5a3 72dc 	sub.w	r2, r3, #440	; 0x1b8
 800df9a:	2300      	movs	r3, #0
 800df9c:	6013      	str	r3, [r2, #0]
    const int32_t remainder_mask = (1 << exponent) - 1;
 800df9e:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800dfa2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800dfa6:	2201      	movs	r2, #1
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	fa02 f103 	lsl.w	r1, r2, r3
 800dfae:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800dfb2:	f5a3 72de 	sub.w	r2, r3, #444	; 0x1bc
 800dfb6:	1e4b      	subs	r3, r1, #1
 800dfb8:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 800dfba:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800dfbe:	f5a3 71e0 	sub.w	r1, r3, #448	; 0x1c0
 800dfc2:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800dfc6:	f5a3 72d8 	sub.w	r2, r3, #432	; 0x1b0
 800dfca:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800dfce:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800dfd2:	6812      	ldr	r2, [r2, #0]
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	4013      	ands	r3, r2
 800dfd8:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 800dfda:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800dfde:	f5a3 71dc 	sub.w	r1, r3, #440	; 0x1b8
 800dfe2:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800dfe6:	f5a3 72d8 	sub.w	r2, r3, #432	; 0x1b0
 800dfea:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800dfee:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800dff2:	6812      	ldr	r2, [r2, #0]
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	fa42 f303 	asr.w	r3, r2, r3
 800dffa:	600b      	str	r3, [r1, #0]
    int32_t threshold = remainder_mask >> 1;
 800dffc:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e000:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 800e004:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e008:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	105b      	asrs	r3, r3, #1
 800e010:	6013      	str	r3, [r2, #0]
    if (result < 0)
 800e012:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e016:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	da0a      	bge.n	800e036 <arm_nn_mat_mult_kernel_s8_s16+0xbb6>
        threshold++;
 800e020:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e024:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 800e028:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e02c:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	3301      	adds	r3, #1
 800e034:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 800e036:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e03a:	f5a3 72e0 	sub.w	r2, r3, #448	; 0x1c0
 800e03e:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e042:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800e046:	6812      	ldr	r2, [r2, #0]
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	429a      	cmp	r2, r3
 800e04c:	dd0a      	ble.n	800e064 <arm_nn_mat_mult_kernel_s8_s16+0xbe4>
        result++;
 800e04e:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e052:	f5a3 72dc 	sub.w	r2, r3, #440	; 0x1b8
 800e056:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e05a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	3301      	adds	r3, #1
 800e062:	6013      	str	r3, [r2, #0]
    return result;
 800e064:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e068:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800e06c:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800e06e:	bf00      	nop
 800e070:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
        ch_0_out_1 += out_offset;
 800e074:	f8d7 23fc 	ldr.w	r2, [r7, #1020]	; 0x3fc
 800e078:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 800e07c:	4413      	add	r3, r2
 800e07e:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
        ch_0_out_1 = MAX(ch_0_out_1, activation_min);
 800e082:	f9b7 2440 	ldrsh.w	r2, [r7, #1088]	; 0x440
 800e086:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 800e08a:	4293      	cmp	r3, r2
 800e08c:	bfb8      	it	lt
 800e08e:	4613      	movlt	r3, r2
 800e090:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
        ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 800e094:	f9b7 2444 	ldrsh.w	r2, [r7, #1092]	; 0x444
 800e098:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 800e09c:	4293      	cmp	r3, r2
 800e09e:	bfa8      	it	ge
 800e0a0:	4613      	movge	r3, r2
 800e0a2:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
        *out_1++ = (int8_t)ch_0_out_1;
 800e0a6:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 800e0aa:	1c53      	adds	r3, r2, #1
 800e0ac:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
 800e0b0:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 800e0b4:	b25b      	sxtb	r3, r3
 800e0b6:	7013      	strb	r3, [r2, #0]
        out_mult++;
 800e0b8:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 800e0bc:	3304      	adds	r3, #4
 800e0be:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
        out_shift++;
 800e0c2:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e0c6:	f5a3 725c 	sub.w	r2, r3, #880	; 0x370
 800e0ca:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e0ce:	f5a3 735c 	sub.w	r3, r3, #880	; 0x370
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	3304      	adds	r3, #4
 800e0d6:	6013      	str	r3, [r2, #0]

        ch_1_out_0 = arm_nn_requantize(ch_1_out_0, *out_mult, *out_shift);
 800e0d8:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 800e0dc:	6818      	ldr	r0, [r3, #0]
 800e0de:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e0e2:	f5a3 735c 	sub.w	r3, r3, #880	; 0x370
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	6819      	ldr	r1, [r3, #0]
 800e0ea:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e0ee:	f5a3 72b4 	sub.w	r2, r3, #360	; 0x168
 800e0f2:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 800e0f6:	6013      	str	r3, [r2, #0]
 800e0f8:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e0fc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800e100:	6018      	str	r0, [r3, #0]
 800e102:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e106:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800e10a:	6019      	str	r1, [r3, #0]
 800e10c:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e110:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 800e11a:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e11e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	fa03 f202 	lsl.w	r2, r3, r2
 800e128:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e12c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800e130:	601a      	str	r2, [r3, #0]
 800e132:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e136:	f5a3 72bc 	sub.w	r2, r3, #376	; 0x178
 800e13a:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e13e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	6013      	str	r3, [r2, #0]
    int32_t result = 0;
 800e146:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e14a:	f5a3 72be 	sub.w	r2, r3, #380	; 0x17c
 800e14e:	2300      	movs	r3, #0
 800e150:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 800e152:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e156:	f5a3 723c 	sub.w	r2, r3, #752	; 0x2f0
 800e15a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e15e:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 800e160:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e164:	f5a3 723c 	sub.w	r2, r3, #752	; 0x2f0
 800e168:	2300      	movs	r3, #0
 800e16a:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (int64_t)m1 * m2;
 800e16c:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800e170:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e174:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	17da      	asrs	r2, r3, #31
 800e17c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800e180:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800e184:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e188:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	17da      	asrs	r2, r3, #31
 800e190:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e194:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800e198:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e19c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e1a0:	fb02 f203 	mul.w	r2, r2, r3
 800e1a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e1a8:	f8d7 4088 	ldr.w	r4, [r7, #136]	; 0x88
 800e1ac:	fb04 f303 	mul.w	r3, r4, r3
 800e1b0:	4413      	add	r3, r2
 800e1b2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800e1b6:	f8d7 4080 	ldr.w	r4, [r7, #128]	; 0x80
 800e1ba:	fba2 ab04 	umull	sl, fp, r2, r4
 800e1be:	445b      	add	r3, fp
 800e1c0:	469b      	mov	fp, r3
 800e1c2:	eb10 030a 	adds.w	r3, r0, sl
 800e1c6:	643b      	str	r3, [r7, #64]	; 0x40
 800e1c8:	eb41 030b 	adc.w	r3, r1, fp
 800e1cc:	647b      	str	r3, [r7, #68]	; 0x44
 800e1ce:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800e1d2:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
    result = (int32_t)(mult.long_long >> 31);
 800e1d6:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800e1da:	f04f 0000 	mov.w	r0, #0
 800e1de:	f04f 0100 	mov.w	r1, #0
 800e1e2:	0fd0      	lsrs	r0, r2, #31
 800e1e4:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800e1e8:	17d9      	asrs	r1, r3, #31
 800e1ea:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e1ee:	f5a3 72be 	sub.w	r2, r3, #380	; 0x17c
 800e1f2:	4603      	mov	r3, r0
 800e1f4:	6013      	str	r3, [r2, #0]
    return result;
 800e1f6:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e1fa:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800e1fe:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800e200:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e204:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	dc06      	bgt.n	800e21c <arm_nn_mat_mult_kernel_s8_s16+0xd9c>
 800e20e:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e212:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	425a      	negs	r2, r3
 800e21a:	e000      	b.n	800e21e <arm_nn_mat_mult_kernel_s8_s16+0xd9e>
 800e21c:	2200      	movs	r2, #0
 800e21e:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e222:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800e226:	6019      	str	r1, [r3, #0]
 800e228:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e22c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800e230:	601a      	str	r2, [r3, #0]
    int32_t result = 0;
 800e232:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e236:	f5a3 72c4 	sub.w	r2, r3, #392	; 0x188
 800e23a:	2300      	movs	r3, #0
 800e23c:	6013      	str	r3, [r2, #0]
    const int32_t remainder_mask = (1 << exponent) - 1;
 800e23e:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e242:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800e246:	2201      	movs	r2, #1
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	fa02 f103 	lsl.w	r1, r2, r3
 800e24e:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e252:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 800e256:	1e4b      	subs	r3, r1, #1
 800e258:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 800e25a:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e25e:	f5a3 71c8 	sub.w	r1, r3, #400	; 0x190
 800e262:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e266:	f5a3 72c0 	sub.w	r2, r3, #384	; 0x180
 800e26a:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e26e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800e272:	6812      	ldr	r2, [r2, #0]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	4013      	ands	r3, r2
 800e278:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 800e27a:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e27e:	f5a3 71c4 	sub.w	r1, r3, #392	; 0x188
 800e282:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e286:	f5a3 72c0 	sub.w	r2, r3, #384	; 0x180
 800e28a:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e28e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800e292:	6812      	ldr	r2, [r2, #0]
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	fa42 f303 	asr.w	r3, r2, r3
 800e29a:	600b      	str	r3, [r1, #0]
    int32_t threshold = remainder_mask >> 1;
 800e29c:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e2a0:	f5a3 72ca 	sub.w	r2, r3, #404	; 0x194
 800e2a4:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e2a8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	105b      	asrs	r3, r3, #1
 800e2b0:	6013      	str	r3, [r2, #0]
    if (result < 0)
 800e2b2:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e2b6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	da0a      	bge.n	800e2d6 <arm_nn_mat_mult_kernel_s8_s16+0xe56>
        threshold++;
 800e2c0:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e2c4:	f5a3 72ca 	sub.w	r2, r3, #404	; 0x194
 800e2c8:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e2cc:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	3301      	adds	r3, #1
 800e2d4:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 800e2d6:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e2da:	f5a3 72c8 	sub.w	r2, r3, #400	; 0x190
 800e2de:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e2e2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800e2e6:	6812      	ldr	r2, [r2, #0]
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	429a      	cmp	r2, r3
 800e2ec:	dd0a      	ble.n	800e304 <arm_nn_mat_mult_kernel_s8_s16+0xe84>
        result++;
 800e2ee:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e2f2:	f5a3 72c4 	sub.w	r2, r3, #392	; 0x188
 800e2f6:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e2fa:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	3301      	adds	r3, #1
 800e302:	6013      	str	r3, [r2, #0]
    return result;
 800e304:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e308:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800e30c:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800e30e:	bf00      	nop
 800e310:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
        ch_1_out_0 += out_offset;
 800e314:	f8d7 23f8 	ldr.w	r2, [r7, #1016]	; 0x3f8
 800e318:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 800e31c:	4413      	add	r3, r2
 800e31e:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
        ch_1_out_0 = MAX(ch_1_out_0, activation_min);
 800e322:	f9b7 2440 	ldrsh.w	r2, [r7, #1088]	; 0x440
 800e326:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 800e32a:	4293      	cmp	r3, r2
 800e32c:	bfb8      	it	lt
 800e32e:	4613      	movlt	r3, r2
 800e330:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
        ch_1_out_0 = MIN(ch_1_out_0, activation_max);
 800e334:	f9b7 2444 	ldrsh.w	r2, [r7, #1092]	; 0x444
 800e338:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 800e33c:	4293      	cmp	r3, r2
 800e33e:	bfa8      	it	ge
 800e340:	4613      	movge	r3, r2
 800e342:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
        *out_0++ = (int8_t)ch_1_out_0;
 800e346:	f8d7 2454 	ldr.w	r2, [r7, #1108]	; 0x454
 800e34a:	1c53      	adds	r3, r2, #1
 800e34c:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
 800e350:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 800e354:	b25b      	sxtb	r3, r3
 800e356:	7013      	strb	r3, [r2, #0]

        ch_1_out_1 = arm_nn_requantize(ch_1_out_1, *out_mult, *out_shift);
 800e358:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 800e35c:	6818      	ldr	r0, [r3, #0]
 800e35e:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e362:	f5a3 735c 	sub.w	r3, r3, #880	; 0x370
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	6819      	ldr	r1, [r3, #0]
 800e36a:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e36e:	f5a3 729c 	sub.w	r2, r3, #312	; 0x138
 800e372:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 800e376:	6013      	str	r3, [r2, #0]
 800e378:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e37c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800e380:	6018      	str	r0, [r3, #0]
 800e382:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e386:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800e38a:	6019      	str	r1, [r3, #0]
 800e38c:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e390:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 800e39a:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e39e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	fa03 f202 	lsl.w	r2, r3, r2
 800e3a8:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e3ac:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800e3b0:	601a      	str	r2, [r3, #0]
 800e3b2:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e3b6:	f5a3 72a4 	sub.w	r2, r3, #328	; 0x148
 800e3ba:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e3be:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	6013      	str	r3, [r2, #0]
    int32_t result = 0;
 800e3c6:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e3ca:	f5a3 72a6 	sub.w	r2, r3, #332	; 0x14c
 800e3ce:	2300      	movs	r3, #0
 800e3d0:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 800e3d2:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e3d6:	f5a3 723e 	sub.w	r2, r3, #760	; 0x2f8
 800e3da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e3de:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 800e3e0:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e3e4:	f5a3 723e 	sub.w	r2, r3, #760	; 0x2f8
 800e3e8:	2300      	movs	r3, #0
 800e3ea:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (int64_t)m1 * m2;
 800e3ec:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 800e3f0:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e3f4:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	17da      	asrs	r2, r3, #31
 800e3fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800e400:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800e404:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e408:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	17da      	asrs	r2, r3, #31
 800e410:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800e414:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800e418:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e41c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800e420:	fb02 f203 	mul.w	r2, r2, r3
 800e424:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e428:	f8d7 4098 	ldr.w	r4, [r7, #152]	; 0x98
 800e42c:	fb04 f303 	mul.w	r3, r4, r3
 800e430:	4413      	add	r3, r2
 800e432:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800e436:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 800e43a:	fba2 8904 	umull	r8, r9, r2, r4
 800e43e:	444b      	add	r3, r9
 800e440:	4699      	mov	r9, r3
 800e442:	eb10 0308 	adds.w	r3, r0, r8
 800e446:	64bb      	str	r3, [r7, #72]	; 0x48
 800e448:	eb41 0309 	adc.w	r3, r1, r9
 800e44c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e44e:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800e452:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
    result = (int32_t)(mult.long_long >> 31);
 800e456:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800e45a:	f04f 0000 	mov.w	r0, #0
 800e45e:	f04f 0100 	mov.w	r1, #0
 800e462:	0fd0      	lsrs	r0, r2, #31
 800e464:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800e468:	17d9      	asrs	r1, r3, #31
 800e46a:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e46e:	f5a3 72a6 	sub.w	r2, r3, #332	; 0x14c
 800e472:	4603      	mov	r3, r0
 800e474:	6013      	str	r3, [r2, #0]
    return result;
 800e476:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e47a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800e47e:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800e480:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e484:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	dc06      	bgt.n	800e49c <arm_nn_mat_mult_kernel_s8_s16+0x101c>
 800e48e:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e492:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	425a      	negs	r2, r3
 800e49a:	e000      	b.n	800e49e <arm_nn_mat_mult_kernel_s8_s16+0x101e>
 800e49c:	2200      	movs	r2, #0
 800e49e:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e4a2:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800e4a6:	6019      	str	r1, [r3, #0]
 800e4a8:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e4ac:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800e4b0:	601a      	str	r2, [r3, #0]
    int32_t result = 0;
 800e4b2:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e4b6:	f5a3 72ac 	sub.w	r2, r3, #344	; 0x158
 800e4ba:	2300      	movs	r3, #0
 800e4bc:	6013      	str	r3, [r2, #0]
    const int32_t remainder_mask = (1 << exponent) - 1;
 800e4be:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e4c2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800e4c6:	2201      	movs	r2, #1
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	fa02 f103 	lsl.w	r1, r2, r3
 800e4ce:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e4d2:	f5a3 72ae 	sub.w	r2, r3, #348	; 0x15c
 800e4d6:	1e4b      	subs	r3, r1, #1
 800e4d8:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 800e4da:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e4de:	f5a3 71b0 	sub.w	r1, r3, #352	; 0x160
 800e4e2:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e4e6:	f5a3 72a8 	sub.w	r2, r3, #336	; 0x150
 800e4ea:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e4ee:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800e4f2:	6812      	ldr	r2, [r2, #0]
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	4013      	ands	r3, r2
 800e4f8:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 800e4fa:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e4fe:	f5a3 71ac 	sub.w	r1, r3, #344	; 0x158
 800e502:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e506:	f5a3 72a8 	sub.w	r2, r3, #336	; 0x150
 800e50a:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e50e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800e512:	6812      	ldr	r2, [r2, #0]
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	fa42 f303 	asr.w	r3, r2, r3
 800e51a:	600b      	str	r3, [r1, #0]
    int32_t threshold = remainder_mask >> 1;
 800e51c:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e520:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 800e524:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e528:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	105b      	asrs	r3, r3, #1
 800e530:	6013      	str	r3, [r2, #0]
    if (result < 0)
 800e532:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e536:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	da0a      	bge.n	800e556 <arm_nn_mat_mult_kernel_s8_s16+0x10d6>
        threshold++;
 800e540:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e544:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 800e548:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e54c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	3301      	adds	r3, #1
 800e554:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 800e556:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e55a:	f5a3 72b0 	sub.w	r2, r3, #352	; 0x160
 800e55e:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e562:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800e566:	6812      	ldr	r2, [r2, #0]
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	429a      	cmp	r2, r3
 800e56c:	dd0a      	ble.n	800e584 <arm_nn_mat_mult_kernel_s8_s16+0x1104>
        result++;
 800e56e:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e572:	f5a3 72ac 	sub.w	r2, r3, #344	; 0x158
 800e576:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e57a:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	3301      	adds	r3, #1
 800e582:	6013      	str	r3, [r2, #0]
    return result;
 800e584:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e588:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800e58c:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800e58e:	bf00      	nop
 800e590:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
        ch_1_out_1 += out_offset;
 800e594:	f8d7 23f4 	ldr.w	r2, [r7, #1012]	; 0x3f4
 800e598:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 800e59c:	4413      	add	r3, r2
 800e59e:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
        ch_1_out_1 = MAX(ch_1_out_1, activation_min);
 800e5a2:	f9b7 2440 	ldrsh.w	r2, [r7, #1088]	; 0x440
 800e5a6:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 800e5aa:	4293      	cmp	r3, r2
 800e5ac:	bfb8      	it	lt
 800e5ae:	4613      	movlt	r3, r2
 800e5b0:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
        ch_1_out_1 = MIN(ch_1_out_1, activation_max);
 800e5b4:	f9b7 2444 	ldrsh.w	r2, [r7, #1092]	; 0x444
 800e5b8:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 800e5bc:	4293      	cmp	r3, r2
 800e5be:	bfa8      	it	ge
 800e5c0:	4613      	movge	r3, r2
 800e5c2:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
        *out_1++ = (int8_t)ch_1_out_1;
 800e5c6:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 800e5ca:	1c53      	adds	r3, r2, #1
 800e5cc:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
 800e5d0:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 800e5d4:	b25b      	sxtb	r3, r3
 800e5d6:	7013      	strb	r3, [r2, #0]
        out_mult++;
 800e5d8:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 800e5dc:	3304      	adds	r3, #4
 800e5de:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
        out_shift++;
 800e5e2:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e5e6:	f5a3 725c 	sub.w	r2, r3, #880	; 0x370
 800e5ea:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e5ee:	f5a3 735c 	sub.w	r3, r3, #880	; 0x370
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	3304      	adds	r3, #4
 800e5f6:	6013      	str	r3, [r2, #0]

        /* skip row */
        ip_a0 += num_col_a;
 800e5f8:	f8d7 2448 	ldr.w	r2, [r7, #1096]	; 0x448
 800e5fc:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 800e600:	4413      	add	r3, r2
 800e602:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
        row_count--;
 800e606:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	; 0x40e
 800e60a:	3b01      	subs	r3, #1
 800e60c:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
    while (row_count)
 800e610:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	; 0x40e
 800e614:	2b00      	cmp	r3, #0
 800e616:	f47e af6d 	bne.w	800d4f4 <arm_nn_mat_mult_kernel_s8_s16+0x74>
    }

    /* compute the last odd numbered row if any */
    if (output_ch & 0x1)
 800e61a:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e61e:	f2a3 336a 	subw	r3, r3, #874	; 0x36a
 800e622:	881b      	ldrh	r3, [r3, #0]
 800e624:	f003 0301 	and.w	r3, r3, #1
 800e628:	2b00      	cmp	r3, #0
 800e62a:	f000 854a 	beq.w	800f0c2 <arm_nn_mat_mult_kernel_s8_s16+0x1c42>
    {
        /* setup pointers for B */
        const int16_t *ip_b0 = input_b;
 800e62e:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e632:	f5a3 724b 	sub.w	r2, r3, #812	; 0x32c
 800e636:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e63a:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	6013      	str	r3, [r2, #0]
        const int16_t *ip_b1 = ip_b0 + aligned_num_col_a;
 800e642:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e646:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 800e64a:	681a      	ldr	r2, [r3, #0]
 800e64c:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 800e650:	005b      	lsls	r3, r3, #1
 800e652:	441a      	add	r2, r3
 800e654:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e658:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 800e65c:	601a      	str	r2, [r3, #0]

        int32_t ch_0_out_0 = 0;
 800e65e:	2300      	movs	r3, #0
 800e660:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
        int32_t ch_0_out_1 = 0;
 800e664:	2300      	movs	r3, #0
 800e666:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8

        /* load the bias */
        if (bias)
 800e66a:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d00c      	beq.n	800e68c <arm_nn_mat_mult_kernel_s8_s16+0x120c>
        {
            ch_0_out_0 = *bias;
 800e672:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
            ch_0_out_1 = *bias++;
 800e67c:	f8d7 2410 	ldr.w	r2, [r7, #1040]	; 0x410
 800e680:	1d13      	adds	r3, r2, #4
 800e682:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
 800e686:	6813      	ldr	r3, [r2, #0]
 800e688:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8
        }

    #if defined(ARM_MATH_DSP)
        int32_t col_count = num_col_a >> 2;
 800e68c:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 800e690:	109b      	asrs	r3, r3, #2
 800e692:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4
        while (col_count)
 800e696:	e236      	b.n	800eb06 <arm_nn_mat_mult_kernel_s8_s16+0x1686>
 800e698:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e69c:	f5a3 721b 	sub.w	r2, r3, #620	; 0x26c
 800e6a0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800e6a4:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q15, 4);
 800e6a6:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e6aa:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	461a      	mov	r2, r3
 800e6b6:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e6ba:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 800e6be:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 800e6c0:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e6c4:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	1d1a      	adds	r2, r3, #4
 800e6ce:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e6d2:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	601a      	str	r2, [r3, #0]
    return (val);
 800e6da:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e6de:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 800e6e2:	681b      	ldr	r3, [r3, #0]
        {
            int32_t a01, a02;
            int32_t b0 = arm_nn_read_q15x2_ia(&ip_b0);
 800e6e4:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
 800e6e8:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e6ec:	f5a3 721a 	sub.w	r2, r3, #616	; 0x268
 800e6f0:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800e6f4:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q15, 4);
 800e6f6:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e6fa:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	461a      	mov	r2, r3
 800e706:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e70a:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 800e70e:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 800e710:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e714:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	1d1a      	adds	r2, r3, #4
 800e71e:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e722:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	601a      	str	r2, [r3, #0]
    return (val);
 800e72a:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e72e:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 800e732:	681b      	ldr	r3, [r3, #0]
            int32_t b1 = arm_nn_read_q15x2_ia(&ip_b1);
 800e734:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
 800e738:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e73c:	f5a3 7255 	sub.w	r2, r3, #852	; 0x354
 800e740:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 800e744:	6013      	str	r3, [r2, #0]
 800e746:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e74a:	f5a3 7210 	sub.w	r2, r3, #576	; 0x240
 800e74e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800e752:	6013      	str	r3, [r2, #0]
 800e754:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e758:	f5a3 7211 	sub.w	r2, r3, #580	; 0x244
 800e75c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800e760:	6013      	str	r3, [r2, #0]
 800e762:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e766:	f5a3 7212 	sub.w	r2, r3, #584	; 0x248
 800e76a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800e76e:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_s8, 4);
 800e770:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e774:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	461a      	mov	r2, r3
 800e780:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e784:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 800e788:	601a      	str	r2, [r3, #0]
    *in_s8 += 4;
 800e78a:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e78e:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	1d1a      	adds	r2, r3, #4
 800e798:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e79c:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	601a      	str	r2, [r3, #0]
    return (val);
 800e7a4:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e7a8:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 800e7ac:	681a      	ldr	r2, [r3, #0]
    int32_t inA = arm_nn_read_s8x4_ia(&source);
 800e7ae:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e7b2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800e7b6:	601a      	str	r2, [r3, #0]
    *out2 = SXTB16(ROR((uint32_t)inA, 8));
 800e7b8:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e7bc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800e7c0:	681a      	ldr	r2, [r3, #0]
 800e7c2:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e7c6:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 800e7ca:	601a      	str	r2, [r3, #0]
 800e7cc:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e7d0:	f5a3 7215 	sub.w	r2, r3, #596	; 0x254
 800e7d4:	2308      	movs	r3, #8
 800e7d6:	6013      	str	r3, [r2, #0]
    op2 %= 32U;
 800e7d8:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e7dc:	f5a3 7215 	sub.w	r2, r3, #596	; 0x254
 800e7e0:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e7e4:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	f003 031f 	and.w	r3, r3, #31
 800e7ee:	6013      	str	r3, [r2, #0]
    if (op2 == 0U)
 800e7f0:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e7f4:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d105      	bne.n	800e80a <arm_nn_mat_mult_kernel_s8_s16+0x138a>
        return op1;
 800e7fe:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e802:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 800e806:	681a      	ldr	r2, [r3, #0]
 800e808:	e00a      	b.n	800e820 <arm_nn_mat_mult_kernel_s8_s16+0x13a0>
    return (op1 >> op2) | (op1 << (32U - op2));
 800e80a:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e80e:	f5a3 7214 	sub.w	r2, r3, #592	; 0x250
 800e812:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e816:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 800e81a:	6812      	ldr	r2, [r2, #0]
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	41da      	rors	r2, r3
 800e820:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e824:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800e828:	601a      	str	r2, [r3, #0]
    __ASM("sxtb16 %0, %1" : "=r"(result) : "r"(op1));
 800e82a:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e82e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	fa2f f283 	sxtb16	r2, r3
 800e838:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e83c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800e840:	601a      	str	r2, [r3, #0]
    return (result);
 800e842:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e846:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	461a      	mov	r2, r3
 800e84e:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e852:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	601a      	str	r2, [r3, #0]
    *out1 = SXTB16(inA);
 800e85a:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e85e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800e862:	681a      	ldr	r2, [r3, #0]
 800e864:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e868:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800e86c:	601a      	str	r2, [r3, #0]
    __ASM("sxtb16 %0, %1" : "=r"(result) : "r"(op1));
 800e86e:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e872:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	fa2f f283 	sxtb16	r2, r3
 800e87c:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e880:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800e884:	601a      	str	r2, [r3, #0]
    return (result);
 800e886:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e88a:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	461a      	mov	r2, r3
 800e892:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e896:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	601a      	str	r2, [r3, #0]
    return source;
 800e89e:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e8a2:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 800e8a6:	681b      	ldr	r3, [r3, #0]

            ip_a0 = read_and_pad_reordered(ip_a0, &a01, &a02);
 800e8a8:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408

            ch_0_out_0 = SMLAD(a01, b0, ch_0_out_0);
 800e8ac:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e8b0:	f5a3 7351 	sub.w	r3, r3, #836	; 0x344
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	4618      	mov	r0, r3
 800e8b8:	f8d7 23d8 	ldr.w	r2, [r7, #984]	; 0x3d8
 800e8bc:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	; 0x3ec
 800e8c0:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e8c4:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800e8c8:	6018      	str	r0, [r3, #0]
 800e8ca:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e8ce:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800e8d2:	601a      	str	r2, [r3, #0]
 800e8d4:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e8d8:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 800e8dc:	6019      	str	r1, [r3, #0]
    __ASM volatile("smlad %0, %1, %2, %3" : "=r"(result) : "r"(op1), "r"(op2), "r"(op3));
 800e8de:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e8e2:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800e8e6:	6819      	ldr	r1, [r3, #0]
 800e8e8:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e8ec:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800e8f0:	681a      	ldr	r2, [r3, #0]
 800e8f2:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e8f6:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	fb21 3202 	smlad	r2, r1, r2, r3
 800e900:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e904:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 800e908:	601a      	str	r2, [r3, #0]
    return (result);
 800e90a:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e90e:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
            ch_0_out_1 = SMLAD(a01, b1, ch_0_out_1);
 800e918:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e91c:	f5a3 7351 	sub.w	r3, r3, #836	; 0x344
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	4618      	mov	r0, r3
 800e924:	f8d7 23d4 	ldr.w	r2, [r7, #980]	; 0x3d4
 800e928:	f8d7 13e8 	ldr.w	r1, [r7, #1000]	; 0x3e8
 800e92c:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e930:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 800e934:	6018      	str	r0, [r3, #0]
 800e936:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e93a:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 800e93e:	601a      	str	r2, [r3, #0]
 800e940:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e944:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 800e948:	6019      	str	r1, [r3, #0]
    __ASM volatile("smlad %0, %1, %2, %3" : "=r"(result) : "r"(op1), "r"(op2), "r"(op3));
 800e94a:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e94e:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 800e952:	6819      	ldr	r1, [r3, #0]
 800e954:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e958:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 800e95c:	681a      	ldr	r2, [r3, #0]
 800e95e:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e962:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	fb21 3202 	smlad	r2, r1, r2, r3
 800e96c:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e970:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 800e974:	601a      	str	r2, [r3, #0]
    return (result);
 800e976:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e97a:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8
 800e984:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e988:	f5a3 7207 	sub.w	r2, r3, #540	; 0x21c
 800e98c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800e990:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q15, 4);
 800e992:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e996:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	461a      	mov	r2, r3
 800e9a2:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e9a6:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 800e9aa:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 800e9ac:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e9b0:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	1d1a      	adds	r2, r3, #4
 800e9ba:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e9be:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	601a      	str	r2, [r3, #0]
    return (val);
 800e9c6:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e9ca:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 800e9ce:	681b      	ldr	r3, [r3, #0]

            b0 = arm_nn_read_q15x2_ia(&ip_b0);
 800e9d0:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
 800e9d4:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e9d8:	f5a3 7206 	sub.w	r2, r3, #536	; 0x218
 800e9dc:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800e9e0:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q15, 4);
 800e9e2:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e9e6:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	461a      	mov	r2, r3
 800e9f2:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800e9f6:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 800e9fa:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 800e9fc:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800ea00:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	1d1a      	adds	r2, r3, #4
 800ea0a:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800ea0e:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	601a      	str	r2, [r3, #0]
    return (val);
 800ea16:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800ea1a:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 800ea1e:	681b      	ldr	r3, [r3, #0]
            b1 = arm_nn_read_q15x2_ia(&ip_b1);
 800ea20:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
            ch_0_out_0 = SMLAD(a02, b0, ch_0_out_0);
 800ea24:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800ea28:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	4618      	mov	r0, r3
 800ea30:	f8d7 23d8 	ldr.w	r2, [r7, #984]	; 0x3d8
 800ea34:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	; 0x3ec
 800ea38:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800ea3c:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 800ea40:	6018      	str	r0, [r3, #0]
 800ea42:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800ea46:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800ea4a:	601a      	str	r2, [r3, #0]
 800ea4c:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800ea50:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800ea54:	6019      	str	r1, [r3, #0]
    __ASM volatile("smlad %0, %1, %2, %3" : "=r"(result) : "r"(op1), "r"(op2), "r"(op3));
 800ea56:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800ea5a:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 800ea5e:	6819      	ldr	r1, [r3, #0]
 800ea60:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800ea64:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800ea68:	681a      	ldr	r2, [r3, #0]
 800ea6a:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800ea6e:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	fb21 3202 	smlad	r2, r1, r2, r3
 800ea78:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800ea7c:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800ea80:	601a      	str	r2, [r3, #0]
    return (result);
 800ea82:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800ea86:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
            ch_0_out_1 = SMLAD(a02, b1, ch_0_out_1);
 800ea90:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800ea94:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	4618      	mov	r0, r3
 800ea9c:	f8d7 23d4 	ldr.w	r2, [r7, #980]	; 0x3d4
 800eaa0:	f8d7 13e8 	ldr.w	r1, [r7, #1000]	; 0x3e8
 800eaa4:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800eaa8:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800eaac:	6018      	str	r0, [r3, #0]
 800eaae:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800eab2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800eab6:	601a      	str	r2, [r3, #0]
 800eab8:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800eabc:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 800eac0:	6019      	str	r1, [r3, #0]
    __ASM volatile("smlad %0, %1, %2, %3" : "=r"(result) : "r"(op1), "r"(op2), "r"(op3));
 800eac2:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800eac6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800eaca:	6819      	ldr	r1, [r3, #0]
 800eacc:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800ead0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800ead4:	681a      	ldr	r2, [r3, #0]
 800ead6:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800eada:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	fb21 3202 	smlad	r2, r1, r2, r3
 800eae4:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800eae8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800eaec:	601a      	str	r2, [r3, #0]
    return (result);
 800eaee:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800eaf2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8

            col_count--;
 800eafc:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 800eb00:	3b01      	subs	r3, #1
 800eb02:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4
        while (col_count)
 800eb06:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	f47f adc4 	bne.w	800e698 <arm_nn_mat_mult_kernel_s8_s16+0x1218>
        }
        col_count = num_col_a & 0x3;
 800eb10:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 800eb14:	f003 0303 	and.w	r3, r3, #3
 800eb18:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4
    #else
        int32_t col_count = num_col_a;
    #endif
        while (col_count)
 800eb1c:	e03e      	b.n	800eb9c <arm_nn_mat_mult_kernel_s8_s16+0x171c>
        {
            int8_t a0 = *ip_a0++;
 800eb1e:	f8d7 2408 	ldr.w	r2, [r7, #1032]	; 0x408
 800eb22:	1c53      	adds	r3, r2, #1
 800eb24:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
 800eb28:	7813      	ldrb	r3, [r2, #0]
 800eb2a:	f887 33e3 	strb.w	r3, [r7, #995]	; 0x3e3
            int16_t b0 = *ip_b0++;
 800eb2e:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800eb32:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 800eb36:	6819      	ldr	r1, [r3, #0]
 800eb38:	1c8a      	adds	r2, r1, #2
 800eb3a:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800eb3e:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 800eb42:	601a      	str	r2, [r3, #0]
 800eb44:	880b      	ldrh	r3, [r1, #0]
 800eb46:	f8a7 33e0 	strh.w	r3, [r7, #992]	; 0x3e0
            int16_t b1 = *ip_b1++;
 800eb4a:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800eb4e:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 800eb52:	6819      	ldr	r1, [r3, #0]
 800eb54:	1c8a      	adds	r2, r1, #2
 800eb56:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800eb5a:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 800eb5e:	601a      	str	r2, [r3, #0]
 800eb60:	880b      	ldrh	r3, [r1, #0]
 800eb62:	f8a7 33de 	strh.w	r3, [r7, #990]	; 0x3de

            ch_0_out_0 += a0 * b0;
 800eb66:	f997 23e3 	ldrsb.w	r2, [r7, #995]	; 0x3e3
 800eb6a:	f9b7 33e0 	ldrsh.w	r3, [r7, #992]	; 0x3e0
 800eb6e:	fb03 f202 	mul.w	r2, r3, r2
 800eb72:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 800eb76:	4413      	add	r3, r2
 800eb78:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
            ch_0_out_1 += a0 * b1;
 800eb7c:	f997 23e3 	ldrsb.w	r2, [r7, #995]	; 0x3e3
 800eb80:	f9b7 33de 	ldrsh.w	r3, [r7, #990]	; 0x3de
 800eb84:	fb03 f202 	mul.w	r2, r3, r2
 800eb88:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	; 0x3e8
 800eb8c:	4413      	add	r3, r2
 800eb8e:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8
            col_count--;
 800eb92:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 800eb96:	3b01      	subs	r3, #1
 800eb98:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4
        while (col_count)
 800eb9c:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d1bc      	bne.n	800eb1e <arm_nn_mat_mult_kernel_s8_s16+0x169e>
        }
        ch_0_out_0 = arm_nn_requantize(ch_0_out_0, *out_mult, *out_shift);
 800eba4:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 800eba8:	6818      	ldr	r0, [r3, #0]
 800ebaa:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800ebae:	f5a3 735c 	sub.w	r3, r3, #880	; 0x370
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	6819      	ldr	r1, [r3, #0]
 800ebb6:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800ebba:	f5a3 7228 	sub.w	r2, r3, #672	; 0x2a0
 800ebbe:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 800ebc2:	6013      	str	r3, [r2, #0]
 800ebc4:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800ebc8:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 800ebcc:	6018      	str	r0, [r3, #0]
 800ebce:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800ebd2:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 800ebd6:	6019      	str	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800ebd8:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800ebdc:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 800ebe6:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800ebea:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	fa03 f202 	lsl.w	r2, r3, r2
 800ebf4:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800ebf8:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 800ebfc:	601a      	str	r2, [r3, #0]
 800ebfe:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800ec02:	f5a3 722c 	sub.w	r2, r3, #688	; 0x2b0
 800ec06:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800ec0a:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	6013      	str	r3, [r2, #0]
    int32_t result = 0;
 800ec12:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800ec16:	f5a3 722d 	sub.w	r2, r3, #692	; 0x2b4
 800ec1a:	2300      	movs	r3, #0
 800ec1c:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 800ec1e:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800ec22:	f5a3 724e 	sub.w	r2, r3, #824	; 0x338
 800ec26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ec2a:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 800ec2c:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800ec30:	f5a3 724e 	sub.w	r2, r3, #824	; 0x338
 800ec34:	2300      	movs	r3, #0
 800ec36:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (int64_t)m1 * m2;
 800ec38:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800ec3c:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800ec40:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	17da      	asrs	r2, r3, #31
 800ec48:	613b      	str	r3, [r7, #16]
 800ec4a:	617a      	str	r2, [r7, #20]
 800ec4c:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800ec50:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	17da      	asrs	r2, r3, #31
 800ec58:	60bb      	str	r3, [r7, #8]
 800ec5a:	60fa      	str	r2, [r7, #12]
 800ec5c:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 800ec60:	4633      	mov	r3, r6
 800ec62:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800ec66:	4642      	mov	r2, r8
 800ec68:	fb02 f203 	mul.w	r2, r2, r3
 800ec6c:	464b      	mov	r3, r9
 800ec6e:	462c      	mov	r4, r5
 800ec70:	fb04 f303 	mul.w	r3, r4, r3
 800ec74:	4413      	add	r3, r2
 800ec76:	462a      	mov	r2, r5
 800ec78:	4644      	mov	r4, r8
 800ec7a:	fba2 4204 	umull	r4, r2, r2, r4
 800ec7e:	657a      	str	r2, [r7, #84]	; 0x54
 800ec80:	4622      	mov	r2, r4
 800ec82:	653a      	str	r2, [r7, #80]	; 0x50
 800ec84:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ec86:	4413      	add	r3, r2
 800ec88:	657b      	str	r3, [r7, #84]	; 0x54
 800ec8a:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800ec8e:	4623      	mov	r3, r4
 800ec90:	18c3      	adds	r3, r0, r3
 800ec92:	603b      	str	r3, [r7, #0]
 800ec94:	462b      	mov	r3, r5
 800ec96:	eb41 0303 	adc.w	r3, r1, r3
 800ec9a:	607b      	str	r3, [r7, #4]
 800ec9c:	e9d7 3400 	ldrd	r3, r4, [r7]
 800eca0:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
    result = (int32_t)(mult.long_long >> 31);
 800eca4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800eca8:	f04f 0200 	mov.w	r2, #0
 800ecac:	f04f 0300 	mov.w	r3, #0
 800ecb0:	0fc2      	lsrs	r2, r0, #31
 800ecb2:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800ecb6:	17cb      	asrs	r3, r1, #31
 800ecb8:	f507 6183 	add.w	r1, r7, #1048	; 0x418
 800ecbc:	f5a1 712d 	sub.w	r1, r1, #692	; 0x2b4
 800ecc0:	4613      	mov	r3, r2
 800ecc2:	600b      	str	r3, [r1, #0]
    return result;
 800ecc4:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800ecc8:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 800eccc:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800ecce:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800ecd2:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	dc06      	bgt.n	800ecea <arm_nn_mat_mult_kernel_s8_s16+0x186a>
 800ecdc:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800ece0:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	425b      	negs	r3, r3
 800ece8:	e000      	b.n	800ecec <arm_nn_mat_mult_kernel_s8_s16+0x186c>
 800ecea:	2300      	movs	r3, #0
 800ecec:	f507 6283 	add.w	r2, r7, #1048	; 0x418
 800ecf0:	f5a2 722e 	sub.w	r2, r2, #696	; 0x2b8
 800ecf4:	6011      	str	r1, [r2, #0]
 800ecf6:	f507 6283 	add.w	r2, r7, #1048	; 0x418
 800ecfa:	f5a2 722f 	sub.w	r2, r2, #700	; 0x2bc
 800ecfe:	6013      	str	r3, [r2, #0]
    int32_t result = 0;
 800ed00:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800ed04:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 800ed08:	2200      	movs	r2, #0
 800ed0a:	601a      	str	r2, [r3, #0]
    const int32_t remainder_mask = (1 << exponent) - 1;
 800ed0c:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800ed10:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 800ed14:	2201      	movs	r2, #1
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	409a      	lsls	r2, r3
 800ed1a:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800ed1e:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 800ed22:	3a01      	subs	r2, #1
 800ed24:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 800ed26:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800ed2a:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 800ed2e:	f507 6283 	add.w	r2, r7, #1048	; 0x418
 800ed32:	f5a2 712e 	sub.w	r1, r2, #696	; 0x2b8
 800ed36:	f507 6283 	add.w	r2, r7, #1048	; 0x418
 800ed3a:	f5a2 7231 	sub.w	r2, r2, #708	; 0x2c4
 800ed3e:	6809      	ldr	r1, [r1, #0]
 800ed40:	6812      	ldr	r2, [r2, #0]
 800ed42:	400a      	ands	r2, r1
 800ed44:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 800ed46:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800ed4a:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 800ed4e:	f507 6283 	add.w	r2, r7, #1048	; 0x418
 800ed52:	f5a2 712e 	sub.w	r1, r2, #696	; 0x2b8
 800ed56:	f507 6283 	add.w	r2, r7, #1048	; 0x418
 800ed5a:	f5a2 722f 	sub.w	r2, r2, #700	; 0x2bc
 800ed5e:	6809      	ldr	r1, [r1, #0]
 800ed60:	6812      	ldr	r2, [r2, #0]
 800ed62:	fa41 f202 	asr.w	r2, r1, r2
 800ed66:	601a      	str	r2, [r3, #0]
    int32_t threshold = remainder_mask >> 1;
 800ed68:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800ed6c:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 800ed70:	f507 6283 	add.w	r2, r7, #1048	; 0x418
 800ed74:	f5a2 7231 	sub.w	r2, r2, #708	; 0x2c4
 800ed78:	6812      	ldr	r2, [r2, #0]
 800ed7a:	1052      	asrs	r2, r2, #1
 800ed7c:	601a      	str	r2, [r3, #0]
    if (result < 0)
 800ed7e:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800ed82:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	da0a      	bge.n	800eda2 <arm_nn_mat_mult_kernel_s8_s16+0x1922>
        threshold++;
 800ed8c:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800ed90:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 800ed94:	f507 6283 	add.w	r2, r7, #1048	; 0x418
 800ed98:	f5a2 7233 	sub.w	r2, r2, #716	; 0x2cc
 800ed9c:	6812      	ldr	r2, [r2, #0]
 800ed9e:	3201      	adds	r2, #1
 800eda0:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 800eda2:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800eda6:	f5a3 7232 	sub.w	r2, r3, #712	; 0x2c8
 800edaa:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800edae:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 800edb2:	6812      	ldr	r2, [r2, #0]
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	429a      	cmp	r2, r3
 800edb8:	dd0a      	ble.n	800edd0 <arm_nn_mat_mult_kernel_s8_s16+0x1950>
        result++;
 800edba:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800edbe:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 800edc2:	f507 6283 	add.w	r2, r7, #1048	; 0x418
 800edc6:	f5a2 7230 	sub.w	r2, r2, #704	; 0x2c0
 800edca:	6812      	ldr	r2, [r2, #0]
 800edcc:	3201      	adds	r2, #1
 800edce:	601a      	str	r2, [r3, #0]
    return result;
 800edd0:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800edd4:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 800edd8:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800edda:	bf00      	nop
 800eddc:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
        ch_0_out_0 += out_offset;
 800ede0:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	; 0x3ec
 800ede4:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 800ede8:	4413      	add	r3, r2
 800edea:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
        ch_0_out_0 = MAX(ch_0_out_0, activation_min);
 800edee:	f9b7 3440 	ldrsh.w	r3, [r7, #1088]	; 0x440
 800edf2:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	; 0x3ec
 800edf6:	4293      	cmp	r3, r2
 800edf8:	bfb8      	it	lt
 800edfa:	4613      	movlt	r3, r2
 800edfc:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
        ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 800ee00:	f9b7 3444 	ldrsh.w	r3, [r7, #1092]	; 0x444
 800ee04:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	; 0x3ec
 800ee08:	4293      	cmp	r3, r2
 800ee0a:	bfa8      	it	ge
 800ee0c:	4613      	movge	r3, r2
 800ee0e:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
        *out_0++ = (int8_t)ch_0_out_0;
 800ee12:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 800ee16:	1c5a      	adds	r2, r3, #1
 800ee18:	f8c7 2454 	str.w	r2, [r7, #1108]	; 0x454
 800ee1c:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	; 0x3ec
 800ee20:	b252      	sxtb	r2, r2
 800ee22:	701a      	strb	r2, [r3, #0]

        ch_0_out_1 = arm_nn_requantize(ch_0_out_1, *out_mult, *out_shift);
 800ee24:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 800ee28:	6819      	ldr	r1, [r3, #0]
 800ee2a:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800ee2e:	f5a3 735c 	sub.w	r3, r3, #880	; 0x370
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	681a      	ldr	r2, [r3, #0]
 800ee36:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800ee3a:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 800ee3e:	f8d7 03e8 	ldr.w	r0, [r7, #1000]	; 0x3e8
 800ee42:	6018      	str	r0, [r3, #0]
 800ee44:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800ee48:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 800ee4c:	6019      	str	r1, [r3, #0]
 800ee4e:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800ee52:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 800ee56:	601a      	str	r2, [r3, #0]
 800ee58:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800ee5c:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ee66:	f507 6283 	add.w	r2, r7, #1048	; 0x418
 800ee6a:	f5a2 721c 	sub.w	r2, r2, #624	; 0x270
 800ee6e:	6812      	ldr	r2, [r2, #0]
 800ee70:	409a      	lsls	r2, r3
 800ee72:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800ee76:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 800ee7a:	601a      	str	r2, [r3, #0]
 800ee7c:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800ee80:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 800ee84:	f507 6283 	add.w	r2, r7, #1048	; 0x418
 800ee88:	f5a2 721d 	sub.w	r2, r2, #628	; 0x274
 800ee8c:	6812      	ldr	r2, [r2, #0]
 800ee8e:	601a      	str	r2, [r3, #0]
    int32_t result = 0;
 800ee90:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800ee94:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 800ee98:	2200      	movs	r2, #0
 800ee9a:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 800ee9c:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800eea0:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 800eea4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800eea8:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 800eeaa:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800eeae:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 800eeb2:	2200      	movs	r2, #0
 800eeb4:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (int64_t)m1 * m2;
 800eeb6:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 800eeba:	f507 6183 	add.w	r1, r7, #1048	; 0x418
 800eebe:	f5a1 711f 	sub.w	r1, r1, #636	; 0x27c
 800eec2:	6809      	ldr	r1, [r1, #0]
 800eec4:	17c8      	asrs	r0, r1, #31
 800eec6:	62b9      	str	r1, [r7, #40]	; 0x28
 800eec8:	62f8      	str	r0, [r7, #44]	; 0x2c
 800eeca:	f507 6183 	add.w	r1, r7, #1048	; 0x418
 800eece:	f5a1 7120 	sub.w	r1, r1, #640	; 0x280
 800eed2:	6809      	ldr	r1, [r1, #0]
 800eed4:	17c8      	asrs	r0, r1, #31
 800eed6:	6239      	str	r1, [r7, #32]
 800eed8:	6278      	str	r0, [r7, #36]	; 0x24
 800eeda:	e9d7 560a 	ldrd	r5, r6, [r7, #40]	; 0x28
 800eede:	4631      	mov	r1, r6
 800eee0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800eee4:	4640      	mov	r0, r8
 800eee6:	fb00 f001 	mul.w	r0, r0, r1
 800eeea:	4649      	mov	r1, r9
 800eeec:	462c      	mov	r4, r5
 800eeee:	fb04 f101 	mul.w	r1, r4, r1
 800eef2:	4401      	add	r1, r0
 800eef4:	4628      	mov	r0, r5
 800eef6:	4644      	mov	r4, r8
 800eef8:	fba0 4004 	umull	r4, r0, r0, r4
 800eefc:	65f8      	str	r0, [r7, #92]	; 0x5c
 800eefe:	4620      	mov	r0, r4
 800ef00:	65b8      	str	r0, [r7, #88]	; 0x58
 800ef02:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800ef04:	4401      	add	r1, r0
 800ef06:	65f9      	str	r1, [r7, #92]	; 0x5c
 800ef08:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800ef0c:	4621      	mov	r1, r4
 800ef0e:	1851      	adds	r1, r2, r1
 800ef10:	61b9      	str	r1, [r7, #24]
 800ef12:	4629      	mov	r1, r5
 800ef14:	eb43 0101 	adc.w	r1, r3, r1
 800ef18:	61f9      	str	r1, [r7, #28]
 800ef1a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800ef1e:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
    result = (int32_t)(mult.long_long >> 31);
 800ef22:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800ef26:	f04f 0200 	mov.w	r2, #0
 800ef2a:	f04f 0300 	mov.w	r3, #0
 800ef2e:	0fc2      	lsrs	r2, r0, #31
 800ef30:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800ef34:	17cb      	asrs	r3, r1, #31
 800ef36:	f507 6183 	add.w	r1, r7, #1048	; 0x418
 800ef3a:	f5a1 7121 	sub.w	r1, r1, #644	; 0x284
 800ef3e:	4613      	mov	r3, r2
 800ef40:	600b      	str	r3, [r1, #0]
    return result;
 800ef42:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800ef46:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 800ef4a:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800ef4c:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800ef50:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	dc06      	bgt.n	800ef68 <arm_nn_mat_mult_kernel_s8_s16+0x1ae8>
 800ef5a:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800ef5e:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	425b      	negs	r3, r3
 800ef66:	e000      	b.n	800ef6a <arm_nn_mat_mult_kernel_s8_s16+0x1aea>
 800ef68:	2300      	movs	r3, #0
 800ef6a:	f507 6283 	add.w	r2, r7, #1048	; 0x418
 800ef6e:	f5a2 7222 	sub.w	r2, r2, #648	; 0x288
 800ef72:	6011      	str	r1, [r2, #0]
 800ef74:	f507 6283 	add.w	r2, r7, #1048	; 0x418
 800ef78:	f5a2 7223 	sub.w	r2, r2, #652	; 0x28c
 800ef7c:	6013      	str	r3, [r2, #0]
    int32_t result = 0;
 800ef7e:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800ef82:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 800ef86:	2200      	movs	r2, #0
 800ef88:	601a      	str	r2, [r3, #0]
    const int32_t remainder_mask = (1 << exponent) - 1;
 800ef8a:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800ef8e:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 800ef92:	2201      	movs	r2, #1
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	409a      	lsls	r2, r3
 800ef98:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800ef9c:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 800efa0:	3a01      	subs	r2, #1
 800efa2:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 800efa4:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800efa8:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 800efac:	f507 6283 	add.w	r2, r7, #1048	; 0x418
 800efb0:	f5a2 7122 	sub.w	r1, r2, #648	; 0x288
 800efb4:	f507 6283 	add.w	r2, r7, #1048	; 0x418
 800efb8:	f5a2 7225 	sub.w	r2, r2, #660	; 0x294
 800efbc:	6809      	ldr	r1, [r1, #0]
 800efbe:	6812      	ldr	r2, [r2, #0]
 800efc0:	400a      	ands	r2, r1
 800efc2:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 800efc4:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800efc8:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 800efcc:	f507 6283 	add.w	r2, r7, #1048	; 0x418
 800efd0:	f5a2 7122 	sub.w	r1, r2, #648	; 0x288
 800efd4:	f507 6283 	add.w	r2, r7, #1048	; 0x418
 800efd8:	f5a2 7223 	sub.w	r2, r2, #652	; 0x28c
 800efdc:	6809      	ldr	r1, [r1, #0]
 800efde:	6812      	ldr	r2, [r2, #0]
 800efe0:	fa41 f202 	asr.w	r2, r1, r2
 800efe4:	601a      	str	r2, [r3, #0]
    int32_t threshold = remainder_mask >> 1;
 800efe6:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800efea:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 800efee:	f507 6283 	add.w	r2, r7, #1048	; 0x418
 800eff2:	f5a2 7225 	sub.w	r2, r2, #660	; 0x294
 800eff6:	6812      	ldr	r2, [r2, #0]
 800eff8:	1052      	asrs	r2, r2, #1
 800effa:	601a      	str	r2, [r3, #0]
    if (result < 0)
 800effc:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800f000:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	2b00      	cmp	r3, #0
 800f008:	da0a      	bge.n	800f020 <arm_nn_mat_mult_kernel_s8_s16+0x1ba0>
        threshold++;
 800f00a:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800f00e:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 800f012:	f507 6283 	add.w	r2, r7, #1048	; 0x418
 800f016:	f5a2 7227 	sub.w	r2, r2, #668	; 0x29c
 800f01a:	6812      	ldr	r2, [r2, #0]
 800f01c:	3201      	adds	r2, #1
 800f01e:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 800f020:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800f024:	f5a3 7226 	sub.w	r2, r3, #664	; 0x298
 800f028:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800f02c:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 800f030:	6812      	ldr	r2, [r2, #0]
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	429a      	cmp	r2, r3
 800f036:	dd0a      	ble.n	800f04e <arm_nn_mat_mult_kernel_s8_s16+0x1bce>
        result++;
 800f038:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800f03c:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 800f040:	f507 6283 	add.w	r2, r7, #1048	; 0x418
 800f044:	f5a2 7224 	sub.w	r2, r2, #656	; 0x290
 800f048:	6812      	ldr	r2, [r2, #0]
 800f04a:	3201      	adds	r2, #1
 800f04c:	601a      	str	r2, [r3, #0]
    return result;
 800f04e:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800f052:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 800f056:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800f058:	bf00      	nop
 800f05a:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8
        ch_0_out_1 += out_offset;
 800f05e:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 800f062:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 800f066:	4413      	add	r3, r2
 800f068:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8
        ch_0_out_1 = MAX(ch_0_out_1, activation_min);
 800f06c:	f9b7 3440 	ldrsh.w	r3, [r7, #1088]	; 0x440
 800f070:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 800f074:	4293      	cmp	r3, r2
 800f076:	bfb8      	it	lt
 800f078:	4613      	movlt	r3, r2
 800f07a:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8
        ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 800f07e:	f9b7 3444 	ldrsh.w	r3, [r7, #1092]	; 0x444
 800f082:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 800f086:	4293      	cmp	r3, r2
 800f088:	bfa8      	it	ge
 800f08a:	4613      	movge	r3, r2
 800f08c:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8
        *out_1++ = (int8_t)ch_0_out_1;
 800f090:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 800f094:	1c5a      	adds	r2, r3, #1
 800f096:	f8c7 2414 	str.w	r2, [r7, #1044]	; 0x414
 800f09a:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 800f09e:	b252      	sxtb	r2, r2
 800f0a0:	701a      	strb	r2, [r3, #0]
        out_mult++;
 800f0a2:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 800f0a6:	3304      	adds	r3, #4
 800f0a8:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
        out_shift++;
 800f0ac:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800f0b0:	f5a3 735c 	sub.w	r3, r3, #880	; 0x370
 800f0b4:	f507 6283 	add.w	r2, r7, #1048	; 0x418
 800f0b8:	f5a2 725c 	sub.w	r2, r2, #880	; 0x370
 800f0bc:	6812      	ldr	r2, [r2, #0]
 800f0be:	3204      	adds	r2, #4
 800f0c0:	601a      	str	r2, [r3, #0]
    }

    out_0 += output_ch;
 800f0c2:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800f0c6:	f2a3 336a 	subw	r3, r3, #874	; 0x36a
 800f0ca:	881b      	ldrh	r3, [r3, #0]
 800f0cc:	f8d7 2454 	ldr.w	r2, [r7, #1108]	; 0x454
 800f0d0:	4413      	add	r3, r2
 800f0d2:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454

    /* return the new output pointer with offset */
    return out_0;
 800f0d6:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
    (void)output_bias;
    (void)out_0;
    /* To be completed */
    return NULL;
#endif
}
 800f0da:	4618      	mov	r0, r3
 800f0dc:	f507 6783 	add.w	r7, r7, #1048	; 0x418
 800f0e0:	46bd      	mov	sp, r7
 800f0e2:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800f0e6:	4770      	bx	lr

0800f0e8 <arm_fully_connected_s16_get_buffer_size>:
 * @addtogroup GetBufferSizeFC
 * @{
 */

int32_t arm_fully_connected_s16_get_buffer_size(const cmsis_nn_dims *filter_dims)
{
 800f0e8:	b480      	push	{r7}
 800f0ea:	b083      	sub	sp, #12
 800f0ec:	af00      	add	r7, sp, #0
 800f0ee:	6078      	str	r0, [r7, #4]
    (void)filter_dims;
    return 0;
 800f0f0:	2300      	movs	r3, #0
}
 800f0f2:	4618      	mov	r0, r3
 800f0f4:	370c      	adds	r7, #12
 800f0f6:	46bd      	mov	sp, r7
 800f0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0fc:	4770      	bx	lr

0800f0fe <arm_fully_connected_s8_get_buffer_size_dsp>:
 * @addtogroup GetBufferSizeFC
 * @{
 */

int32_t arm_fully_connected_s8_get_buffer_size_dsp(const cmsis_nn_dims *filter_dims)
{
 800f0fe:	b480      	push	{r7}
 800f100:	b083      	sub	sp, #12
 800f102:	af00      	add	r7, sp, #0
 800f104:	6078      	str	r0, [r7, #4]
    (void)filter_dims;
    return 0;
 800f106:	2300      	movs	r3, #0
}
 800f108:	4618      	mov	r0, r3
 800f10a:	370c      	adds	r7, #12
 800f10c:	46bd      	mov	sp, r7
 800f10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f112:	4770      	bx	lr

0800f114 <arm_fully_connected_s8_get_buffer_size>:
{
    return filter_dims->c * sizeof(int32_t);
}

int32_t arm_fully_connected_s8_get_buffer_size(const cmsis_nn_dims *filter_dims)
{
 800f114:	b580      	push	{r7, lr}
 800f116:	b082      	sub	sp, #8
 800f118:	af00      	add	r7, sp, #0
 800f11a:	6078      	str	r0, [r7, #4]
#if defined(ARM_MATH_MVEI)
    return arm_fully_connected_s8_get_buffer_size_mve(filter_dims);
#else
    return arm_fully_connected_s8_get_buffer_size_dsp(filter_dims);
 800f11c:	6878      	ldr	r0, [r7, #4]
 800f11e:	f7ff ffee 	bl	800f0fe <arm_fully_connected_s8_get_buffer_size_dsp>
 800f122:	4603      	mov	r3, r0
#endif
}
 800f124:	4618      	mov	r0, r3
 800f126:	3708      	adds	r7, #8
 800f128:	46bd      	mov	sp, r7
 800f12a:	bd80      	pop	{r7, pc}

0800f12c <arm_fully_connected_s8>:
                                           const int8_t *kernel,
                                           const cmsis_nn_dims *bias_dims,
                                           const int32_t *bias,
                                           const cmsis_nn_dims *output_dims,
                                           int8_t *output)
{
 800f12c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f12e:	b093      	sub	sp, #76	; 0x4c
 800f130:	af0a      	add	r7, sp, #40	; 0x28
 800f132:	6178      	str	r0, [r7, #20]
 800f134:	6139      	str	r1, [r7, #16]
 800f136:	60fa      	str	r2, [r7, #12]
 800f138:	60bb      	str	r3, [r7, #8]
    (void)bias_dims;
    (void)fc_params->filter_offset;

    int32_t batch_cnt = input_dims->n;
 800f13a:	68bb      	ldr	r3, [r7, #8]
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	61fb      	str	r3, [r7, #28]
    {
        return (ARM_CMSIS_NN_ARG_ERROR);
    }
#endif

    const int32_t *kernel_sum = (const int32_t *) ctx->buf;
 800f140:	697b      	ldr	r3, [r7, #20]
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	61bb      	str	r3, [r7, #24]

    while (batch_cnt)
 800f146:	e034      	b.n	800f1b2 <arm_fully_connected_s8+0x86>
        arm_nn_vec_mat_mult_t_s8(input,
                                 kernel,
                                 kernel_sum,
                                 bias,
                                 output,
                                 fc_params->input_offset,
 800f148:	693b      	ldr	r3, [r7, #16]
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	607b      	str	r3, [r7, #4]
                                 fc_params->output_offset,
 800f14e:	693a      	ldr	r2, [r7, #16]
 800f150:	6892      	ldr	r2, [r2, #8]
                                 quant_params->multiplier,
 800f152:	68f9      	ldr	r1, [r7, #12]
 800f154:	6809      	ldr	r1, [r1, #0]
                                 quant_params->shift,
 800f156:	68f8      	ldr	r0, [r7, #12]
 800f158:	6840      	ldr	r0, [r0, #4]
                                 filter_dims->n, /* col_dim or accum_depth */
 800f15a:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 800f15c:	6824      	ldr	r4, [r4, #0]
                                 output_dims->c, /* row_dim or output_depth */
 800f15e:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
 800f160:	68ed      	ldr	r5, [r5, #12]
                                 fc_params->activation.min,
 800f162:	693e      	ldr	r6, [r7, #16]
 800f164:	68f6      	ldr	r6, [r6, #12]
                                 fc_params->activation.max,
 800f166:	693b      	ldr	r3, [r7, #16]
 800f168:	691b      	ldr	r3, [r3, #16]
 800f16a:	603b      	str	r3, [r7, #0]
        arm_nn_vec_mat_mult_t_s8(input,
 800f16c:	2301      	movs	r3, #1
 800f16e:	9309      	str	r3, [sp, #36]	; 0x24
 800f170:	683b      	ldr	r3, [r7, #0]
 800f172:	9308      	str	r3, [sp, #32]
 800f174:	9607      	str	r6, [sp, #28]
 800f176:	9506      	str	r5, [sp, #24]
 800f178:	9405      	str	r4, [sp, #20]
 800f17a:	9004      	str	r0, [sp, #16]
 800f17c:	9103      	str	r1, [sp, #12]
 800f17e:	9202      	str	r2, [sp, #8]
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	9301      	str	r3, [sp, #4]
 800f184:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f186:	9300      	str	r3, [sp, #0]
 800f188:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f18a:	69ba      	ldr	r2, [r7, #24]
 800f18c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f18e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f190:	f005 fdbf 	bl	8014d12 <arm_nn_vec_mat_mult_t_s8>
                                 1L);

        input += filter_dims->n;
 800f194:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	461a      	mov	r2, r3
 800f19a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f19c:	4413      	add	r3, r2
 800f19e:	63bb      	str	r3, [r7, #56]	; 0x38
        output += output_dims->c;
 800f1a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f1a2:	68db      	ldr	r3, [r3, #12]
 800f1a4:	461a      	mov	r2, r3
 800f1a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f1a8:	4413      	add	r3, r2
 800f1aa:	653b      	str	r3, [r7, #80]	; 0x50
        batch_cnt--;
 800f1ac:	69fb      	ldr	r3, [r7, #28]
 800f1ae:	3b01      	subs	r3, #1
 800f1b0:	61fb      	str	r3, [r7, #28]
    while (batch_cnt)
 800f1b2:	69fb      	ldr	r3, [r7, #28]
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d1c7      	bne.n	800f148 <arm_fully_connected_s8+0x1c>
    }
    return (ARM_CMSIS_NN_SUCCESS);
 800f1b8:	2300      	movs	r3, #0
}
 800f1ba:	4618      	mov	r0, r3
 800f1bc:	3724      	adds	r7, #36	; 0x24
 800f1be:	46bd      	mov	sp, r7
 800f1c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f1c2 <arm_vector_sum_s8>:
 */
arm_cmsis_nn_status arm_vector_sum_s8(int32_t *vector_sum_buf,
                                      const int32_t vector_cols,
                                      const int32_t vector_rows,
                                      const int8_t *vector_data)
{
 800f1c2:	b480      	push	{r7}
 800f1c4:	b085      	sub	sp, #20
 800f1c6:	af00      	add	r7, sp, #0
 800f1c8:	60f8      	str	r0, [r7, #12]
 800f1ca:	60b9      	str	r1, [r7, #8]
 800f1cc:	607a      	str	r2, [r7, #4]
 800f1ce:	603b      	str	r3, [r7, #0]
    (void)vector_sum_buf;
    (void)vector_rows;
    (void)vector_cols;
    (void)vector_data;

    return (ARM_CMSIS_NN_NO_IMPL_ERROR);
 800f1d0:	f06f 0301 	mvn.w	r3, #1
#endif
}
 800f1d4:	4618      	mov	r0, r3
 800f1d6:	3714      	adds	r7, #20
 800f1d8:	46bd      	mov	sp, r7
 800f1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1de:	4770      	bx	lr

0800f1e0 <arm_nn_mat_mult_nt_t_s8>:
                                            const int32_t lhs_offset,
                                            const int32_t dst_offset,
                                            const int32_t activation_min,
                                            const int32_t activation_max,
                                            const int32_t lhs_cols_offset)
{
 800f1e0:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800f1e4:	f5ad 6d4d 	sub.w	sp, sp, #3280	; 0xcd0
 800f1e8:	af00      	add	r7, sp, #0
 800f1ea:	f507 644d 	add.w	r4, r7, #3280	; 0xcd0
 800f1ee:	f6a4 34fc 	subw	r4, r4, #3068	; 0xbfc
 800f1f2:	6020      	str	r0, [r4, #0]
 800f1f4:	f507 604d 	add.w	r0, r7, #3280	; 0xcd0
 800f1f8:	f5a0 6040 	sub.w	r0, r0, #3072	; 0xc00
 800f1fc:	6001      	str	r1, [r0, #0]
 800f1fe:	f507 614d 	add.w	r1, r7, #3280	; 0xcd0
 800f202:	f6a1 4104 	subw	r1, r1, #3076	; 0xc04
 800f206:	600a      	str	r2, [r1, #0]
 800f208:	f507 624d 	add.w	r2, r7, #3280	; 0xcd0
 800f20c:	f6a2 4208 	subw	r2, r2, #3080	; 0xc08
 800f210:	6013      	str	r3, [r2, #0]
            *dst++ = (int8_t)acc_n0;
        }
    }

#elif defined(ARM_MATH_DSP)
    const int32_t rhs_off0 = rhs_cols - 4;
 800f212:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 800f216:	3b04      	subs	r3, #4
 800f218:	f8c7 3c7c 	str.w	r3, [r7, #3196]	; 0xc7c
    const int32_t lhs_off0 = lhs_cols_offset - 4;
 800f21c:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 800f220:	3b04      	subs	r3, #4
 800f222:	f8c7 3c78 	str.w	r3, [r7, #3192]	; 0xc78

    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 800f226:	2300      	movs	r3, #0
 800f228:	f8c7 3ccc 	str.w	r3, [r7, #3276]	; 0xccc
 800f22c:	f005 bb8c 	b.w	8014948 <arm_nn_mat_mult_nt_t_s8+0x5768>
    {
        const int8_t *lhs_ptr = &lhs[0];
 800f230:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f234:	f6a3 3224 	subw	r2, r3, #2852	; 0xb24
 800f238:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f23c:	f6a3 33fc 	subw	r3, r3, #3068	; 0xbfc
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	6013      	str	r3, [r2, #0]
        int8_t *dst_ptr = &dst[0];
 800f244:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f248:	f6a3 4308 	subw	r3, r3, #3080	; 0xc08
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	f8c7 3cc8 	str.w	r3, [r7, #3272]	; 0xcc8

        int32_t lhs_offset_contribution0 = 0;
 800f252:	2300      	movs	r3, #0
 800f254:	f8c7 3cc4 	str.w	r3, [r7, #3268]	; 0xcc4
        int32_t lhs_offset_contribution1 = 0;
 800f258:	2300      	movs	r3, #0
 800f25a:	f8c7 3cc0 	str.w	r3, [r7, #3264]	; 0xcc0

        for (int32_t x = 0; x < rhs_cols; ++x)
 800f25e:	2300      	movs	r3, #0
 800f260:	f8c7 3cbc 	str.w	r3, [r7, #3260]	; 0xcbc
 800f264:	e028      	b.n	800f2b8 <arm_nn_mat_mult_nt_t_s8+0xd8>
        {
            lhs_offset_contribution0 += rhs[x];
 800f266:	f8d7 2cbc 	ldr.w	r2, [r7, #3260]	; 0xcbc
 800f26a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f26e:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	4413      	add	r3, r2
 800f276:	f993 3000 	ldrsb.w	r3, [r3]
 800f27a:	461a      	mov	r2, r3
 800f27c:	f8d7 3cc4 	ldr.w	r3, [r7, #3268]	; 0xcc4
 800f280:	4413      	add	r3, r2
 800f282:	f8c7 3cc4 	str.w	r3, [r7, #3268]	; 0xcc4
            lhs_offset_contribution1 += rhs[x + rhs_cols];
 800f286:	f8d7 2cbc 	ldr.w	r2, [r7, #3260]	; 0xcbc
 800f28a:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 800f28e:	4413      	add	r3, r2
 800f290:	461a      	mov	r2, r3
 800f292:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f296:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	4413      	add	r3, r2
 800f29e:	f993 3000 	ldrsb.w	r3, [r3]
 800f2a2:	461a      	mov	r2, r3
 800f2a4:	f8d7 3cc0 	ldr.w	r3, [r7, #3264]	; 0xcc0
 800f2a8:	4413      	add	r3, r2
 800f2aa:	f8c7 3cc0 	str.w	r3, [r7, #3264]	; 0xcc0
        for (int32_t x = 0; x < rhs_cols; ++x)
 800f2ae:	f8d7 3cbc 	ldr.w	r3, [r7, #3260]	; 0xcbc
 800f2b2:	3301      	adds	r3, #1
 800f2b4:	f8c7 3cbc 	str.w	r3, [r7, #3260]	; 0xcbc
 800f2b8:	f8d7 2cbc 	ldr.w	r2, [r7, #3260]	; 0xcbc
 800f2bc:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 800f2c0:	429a      	cmp	r2, r3
 800f2c2:	dbd0      	blt.n	800f266 <arm_nn_mat_mult_nt_t_s8+0x86>
        }

        lhs_offset_contribution0 *= lhs_offset;
 800f2c4:	f8d7 2cc4 	ldr.w	r2, [r7, #3268]	; 0xcc4
 800f2c8:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 800f2cc:	fb02 f303 	mul.w	r3, r2, r3
 800f2d0:	f8c7 3cc4 	str.w	r3, [r7, #3268]	; 0xcc4
        lhs_offset_contribution1 *= lhs_offset;
 800f2d4:	f8d7 2cc0 	ldr.w	r2, [r7, #3264]	; 0xcc0
 800f2d8:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 800f2dc:	fb02 f303 	mul.w	r3, r2, r3
 800f2e0:	f8c7 3cc0 	str.w	r3, [r7, #3264]	; 0xcc0
        if (bias)
 800f2e4:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f2e8:	f6a3 4304 	subw	r3, r3, #3076	; 0xc04
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d01e      	beq.n	800f330 <arm_nn_mat_mult_nt_t_s8+0x150>
        {
            lhs_offset_contribution0 += bias[rhs_rows_idx];
 800f2f2:	f8d7 3ccc 	ldr.w	r3, [r7, #3276]	; 0xccc
 800f2f6:	009a      	lsls	r2, r3, #2
 800f2f8:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f2fc:	f6a3 4304 	subw	r3, r3, #3076	; 0xc04
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	4413      	add	r3, r2
 800f304:	681a      	ldr	r2, [r3, #0]
 800f306:	f8d7 3cc4 	ldr.w	r3, [r7, #3268]	; 0xcc4
 800f30a:	4413      	add	r3, r2
 800f30c:	f8c7 3cc4 	str.w	r3, [r7, #3268]	; 0xcc4
            lhs_offset_contribution1 += bias[rhs_rows_idx + 1];
 800f310:	f8d7 3ccc 	ldr.w	r3, [r7, #3276]	; 0xccc
 800f314:	3301      	adds	r3, #1
 800f316:	009a      	lsls	r2, r3, #2
 800f318:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f31c:	f6a3 4304 	subw	r3, r3, #3076	; 0xc04
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	4413      	add	r3, r2
 800f324:	681a      	ldr	r2, [r3, #0]
 800f326:	f8d7 3cc0 	ldr.w	r3, [r7, #3264]	; 0xcc0
 800f32a:	4413      	add	r3, r2
 800f32c:	f8c7 3cc0 	str.w	r3, [r7, #3264]	; 0xcc0
        }

        int32_t lhs_rows_idx = lhs_rows >> 1;
 800f330:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	; 0xcf8
 800f334:	105b      	asrs	r3, r3, #1
 800f336:	f8c7 3cb8 	str.w	r3, [r7, #3256]	; 0xcb8

        while (lhs_rows_idx)
 800f33a:	f003 ba1a 	b.w	8012772 <arm_nn_mat_mult_nt_t_s8+0x3592>
        {
            const int8_t *rhs_ptr = &rhs[0];
 800f33e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f342:	f6a3 3228 	subw	r2, r3, #2856	; 0xb28
 800f346:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f34a:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	6013      	str	r3, [r2, #0]

            int32_t res00 = lhs_offset_contribution0;
 800f352:	f8d7 3cc4 	ldr.w	r3, [r7, #3268]	; 0xcc4
 800f356:	f8c7 3cb4 	str.w	r3, [r7, #3252]	; 0xcb4
            int32_t res01 = lhs_offset_contribution1;
 800f35a:	f8d7 3cc0 	ldr.w	r3, [r7, #3264]	; 0xcc0
 800f35e:	f8c7 3cb0 	str.w	r3, [r7, #3248]	; 0xcb0
            int32_t res10 = lhs_offset_contribution0;
 800f362:	f8d7 3cc4 	ldr.w	r3, [r7, #3268]	; 0xcc4
 800f366:	f8c7 3cac 	str.w	r3, [r7, #3244]	; 0xcac
            int32_t res11 = lhs_offset_contribution1;
 800f36a:	f8d7 3cc0 	ldr.w	r3, [r7, #3264]	; 0xcc0
 800f36e:	f8c7 3ca8 	str.w	r3, [r7, #3240]	; 0xca8

            int32_t rhs_cols_idx = 0;
 800f372:	2300      	movs	r3, #0
 800f374:	f8c7 3ca4 	str.w	r3, [r7, #3236]	; 0xca4

            int32_t val0, val1, val2, val3, val4, val5;

            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 800f378:	f001 bff4 	b.w	8011364 <arm_nn_mat_mult_nt_t_s8+0x2184>
 800f37c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f380:	f5a3 62a3 	sub.w	r2, r3, #1304	; 0x518
 800f384:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800f388:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_s8, 4);
 800f38a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f38e:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	461a      	mov	r2, r3
 800f39a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f39e:	f6a3 335c 	subw	r3, r3, #2908	; 0xb5c
 800f3a2:	601a      	str	r2, [r3, #0]
    *in_s8 += 4;
 800f3a4:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f3a8:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	1d1a      	adds	r2, r3, #4
 800f3b2:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f3b6:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	601a      	str	r2, [r3, #0]
    return (val);
 800f3be:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f3c2:	f6a3 335c 	subw	r3, r3, #2908	; 0xb5c
 800f3c6:	681b      	ldr	r3, [r3, #0]
            {
                val1 = arm_nn_read_s8x4_ia((const int8_t **)&rhs_ptr);
 800f3c8:	f8c7 3c4c 	str.w	r3, [r7, #3148]	; 0xc4c
                val2 = SXTB16(val1);
 800f3cc:	f8d7 2c4c 	ldr.w	r2, [r7, #3148]	; 0xc4c
 800f3d0:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f3d4:	f5a3 63a2 	sub.w	r3, r3, #1296	; 0x510
 800f3d8:	601a      	str	r2, [r3, #0]
    __ASM("sxtb16 %0, %1" : "=r"(result) : "r"(op1));
 800f3da:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f3de:	f5a3 63a2 	sub.w	r3, r3, #1296	; 0x510
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	fa2f f283 	sxtb16	r2, r3
 800f3e8:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f3ec:	f2a3 5314 	subw	r3, r3, #1300	; 0x514
 800f3f0:	601a      	str	r2, [r3, #0]
    return (result);
 800f3f2:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f3f6:	f2a3 5314 	subw	r3, r3, #1300	; 0x514
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	f8c7 3c48 	str.w	r3, [r7, #3144]	; 0xc48
 800f400:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f404:	f2a3 520c 	subw	r2, r3, #1292	; 0x50c
 800f408:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 800f40c:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_s8, 4);
 800f40e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f412:	f2a3 530c 	subw	r3, r3, #1292	; 0x50c
 800f416:	681b      	ldr	r3, [r3, #0]
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	461a      	mov	r2, r3
 800f41e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f422:	f5a3 6336 	sub.w	r3, r3, #2912	; 0xb60
 800f426:	601a      	str	r2, [r3, #0]
    *in_s8 += 4;
 800f428:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f42c:	f2a3 530c 	subw	r3, r3, #1292	; 0x50c
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	1d1a      	adds	r2, r3, #4
 800f436:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f43a:	f2a3 530c 	subw	r3, r3, #1292	; 0x50c
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	601a      	str	r2, [r3, #0]
    return (val);
 800f442:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f446:	f5a3 6336 	sub.w	r3, r3, #2912	; 0xb60
 800f44a:	681b      	ldr	r3, [r3, #0]
                val0 = arm_nn_read_s8x4_ia((const int8_t **)&lhs_ptr);
 800f44c:	f8c7 3c44 	str.w	r3, [r7, #3140]	; 0xc44
                val3 = SXTB16(val0);
 800f450:	f8d7 2c44 	ldr.w	r2, [r7, #3140]	; 0xc44
 800f454:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f458:	f2a3 5304 	subw	r3, r3, #1284	; 0x504
 800f45c:	601a      	str	r2, [r3, #0]
    __ASM("sxtb16 %0, %1" : "=r"(result) : "r"(op1));
 800f45e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f462:	f2a3 5304 	subw	r3, r3, #1284	; 0x504
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	fa2f f283 	sxtb16	r2, r3
 800f46c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f470:	f5a3 63a1 	sub.w	r3, r3, #1288	; 0x508
 800f474:	601a      	str	r2, [r3, #0]
    return (result);
 800f476:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f47a:	f5a3 63a1 	sub.w	r3, r3, #1288	; 0x508
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	f8c7 3c40 	str.w	r3, [r7, #3136]	; 0xc40
                val4 = arm_nn_read_s8x4((const int8_t *)&rhs_ptr[rhs_off0]);
 800f484:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f488:	f6a3 3328 	subw	r3, r3, #2856	; 0xb28
 800f48c:	681a      	ldr	r2, [r3, #0]
 800f48e:	f8d7 3c7c 	ldr.w	r3, [r7, #3196]	; 0xc7c
 800f492:	441a      	add	r2, r3
 800f494:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f498:	f5a3 63a0 	sub.w	r3, r3, #1280	; 0x500
 800f49c:	601a      	str	r2, [r3, #0]
 800f49e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f4a2:	f5a3 63a0 	sub.w	r3, r3, #1280	; 0x500
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	461a      	mov	r2, r3
    memcpy(&val, in_s8, 4);
 800f4ac:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f4b0:	f6a3 3364 	subw	r3, r3, #2916	; 0xb64
 800f4b4:	601a      	str	r2, [r3, #0]
    return (val);
 800f4b6:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f4ba:	f6a3 3364 	subw	r3, r3, #2916	; 0xb64
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	f8c7 3c3c 	str.w	r3, [r7, #3132]	; 0xc3c
                val1 = SXTB16_RORn(val1, 8);
 800f4c4:	f8d7 2c4c 	ldr.w	r2, [r7, #3148]	; 0xc4c
 800f4c8:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f4cc:	f2a3 43e4 	subw	r3, r3, #1252	; 0x4e4
 800f4d0:	601a      	str	r2, [r3, #0]
 800f4d2:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f4d6:	f5a3 629d 	sub.w	r2, r3, #1256	; 0x4e8
 800f4da:	2308      	movs	r3, #8
 800f4dc:	6013      	str	r3, [r2, #0]
 800f4de:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f4e2:	f2a3 42ec 	subw	r2, r3, #1260	; 0x4ec
 800f4e6:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f4ea:	f2a3 43e4 	subw	r3, r3, #1252	; 0x4e4
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	6013      	str	r3, [r2, #0]
 800f4f2:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f4f6:	f5a3 629e 	sub.w	r2, r3, #1264	; 0x4f0
 800f4fa:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f4fe:	f5a3 639d 	sub.w	r3, r3, #1256	; 0x4e8
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	6013      	str	r3, [r2, #0]
    op2 %= 32U;
 800f506:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f50a:	f5a3 629e 	sub.w	r2, r3, #1264	; 0x4f0
 800f50e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f512:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	f003 031f 	and.w	r3, r3, #31
 800f51c:	6013      	str	r3, [r2, #0]
    if (op2 == 0U)
 800f51e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f522:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d105      	bne.n	800f538 <arm_nn_mat_mult_nt_t_s8+0x358>
        return op1;
 800f52c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f530:	f2a3 43ec 	subw	r3, r3, #1260	; 0x4ec
 800f534:	681a      	ldr	r2, [r3, #0]
 800f536:	e00a      	b.n	800f54e <arm_nn_mat_mult_nt_t_s8+0x36e>
    return (op1 >> op2) | (op1 << (32U - op2));
 800f538:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f53c:	f2a3 42ec 	subw	r2, r3, #1260	; 0x4ec
 800f540:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f544:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 800f548:	6812      	ldr	r2, [r2, #0]
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	41da      	rors	r2, r3
 800f54e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f552:	f2a3 43f4 	subw	r3, r3, #1268	; 0x4f4
 800f556:	601a      	str	r2, [r3, #0]
    __ASM("sxtb16 %0, %1" : "=r"(result) : "r"(op1));
 800f558:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f55c:	f2a3 43f4 	subw	r3, r3, #1268	; 0x4f4
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	fa2f f283 	sxtb16	r2, r3
 800f566:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f56a:	f5a3 639f 	sub.w	r3, r3, #1272	; 0x4f8
 800f56e:	601a      	str	r2, [r3, #0]
    return (result);
 800f570:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f574:	f5a3 639f 	sub.w	r3, r3, #1272	; 0x4f8
 800f578:	681a      	ldr	r2, [r3, #0]
    {
        __ASM volatile("sxtb16 %0, %1, ROR %2" : "=r"(result) : "r"(op1), "i"(rotate));
    }
    else
    {
        result = SXTB16(ROR(op1, rotate));
 800f57a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f57e:	f2a3 43fc 	subw	r3, r3, #1276	; 0x4fc
 800f582:	601a      	str	r2, [r3, #0]
    }
    return result;
 800f584:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f588:	f2a3 43fc 	subw	r3, r3, #1276	; 0x4fc
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	f8c7 3c4c 	str.w	r3, [r7, #3148]	; 0xc4c
                val0 = SXTB16_RORn(val0, 8);
 800f592:	f8d7 2c44 	ldr.w	r2, [r7, #3140]	; 0xc44
 800f596:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f59a:	f5a3 6399 	sub.w	r3, r3, #1224	; 0x4c8
 800f59e:	601a      	str	r2, [r3, #0]
 800f5a0:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f5a4:	f2a3 42cc 	subw	r2, r3, #1228	; 0x4cc
 800f5a8:	2308      	movs	r3, #8
 800f5aa:	6013      	str	r3, [r2, #0]
 800f5ac:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f5b0:	f5a3 629a 	sub.w	r2, r3, #1232	; 0x4d0
 800f5b4:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f5b8:	f5a3 6399 	sub.w	r3, r3, #1224	; 0x4c8
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	6013      	str	r3, [r2, #0]
 800f5c0:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f5c4:	f2a3 42d4 	subw	r2, r3, #1236	; 0x4d4
 800f5c8:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f5cc:	f2a3 43cc 	subw	r3, r3, #1228	; 0x4cc
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	6013      	str	r3, [r2, #0]
    op2 %= 32U;
 800f5d4:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f5d8:	f2a3 42d4 	subw	r2, r3, #1236	; 0x4d4
 800f5dc:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f5e0:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	f003 031f 	and.w	r3, r3, #31
 800f5ea:	6013      	str	r3, [r2, #0]
    if (op2 == 0U)
 800f5ec:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f5f0:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 800f5f4:	681b      	ldr	r3, [r3, #0]
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d105      	bne.n	800f606 <arm_nn_mat_mult_nt_t_s8+0x426>
        return op1;
 800f5fa:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f5fe:	f5a3 639a 	sub.w	r3, r3, #1232	; 0x4d0
 800f602:	681a      	ldr	r2, [r3, #0]
 800f604:	e00a      	b.n	800f61c <arm_nn_mat_mult_nt_t_s8+0x43c>
    return (op1 >> op2) | (op1 << (32U - op2));
 800f606:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f60a:	f5a3 629a 	sub.w	r2, r3, #1232	; 0x4d0
 800f60e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f612:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 800f616:	6812      	ldr	r2, [r2, #0]
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	41da      	rors	r2, r3
 800f61c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f620:	f5a3 639b 	sub.w	r3, r3, #1240	; 0x4d8
 800f624:	601a      	str	r2, [r3, #0]
    __ASM("sxtb16 %0, %1" : "=r"(result) : "r"(op1));
 800f626:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f62a:	f5a3 639b 	sub.w	r3, r3, #1240	; 0x4d8
 800f62e:	681b      	ldr	r3, [r3, #0]
 800f630:	fa2f f283 	sxtb16	r2, r3
 800f634:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f638:	f2a3 43dc 	subw	r3, r3, #1244	; 0x4dc
 800f63c:	601a      	str	r2, [r3, #0]
    return (result);
 800f63e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f642:	f2a3 43dc 	subw	r3, r3, #1244	; 0x4dc
 800f646:	681a      	ldr	r2, [r3, #0]
        result = SXTB16(ROR(op1, rotate));
 800f648:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f64c:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 800f650:	601a      	str	r2, [r3, #0]
    return result;
 800f652:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f656:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	f8c7 3c44 	str.w	r3, [r7, #3140]	; 0xc44

                // 4 x MAC res00, res01
                res00 = SMLAD(val3, val2, res00);
 800f660:	f8d7 2c40 	ldr.w	r2, [r7, #3136]	; 0xc40
 800f664:	f8d7 1c48 	ldr.w	r1, [r7, #3144]	; 0xc48
 800f668:	f8d7 0cb4 	ldr.w	r0, [r7, #3252]	; 0xcb4
 800f66c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f670:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 800f674:	601a      	str	r2, [r3, #0]
 800f676:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f67a:	f2a3 43bc 	subw	r3, r3, #1212	; 0x4bc
 800f67e:	6019      	str	r1, [r3, #0]
 800f680:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f684:	f5a3 6398 	sub.w	r3, r3, #1216	; 0x4c0
 800f688:	6018      	str	r0, [r3, #0]
    __ASM volatile("smlad %0, %1, %2, %3" : "=r"(result) : "r"(op1), "r"(op2), "r"(op3));
 800f68a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f68e:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 800f692:	6819      	ldr	r1, [r3, #0]
 800f694:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f698:	f2a3 43bc 	subw	r3, r3, #1212	; 0x4bc
 800f69c:	681a      	ldr	r2, [r3, #0]
 800f69e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f6a2:	f5a3 6398 	sub.w	r3, r3, #1216	; 0x4c0
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	fb21 3202 	smlad	r2, r1, r2, r3
 800f6ac:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f6b0:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 800f6b4:	601a      	str	r2, [r3, #0]
    return (result);
 800f6b6:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f6ba:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	f8c7 3cb4 	str.w	r3, [r7, #3252]	; 0xcb4
                val5 = SXTB16(val4);
 800f6c4:	f8d7 2c3c 	ldr.w	r2, [r7, #3132]	; 0xc3c
 800f6c8:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f6cc:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 800f6d0:	601a      	str	r2, [r3, #0]
    __ASM("sxtb16 %0, %1" : "=r"(result) : "r"(op1));
 800f6d2:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f6d6:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	fa2f f283 	sxtb16	r2, r3
 800f6e0:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f6e4:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 800f6e8:	601a      	str	r2, [r3, #0]
    return (result);
 800f6ea:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f6ee:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	f8c7 3c38 	str.w	r3, [r7, #3128]	; 0xc38
                res00 = SMLAD(val0, val1, res00);
 800f6f8:	f8d7 2c44 	ldr.w	r2, [r7, #3140]	; 0xc44
 800f6fc:	f8d7 1c4c 	ldr.w	r1, [r7, #3148]	; 0xc4c
 800f700:	f8d7 0cb4 	ldr.w	r0, [r7, #3252]	; 0xcb4
 800f704:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f708:	f5a3 6394 	sub.w	r3, r3, #1184	; 0x4a0
 800f70c:	601a      	str	r2, [r3, #0]
 800f70e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f712:	f2a3 43a4 	subw	r3, r3, #1188	; 0x4a4
 800f716:	6019      	str	r1, [r3, #0]
 800f718:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f71c:	f5a3 6395 	sub.w	r3, r3, #1192	; 0x4a8
 800f720:	6018      	str	r0, [r3, #0]
    __ASM volatile("smlad %0, %1, %2, %3" : "=r"(result) : "r"(op1), "r"(op2), "r"(op3));
 800f722:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f726:	f5a3 6394 	sub.w	r3, r3, #1184	; 0x4a0
 800f72a:	6819      	ldr	r1, [r3, #0]
 800f72c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f730:	f2a3 43a4 	subw	r3, r3, #1188	; 0x4a4
 800f734:	681a      	ldr	r2, [r3, #0]
 800f736:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f73a:	f5a3 6395 	sub.w	r3, r3, #1192	; 0x4a8
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	fb21 3202 	smlad	r2, r1, r2, r3
 800f744:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f748:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 800f74c:	601a      	str	r2, [r3, #0]
    return (result);
 800f74e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f752:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 800f756:	681b      	ldr	r3, [r3, #0]
 800f758:	f8c7 3cb4 	str.w	r3, [r7, #3252]	; 0xcb4
                val4 = SXTB16_RORn(val4, 8);
 800f75c:	f8d7 2c3c 	ldr.w	r2, [r7, #3132]	; 0xc3c
 800f760:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f764:	f2a3 4384 	subw	r3, r3, #1156	; 0x484
 800f768:	601a      	str	r2, [r3, #0]
 800f76a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f76e:	f5a3 6291 	sub.w	r2, r3, #1160	; 0x488
 800f772:	2308      	movs	r3, #8
 800f774:	6013      	str	r3, [r2, #0]
 800f776:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f77a:	f2a3 428c 	subw	r2, r3, #1164	; 0x48c
 800f77e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f782:	f2a3 4384 	subw	r3, r3, #1156	; 0x484
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	6013      	str	r3, [r2, #0]
 800f78a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f78e:	f5a3 6292 	sub.w	r2, r3, #1168	; 0x490
 800f792:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f796:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	6013      	str	r3, [r2, #0]
    op2 %= 32U;
 800f79e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f7a2:	f5a3 6292 	sub.w	r2, r3, #1168	; 0x490
 800f7a6:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f7aa:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	f003 031f 	and.w	r3, r3, #31
 800f7b4:	6013      	str	r3, [r2, #0]
    if (op2 == 0U)
 800f7b6:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f7ba:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d105      	bne.n	800f7d0 <arm_nn_mat_mult_nt_t_s8+0x5f0>
        return op1;
 800f7c4:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f7c8:	f2a3 438c 	subw	r3, r3, #1164	; 0x48c
 800f7cc:	681a      	ldr	r2, [r3, #0]
 800f7ce:	e00a      	b.n	800f7e6 <arm_nn_mat_mult_nt_t_s8+0x606>
    return (op1 >> op2) | (op1 << (32U - op2));
 800f7d0:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f7d4:	f2a3 428c 	subw	r2, r3, #1164	; 0x48c
 800f7d8:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f7dc:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 800f7e0:	6812      	ldr	r2, [r2, #0]
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	41da      	rors	r2, r3
 800f7e6:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f7ea:	f2a3 4394 	subw	r3, r3, #1172	; 0x494
 800f7ee:	601a      	str	r2, [r3, #0]
    __ASM("sxtb16 %0, %1" : "=r"(result) : "r"(op1));
 800f7f0:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f7f4:	f2a3 4394 	subw	r3, r3, #1172	; 0x494
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	fa2f f283 	sxtb16	r2, r3
 800f7fe:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f802:	f5a3 6393 	sub.w	r3, r3, #1176	; 0x498
 800f806:	601a      	str	r2, [r3, #0]
    return (result);
 800f808:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f80c:	f5a3 6393 	sub.w	r3, r3, #1176	; 0x498
 800f810:	681a      	ldr	r2, [r3, #0]
        result = SXTB16(ROR(op1, rotate));
 800f812:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f816:	f2a3 439c 	subw	r3, r3, #1180	; 0x49c
 800f81a:	601a      	str	r2, [r3, #0]
    return result;
 800f81c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f820:	f2a3 439c 	subw	r3, r3, #1180	; 0x49c
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	f8c7 3c3c 	str.w	r3, [r7, #3132]	; 0xc3c
                res01 = SMLAD(val3, val5, res01);
 800f82a:	f8d7 2c40 	ldr.w	r2, [r7, #3136]	; 0xc40
 800f82e:	f8d7 1c38 	ldr.w	r1, [r7, #3128]	; 0xc38
 800f832:	f8d7 0cb0 	ldr.w	r0, [r7, #3248]	; 0xcb0
 800f836:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f83a:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 800f83e:	601a      	str	r2, [r3, #0]
 800f840:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f844:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 800f848:	6019      	str	r1, [r3, #0]
 800f84a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f84e:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 800f852:	6018      	str	r0, [r3, #0]
    __ASM volatile("smlad %0, %1, %2, %3" : "=r"(result) : "r"(op1), "r"(op2), "r"(op3));
 800f854:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f858:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 800f85c:	6819      	ldr	r1, [r3, #0]
 800f85e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f862:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 800f866:	681a      	ldr	r2, [r3, #0]
 800f868:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f86c:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 800f870:	681b      	ldr	r3, [r3, #0]
 800f872:	fb21 3202 	smlad	r2, r1, r2, r3
 800f876:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f87a:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 800f87e:	601a      	str	r2, [r3, #0]
    return (result);
 800f880:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f884:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	f8c7 3cb0 	str.w	r3, [r7, #3248]	; 0xcb0
                res01 = SMLAD(val0, val4, res01);
 800f88e:	f8d7 2c44 	ldr.w	r2, [r7, #3140]	; 0xc44
 800f892:	f8d7 1c3c 	ldr.w	r1, [r7, #3132]	; 0xc3c
 800f896:	f8d7 0cb0 	ldr.w	r0, [r7, #3248]	; 0xcb0
 800f89a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f89e:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 800f8a2:	601a      	str	r2, [r3, #0]
 800f8a4:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f8a8:	f5a3 638d 	sub.w	r3, r3, #1128	; 0x468
 800f8ac:	6019      	str	r1, [r3, #0]
 800f8ae:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f8b2:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 800f8b6:	6018      	str	r0, [r3, #0]
    __ASM volatile("smlad %0, %1, %2, %3" : "=r"(result) : "r"(op1), "r"(op2), "r"(op3));
 800f8b8:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f8bc:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 800f8c0:	6819      	ldr	r1, [r3, #0]
 800f8c2:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f8c6:	f5a3 638d 	sub.w	r3, r3, #1128	; 0x468
 800f8ca:	681a      	ldr	r2, [r3, #0]
 800f8cc:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f8d0:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	fb21 3202 	smlad	r2, r1, r2, r3
 800f8da:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f8de:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 800f8e2:	601a      	str	r2, [r3, #0]
    return (result);
 800f8e4:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f8e8:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	f8c7 3cb0 	str.w	r3, [r7, #3248]	; 0xcb0

                // 4 x MAC res10, res11
                val0 = arm_nn_read_s8x4((const int8_t *)&lhs_ptr[lhs_off0]);
 800f8f2:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f8f6:	f6a3 3324 	subw	r3, r3, #2852	; 0xb24
 800f8fa:	681a      	ldr	r2, [r3, #0]
 800f8fc:	f8d7 3c78 	ldr.w	r3, [r7, #3192]	; 0xc78
 800f900:	441a      	add	r2, r3
 800f902:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f906:	f5a3 638c 	sub.w	r3, r3, #1120	; 0x460
 800f90a:	601a      	str	r2, [r3, #0]
 800f90c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f910:	f5a3 638c 	sub.w	r3, r3, #1120	; 0x460
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	461a      	mov	r2, r3
    memcpy(&val, in_s8, 4);
 800f91a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f91e:	f6a3 3368 	subw	r3, r3, #2920	; 0xb68
 800f922:	601a      	str	r2, [r3, #0]
    return (val);
 800f924:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f928:	f6a3 3368 	subw	r3, r3, #2920	; 0xb68
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	f8c7 3c44 	str.w	r3, [r7, #3140]	; 0xc44
                val3 = SXTB16(val0);
 800f932:	f8d7 2c44 	ldr.w	r2, [r7, #3140]	; 0xc44
 800f936:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f93a:	f5a3 638b 	sub.w	r3, r3, #1112	; 0x458
 800f93e:	601a      	str	r2, [r3, #0]
    __ASM("sxtb16 %0, %1" : "=r"(result) : "r"(op1));
 800f940:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f944:	f5a3 638b 	sub.w	r3, r3, #1112	; 0x458
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	fa2f f283 	sxtb16	r2, r3
 800f94e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f952:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 800f956:	601a      	str	r2, [r3, #0]
    return (result);
 800f958:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f95c:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	f8c7 3c40 	str.w	r3, [r7, #3136]	; 0xc40
                val0 = SXTB16_RORn(val0, 8);
 800f966:	f8d7 2c44 	ldr.w	r2, [r7, #3140]	; 0xc44
 800f96a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f96e:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 800f972:	601a      	str	r2, [r3, #0]
 800f974:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f978:	f5a3 6288 	sub.w	r2, r3, #1088	; 0x440
 800f97c:	2308      	movs	r3, #8
 800f97e:	6013      	str	r3, [r2, #0]
 800f980:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f984:	f2a3 4244 	subw	r2, r3, #1092	; 0x444
 800f988:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f98c:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 800f990:	681b      	ldr	r3, [r3, #0]
 800f992:	6013      	str	r3, [r2, #0]
 800f994:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f998:	f5a3 6289 	sub.w	r2, r3, #1096	; 0x448
 800f99c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f9a0:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 800f9a4:	681b      	ldr	r3, [r3, #0]
 800f9a6:	6013      	str	r3, [r2, #0]
    op2 %= 32U;
 800f9a8:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f9ac:	f5a3 6289 	sub.w	r2, r3, #1096	; 0x448
 800f9b0:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f9b4:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 800f9b8:	681b      	ldr	r3, [r3, #0]
 800f9ba:	f003 031f 	and.w	r3, r3, #31
 800f9be:	6013      	str	r3, [r2, #0]
    if (op2 == 0U)
 800f9c0:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f9c4:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d105      	bne.n	800f9da <arm_nn_mat_mult_nt_t_s8+0x7fa>
        return op1;
 800f9ce:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f9d2:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 800f9d6:	681a      	ldr	r2, [r3, #0]
 800f9d8:	e00a      	b.n	800f9f0 <arm_nn_mat_mult_nt_t_s8+0x810>
    return (op1 >> op2) | (op1 << (32U - op2));
 800f9da:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f9de:	f2a3 4244 	subw	r2, r3, #1092	; 0x444
 800f9e2:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f9e6:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 800f9ea:	6812      	ldr	r2, [r2, #0]
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	41da      	rors	r2, r3
 800f9f0:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f9f4:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800f9f8:	601a      	str	r2, [r3, #0]
    __ASM("sxtb16 %0, %1" : "=r"(result) : "r"(op1));
 800f9fa:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800f9fe:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	fa2f f283 	sxtb16	r2, r3
 800fa08:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fa0c:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 800fa10:	601a      	str	r2, [r3, #0]
    return (result);
 800fa12:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fa16:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 800fa1a:	681a      	ldr	r2, [r3, #0]
        result = SXTB16(ROR(op1, rotate));
 800fa1c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fa20:	f2a3 4354 	subw	r3, r3, #1108	; 0x454
 800fa24:	601a      	str	r2, [r3, #0]
    return result;
 800fa26:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fa2a:	f2a3 4354 	subw	r3, r3, #1108	; 0x454
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	f8c7 3c44 	str.w	r3, [r7, #3140]	; 0xc44
                res10 = SMLAD(val3, val2, res10);
 800fa34:	f8d7 2c40 	ldr.w	r2, [r7, #3136]	; 0xc40
 800fa38:	f8d7 1c48 	ldr.w	r1, [r7, #3144]	; 0xc48
 800fa3c:	f8d7 0cac 	ldr.w	r0, [r7, #3244]	; 0xcac
 800fa40:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fa44:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 800fa48:	601a      	str	r2, [r3, #0]
 800fa4a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fa4e:	f5a3 6386 	sub.w	r3, r3, #1072	; 0x430
 800fa52:	6019      	str	r1, [r3, #0]
 800fa54:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fa58:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 800fa5c:	6018      	str	r0, [r3, #0]
    __ASM volatile("smlad %0, %1, %2, %3" : "=r"(result) : "r"(op1), "r"(op2), "r"(op3));
 800fa5e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fa62:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 800fa66:	6819      	ldr	r1, [r3, #0]
 800fa68:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fa6c:	f5a3 6386 	sub.w	r3, r3, #1072	; 0x430
 800fa70:	681a      	ldr	r2, [r3, #0]
 800fa72:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fa76:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	fb21 3202 	smlad	r2, r1, r2, r3
 800fa80:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fa84:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 800fa88:	601a      	str	r2, [r3, #0]
    return (result);
 800fa8a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fa8e:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	f8c7 3cac 	str.w	r3, [r7, #3244]	; 0xcac
                res11 = SMLAD(val3, val5, res11);
 800fa98:	f8d7 2c40 	ldr.w	r2, [r7, #3136]	; 0xc40
 800fa9c:	f8d7 1c38 	ldr.w	r1, [r7, #3128]	; 0xc38
 800faa0:	f8d7 0ca8 	ldr.w	r0, [r7, #3240]	; 0xca8
 800faa4:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800faa8:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800faac:	601a      	str	r2, [r3, #0]
 800faae:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fab2:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 800fab6:	6019      	str	r1, [r3, #0]
 800fab8:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fabc:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800fac0:	6018      	str	r0, [r3, #0]
    __ASM volatile("smlad %0, %1, %2, %3" : "=r"(result) : "r"(op1), "r"(op2), "r"(op3));
 800fac2:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fac6:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800faca:	6819      	ldr	r1, [r3, #0]
 800facc:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fad0:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 800fad4:	681a      	ldr	r2, [r3, #0]
 800fad6:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fada:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	fb21 3202 	smlad	r2, r1, r2, r3
 800fae4:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fae8:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 800faec:	601a      	str	r2, [r3, #0]
    return (result);
 800faee:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800faf2:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	f8c7 3ca8 	str.w	r3, [r7, #3240]	; 0xca8
                res10 = SMLAD(val0, val1, res10);
 800fafc:	f8d7 2c44 	ldr.w	r2, [r7, #3140]	; 0xc44
 800fb00:	f8d7 1c4c 	ldr.w	r1, [r7, #3148]	; 0xc4c
 800fb04:	f8d7 0cac 	ldr.w	r0, [r7, #3244]	; 0xcac
 800fb08:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fb0c:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 800fb10:	601a      	str	r2, [r3, #0]
 800fb12:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fb16:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 800fb1a:	6019      	str	r1, [r3, #0]
 800fb1c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fb20:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 800fb24:	6018      	str	r0, [r3, #0]
    __ASM volatile("smlad %0, %1, %2, %3" : "=r"(result) : "r"(op1), "r"(op2), "r"(op3));
 800fb26:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fb2a:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 800fb2e:	6819      	ldr	r1, [r3, #0]
 800fb30:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fb34:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 800fb38:	681a      	ldr	r2, [r3, #0]
 800fb3a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fb3e:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 800fb42:	681b      	ldr	r3, [r3, #0]
 800fb44:	fb21 3202 	smlad	r2, r1, r2, r3
 800fb48:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fb4c:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 800fb50:	601a      	str	r2, [r3, #0]
    return (result);
 800fb52:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fb56:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	f8c7 3cac 	str.w	r3, [r7, #3244]	; 0xcac
 800fb60:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fb64:	f5a3 6281 	sub.w	r2, r3, #1032	; 0x408
 800fb68:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800fb6c:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_s8, 4);
 800fb6e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fb72:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	681b      	ldr	r3, [r3, #0]
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	461a      	mov	r2, r3
 800fb7e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fb82:	f6a3 336c 	subw	r3, r3, #2924	; 0xb6c
 800fb86:	601a      	str	r2, [r3, #0]
    *in_s8 += 4;
 800fb88:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fb8c:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	1d1a      	adds	r2, r3, #4
 800fb96:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fb9a:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	601a      	str	r2, [r3, #0]
    return (val);
 800fba2:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fba6:	f6a3 336c 	subw	r3, r3, #2924	; 0xb6c
 800fbaa:	681b      	ldr	r3, [r3, #0]
                val1 = arm_nn_read_s8x4_ia((const int8_t **)&rhs_ptr);
 800fbac:	f8c7 3c4c 	str.w	r3, [r7, #3148]	; 0xc4c
                res11 = SMLAD(val0, val4, res11);
 800fbb0:	f8d7 2c44 	ldr.w	r2, [r7, #3140]	; 0xc44
 800fbb4:	f8d7 1c3c 	ldr.w	r1, [r7, #3132]	; 0xc3c
 800fbb8:	f8d7 0ca8 	ldr.w	r0, [r7, #3240]	; 0xca8
 800fbbc:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fbc0:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 800fbc4:	601a      	str	r2, [r3, #0]
 800fbc6:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fbca:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 800fbce:	6019      	str	r1, [r3, #0]
 800fbd0:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fbd4:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800fbd8:	6018      	str	r0, [r3, #0]
    __ASM volatile("smlad %0, %1, %2, %3" : "=r"(result) : "r"(op1), "r"(op2), "r"(op3));
 800fbda:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fbde:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 800fbe2:	6819      	ldr	r1, [r3, #0]
 800fbe4:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fbe8:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 800fbec:	681a      	ldr	r2, [r3, #0]
 800fbee:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fbf2:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	fb21 3202 	smlad	r2, r1, r2, r3
 800fbfc:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fc00:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 800fc04:	601a      	str	r2, [r3, #0]
    return (result);
 800fc06:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fc0a:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	f8c7 3ca8 	str.w	r3, [r7, #3240]	; 0xca8

                val4 = arm_nn_read_s8x4((const int8_t *)&rhs_ptr[rhs_off0]);
 800fc14:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fc18:	f6a3 3328 	subw	r3, r3, #2856	; 0xb28
 800fc1c:	681a      	ldr	r2, [r3, #0]
 800fc1e:	f8d7 3c7c 	ldr.w	r3, [r7, #3196]	; 0xc7c
 800fc22:	441a      	add	r2, r3
 800fc24:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fc28:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 800fc2c:	601a      	str	r2, [r3, #0]
 800fc2e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fc32:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 800fc36:	681b      	ldr	r3, [r3, #0]
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	461a      	mov	r2, r3
    memcpy(&val, in_s8, 4);
 800fc3c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fc40:	f5a3 6337 	sub.w	r3, r3, #2928	; 0xb70
 800fc44:	601a      	str	r2, [r3, #0]
    return (val);
 800fc46:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fc4a:	f5a3 6337 	sub.w	r3, r3, #2928	; 0xb70
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	f8c7 3c3c 	str.w	r3, [r7, #3132]	; 0xc3c
                val2 = SXTB16(val1);
 800fc54:	f8d7 2c4c 	ldr.w	r2, [r7, #3148]	; 0xc4c
 800fc58:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fc5c:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 800fc60:	601a      	str	r2, [r3, #0]
    __ASM("sxtb16 %0, %1" : "=r"(result) : "r"(op1));
 800fc62:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fc66:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	fa2f f283 	sxtb16	r2, r3
 800fc70:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fc74:	f5a3 737c 	sub.w	r3, r3, #1008	; 0x3f0
 800fc78:	601a      	str	r2, [r3, #0]
    return (result);
 800fc7a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fc7e:	f5a3 737c 	sub.w	r3, r3, #1008	; 0x3f0
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	f8c7 3c48 	str.w	r3, [r7, #3144]	; 0xc48
 800fc88:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fc8c:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 800fc90:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 800fc94:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_s8, 4);
 800fc96:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fc9a:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	461a      	mov	r2, r3
 800fca6:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fcaa:	f6a3 3374 	subw	r3, r3, #2932	; 0xb74
 800fcae:	601a      	str	r2, [r3, #0]
    *in_s8 += 4;
 800fcb0:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fcb4:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	1d1a      	adds	r2, r3, #4
 800fcbe:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fcc2:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	601a      	str	r2, [r3, #0]
    return (val);
 800fcca:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fcce:	f6a3 3374 	subw	r3, r3, #2932	; 0xb74
 800fcd2:	681b      	ldr	r3, [r3, #0]
                val0 = arm_nn_read_s8x4_ia((const int8_t **)&lhs_ptr);
 800fcd4:	f8c7 3c44 	str.w	r3, [r7, #3140]	; 0xc44
                val3 = SXTB16(val0);
 800fcd8:	f8d7 2c44 	ldr.w	r2, [r7, #3140]	; 0xc44
 800fcdc:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fce0:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 800fce4:	601a      	str	r2, [r3, #0]
    __ASM("sxtb16 %0, %1" : "=r"(result) : "r"(op1));
 800fce6:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fcea:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	fa2f f283 	sxtb16	r2, r3
 800fcf4:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fcf8:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 800fcfc:	601a      	str	r2, [r3, #0]
    return (result);
 800fcfe:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fd02:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	f8c7 3c40 	str.w	r3, [r7, #3136]	; 0xc40
                val1 = SXTB16_RORn(val1, 8);
 800fd0c:	f8d7 2c4c 	ldr.w	r2, [r7, #3148]	; 0xc4c
 800fd10:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fd14:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 800fd18:	601a      	str	r2, [r3, #0]
 800fd1a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fd1e:	f5a3 7272 	sub.w	r2, r3, #968	; 0x3c8
 800fd22:	2308      	movs	r3, #8
 800fd24:	6013      	str	r3, [r2, #0]
 800fd26:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fd2a:	f5a3 7273 	sub.w	r2, r3, #972	; 0x3cc
 800fd2e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fd32:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	6013      	str	r3, [r2, #0]
 800fd3a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fd3e:	f5a3 7274 	sub.w	r2, r3, #976	; 0x3d0
 800fd42:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fd46:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	6013      	str	r3, [r2, #0]
    op2 %= 32U;
 800fd4e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fd52:	f5a3 7274 	sub.w	r2, r3, #976	; 0x3d0
 800fd56:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fd5a:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	f003 031f 	and.w	r3, r3, #31
 800fd64:	6013      	str	r3, [r2, #0]
    if (op2 == 0U)
 800fd66:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fd6a:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d105      	bne.n	800fd80 <arm_nn_mat_mult_nt_t_s8+0xba0>
        return op1;
 800fd74:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fd78:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 800fd7c:	681a      	ldr	r2, [r3, #0]
 800fd7e:	e00a      	b.n	800fd96 <arm_nn_mat_mult_nt_t_s8+0xbb6>
    return (op1 >> op2) | (op1 << (32U - op2));
 800fd80:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fd84:	f5a3 7273 	sub.w	r2, r3, #972	; 0x3cc
 800fd88:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fd8c:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 800fd90:	6812      	ldr	r2, [r2, #0]
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	41da      	rors	r2, r3
 800fd96:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fd9a:	f5a3 7375 	sub.w	r3, r3, #980	; 0x3d4
 800fd9e:	601a      	str	r2, [r3, #0]
    __ASM("sxtb16 %0, %1" : "=r"(result) : "r"(op1));
 800fda0:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fda4:	f5a3 7375 	sub.w	r3, r3, #980	; 0x3d4
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	fa2f f283 	sxtb16	r2, r3
 800fdae:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fdb2:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 800fdb6:	601a      	str	r2, [r3, #0]
    return (result);
 800fdb8:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fdbc:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 800fdc0:	681a      	ldr	r2, [r3, #0]
        result = SXTB16(ROR(op1, rotate));
 800fdc2:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fdc6:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 800fdca:	601a      	str	r2, [r3, #0]
    return result;
 800fdcc:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fdd0:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	f8c7 3c4c 	str.w	r3, [r7, #3148]	; 0xc4c
                val0 = SXTB16_RORn(val0, 8);
 800fdda:	f8d7 2c44 	ldr.w	r2, [r7, #3140]	; 0xc44
 800fdde:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fde2:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 800fde6:	601a      	str	r2, [r3, #0]
 800fde8:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fdec:	f5a3 726b 	sub.w	r2, r3, #940	; 0x3ac
 800fdf0:	2308      	movs	r3, #8
 800fdf2:	6013      	str	r3, [r2, #0]
 800fdf4:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fdf8:	f5a3 726c 	sub.w	r2, r3, #944	; 0x3b0
 800fdfc:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fe00:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	6013      	str	r3, [r2, #0]
 800fe08:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fe0c:	f5a3 726d 	sub.w	r2, r3, #948	; 0x3b4
 800fe10:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fe14:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	6013      	str	r3, [r2, #0]
    op2 %= 32U;
 800fe1c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fe20:	f5a3 726d 	sub.w	r2, r3, #948	; 0x3b4
 800fe24:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fe28:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 800fe2c:	681b      	ldr	r3, [r3, #0]
 800fe2e:	f003 031f 	and.w	r3, r3, #31
 800fe32:	6013      	str	r3, [r2, #0]
    if (op2 == 0U)
 800fe34:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fe38:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 800fe3c:	681b      	ldr	r3, [r3, #0]
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d105      	bne.n	800fe4e <arm_nn_mat_mult_nt_t_s8+0xc6e>
        return op1;
 800fe42:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fe46:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 800fe4a:	681a      	ldr	r2, [r3, #0]
 800fe4c:	e00a      	b.n	800fe64 <arm_nn_mat_mult_nt_t_s8+0xc84>
    return (op1 >> op2) | (op1 << (32U - op2));
 800fe4e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fe52:	f5a3 726c 	sub.w	r2, r3, #944	; 0x3b0
 800fe56:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fe5a:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 800fe5e:	6812      	ldr	r2, [r2, #0]
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	41da      	rors	r2, r3
 800fe64:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fe68:	f5a3 736e 	sub.w	r3, r3, #952	; 0x3b8
 800fe6c:	601a      	str	r2, [r3, #0]
    __ASM("sxtb16 %0, %1" : "=r"(result) : "r"(op1));
 800fe6e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fe72:	f5a3 736e 	sub.w	r3, r3, #952	; 0x3b8
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	fa2f f283 	sxtb16	r2, r3
 800fe7c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fe80:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 800fe84:	601a      	str	r2, [r3, #0]
    return (result);
 800fe86:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fe8a:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 800fe8e:	681a      	ldr	r2, [r3, #0]
        result = SXTB16(ROR(op1, rotate));
 800fe90:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fe94:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 800fe98:	601a      	str	r2, [r3, #0]
    return result;
 800fe9a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fe9e:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 800fea2:	681b      	ldr	r3, [r3, #0]
 800fea4:	f8c7 3c44 	str.w	r3, [r7, #3140]	; 0xc44

                // 4 x MAC res00, res01
                res00 = SMLAD(val3, val2, res00);
 800fea8:	f8d7 2c40 	ldr.w	r2, [r7, #3136]	; 0xc40
 800feac:	f8d7 1c48 	ldr.w	r1, [r7, #3144]	; 0xc48
 800feb0:	f8d7 0cb4 	ldr.w	r0, [r7, #3252]	; 0xcb4
 800feb4:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800feb8:	f5a3 7366 	sub.w	r3, r3, #920	; 0x398
 800febc:	601a      	str	r2, [r3, #0]
 800febe:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fec2:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 800fec6:	6019      	str	r1, [r3, #0]
 800fec8:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fecc:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 800fed0:	6018      	str	r0, [r3, #0]
    __ASM volatile("smlad %0, %1, %2, %3" : "=r"(result) : "r"(op1), "r"(op2), "r"(op3));
 800fed2:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fed6:	f5a3 7366 	sub.w	r3, r3, #920	; 0x398
 800feda:	6819      	ldr	r1, [r3, #0]
 800fedc:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fee0:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 800fee4:	681a      	ldr	r2, [r3, #0]
 800fee6:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800feea:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 800feee:	681b      	ldr	r3, [r3, #0]
 800fef0:	fb21 3202 	smlad	r2, r1, r2, r3
 800fef4:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fef8:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 800fefc:	601a      	str	r2, [r3, #0]
    return (result);
 800fefe:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800ff02:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 800ff06:	681b      	ldr	r3, [r3, #0]
 800ff08:	f8c7 3cb4 	str.w	r3, [r7, #3252]	; 0xcb4
                val5 = SXTB16(val4);
 800ff0c:	f8d7 2c3c 	ldr.w	r2, [r7, #3132]	; 0xc3c
 800ff10:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800ff14:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 800ff18:	601a      	str	r2, [r3, #0]
    __ASM("sxtb16 %0, %1" : "=r"(result) : "r"(op1));
 800ff1a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800ff1e:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	fa2f f283 	sxtb16	r2, r3
 800ff28:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800ff2c:	f5a3 7365 	sub.w	r3, r3, #916	; 0x394
 800ff30:	601a      	str	r2, [r3, #0]
    return (result);
 800ff32:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800ff36:	f5a3 7365 	sub.w	r3, r3, #916	; 0x394
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	f8c7 3c38 	str.w	r3, [r7, #3128]	; 0xc38
                res00 = SMLAD(val0, val1, res00);
 800ff40:	f8d7 2c44 	ldr.w	r2, [r7, #3140]	; 0xc44
 800ff44:	f8d7 1c4c 	ldr.w	r1, [r7, #3148]	; 0xc4c
 800ff48:	f8d7 0cb4 	ldr.w	r0, [r7, #3252]	; 0xcb4
 800ff4c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800ff50:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 800ff54:	601a      	str	r2, [r3, #0]
 800ff56:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800ff5a:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 800ff5e:	6019      	str	r1, [r3, #0]
 800ff60:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800ff64:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 800ff68:	6018      	str	r0, [r3, #0]
    __ASM volatile("smlad %0, %1, %2, %3" : "=r"(result) : "r"(op1), "r"(op2), "r"(op3));
 800ff6a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800ff6e:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 800ff72:	6819      	ldr	r1, [r3, #0]
 800ff74:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800ff78:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 800ff7c:	681a      	ldr	r2, [r3, #0]
 800ff7e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800ff82:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	fb21 3202 	smlad	r2, r1, r2, r3
 800ff8c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800ff90:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 800ff94:	601a      	str	r2, [r3, #0]
    return (result);
 800ff96:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800ff9a:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	f8c7 3cb4 	str.w	r3, [r7, #3252]	; 0xcb4
                val4 = SXTB16_RORn(val4, 8);
 800ffa4:	f8d7 2c3c 	ldr.w	r2, [r7, #3132]	; 0xc3c
 800ffa8:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800ffac:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 800ffb0:	601a      	str	r2, [r3, #0]
 800ffb2:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800ffb6:	f5a3 725a 	sub.w	r2, r3, #872	; 0x368
 800ffba:	2308      	movs	r3, #8
 800ffbc:	6013      	str	r3, [r2, #0]
 800ffbe:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800ffc2:	f5a3 725b 	sub.w	r2, r3, #876	; 0x36c
 800ffc6:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800ffca:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	6013      	str	r3, [r2, #0]
 800ffd2:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800ffd6:	f5a3 725c 	sub.w	r2, r3, #880	; 0x370
 800ffda:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800ffde:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	6013      	str	r3, [r2, #0]
    op2 %= 32U;
 800ffe6:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800ffea:	f5a3 725c 	sub.w	r2, r3, #880	; 0x370
 800ffee:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800fff2:	f5a3 735c 	sub.w	r3, r3, #880	; 0x370
 800fff6:	681b      	ldr	r3, [r3, #0]
 800fff8:	f003 031f 	and.w	r3, r3, #31
 800fffc:	6013      	str	r3, [r2, #0]
    if (op2 == 0U)
 800fffe:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010002:	f5a3 735c 	sub.w	r3, r3, #880	; 0x370
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	2b00      	cmp	r3, #0
 801000a:	d105      	bne.n	8010018 <arm_nn_mat_mult_nt_t_s8+0xe38>
        return op1;
 801000c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010010:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8010014:	681a      	ldr	r2, [r3, #0]
 8010016:	e00a      	b.n	801002e <arm_nn_mat_mult_nt_t_s8+0xe4e>
    return (op1 >> op2) | (op1 << (32U - op2));
 8010018:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801001c:	f5a3 725b 	sub.w	r2, r3, #876	; 0x36c
 8010020:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010024:	f5a3 735c 	sub.w	r3, r3, #880	; 0x370
 8010028:	6812      	ldr	r2, [r2, #0]
 801002a:	681b      	ldr	r3, [r3, #0]
 801002c:	41da      	rors	r2, r3
 801002e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010032:	f5a3 735d 	sub.w	r3, r3, #884	; 0x374
 8010036:	601a      	str	r2, [r3, #0]
    __ASM("sxtb16 %0, %1" : "=r"(result) : "r"(op1));
 8010038:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801003c:	f5a3 735d 	sub.w	r3, r3, #884	; 0x374
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	fa2f f283 	sxtb16	r2, r3
 8010046:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801004a:	f5a3 735e 	sub.w	r3, r3, #888	; 0x378
 801004e:	601a      	str	r2, [r3, #0]
    return (result);
 8010050:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010054:	f5a3 735e 	sub.w	r3, r3, #888	; 0x378
 8010058:	681a      	ldr	r2, [r3, #0]
        result = SXTB16(ROR(op1, rotate));
 801005a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801005e:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8010062:	601a      	str	r2, [r3, #0]
    return result;
 8010064:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010068:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	f8c7 3c3c 	str.w	r3, [r7, #3132]	; 0xc3c
                res01 = SMLAD(val3, val5, res01);
 8010072:	f8d7 2c40 	ldr.w	r2, [r7, #3136]	; 0xc40
 8010076:	f8d7 1c38 	ldr.w	r1, [r7, #3128]	; 0xc38
 801007a:	f8d7 0cb0 	ldr.w	r0, [r7, #3248]	; 0xcb0
 801007e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010082:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 8010086:	601a      	str	r2, [r3, #0]
 8010088:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801008c:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 8010090:	6019      	str	r1, [r3, #0]
 8010092:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010096:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 801009a:	6018      	str	r0, [r3, #0]
    __ASM volatile("smlad %0, %1, %2, %3" : "=r"(result) : "r"(op1), "r"(op2), "r"(op3));
 801009c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80100a0:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 80100a4:	6819      	ldr	r1, [r3, #0]
 80100a6:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80100aa:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 80100ae:	681a      	ldr	r2, [r3, #0]
 80100b0:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80100b4:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	fb21 3202 	smlad	r2, r1, r2, r3
 80100be:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80100c2:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 80100c6:	601a      	str	r2, [r3, #0]
    return (result);
 80100c8:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80100cc:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	f8c7 3cb0 	str.w	r3, [r7, #3248]	; 0xcb0
                res01 = SMLAD(val0, val4, res01);
 80100d6:	f8d7 2c44 	ldr.w	r2, [r7, #3140]	; 0xc44
 80100da:	f8d7 1c3c 	ldr.w	r1, [r7, #3132]	; 0xc3c
 80100de:	f8d7 0cb0 	ldr.w	r0, [r7, #3248]	; 0xcb0
 80100e2:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80100e6:	f5a3 7351 	sub.w	r3, r3, #836	; 0x344
 80100ea:	601a      	str	r2, [r3, #0]
 80100ec:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80100f0:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 80100f4:	6019      	str	r1, [r3, #0]
 80100f6:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80100fa:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 80100fe:	6018      	str	r0, [r3, #0]
    __ASM volatile("smlad %0, %1, %2, %3" : "=r"(result) : "r"(op1), "r"(op2), "r"(op3));
 8010100:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010104:	f5a3 7351 	sub.w	r3, r3, #836	; 0x344
 8010108:	6819      	ldr	r1, [r3, #0]
 801010a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801010e:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 8010112:	681a      	ldr	r2, [r3, #0]
 8010114:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010118:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 801011c:	681b      	ldr	r3, [r3, #0]
 801011e:	fb21 3202 	smlad	r2, r1, r2, r3
 8010122:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010126:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 801012a:	601a      	str	r2, [r3, #0]
    return (result);
 801012c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010130:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	f8c7 3cb0 	str.w	r3, [r7, #3248]	; 0xcb0

                // 4 x MAC res10, res11
                val0 = arm_nn_read_s8x4((const int8_t *)&lhs_ptr[lhs_off0]);
 801013a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801013e:	f6a3 3324 	subw	r3, r3, #2852	; 0xb24
 8010142:	681a      	ldr	r2, [r3, #0]
 8010144:	f8d7 3c78 	ldr.w	r3, [r7, #3192]	; 0xc78
 8010148:	441a      	add	r2, r3
 801014a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801014e:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 8010152:	601a      	str	r2, [r3, #0]
 8010154:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010158:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	461a      	mov	r2, r3
    memcpy(&val, in_s8, 4);
 8010162:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010166:	f6a3 3378 	subw	r3, r3, #2936	; 0xb78
 801016a:	601a      	str	r2, [r3, #0]
    return (val);
 801016c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010170:	f6a3 3378 	subw	r3, r3, #2936	; 0xb78
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	f8c7 3c44 	str.w	r3, [r7, #3140]	; 0xc44
                val3 = SXTB16(val0);
 801017a:	f8d7 2c44 	ldr.w	r2, [r7, #3140]	; 0xc44
 801017e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010182:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 8010186:	601a      	str	r2, [r3, #0]
    __ASM("sxtb16 %0, %1" : "=r"(result) : "r"(op1));
 8010188:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801018c:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 8010190:	681b      	ldr	r3, [r3, #0]
 8010192:	fa2f f283 	sxtb16	r2, r3
 8010196:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801019a:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 801019e:	601a      	str	r2, [r3, #0]
    return (result);
 80101a0:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80101a4:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 80101a8:	681b      	ldr	r3, [r3, #0]
 80101aa:	f8c7 3c40 	str.w	r3, [r7, #3136]	; 0xc40
                val0 = SXTB16_RORn(val0, 8);
 80101ae:	f8d7 2c44 	ldr.w	r2, [r7, #3140]	; 0xc44
 80101b2:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80101b6:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 80101ba:	601a      	str	r2, [r3, #0]
 80101bc:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80101c0:	f5a3 7248 	sub.w	r2, r3, #800	; 0x320
 80101c4:	2308      	movs	r3, #8
 80101c6:	6013      	str	r3, [r2, #0]
 80101c8:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80101cc:	f5a3 7249 	sub.w	r2, r3, #804	; 0x324
 80101d0:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80101d4:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	6013      	str	r3, [r2, #0]
 80101dc:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80101e0:	f5a3 724a 	sub.w	r2, r3, #808	; 0x328
 80101e4:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80101e8:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 80101ec:	681b      	ldr	r3, [r3, #0]
 80101ee:	6013      	str	r3, [r2, #0]
    op2 %= 32U;
 80101f0:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80101f4:	f5a3 724a 	sub.w	r2, r3, #808	; 0x328
 80101f8:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80101fc:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	f003 031f 	and.w	r3, r3, #31
 8010206:	6013      	str	r3, [r2, #0]
    if (op2 == 0U)
 8010208:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801020c:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8010210:	681b      	ldr	r3, [r3, #0]
 8010212:	2b00      	cmp	r3, #0
 8010214:	d105      	bne.n	8010222 <arm_nn_mat_mult_nt_t_s8+0x1042>
        return op1;
 8010216:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801021a:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 801021e:	681a      	ldr	r2, [r3, #0]
 8010220:	e00a      	b.n	8010238 <arm_nn_mat_mult_nt_t_s8+0x1058>
    return (op1 >> op2) | (op1 << (32U - op2));
 8010222:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010226:	f5a3 7249 	sub.w	r2, r3, #804	; 0x324
 801022a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801022e:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8010232:	6812      	ldr	r2, [r2, #0]
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	41da      	rors	r2, r3
 8010238:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801023c:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 8010240:	601a      	str	r2, [r3, #0]
    __ASM("sxtb16 %0, %1" : "=r"(result) : "r"(op1));
 8010242:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010246:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	fa2f f283 	sxtb16	r2, r3
 8010250:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010254:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8010258:	601a      	str	r2, [r3, #0]
    return (result);
 801025a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801025e:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8010262:	681a      	ldr	r2, [r3, #0]
        result = SXTB16(ROR(op1, rotate));
 8010264:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010268:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 801026c:	601a      	str	r2, [r3, #0]
    return result;
 801026e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010272:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	f8c7 3c44 	str.w	r3, [r7, #3140]	; 0xc44
                res10 = SMLAD(val3, val2, res10);
 801027c:	f8d7 2c40 	ldr.w	r2, [r7, #3136]	; 0xc40
 8010280:	f8d7 1c48 	ldr.w	r1, [r7, #3144]	; 0xc48
 8010284:	f8d7 0cac 	ldr.w	r0, [r7, #3244]	; 0xcac
 8010288:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801028c:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8010290:	601a      	str	r2, [r3, #0]
 8010292:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010296:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 801029a:	6019      	str	r1, [r3, #0]
 801029c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80102a0:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 80102a4:	6018      	str	r0, [r3, #0]
    __ASM volatile("smlad %0, %1, %2, %3" : "=r"(result) : "r"(op1), "r"(op2), "r"(op3));
 80102a6:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80102aa:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 80102ae:	6819      	ldr	r1, [r3, #0]
 80102b0:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80102b4:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 80102b8:	681a      	ldr	r2, [r3, #0]
 80102ba:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80102be:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	fb21 3202 	smlad	r2, r1, r2, r3
 80102c8:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80102cc:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 80102d0:	601a      	str	r2, [r3, #0]
    return (result);
 80102d2:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80102d6:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 80102da:	681b      	ldr	r3, [r3, #0]
 80102dc:	f8c7 3cac 	str.w	r3, [r7, #3244]	; 0xcac
                res11 = SMLAD(val3, val5, res11);
 80102e0:	f8d7 2c40 	ldr.w	r2, [r7, #3136]	; 0xc40
 80102e4:	f8d7 1c38 	ldr.w	r1, [r7, #3128]	; 0xc38
 80102e8:	f8d7 0ca8 	ldr.w	r0, [r7, #3240]	; 0xca8
 80102ec:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80102f0:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 80102f4:	601a      	str	r2, [r3, #0]
 80102f6:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80102fa:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 80102fe:	6019      	str	r1, [r3, #0]
 8010300:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010304:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 8010308:	6018      	str	r0, [r3, #0]
    __ASM volatile("smlad %0, %1, %2, %3" : "=r"(result) : "r"(op1), "r"(op2), "r"(op3));
 801030a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801030e:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 8010312:	6819      	ldr	r1, [r3, #0]
 8010314:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010318:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 801031c:	681a      	ldr	r2, [r3, #0]
 801031e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010322:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 8010326:	681b      	ldr	r3, [r3, #0]
 8010328:	fb21 3202 	smlad	r2, r1, r2, r3
 801032c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010330:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 8010334:	601a      	str	r2, [r3, #0]
    return (result);
 8010336:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801033a:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 801033e:	681b      	ldr	r3, [r3, #0]
 8010340:	f8c7 3ca8 	str.w	r3, [r7, #3240]	; 0xca8
                res10 = SMLAD(val0, val1, res10);
 8010344:	f8d7 2c44 	ldr.w	r2, [r7, #3140]	; 0xc44
 8010348:	f8d7 1c4c 	ldr.w	r1, [r7, #3148]	; 0xc4c
 801034c:	f8d7 0cac 	ldr.w	r0, [r7, #3244]	; 0xcac
 8010350:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010354:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8010358:	601a      	str	r2, [r3, #0]
 801035a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801035e:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 8010362:	6019      	str	r1, [r3, #0]
 8010364:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010368:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 801036c:	6018      	str	r0, [r3, #0]
    __ASM volatile("smlad %0, %1, %2, %3" : "=r"(result) : "r"(op1), "r"(op2), "r"(op3));
 801036e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010372:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8010376:	6819      	ldr	r1, [r3, #0]
 8010378:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801037c:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 8010380:	681a      	ldr	r2, [r3, #0]
 8010382:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010386:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	fb21 3202 	smlad	r2, r1, r2, r3
 8010390:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010394:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 8010398:	601a      	str	r2, [r3, #0]
    return (result);
 801039a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801039e:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 80103a2:	681b      	ldr	r3, [r3, #0]
 80103a4:	f8c7 3cac 	str.w	r3, [r7, #3244]	; 0xcac
 80103a8:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80103ac:	f5a3 723a 	sub.w	r2, r3, #744	; 0x2e8
 80103b0:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80103b4:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_s8, 4);
 80103b6:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80103ba:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	681b      	ldr	r3, [r3, #0]
 80103c2:	681b      	ldr	r3, [r3, #0]
 80103c4:	461a      	mov	r2, r3
 80103c6:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80103ca:	f6a3 337c 	subw	r3, r3, #2940	; 0xb7c
 80103ce:	601a      	str	r2, [r3, #0]
    *in_s8 += 4;
 80103d0:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80103d4:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	681b      	ldr	r3, [r3, #0]
 80103dc:	1d1a      	adds	r2, r3, #4
 80103de:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80103e2:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	601a      	str	r2, [r3, #0]
    return (val);
 80103ea:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80103ee:	f6a3 337c 	subw	r3, r3, #2940	; 0xb7c
 80103f2:	681b      	ldr	r3, [r3, #0]
                val1 = arm_nn_read_s8x4_ia((const int8_t **)&rhs_ptr);
 80103f4:	f8c7 3c4c 	str.w	r3, [r7, #3148]	; 0xc4c
                res11 = SMLAD(val0, val4, res11);
 80103f8:	f8d7 2c44 	ldr.w	r2, [r7, #3140]	; 0xc44
 80103fc:	f8d7 1c3c 	ldr.w	r1, [r7, #3132]	; 0xc3c
 8010400:	f8d7 0ca8 	ldr.w	r0, [r7, #3240]	; 0xca8
 8010404:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010408:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 801040c:	601a      	str	r2, [r3, #0]
 801040e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010412:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 8010416:	6019      	str	r1, [r3, #0]
 8010418:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801041c:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8010420:	6018      	str	r0, [r3, #0]
    __ASM volatile("smlad %0, %1, %2, %3" : "=r"(result) : "r"(op1), "r"(op2), "r"(op3));
 8010422:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010426:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 801042a:	6819      	ldr	r1, [r3, #0]
 801042c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010430:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 8010434:	681a      	ldr	r2, [r3, #0]
 8010436:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801043a:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	fb21 3202 	smlad	r2, r1, r2, r3
 8010444:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010448:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 801044c:	601a      	str	r2, [r3, #0]
    return (result);
 801044e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010452:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	f8c7 3ca8 	str.w	r3, [r7, #3240]	; 0xca8

                val4 = arm_nn_read_s8x4((const int8_t *)&rhs_ptr[rhs_off0]);
 801045c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010460:	f6a3 3328 	subw	r3, r3, #2856	; 0xb28
 8010464:	681a      	ldr	r2, [r3, #0]
 8010466:	f8d7 3c7c 	ldr.w	r3, [r7, #3196]	; 0xc7c
 801046a:	441a      	add	r2, r3
 801046c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010470:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8010474:	601a      	str	r2, [r3, #0]
 8010476:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801047a:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	681b      	ldr	r3, [r3, #0]
 8010482:	461a      	mov	r2, r3
    memcpy(&val, in_s8, 4);
 8010484:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010488:	f5a3 6338 	sub.w	r3, r3, #2944	; 0xb80
 801048c:	601a      	str	r2, [r3, #0]
    return (val);
 801048e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010492:	f5a3 6338 	sub.w	r3, r3, #2944	; 0xb80
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	f8c7 3c3c 	str.w	r3, [r7, #3132]	; 0xc3c
                val2 = SXTB16(val1);
 801049c:	f8d7 2c4c 	ldr.w	r2, [r7, #3148]	; 0xc4c
 80104a0:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80104a4:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 80104a8:	601a      	str	r2, [r3, #0]
    __ASM("sxtb16 %0, %1" : "=r"(result) : "r"(op1));
 80104aa:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80104ae:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 80104b2:	681b      	ldr	r3, [r3, #0]
 80104b4:	fa2f f283 	sxtb16	r2, r3
 80104b8:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80104bc:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 80104c0:	601a      	str	r2, [r3, #0]
    return (result);
 80104c2:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80104c6:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 80104ca:	681b      	ldr	r3, [r3, #0]
 80104cc:	f8c7 3c48 	str.w	r3, [r7, #3144]	; 0xc48
 80104d0:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80104d4:	f5a3 7232 	sub.w	r2, r3, #712	; 0x2c8
 80104d8:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 80104dc:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_s8, 4);
 80104de:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80104e2:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 80104e6:	681b      	ldr	r3, [r3, #0]
 80104e8:	681b      	ldr	r3, [r3, #0]
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	461a      	mov	r2, r3
 80104ee:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80104f2:	f6a3 3384 	subw	r3, r3, #2948	; 0xb84
 80104f6:	601a      	str	r2, [r3, #0]
    *in_s8 += 4;
 80104f8:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80104fc:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8010500:	681b      	ldr	r3, [r3, #0]
 8010502:	681b      	ldr	r3, [r3, #0]
 8010504:	1d1a      	adds	r2, r3, #4
 8010506:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801050a:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	601a      	str	r2, [r3, #0]
    return (val);
 8010512:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010516:	f6a3 3384 	subw	r3, r3, #2948	; 0xb84
 801051a:	681b      	ldr	r3, [r3, #0]
                val0 = arm_nn_read_s8x4_ia((const int8_t **)&lhs_ptr);
 801051c:	f8c7 3c44 	str.w	r3, [r7, #3140]	; 0xc44
                val3 = SXTB16(val0);
 8010520:	f8d7 2c44 	ldr.w	r2, [r7, #3140]	; 0xc44
 8010524:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010528:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 801052c:	601a      	str	r2, [r3, #0]
    __ASM("sxtb16 %0, %1" : "=r"(result) : "r"(op1));
 801052e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010532:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8010536:	681b      	ldr	r3, [r3, #0]
 8010538:	fa2f f283 	sxtb16	r2, r3
 801053c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010540:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8010544:	601a      	str	r2, [r3, #0]
    return (result);
 8010546:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801054a:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 801054e:	681b      	ldr	r3, [r3, #0]
 8010550:	f8c7 3c40 	str.w	r3, [r7, #3136]	; 0xc40
                val1 = SXTB16_RORn(val1, 8);
 8010554:	f8d7 2c4c 	ldr.w	r2, [r7, #3148]	; 0xc4c
 8010558:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801055c:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8010560:	601a      	str	r2, [r3, #0]
 8010562:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010566:	f5a3 722a 	sub.w	r2, r3, #680	; 0x2a8
 801056a:	2308      	movs	r3, #8
 801056c:	6013      	str	r3, [r2, #0]
 801056e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010572:	f5a3 722b 	sub.w	r2, r3, #684	; 0x2ac
 8010576:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801057a:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	6013      	str	r3, [r2, #0]
 8010582:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010586:	f5a3 722c 	sub.w	r2, r3, #688	; 0x2b0
 801058a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801058e:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	6013      	str	r3, [r2, #0]
    op2 %= 32U;
 8010596:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801059a:	f5a3 722c 	sub.w	r2, r3, #688	; 0x2b0
 801059e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80105a2:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	f003 031f 	and.w	r3, r3, #31
 80105ac:	6013      	str	r3, [r2, #0]
    if (op2 == 0U)
 80105ae:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80105b2:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 80105b6:	681b      	ldr	r3, [r3, #0]
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d105      	bne.n	80105c8 <arm_nn_mat_mult_nt_t_s8+0x13e8>
        return op1;
 80105bc:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80105c0:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 80105c4:	681a      	ldr	r2, [r3, #0]
 80105c6:	e00a      	b.n	80105de <arm_nn_mat_mult_nt_t_s8+0x13fe>
    return (op1 >> op2) | (op1 << (32U - op2));
 80105c8:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80105cc:	f5a3 722b 	sub.w	r2, r3, #684	; 0x2ac
 80105d0:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80105d4:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 80105d8:	6812      	ldr	r2, [r2, #0]
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	41da      	rors	r2, r3
 80105de:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80105e2:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 80105e6:	601a      	str	r2, [r3, #0]
    __ASM("sxtb16 %0, %1" : "=r"(result) : "r"(op1));
 80105e8:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80105ec:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	fa2f f283 	sxtb16	r2, r3
 80105f6:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80105fa:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 80105fe:	601a      	str	r2, [r3, #0]
    return (result);
 8010600:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010604:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 8010608:	681a      	ldr	r2, [r3, #0]
        result = SXTB16(ROR(op1, rotate));
 801060a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801060e:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8010612:	601a      	str	r2, [r3, #0]
    return result;
 8010614:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010618:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 801061c:	681b      	ldr	r3, [r3, #0]
 801061e:	f8c7 3c4c 	str.w	r3, [r7, #3148]	; 0xc4c
                val0 = SXTB16_RORn(val0, 8);
 8010622:	f8d7 2c44 	ldr.w	r2, [r7, #3140]	; 0xc44
 8010626:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801062a:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 801062e:	601a      	str	r2, [r3, #0]
 8010630:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010634:	f5a3 7223 	sub.w	r2, r3, #652	; 0x28c
 8010638:	2308      	movs	r3, #8
 801063a:	6013      	str	r3, [r2, #0]
 801063c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010640:	f5a3 7224 	sub.w	r2, r3, #656	; 0x290
 8010644:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010648:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 801064c:	681b      	ldr	r3, [r3, #0]
 801064e:	6013      	str	r3, [r2, #0]
 8010650:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010654:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 8010658:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801065c:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	6013      	str	r3, [r2, #0]
    op2 %= 32U;
 8010664:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010668:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 801066c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010670:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8010674:	681b      	ldr	r3, [r3, #0]
 8010676:	f003 031f 	and.w	r3, r3, #31
 801067a:	6013      	str	r3, [r2, #0]
    if (op2 == 0U)
 801067c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010680:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	2b00      	cmp	r3, #0
 8010688:	d105      	bne.n	8010696 <arm_nn_mat_mult_nt_t_s8+0x14b6>
        return op1;
 801068a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801068e:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8010692:	681a      	ldr	r2, [r3, #0]
 8010694:	e00a      	b.n	80106ac <arm_nn_mat_mult_nt_t_s8+0x14cc>
    return (op1 >> op2) | (op1 << (32U - op2));
 8010696:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801069a:	f5a3 7224 	sub.w	r2, r3, #656	; 0x290
 801069e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80106a2:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80106a6:	6812      	ldr	r2, [r2, #0]
 80106a8:	681b      	ldr	r3, [r3, #0]
 80106aa:	41da      	rors	r2, r3
 80106ac:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80106b0:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 80106b4:	601a      	str	r2, [r3, #0]
    __ASM("sxtb16 %0, %1" : "=r"(result) : "r"(op1));
 80106b6:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80106ba:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	fa2f f283 	sxtb16	r2, r3
 80106c4:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80106c8:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80106cc:	601a      	str	r2, [r3, #0]
    return (result);
 80106ce:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80106d2:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80106d6:	681a      	ldr	r2, [r3, #0]
        result = SXTB16(ROR(op1, rotate));
 80106d8:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80106dc:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80106e0:	601a      	str	r2, [r3, #0]
    return result;
 80106e2:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80106e6:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80106ea:	681b      	ldr	r3, [r3, #0]
 80106ec:	f8c7 3c44 	str.w	r3, [r7, #3140]	; 0xc44

                // 4 x MAC res00, res01
                res00 = SMLAD(val3, val2, res00);
 80106f0:	f8d7 2c40 	ldr.w	r2, [r7, #3136]	; 0xc40
 80106f4:	f8d7 1c48 	ldr.w	r1, [r7, #3144]	; 0xc48
 80106f8:	f8d7 0cb4 	ldr.w	r0, [r7, #3252]	; 0xcb4
 80106fc:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010700:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8010704:	601a      	str	r2, [r3, #0]
 8010706:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801070a:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 801070e:	6019      	str	r1, [r3, #0]
 8010710:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010714:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8010718:	6018      	str	r0, [r3, #0]
    __ASM volatile("smlad %0, %1, %2, %3" : "=r"(result) : "r"(op1), "r"(op2), "r"(op3));
 801071a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801071e:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8010722:	6819      	ldr	r1, [r3, #0]
 8010724:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010728:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 801072c:	681a      	ldr	r2, [r3, #0]
 801072e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010732:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8010736:	681b      	ldr	r3, [r3, #0]
 8010738:	fb21 3202 	smlad	r2, r1, r2, r3
 801073c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010740:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 8010744:	601a      	str	r2, [r3, #0]
    return (result);
 8010746:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801074a:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 801074e:	681b      	ldr	r3, [r3, #0]
 8010750:	f8c7 3cb4 	str.w	r3, [r7, #3252]	; 0xcb4
                val5 = SXTB16(val4);
 8010754:	f8d7 2c3c 	ldr.w	r2, [r7, #3132]	; 0xc3c
 8010758:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801075c:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8010760:	601a      	str	r2, [r3, #0]
    __ASM("sxtb16 %0, %1" : "=r"(result) : "r"(op1));
 8010762:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010766:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 801076a:	681b      	ldr	r3, [r3, #0]
 801076c:	fa2f f283 	sxtb16	r2, r3
 8010770:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010774:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8010778:	601a      	str	r2, [r3, #0]
    return (result);
 801077a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801077e:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	f8c7 3c38 	str.w	r3, [r7, #3128]	; 0xc38
                res00 = SMLAD(val0, val1, res00);
 8010788:	f8d7 2c44 	ldr.w	r2, [r7, #3140]	; 0xc44
 801078c:	f8d7 1c4c 	ldr.w	r1, [r7, #3148]	; 0xc4c
 8010790:	f8d7 0cb4 	ldr.w	r0, [r7, #3252]	; 0xcb4
 8010794:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010798:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 801079c:	601a      	str	r2, [r3, #0]
 801079e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80107a2:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80107a6:	6019      	str	r1, [r3, #0]
 80107a8:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80107ac:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 80107b0:	6018      	str	r0, [r3, #0]
    __ASM volatile("smlad %0, %1, %2, %3" : "=r"(result) : "r"(op1), "r"(op2), "r"(op3));
 80107b2:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80107b6:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80107ba:	6819      	ldr	r1, [r3, #0]
 80107bc:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80107c0:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80107c4:	681a      	ldr	r2, [r3, #0]
 80107c6:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80107ca:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 80107ce:	681b      	ldr	r3, [r3, #0]
 80107d0:	fb21 3202 	smlad	r2, r1, r2, r3
 80107d4:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80107d8:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80107dc:	601a      	str	r2, [r3, #0]
    return (result);
 80107de:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80107e2:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80107e6:	681b      	ldr	r3, [r3, #0]
 80107e8:	f8c7 3cb4 	str.w	r3, [r7, #3252]	; 0xcb4
                val4 = SXTB16_RORn(val4, 8);
 80107ec:	f8d7 2c3c 	ldr.w	r2, [r7, #3132]	; 0xc3c
 80107f0:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80107f4:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80107f8:	601a      	str	r2, [r3, #0]
 80107fa:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80107fe:	f5a3 7212 	sub.w	r2, r3, #584	; 0x248
 8010802:	2308      	movs	r3, #8
 8010804:	6013      	str	r3, [r2, #0]
 8010806:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801080a:	f5a3 7213 	sub.w	r2, r3, #588	; 0x24c
 801080e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010812:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8010816:	681b      	ldr	r3, [r3, #0]
 8010818:	6013      	str	r3, [r2, #0]
 801081a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801081e:	f5a3 7214 	sub.w	r2, r3, #592	; 0x250
 8010822:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010826:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	6013      	str	r3, [r2, #0]
    op2 %= 32U;
 801082e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010832:	f5a3 7214 	sub.w	r2, r3, #592	; 0x250
 8010836:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801083a:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 801083e:	681b      	ldr	r3, [r3, #0]
 8010840:	f003 031f 	and.w	r3, r3, #31
 8010844:	6013      	str	r3, [r2, #0]
    if (op2 == 0U)
 8010846:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801084a:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	2b00      	cmp	r3, #0
 8010852:	d105      	bne.n	8010860 <arm_nn_mat_mult_nt_t_s8+0x1680>
        return op1;
 8010854:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010858:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 801085c:	681a      	ldr	r2, [r3, #0]
 801085e:	e00a      	b.n	8010876 <arm_nn_mat_mult_nt_t_s8+0x1696>
    return (op1 >> op2) | (op1 << (32U - op2));
 8010860:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010864:	f5a3 7213 	sub.w	r2, r3, #588	; 0x24c
 8010868:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801086c:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8010870:	6812      	ldr	r2, [r2, #0]
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	41da      	rors	r2, r3
 8010876:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801087a:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 801087e:	601a      	str	r2, [r3, #0]
    __ASM("sxtb16 %0, %1" : "=r"(result) : "r"(op1));
 8010880:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010884:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8010888:	681b      	ldr	r3, [r3, #0]
 801088a:	fa2f f283 	sxtb16	r2, r3
 801088e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010892:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8010896:	601a      	str	r2, [r3, #0]
    return (result);
 8010898:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801089c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80108a0:	681a      	ldr	r2, [r3, #0]
        result = SXTB16(ROR(op1, rotate));
 80108a2:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80108a6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80108aa:	601a      	str	r2, [r3, #0]
    return result;
 80108ac:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80108b0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80108b4:	681b      	ldr	r3, [r3, #0]
 80108b6:	f8c7 3c3c 	str.w	r3, [r7, #3132]	; 0xc3c
                res01 = SMLAD(val3, val5, res01);
 80108ba:	f8d7 2c40 	ldr.w	r2, [r7, #3136]	; 0xc40
 80108be:	f8d7 1c38 	ldr.w	r1, [r7, #3128]	; 0xc38
 80108c2:	f8d7 0cb0 	ldr.w	r0, [r7, #3248]	; 0xcb0
 80108c6:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80108ca:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 80108ce:	601a      	str	r2, [r3, #0]
 80108d0:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80108d4:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 80108d8:	6019      	str	r1, [r3, #0]
 80108da:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80108de:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 80108e2:	6018      	str	r0, [r3, #0]
    __ASM volatile("smlad %0, %1, %2, %3" : "=r"(result) : "r"(op1), "r"(op2), "r"(op3));
 80108e4:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80108e8:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 80108ec:	6819      	ldr	r1, [r3, #0]
 80108ee:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80108f2:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 80108f6:	681a      	ldr	r2, [r3, #0]
 80108f8:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80108fc:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	fb21 3202 	smlad	r2, r1, r2, r3
 8010906:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801090a:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 801090e:	601a      	str	r2, [r3, #0]
    return (result);
 8010910:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010914:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	f8c7 3cb0 	str.w	r3, [r7, #3248]	; 0xcb0
                res01 = SMLAD(val0, val4, res01);
 801091e:	f8d7 2c44 	ldr.w	r2, [r7, #3140]	; 0xc44
 8010922:	f8d7 1c3c 	ldr.w	r1, [r7, #3132]	; 0xc3c
 8010926:	f8d7 0cb0 	ldr.w	r0, [r7, #3248]	; 0xcb0
 801092a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801092e:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8010932:	601a      	str	r2, [r3, #0]
 8010934:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010938:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 801093c:	6019      	str	r1, [r3, #0]
 801093e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010942:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8010946:	6018      	str	r0, [r3, #0]
    __ASM volatile("smlad %0, %1, %2, %3" : "=r"(result) : "r"(op1), "r"(op2), "r"(op3));
 8010948:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801094c:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8010950:	6819      	ldr	r1, [r3, #0]
 8010952:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010956:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 801095a:	681a      	ldr	r2, [r3, #0]
 801095c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010960:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8010964:	681b      	ldr	r3, [r3, #0]
 8010966:	fb21 3202 	smlad	r2, r1, r2, r3
 801096a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801096e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8010972:	601a      	str	r2, [r3, #0]
    return (result);
 8010974:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010978:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	f8c7 3cb0 	str.w	r3, [r7, #3248]	; 0xcb0

                // 4 x MAC res10, res11
                val0 = arm_nn_read_s8x4((const int8_t *)&lhs_ptr[lhs_off0]);
 8010982:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010986:	f6a3 3324 	subw	r3, r3, #2852	; 0xb24
 801098a:	681a      	ldr	r2, [r3, #0]
 801098c:	f8d7 3c78 	ldr.w	r3, [r7, #3192]	; 0xc78
 8010990:	441a      	add	r2, r3
 8010992:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010996:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 801099a:	601a      	str	r2, [r3, #0]
 801099c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80109a0:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 80109a4:	681b      	ldr	r3, [r3, #0]
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	461a      	mov	r2, r3
    memcpy(&val, in_s8, 4);
 80109aa:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80109ae:	f6a3 3388 	subw	r3, r3, #2952	; 0xb88
 80109b2:	601a      	str	r2, [r3, #0]
    return (val);
 80109b4:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80109b8:	f6a3 3388 	subw	r3, r3, #2952	; 0xb88
 80109bc:	681b      	ldr	r3, [r3, #0]
 80109be:	f8c7 3c44 	str.w	r3, [r7, #3140]	; 0xc44
                val3 = SXTB16(val0);
 80109c2:	f8d7 2c44 	ldr.w	r2, [r7, #3140]	; 0xc44
 80109c6:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80109ca:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 80109ce:	601a      	str	r2, [r3, #0]
    __ASM("sxtb16 %0, %1" : "=r"(result) : "r"(op1));
 80109d0:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80109d4:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	fa2f f283 	sxtb16	r2, r3
 80109de:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80109e2:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80109e6:	601a      	str	r2, [r3, #0]
    return (result);
 80109e8:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80109ec:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80109f0:	681b      	ldr	r3, [r3, #0]
 80109f2:	f8c7 3c40 	str.w	r3, [r7, #3136]	; 0xc40
                val0 = SXTB16_RORn(val0, 8);
 80109f6:	f8d7 2c44 	ldr.w	r2, [r7, #3140]	; 0xc44
 80109fa:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80109fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8010a02:	601a      	str	r2, [r3, #0]
 8010a04:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010a08:	f5a3 7200 	sub.w	r2, r3, #512	; 0x200
 8010a0c:	2308      	movs	r3, #8
 8010a0e:	6013      	str	r3, [r2, #0]
 8010a10:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010a14:	f5a3 7201 	sub.w	r2, r3, #516	; 0x204
 8010a18:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010a1c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8010a20:	681b      	ldr	r3, [r3, #0]
 8010a22:	6013      	str	r3, [r2, #0]
 8010a24:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010a28:	f5a3 7202 	sub.w	r2, r3, #520	; 0x208
 8010a2c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010a30:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	6013      	str	r3, [r2, #0]
    op2 %= 32U;
 8010a38:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010a3c:	f5a3 7202 	sub.w	r2, r3, #520	; 0x208
 8010a40:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010a44:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	f003 031f 	and.w	r3, r3, #31
 8010a4e:	6013      	str	r3, [r2, #0]
    if (op2 == 0U)
 8010a50:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010a54:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8010a58:	681b      	ldr	r3, [r3, #0]
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d105      	bne.n	8010a6a <arm_nn_mat_mult_nt_t_s8+0x188a>
        return op1;
 8010a5e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010a62:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8010a66:	681a      	ldr	r2, [r3, #0]
 8010a68:	e00a      	b.n	8010a80 <arm_nn_mat_mult_nt_t_s8+0x18a0>
    return (op1 >> op2) | (op1 << (32U - op2));
 8010a6a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010a6e:	f5a3 7201 	sub.w	r2, r3, #516	; 0x204
 8010a72:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010a76:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8010a7a:	6812      	ldr	r2, [r2, #0]
 8010a7c:	681b      	ldr	r3, [r3, #0]
 8010a7e:	41da      	rors	r2, r3
 8010a80:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010a84:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8010a88:	601a      	str	r2, [r3, #0]
    __ASM("sxtb16 %0, %1" : "=r"(result) : "r"(op1));
 8010a8a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010a8e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	fa2f f283 	sxtb16	r2, r3
 8010a98:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010a9c:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8010aa0:	601a      	str	r2, [r3, #0]
    return (result);
 8010aa2:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010aa6:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8010aaa:	681a      	ldr	r2, [r3, #0]
        result = SXTB16(ROR(op1, rotate));
 8010aac:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010ab0:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8010ab4:	601a      	str	r2, [r3, #0]
    return result;
 8010ab6:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010aba:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8010abe:	681b      	ldr	r3, [r3, #0]
 8010ac0:	f8c7 3c44 	str.w	r3, [r7, #3140]	; 0xc44
                res10 = SMLAD(val3, val2, res10);
 8010ac4:	f8d7 2c40 	ldr.w	r2, [r7, #3136]	; 0xc40
 8010ac8:	f8d7 1c48 	ldr.w	r1, [r7, #3144]	; 0xc48
 8010acc:	f8d7 0cac 	ldr.w	r0, [r7, #3244]	; 0xcac
 8010ad0:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010ad4:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8010ad8:	601a      	str	r2, [r3, #0]
 8010ada:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010ade:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8010ae2:	6019      	str	r1, [r3, #0]
 8010ae4:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010ae8:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8010aec:	6018      	str	r0, [r3, #0]
    __ASM volatile("smlad %0, %1, %2, %3" : "=r"(result) : "r"(op1), "r"(op2), "r"(op3));
 8010aee:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010af2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8010af6:	6819      	ldr	r1, [r3, #0]
 8010af8:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010afc:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8010b00:	681a      	ldr	r2, [r3, #0]
 8010b02:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010b06:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8010b0a:	681b      	ldr	r3, [r3, #0]
 8010b0c:	fb21 3202 	smlad	r2, r1, r2, r3
 8010b10:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010b14:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8010b18:	601a      	str	r2, [r3, #0]
    return (result);
 8010b1a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010b1e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	f8c7 3cac 	str.w	r3, [r7, #3244]	; 0xcac
                res11 = SMLAD(val3, val5, res11);
 8010b28:	f8d7 2c40 	ldr.w	r2, [r7, #3136]	; 0xc40
 8010b2c:	f8d7 1c38 	ldr.w	r1, [r7, #3128]	; 0xc38
 8010b30:	f8d7 0ca8 	ldr.w	r0, [r7, #3240]	; 0xca8
 8010b34:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010b38:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8010b3c:	601a      	str	r2, [r3, #0]
 8010b3e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010b42:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8010b46:	6019      	str	r1, [r3, #0]
 8010b48:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010b4c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8010b50:	6018      	str	r0, [r3, #0]
    __ASM volatile("smlad %0, %1, %2, %3" : "=r"(result) : "r"(op1), "r"(op2), "r"(op3));
 8010b52:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010b56:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8010b5a:	6819      	ldr	r1, [r3, #0]
 8010b5c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010b60:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8010b64:	681a      	ldr	r2, [r3, #0]
 8010b66:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010b6a:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8010b6e:	681b      	ldr	r3, [r3, #0]
 8010b70:	fb21 3202 	smlad	r2, r1, r2, r3
 8010b74:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010b78:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8010b7c:	601a      	str	r2, [r3, #0]
    return (result);
 8010b7e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010b82:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8010b86:	681b      	ldr	r3, [r3, #0]
 8010b88:	f8c7 3ca8 	str.w	r3, [r7, #3240]	; 0xca8
                res10 = SMLAD(val0, val1, res10);
 8010b8c:	f8d7 2c44 	ldr.w	r2, [r7, #3140]	; 0xc44
 8010b90:	f8d7 1c4c 	ldr.w	r1, [r7, #3148]	; 0xc4c
 8010b94:	f8d7 0cac 	ldr.w	r0, [r7, #3244]	; 0xcac
 8010b98:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010b9c:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8010ba0:	601a      	str	r2, [r3, #0]
 8010ba2:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010ba6:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8010baa:	6019      	str	r1, [r3, #0]
 8010bac:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010bb0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8010bb4:	6018      	str	r0, [r3, #0]
    __ASM volatile("smlad %0, %1, %2, %3" : "=r"(result) : "r"(op1), "r"(op2), "r"(op3));
 8010bb6:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010bba:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8010bbe:	6819      	ldr	r1, [r3, #0]
 8010bc0:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010bc4:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8010bc8:	681a      	ldr	r2, [r3, #0]
 8010bca:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010bce:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	fb21 3202 	smlad	r2, r1, r2, r3
 8010bd8:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010bdc:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8010be0:	601a      	str	r2, [r3, #0]
    return (result);
 8010be2:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010be6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8010bea:	681b      	ldr	r3, [r3, #0]
 8010bec:	f8c7 3cac 	str.w	r3, [r7, #3244]	; 0xcac
 8010bf0:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010bf4:	f5a3 72e4 	sub.w	r2, r3, #456	; 0x1c8
 8010bf8:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8010bfc:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_s8, 4);
 8010bfe:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010c02:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8010c06:	681b      	ldr	r3, [r3, #0]
 8010c08:	681b      	ldr	r3, [r3, #0]
 8010c0a:	681b      	ldr	r3, [r3, #0]
 8010c0c:	461a      	mov	r2, r3
 8010c0e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010c12:	f6a3 338c 	subw	r3, r3, #2956	; 0xb8c
 8010c16:	601a      	str	r2, [r3, #0]
    *in_s8 += 4;
 8010c18:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010c1c:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8010c20:	681b      	ldr	r3, [r3, #0]
 8010c22:	681b      	ldr	r3, [r3, #0]
 8010c24:	1d1a      	adds	r2, r3, #4
 8010c26:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010c2a:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	601a      	str	r2, [r3, #0]
    return (val);
 8010c32:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010c36:	f6a3 338c 	subw	r3, r3, #2956	; 0xb8c
 8010c3a:	681b      	ldr	r3, [r3, #0]
                val1 = arm_nn_read_s8x4_ia((const int8_t **)&rhs_ptr);
 8010c3c:	f8c7 3c4c 	str.w	r3, [r7, #3148]	; 0xc4c
                res11 = SMLAD(val0, val4, res11);
 8010c40:	f8d7 2c44 	ldr.w	r2, [r7, #3140]	; 0xc44
 8010c44:	f8d7 1c3c 	ldr.w	r1, [r7, #3132]	; 0xc3c
 8010c48:	f8d7 0ca8 	ldr.w	r0, [r7, #3240]	; 0xca8
 8010c4c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010c50:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8010c54:	601a      	str	r2, [r3, #0]
 8010c56:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010c5a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010c5e:	6019      	str	r1, [r3, #0]
 8010c60:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010c64:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8010c68:	6018      	str	r0, [r3, #0]
    __ASM volatile("smlad %0, %1, %2, %3" : "=r"(result) : "r"(op1), "r"(op2), "r"(op3));
 8010c6a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010c6e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8010c72:	6819      	ldr	r1, [r3, #0]
 8010c74:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010c78:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8010c7c:	681a      	ldr	r2, [r3, #0]
 8010c7e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010c82:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8010c86:	681b      	ldr	r3, [r3, #0]
 8010c88:	fb21 3202 	smlad	r2, r1, r2, r3
 8010c8c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010c90:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8010c94:	601a      	str	r2, [r3, #0]
    return (result);
 8010c96:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010c9a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8010c9e:	681b      	ldr	r3, [r3, #0]
 8010ca0:	f8c7 3ca8 	str.w	r3, [r7, #3240]	; 0xca8

                val4 = arm_nn_read_s8x4((const int8_t *)&rhs_ptr[rhs_off0]);
 8010ca4:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010ca8:	f6a3 3328 	subw	r3, r3, #2856	; 0xb28
 8010cac:	681a      	ldr	r2, [r3, #0]
 8010cae:	f8d7 3c7c 	ldr.w	r3, [r7, #3196]	; 0xc7c
 8010cb2:	441a      	add	r2, r3
 8010cb4:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010cb8:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8010cbc:	601a      	str	r2, [r3, #0]
 8010cbe:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010cc2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8010cc6:	681b      	ldr	r3, [r3, #0]
 8010cc8:	681b      	ldr	r3, [r3, #0]
 8010cca:	461a      	mov	r2, r3
    memcpy(&val, in_s8, 4);
 8010ccc:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010cd0:	f5a3 6339 	sub.w	r3, r3, #2960	; 0xb90
 8010cd4:	601a      	str	r2, [r3, #0]
    return (val);
 8010cd6:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010cda:	f5a3 6339 	sub.w	r3, r3, #2960	; 0xb90
 8010cde:	681b      	ldr	r3, [r3, #0]
 8010ce0:	f8c7 3c3c 	str.w	r3, [r7, #3132]	; 0xc3c
                val2 = SXTB16(val1);
 8010ce4:	f8d7 2c4c 	ldr.w	r2, [r7, #3148]	; 0xc4c
 8010ce8:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010cec:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8010cf0:	601a      	str	r2, [r3, #0]
    __ASM("sxtb16 %0, %1" : "=r"(result) : "r"(op1));
 8010cf2:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010cf6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8010cfa:	681b      	ldr	r3, [r3, #0]
 8010cfc:	fa2f f283 	sxtb16	r2, r3
 8010d00:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010d04:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8010d08:	601a      	str	r2, [r3, #0]
    return (result);
 8010d0a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010d0e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8010d12:	681b      	ldr	r3, [r3, #0]
 8010d14:	f8c7 3c48 	str.w	r3, [r7, #3144]	; 0xc48
 8010d18:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010d1c:	f5a3 72d4 	sub.w	r2, r3, #424	; 0x1a8
 8010d20:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8010d24:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_s8, 4);
 8010d26:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010d2a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8010d2e:	681b      	ldr	r3, [r3, #0]
 8010d30:	681b      	ldr	r3, [r3, #0]
 8010d32:	681b      	ldr	r3, [r3, #0]
 8010d34:	461a      	mov	r2, r3
 8010d36:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010d3a:	f6a3 3394 	subw	r3, r3, #2964	; 0xb94
 8010d3e:	601a      	str	r2, [r3, #0]
    *in_s8 += 4;
 8010d40:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010d44:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8010d48:	681b      	ldr	r3, [r3, #0]
 8010d4a:	681b      	ldr	r3, [r3, #0]
 8010d4c:	1d1a      	adds	r2, r3, #4
 8010d4e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010d52:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8010d56:	681b      	ldr	r3, [r3, #0]
 8010d58:	601a      	str	r2, [r3, #0]
    return (val);
 8010d5a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010d5e:	f6a3 3394 	subw	r3, r3, #2964	; 0xb94
 8010d62:	681b      	ldr	r3, [r3, #0]
                val0 = arm_nn_read_s8x4_ia((const int8_t **)&lhs_ptr);
 8010d64:	f8c7 3c44 	str.w	r3, [r7, #3140]	; 0xc44
                val3 = SXTB16(val0);
 8010d68:	f8d7 2c44 	ldr.w	r2, [r7, #3140]	; 0xc44
 8010d6c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010d70:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8010d74:	601a      	str	r2, [r3, #0]
    __ASM("sxtb16 %0, %1" : "=r"(result) : "r"(op1));
 8010d76:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010d7a:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8010d7e:	681b      	ldr	r3, [r3, #0]
 8010d80:	fa2f f283 	sxtb16	r2, r3
 8010d84:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010d88:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8010d8c:	601a      	str	r2, [r3, #0]
    return (result);
 8010d8e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010d92:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8010d96:	681b      	ldr	r3, [r3, #0]
 8010d98:	f8c7 3c40 	str.w	r3, [r7, #3136]	; 0xc40
                val1 = SXTB16_RORn(val1, 8);
 8010d9c:	f8d7 2c4c 	ldr.w	r2, [r7, #3148]	; 0xc4c
 8010da0:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010da4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8010da8:	601a      	str	r2, [r3, #0]
 8010daa:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010dae:	f5a3 72c4 	sub.w	r2, r3, #392	; 0x188
 8010db2:	2308      	movs	r3, #8
 8010db4:	6013      	str	r3, [r2, #0]
 8010db6:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010dba:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 8010dbe:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010dc2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8010dc6:	681b      	ldr	r3, [r3, #0]
 8010dc8:	6013      	str	r3, [r2, #0]
 8010dca:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010dce:	f5a3 72c8 	sub.w	r2, r3, #400	; 0x190
 8010dd2:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010dd6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8010dda:	681b      	ldr	r3, [r3, #0]
 8010ddc:	6013      	str	r3, [r2, #0]
    op2 %= 32U;
 8010dde:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010de2:	f5a3 72c8 	sub.w	r2, r3, #400	; 0x190
 8010de6:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010dea:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8010dee:	681b      	ldr	r3, [r3, #0]
 8010df0:	f003 031f 	and.w	r3, r3, #31
 8010df4:	6013      	str	r3, [r2, #0]
    if (op2 == 0U)
 8010df6:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010dfa:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8010dfe:	681b      	ldr	r3, [r3, #0]
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d105      	bne.n	8010e10 <arm_nn_mat_mult_nt_t_s8+0x1c30>
        return op1;
 8010e04:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010e08:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8010e0c:	681a      	ldr	r2, [r3, #0]
 8010e0e:	e00a      	b.n	8010e26 <arm_nn_mat_mult_nt_t_s8+0x1c46>
    return (op1 >> op2) | (op1 << (32U - op2));
 8010e10:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010e14:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 8010e18:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010e1c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8010e20:	6812      	ldr	r2, [r2, #0]
 8010e22:	681b      	ldr	r3, [r3, #0]
 8010e24:	41da      	rors	r2, r3
 8010e26:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010e2a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8010e2e:	601a      	str	r2, [r3, #0]
    __ASM("sxtb16 %0, %1" : "=r"(result) : "r"(op1));
 8010e30:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010e34:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8010e38:	681b      	ldr	r3, [r3, #0]
 8010e3a:	fa2f f283 	sxtb16	r2, r3
 8010e3e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010e42:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8010e46:	601a      	str	r2, [r3, #0]
    return (result);
 8010e48:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010e4c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8010e50:	681a      	ldr	r2, [r3, #0]
        result = SXTB16(ROR(op1, rotate));
 8010e52:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010e56:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8010e5a:	601a      	str	r2, [r3, #0]
    return result;
 8010e5c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010e60:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8010e64:	681b      	ldr	r3, [r3, #0]
 8010e66:	f8c7 3c4c 	str.w	r3, [r7, #3148]	; 0xc4c
                val0 = SXTB16_RORn(val0, 8);
 8010e6a:	f8d7 2c44 	ldr.w	r2, [r7, #3140]	; 0xc44
 8010e6e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010e72:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8010e76:	601a      	str	r2, [r3, #0]
 8010e78:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010e7c:	f5a3 72b6 	sub.w	r2, r3, #364	; 0x16c
 8010e80:	2308      	movs	r3, #8
 8010e82:	6013      	str	r3, [r2, #0]
 8010e84:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010e88:	f5a3 72b8 	sub.w	r2, r3, #368	; 0x170
 8010e8c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010e90:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	6013      	str	r3, [r2, #0]
 8010e98:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010e9c:	f5a3 72ba 	sub.w	r2, r3, #372	; 0x174
 8010ea0:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010ea4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8010ea8:	681b      	ldr	r3, [r3, #0]
 8010eaa:	6013      	str	r3, [r2, #0]
    op2 %= 32U;
 8010eac:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010eb0:	f5a3 72ba 	sub.w	r2, r3, #372	; 0x174
 8010eb4:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010eb8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8010ebc:	681b      	ldr	r3, [r3, #0]
 8010ebe:	f003 031f 	and.w	r3, r3, #31
 8010ec2:	6013      	str	r3, [r2, #0]
    if (op2 == 0U)
 8010ec4:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010ec8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8010ecc:	681b      	ldr	r3, [r3, #0]
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d105      	bne.n	8010ede <arm_nn_mat_mult_nt_t_s8+0x1cfe>
        return op1;
 8010ed2:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010ed6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8010eda:	681a      	ldr	r2, [r3, #0]
 8010edc:	e00a      	b.n	8010ef4 <arm_nn_mat_mult_nt_t_s8+0x1d14>
    return (op1 >> op2) | (op1 << (32U - op2));
 8010ede:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010ee2:	f5a3 72b8 	sub.w	r2, r3, #368	; 0x170
 8010ee6:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010eea:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8010eee:	6812      	ldr	r2, [r2, #0]
 8010ef0:	681b      	ldr	r3, [r3, #0]
 8010ef2:	41da      	rors	r2, r3
 8010ef4:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010ef8:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8010efc:	601a      	str	r2, [r3, #0]
    __ASM("sxtb16 %0, %1" : "=r"(result) : "r"(op1));
 8010efe:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010f02:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8010f06:	681b      	ldr	r3, [r3, #0]
 8010f08:	fa2f f283 	sxtb16	r2, r3
 8010f0c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010f10:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8010f14:	601a      	str	r2, [r3, #0]
    return (result);
 8010f16:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010f1a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8010f1e:	681a      	ldr	r2, [r3, #0]
        result = SXTB16(ROR(op1, rotate));
 8010f20:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010f24:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8010f28:	601a      	str	r2, [r3, #0]
    return result;
 8010f2a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010f2e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	f8c7 3c44 	str.w	r3, [r7, #3140]	; 0xc44

                // 4 x MAC res00, res01
                res00 = SMLAD(val3, val2, res00);
 8010f38:	f8d7 2c40 	ldr.w	r2, [r7, #3136]	; 0xc40
 8010f3c:	f8d7 1c48 	ldr.w	r1, [r7, #3144]	; 0xc48
 8010f40:	f8d7 0cb4 	ldr.w	r0, [r7, #3252]	; 0xcb4
 8010f44:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010f48:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8010f4c:	601a      	str	r2, [r3, #0]
 8010f4e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010f52:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8010f56:	6019      	str	r1, [r3, #0]
 8010f58:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010f5c:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8010f60:	6018      	str	r0, [r3, #0]
    __ASM volatile("smlad %0, %1, %2, %3" : "=r"(result) : "r"(op1), "r"(op2), "r"(op3));
 8010f62:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010f66:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8010f6a:	6819      	ldr	r1, [r3, #0]
 8010f6c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010f70:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8010f74:	681a      	ldr	r2, [r3, #0]
 8010f76:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010f7a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8010f7e:	681b      	ldr	r3, [r3, #0]
 8010f80:	fb21 3202 	smlad	r2, r1, r2, r3
 8010f84:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010f88:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8010f8c:	601a      	str	r2, [r3, #0]
    return (result);
 8010f8e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010f92:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8010f96:	681b      	ldr	r3, [r3, #0]
 8010f98:	f8c7 3cb4 	str.w	r3, [r7, #3252]	; 0xcb4
                val5 = SXTB16(val4);
 8010f9c:	f8d7 2c3c 	ldr.w	r2, [r7, #3132]	; 0xc3c
 8010fa0:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010fa4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8010fa8:	601a      	str	r2, [r3, #0]
    __ASM("sxtb16 %0, %1" : "=r"(result) : "r"(op1));
 8010faa:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010fae:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	fa2f f283 	sxtb16	r2, r3
 8010fb8:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010fbc:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8010fc0:	601a      	str	r2, [r3, #0]
    return (result);
 8010fc2:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010fc6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8010fca:	681b      	ldr	r3, [r3, #0]
 8010fcc:	f8c7 3c38 	str.w	r3, [r7, #3128]	; 0xc38
                res00 = SMLAD(val0, val1, res00);
 8010fd0:	f8d7 2c44 	ldr.w	r2, [r7, #3140]	; 0xc44
 8010fd4:	f8d7 1c4c 	ldr.w	r1, [r7, #3148]	; 0xc4c
 8010fd8:	f8d7 0cb4 	ldr.w	r0, [r7, #3252]	; 0xcb4
 8010fdc:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010fe0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8010fe4:	601a      	str	r2, [r3, #0]
 8010fe6:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010fea:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8010fee:	6019      	str	r1, [r3, #0]
 8010ff0:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010ff4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8010ff8:	6018      	str	r0, [r3, #0]
    __ASM volatile("smlad %0, %1, %2, %3" : "=r"(result) : "r"(op1), "r"(op2), "r"(op3));
 8010ffa:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8010ffe:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8011002:	6819      	ldr	r1, [r3, #0]
 8011004:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011008:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 801100c:	681a      	ldr	r2, [r3, #0]
 801100e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011012:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8011016:	681b      	ldr	r3, [r3, #0]
 8011018:	fb21 3202 	smlad	r2, r1, r2, r3
 801101c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011020:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8011024:	601a      	str	r2, [r3, #0]
    return (result);
 8011026:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801102a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 801102e:	681b      	ldr	r3, [r3, #0]
 8011030:	f8c7 3cb4 	str.w	r3, [r7, #3252]	; 0xcb4
                val4 = SXTB16_RORn(val4, 8);
 8011034:	f8d7 2c3c 	ldr.w	r2, [r7, #3132]	; 0xc3c
 8011038:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801103c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8011040:	601a      	str	r2, [r3, #0]
 8011042:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011046:	f5a3 7294 	sub.w	r2, r3, #296	; 0x128
 801104a:	2308      	movs	r3, #8
 801104c:	6013      	str	r3, [r2, #0]
 801104e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011052:	f5a3 7296 	sub.w	r2, r3, #300	; 0x12c
 8011056:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801105a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 801105e:	681b      	ldr	r3, [r3, #0]
 8011060:	6013      	str	r3, [r2, #0]
 8011062:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011066:	f5a3 7298 	sub.w	r2, r3, #304	; 0x130
 801106a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801106e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8011072:	681b      	ldr	r3, [r3, #0]
 8011074:	6013      	str	r3, [r2, #0]
    op2 %= 32U;
 8011076:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801107a:	f5a3 7298 	sub.w	r2, r3, #304	; 0x130
 801107e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011082:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8011086:	681b      	ldr	r3, [r3, #0]
 8011088:	f003 031f 	and.w	r3, r3, #31
 801108c:	6013      	str	r3, [r2, #0]
    if (op2 == 0U)
 801108e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011092:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8011096:	681b      	ldr	r3, [r3, #0]
 8011098:	2b00      	cmp	r3, #0
 801109a:	d105      	bne.n	80110a8 <arm_nn_mat_mult_nt_t_s8+0x1ec8>
        return op1;
 801109c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80110a0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80110a4:	681a      	ldr	r2, [r3, #0]
 80110a6:	e00a      	b.n	80110be <arm_nn_mat_mult_nt_t_s8+0x1ede>
    return (op1 >> op2) | (op1 << (32U - op2));
 80110a8:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80110ac:	f5a3 7296 	sub.w	r2, r3, #300	; 0x12c
 80110b0:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80110b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80110b8:	6812      	ldr	r2, [r2, #0]
 80110ba:	681b      	ldr	r3, [r3, #0]
 80110bc:	41da      	rors	r2, r3
 80110be:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80110c2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80110c6:	601a      	str	r2, [r3, #0]
    __ASM("sxtb16 %0, %1" : "=r"(result) : "r"(op1));
 80110c8:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80110cc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80110d0:	681b      	ldr	r3, [r3, #0]
 80110d2:	fa2f f283 	sxtb16	r2, r3
 80110d6:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80110da:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80110de:	601a      	str	r2, [r3, #0]
    return (result);
 80110e0:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80110e4:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80110e8:	681a      	ldr	r2, [r3, #0]
        result = SXTB16(ROR(op1, rotate));
 80110ea:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80110ee:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80110f2:	601a      	str	r2, [r3, #0]
    return result;
 80110f4:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80110f8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80110fc:	681b      	ldr	r3, [r3, #0]
 80110fe:	f8c7 3c3c 	str.w	r3, [r7, #3132]	; 0xc3c
                res01 = SMLAD(val3, val5, res01);
 8011102:	f8d7 2c40 	ldr.w	r2, [r7, #3136]	; 0xc40
 8011106:	f8d7 1c38 	ldr.w	r1, [r7, #3128]	; 0xc38
 801110a:	f8d7 0cb0 	ldr.w	r0, [r7, #3248]	; 0xcb0
 801110e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011112:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8011116:	601a      	str	r2, [r3, #0]
 8011118:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801111c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8011120:	6019      	str	r1, [r3, #0]
 8011122:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011126:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 801112a:	6018      	str	r0, [r3, #0]
    __ASM volatile("smlad %0, %1, %2, %3" : "=r"(result) : "r"(op1), "r"(op2), "r"(op3));
 801112c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011130:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8011134:	6819      	ldr	r1, [r3, #0]
 8011136:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801113a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 801113e:	681a      	ldr	r2, [r3, #0]
 8011140:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011144:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8011148:	681b      	ldr	r3, [r3, #0]
 801114a:	fb21 3202 	smlad	r2, r1, r2, r3
 801114e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011152:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8011156:	601a      	str	r2, [r3, #0]
    return (result);
 8011158:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801115c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8011160:	681b      	ldr	r3, [r3, #0]
 8011162:	f8c7 3cb0 	str.w	r3, [r7, #3248]	; 0xcb0
                res01 = SMLAD(val0, val4, res01);
 8011166:	f8d7 2c44 	ldr.w	r2, [r7, #3140]	; 0xc44
 801116a:	f8d7 1c3c 	ldr.w	r1, [r7, #3132]	; 0xc3c
 801116e:	f8d7 0cb0 	ldr.w	r0, [r7, #3248]	; 0xcb0
 8011172:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011176:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801117a:	601a      	str	r2, [r3, #0]
 801117c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011180:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011184:	6019      	str	r1, [r3, #0]
 8011186:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801118a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801118e:	6018      	str	r0, [r3, #0]
    __ASM volatile("smlad %0, %1, %2, %3" : "=r"(result) : "r"(op1), "r"(op2), "r"(op3));
 8011190:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011194:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011198:	6819      	ldr	r1, [r3, #0]
 801119a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801119e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80111a2:	681a      	ldr	r2, [r3, #0]
 80111a4:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80111a8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80111ac:	681b      	ldr	r3, [r3, #0]
 80111ae:	fb21 3202 	smlad	r2, r1, r2, r3
 80111b2:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80111b6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80111ba:	601a      	str	r2, [r3, #0]
    return (result);
 80111bc:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80111c0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80111c4:	681b      	ldr	r3, [r3, #0]
 80111c6:	f8c7 3cb0 	str.w	r3, [r7, #3248]	; 0xcb0

                // 4 x MAC res10, res11
                val0 = arm_nn_read_s8x4((const int8_t *)&lhs_ptr[lhs_off0]);
 80111ca:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80111ce:	f6a3 3324 	subw	r3, r3, #2852	; 0xb24
 80111d2:	681a      	ldr	r2, [r3, #0]
 80111d4:	f8d7 3c78 	ldr.w	r3, [r7, #3192]	; 0xc78
 80111d8:	441a      	add	r2, r3
 80111da:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80111de:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80111e2:	601a      	str	r2, [r3, #0]
 80111e4:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80111e8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80111ec:	681b      	ldr	r3, [r3, #0]
 80111ee:	681b      	ldr	r3, [r3, #0]
 80111f0:	461a      	mov	r2, r3
    memcpy(&val, in_s8, 4);
 80111f2:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80111f6:	f6a3 3398 	subw	r3, r3, #2968	; 0xb98
 80111fa:	601a      	str	r2, [r3, #0]
    return (val);
 80111fc:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011200:	f6a3 3398 	subw	r3, r3, #2968	; 0xb98
 8011204:	681b      	ldr	r3, [r3, #0]
 8011206:	f8c7 3c44 	str.w	r3, [r7, #3140]	; 0xc44
                val3 = SXTB16(val0);
 801120a:	f8d7 3c44 	ldr.w	r3, [r7, #3140]	; 0xc44
 801120e:	f8c7 3bd8 	str.w	r3, [r7, #3032]	; 0xbd8
    __ASM("sxtb16 %0, %1" : "=r"(result) : "r"(op1));
 8011212:	f8d7 3bd8 	ldr.w	r3, [r7, #3032]	; 0xbd8
 8011216:	fa2f f383 	sxtb16	r3, r3
 801121a:	f8c7 3bd4 	str.w	r3, [r7, #3028]	; 0xbd4
    return (result);
 801121e:	f8d7 3bd4 	ldr.w	r3, [r7, #3028]	; 0xbd4
 8011222:	f8c7 3c40 	str.w	r3, [r7, #3136]	; 0xc40
                val0 = SXTB16_RORn(val0, 8);
 8011226:	f8d7 3c44 	ldr.w	r3, [r7, #3140]	; 0xc44
 801122a:	f8c7 3bf4 	str.w	r3, [r7, #3060]	; 0xbf4
 801122e:	2308      	movs	r3, #8
 8011230:	f8c7 3bf0 	str.w	r3, [r7, #3056]	; 0xbf0
 8011234:	f8d7 3bf4 	ldr.w	r3, [r7, #3060]	; 0xbf4
 8011238:	f8c7 3bec 	str.w	r3, [r7, #3052]	; 0xbec
 801123c:	f8d7 3bf0 	ldr.w	r3, [r7, #3056]	; 0xbf0
 8011240:	f8c7 3be8 	str.w	r3, [r7, #3048]	; 0xbe8
    op2 %= 32U;
 8011244:	f8d7 3be8 	ldr.w	r3, [r7, #3048]	; 0xbe8
 8011248:	f003 031f 	and.w	r3, r3, #31
 801124c:	f8c7 3be8 	str.w	r3, [r7, #3048]	; 0xbe8
    if (op2 == 0U)
 8011250:	f8d7 3be8 	ldr.w	r3, [r7, #3048]	; 0xbe8
 8011254:	2b00      	cmp	r3, #0
 8011256:	d102      	bne.n	801125e <arm_nn_mat_mult_nt_t_s8+0x207e>
        return op1;
 8011258:	f8d7 3bec 	ldr.w	r3, [r7, #3052]	; 0xbec
 801125c:	e005      	b.n	801126a <arm_nn_mat_mult_nt_t_s8+0x208a>
    return (op1 >> op2) | (op1 << (32U - op2));
 801125e:	f8d7 2bec 	ldr.w	r2, [r7, #3052]	; 0xbec
 8011262:	f8d7 3be8 	ldr.w	r3, [r7, #3048]	; 0xbe8
 8011266:	fa62 f303 	ror.w	r3, r2, r3
 801126a:	f8c7 3be4 	str.w	r3, [r7, #3044]	; 0xbe4
    __ASM("sxtb16 %0, %1" : "=r"(result) : "r"(op1));
 801126e:	f8d7 3be4 	ldr.w	r3, [r7, #3044]	; 0xbe4
 8011272:	fa2f f383 	sxtb16	r3, r3
 8011276:	f8c7 3be0 	str.w	r3, [r7, #3040]	; 0xbe0
    return (result);
 801127a:	f8d7 3be0 	ldr.w	r3, [r7, #3040]	; 0xbe0
        result = SXTB16(ROR(op1, rotate));
 801127e:	f8c7 3bdc 	str.w	r3, [r7, #3036]	; 0xbdc
    return result;
 8011282:	f8d7 3bdc 	ldr.w	r3, [r7, #3036]	; 0xbdc
 8011286:	f8c7 3c44 	str.w	r3, [r7, #3140]	; 0xc44
                res10 = SMLAD(val3, val2, res10);
 801128a:	f8d7 1c40 	ldr.w	r1, [r7, #3136]	; 0xc40
 801128e:	f8d7 2c48 	ldr.w	r2, [r7, #3144]	; 0xc48
 8011292:	f8d7 3cac 	ldr.w	r3, [r7, #3244]	; 0xcac
 8011296:	f8c7 1c04 	str.w	r1, [r7, #3076]	; 0xc04
 801129a:	f8c7 2c00 	str.w	r2, [r7, #3072]	; 0xc00
 801129e:	f8c7 3bfc 	str.w	r3, [r7, #3068]	; 0xbfc
    __ASM volatile("smlad %0, %1, %2, %3" : "=r"(result) : "r"(op1), "r"(op2), "r"(op3));
 80112a2:	f8d7 1c04 	ldr.w	r1, [r7, #3076]	; 0xc04
 80112a6:	f8d7 2c00 	ldr.w	r2, [r7, #3072]	; 0xc00
 80112aa:	f8d7 3bfc 	ldr.w	r3, [r7, #3068]	; 0xbfc
 80112ae:	fb21 3302 	smlad	r3, r1, r2, r3
 80112b2:	f8c7 3bf8 	str.w	r3, [r7, #3064]	; 0xbf8
    return (result);
 80112b6:	f8d7 3bf8 	ldr.w	r3, [r7, #3064]	; 0xbf8
 80112ba:	f8c7 3cac 	str.w	r3, [r7, #3244]	; 0xcac
                res11 = SMLAD(val3, val5, res11);
 80112be:	f8d7 1c40 	ldr.w	r1, [r7, #3136]	; 0xc40
 80112c2:	f8d7 2c38 	ldr.w	r2, [r7, #3128]	; 0xc38
 80112c6:	f8d7 3ca8 	ldr.w	r3, [r7, #3240]	; 0xca8
 80112ca:	f8c7 1c14 	str.w	r1, [r7, #3092]	; 0xc14
 80112ce:	f8c7 2c10 	str.w	r2, [r7, #3088]	; 0xc10
 80112d2:	f8c7 3c0c 	str.w	r3, [r7, #3084]	; 0xc0c
    __ASM volatile("smlad %0, %1, %2, %3" : "=r"(result) : "r"(op1), "r"(op2), "r"(op3));
 80112d6:	f8d7 1c14 	ldr.w	r1, [r7, #3092]	; 0xc14
 80112da:	f8d7 2c10 	ldr.w	r2, [r7, #3088]	; 0xc10
 80112de:	f8d7 3c0c 	ldr.w	r3, [r7, #3084]	; 0xc0c
 80112e2:	fb21 3302 	smlad	r3, r1, r2, r3
 80112e6:	f8c7 3c08 	str.w	r3, [r7, #3080]	; 0xc08
    return (result);
 80112ea:	f8d7 3c08 	ldr.w	r3, [r7, #3080]	; 0xc08
 80112ee:	f8c7 3ca8 	str.w	r3, [r7, #3240]	; 0xca8
                res10 = SMLAD(val0, val1, res10);
 80112f2:	f8d7 1c44 	ldr.w	r1, [r7, #3140]	; 0xc44
 80112f6:	f8d7 2c4c 	ldr.w	r2, [r7, #3148]	; 0xc4c
 80112fa:	f8d7 3cac 	ldr.w	r3, [r7, #3244]	; 0xcac
 80112fe:	f8c7 1c24 	str.w	r1, [r7, #3108]	; 0xc24
 8011302:	f8c7 2c20 	str.w	r2, [r7, #3104]	; 0xc20
 8011306:	f8c7 3c1c 	str.w	r3, [r7, #3100]	; 0xc1c
    __ASM volatile("smlad %0, %1, %2, %3" : "=r"(result) : "r"(op1), "r"(op2), "r"(op3));
 801130a:	f8d7 1c24 	ldr.w	r1, [r7, #3108]	; 0xc24
 801130e:	f8d7 2c20 	ldr.w	r2, [r7, #3104]	; 0xc20
 8011312:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8011316:	fb21 3302 	smlad	r3, r1, r2, r3
 801131a:	f8c7 3c18 	str.w	r3, [r7, #3096]	; 0xc18
    return (result);
 801131e:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 8011322:	f8c7 3cac 	str.w	r3, [r7, #3244]	; 0xcac
                res11 = SMLAD(val0, val4, res11);
 8011326:	f8d7 1c44 	ldr.w	r1, [r7, #3140]	; 0xc44
 801132a:	f8d7 2c3c 	ldr.w	r2, [r7, #3132]	; 0xc3c
 801132e:	f8d7 3ca8 	ldr.w	r3, [r7, #3240]	; 0xca8
 8011332:	f8c7 1c34 	str.w	r1, [r7, #3124]	; 0xc34
 8011336:	f8c7 2c30 	str.w	r2, [r7, #3120]	; 0xc30
 801133a:	f8c7 3c2c 	str.w	r3, [r7, #3116]	; 0xc2c
    __ASM volatile("smlad %0, %1, %2, %3" : "=r"(result) : "r"(op1), "r"(op2), "r"(op3));
 801133e:	f8d7 1c34 	ldr.w	r1, [r7, #3124]	; 0xc34
 8011342:	f8d7 2c30 	ldr.w	r2, [r7, #3120]	; 0xc30
 8011346:	f8d7 3c2c 	ldr.w	r3, [r7, #3116]	; 0xc2c
 801134a:	fb21 3302 	smlad	r3, r1, r2, r3
 801134e:	f8c7 3c28 	str.w	r3, [r7, #3112]	; 0xc28
    return (result);
 8011352:	f8d7 3c28 	ldr.w	r3, [r7, #3112]	; 0xc28
 8011356:	f8c7 3ca8 	str.w	r3, [r7, #3240]	; 0xca8
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 801135a:	f8d7 3ca4 	ldr.w	r3, [r7, #3236]	; 0xca4
 801135e:	3310      	adds	r3, #16
 8011360:	f8c7 3ca4 	str.w	r3, [r7, #3236]	; 0xca4
 8011364:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 8011368:	f1a3 020f 	sub.w	r2, r3, #15
 801136c:	f8d7 3ca4 	ldr.w	r3, [r7, #3236]	; 0xca4
 8011370:	4293      	cmp	r3, r2
 8011372:	f6fe a803 	blt.w	800f37c <arm_nn_mat_mult_nt_t_s8+0x19c>
            }

            for (; rhs_cols_idx <= (rhs_cols - 4); rhs_cols_idx += 4)
 8011376:	f000 bc29 	b.w	8011bcc <arm_nn_mat_mult_nt_t_s8+0x29ec>
 801137a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801137e:	f5a3 62c7 	sub.w	r2, r3, #1592	; 0x638
 8011382:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8011386:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_s8, 4);
 8011388:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801138c:	f5a3 63c7 	sub.w	r3, r3, #1592	; 0x638
 8011390:	681b      	ldr	r3, [r3, #0]
 8011392:	681b      	ldr	r3, [r3, #0]
 8011394:	681b      	ldr	r3, [r3, #0]
 8011396:	461a      	mov	r2, r3
 8011398:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801139c:	f6a3 334c 	subw	r3, r3, #2892	; 0xb4c
 80113a0:	601a      	str	r2, [r3, #0]
    *in_s8 += 4;
 80113a2:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80113a6:	f5a3 63c7 	sub.w	r3, r3, #1592	; 0x638
 80113aa:	681b      	ldr	r3, [r3, #0]
 80113ac:	681b      	ldr	r3, [r3, #0]
 80113ae:	1d1a      	adds	r2, r3, #4
 80113b0:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80113b4:	f5a3 63c7 	sub.w	r3, r3, #1592	; 0x638
 80113b8:	681b      	ldr	r3, [r3, #0]
 80113ba:	601a      	str	r2, [r3, #0]
    return (val);
 80113bc:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80113c0:	f6a3 334c 	subw	r3, r3, #2892	; 0xb4c
 80113c4:	681b      	ldr	r3, [r3, #0]
            {
                val1 = arm_nn_read_s8x4_ia((const int8_t **)&rhs_ptr);
 80113c6:	f8c7 3c4c 	str.w	r3, [r7, #3148]	; 0xc4c
                val2 = SXTB16(val1);
 80113ca:	f8d7 2c4c 	ldr.w	r2, [r7, #3148]	; 0xc4c
 80113ce:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80113d2:	f5a3 63c6 	sub.w	r3, r3, #1584	; 0x630
 80113d6:	601a      	str	r2, [r3, #0]
    __ASM("sxtb16 %0, %1" : "=r"(result) : "r"(op1));
 80113d8:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80113dc:	f5a3 63c6 	sub.w	r3, r3, #1584	; 0x630
 80113e0:	681b      	ldr	r3, [r3, #0]
 80113e2:	fa2f f283 	sxtb16	r2, r3
 80113e6:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80113ea:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 80113ee:	601a      	str	r2, [r3, #0]
    return (result);
 80113f0:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80113f4:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 80113f8:	681b      	ldr	r3, [r3, #0]
 80113fa:	f8c7 3c48 	str.w	r3, [r7, #3144]	; 0xc48
 80113fe:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011402:	f2a3 622c 	subw	r2, r3, #1580	; 0x62c
 8011406:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 801140a:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_s8, 4);
 801140c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011410:	f2a3 632c 	subw	r3, r3, #1580	; 0x62c
 8011414:	681b      	ldr	r3, [r3, #0]
 8011416:	681b      	ldr	r3, [r3, #0]
 8011418:	681b      	ldr	r3, [r3, #0]
 801141a:	461a      	mov	r2, r3
 801141c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011420:	f5a3 6335 	sub.w	r3, r3, #2896	; 0xb50
 8011424:	601a      	str	r2, [r3, #0]
    *in_s8 += 4;
 8011426:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801142a:	f2a3 632c 	subw	r3, r3, #1580	; 0x62c
 801142e:	681b      	ldr	r3, [r3, #0]
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	1d1a      	adds	r2, r3, #4
 8011434:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011438:	f2a3 632c 	subw	r3, r3, #1580	; 0x62c
 801143c:	681b      	ldr	r3, [r3, #0]
 801143e:	601a      	str	r2, [r3, #0]
    return (val);
 8011440:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011444:	f5a3 6335 	sub.w	r3, r3, #2896	; 0xb50
 8011448:	681b      	ldr	r3, [r3, #0]
                val0 = arm_nn_read_s8x4_ia((const int8_t **)&lhs_ptr);
 801144a:	f8c7 3c44 	str.w	r3, [r7, #3140]	; 0xc44
                val3 = SXTB16(val0);
 801144e:	f8d7 2c44 	ldr.w	r2, [r7, #3140]	; 0xc44
 8011452:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011456:	f2a3 6324 	subw	r3, r3, #1572	; 0x624
 801145a:	601a      	str	r2, [r3, #0]
    __ASM("sxtb16 %0, %1" : "=r"(result) : "r"(op1));
 801145c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011460:	f2a3 6324 	subw	r3, r3, #1572	; 0x624
 8011464:	681b      	ldr	r3, [r3, #0]
 8011466:	fa2f f283 	sxtb16	r2, r3
 801146a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801146e:	f5a3 63c5 	sub.w	r3, r3, #1576	; 0x628
 8011472:	601a      	str	r2, [r3, #0]
    return (result);
 8011474:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011478:	f5a3 63c5 	sub.w	r3, r3, #1576	; 0x628
 801147c:	681b      	ldr	r3, [r3, #0]
 801147e:	f8c7 3c40 	str.w	r3, [r7, #3136]	; 0xc40
                val4 = arm_nn_read_s8x4((const int8_t *)&rhs_ptr[rhs_off0]);
 8011482:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011486:	f6a3 3328 	subw	r3, r3, #2856	; 0xb28
 801148a:	681a      	ldr	r2, [r3, #0]
 801148c:	f8d7 3c7c 	ldr.w	r3, [r7, #3196]	; 0xc7c
 8011490:	441a      	add	r2, r3
 8011492:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011496:	f5a3 63c4 	sub.w	r3, r3, #1568	; 0x620
 801149a:	601a      	str	r2, [r3, #0]
 801149c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80114a0:	f5a3 63c4 	sub.w	r3, r3, #1568	; 0x620
 80114a4:	681b      	ldr	r3, [r3, #0]
 80114a6:	681b      	ldr	r3, [r3, #0]
 80114a8:	461a      	mov	r2, r3
    memcpy(&val, in_s8, 4);
 80114aa:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80114ae:	f6a3 3354 	subw	r3, r3, #2900	; 0xb54
 80114b2:	601a      	str	r2, [r3, #0]
    return (val);
 80114b4:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80114b8:	f6a3 3354 	subw	r3, r3, #2900	; 0xb54
 80114bc:	681b      	ldr	r3, [r3, #0]
 80114be:	f8c7 3c3c 	str.w	r3, [r7, #3132]	; 0xc3c
                val1 = SXTB16_RORn(val1, 8);
 80114c2:	f8d7 2c4c 	ldr.w	r2, [r7, #3148]	; 0xc4c
 80114c6:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80114ca:	f2a3 6304 	subw	r3, r3, #1540	; 0x604
 80114ce:	601a      	str	r2, [r3, #0]
 80114d0:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80114d4:	f5a3 62c1 	sub.w	r2, r3, #1544	; 0x608
 80114d8:	2308      	movs	r3, #8
 80114da:	6013      	str	r3, [r2, #0]
 80114dc:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80114e0:	f2a3 620c 	subw	r2, r3, #1548	; 0x60c
 80114e4:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80114e8:	f2a3 6304 	subw	r3, r3, #1540	; 0x604
 80114ec:	681b      	ldr	r3, [r3, #0]
 80114ee:	6013      	str	r3, [r2, #0]
 80114f0:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80114f4:	f5a3 62c2 	sub.w	r2, r3, #1552	; 0x610
 80114f8:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80114fc:	f5a3 63c1 	sub.w	r3, r3, #1544	; 0x608
 8011500:	681b      	ldr	r3, [r3, #0]
 8011502:	6013      	str	r3, [r2, #0]
    op2 %= 32U;
 8011504:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011508:	f5a3 62c2 	sub.w	r2, r3, #1552	; 0x610
 801150c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011510:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8011514:	681b      	ldr	r3, [r3, #0]
 8011516:	f003 031f 	and.w	r3, r3, #31
 801151a:	6013      	str	r3, [r2, #0]
    if (op2 == 0U)
 801151c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011520:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8011524:	681b      	ldr	r3, [r3, #0]
 8011526:	2b00      	cmp	r3, #0
 8011528:	d105      	bne.n	8011536 <arm_nn_mat_mult_nt_t_s8+0x2356>
        return op1;
 801152a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801152e:	f2a3 630c 	subw	r3, r3, #1548	; 0x60c
 8011532:	681a      	ldr	r2, [r3, #0]
 8011534:	e00a      	b.n	801154c <arm_nn_mat_mult_nt_t_s8+0x236c>
    return (op1 >> op2) | (op1 << (32U - op2));
 8011536:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801153a:	f2a3 620c 	subw	r2, r3, #1548	; 0x60c
 801153e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011542:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8011546:	6812      	ldr	r2, [r2, #0]
 8011548:	681b      	ldr	r3, [r3, #0]
 801154a:	41da      	rors	r2, r3
 801154c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011550:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 8011554:	601a      	str	r2, [r3, #0]
    __ASM("sxtb16 %0, %1" : "=r"(result) : "r"(op1));
 8011556:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801155a:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 801155e:	681b      	ldr	r3, [r3, #0]
 8011560:	fa2f f283 	sxtb16	r2, r3
 8011564:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011568:	f5a3 63c3 	sub.w	r3, r3, #1560	; 0x618
 801156c:	601a      	str	r2, [r3, #0]
    return (result);
 801156e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011572:	f5a3 63c3 	sub.w	r3, r3, #1560	; 0x618
 8011576:	681a      	ldr	r2, [r3, #0]
        result = SXTB16(ROR(op1, rotate));
 8011578:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801157c:	f2a3 631c 	subw	r3, r3, #1564	; 0x61c
 8011580:	601a      	str	r2, [r3, #0]
    return result;
 8011582:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011586:	f2a3 631c 	subw	r3, r3, #1564	; 0x61c
 801158a:	681b      	ldr	r3, [r3, #0]
 801158c:	f8c7 3c4c 	str.w	r3, [r7, #3148]	; 0xc4c
                val0 = SXTB16_RORn(val0, 8);
 8011590:	f8d7 2c44 	ldr.w	r2, [r7, #3140]	; 0xc44
 8011594:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011598:	f5a3 63bd 	sub.w	r3, r3, #1512	; 0x5e8
 801159c:	601a      	str	r2, [r3, #0]
 801159e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80115a2:	f2a3 52ec 	subw	r2, r3, #1516	; 0x5ec
 80115a6:	2308      	movs	r3, #8
 80115a8:	6013      	str	r3, [r2, #0]
 80115aa:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80115ae:	f5a3 62be 	sub.w	r2, r3, #1520	; 0x5f0
 80115b2:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80115b6:	f5a3 63bd 	sub.w	r3, r3, #1512	; 0x5e8
 80115ba:	681b      	ldr	r3, [r3, #0]
 80115bc:	6013      	str	r3, [r2, #0]
 80115be:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80115c2:	f2a3 52f4 	subw	r2, r3, #1524	; 0x5f4
 80115c6:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80115ca:	f2a3 53ec 	subw	r3, r3, #1516	; 0x5ec
 80115ce:	681b      	ldr	r3, [r3, #0]
 80115d0:	6013      	str	r3, [r2, #0]
    op2 %= 32U;
 80115d2:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80115d6:	f2a3 52f4 	subw	r2, r3, #1524	; 0x5f4
 80115da:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80115de:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80115e2:	681b      	ldr	r3, [r3, #0]
 80115e4:	f003 031f 	and.w	r3, r3, #31
 80115e8:	6013      	str	r3, [r2, #0]
    if (op2 == 0U)
 80115ea:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80115ee:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80115f2:	681b      	ldr	r3, [r3, #0]
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	d105      	bne.n	8011604 <arm_nn_mat_mult_nt_t_s8+0x2424>
        return op1;
 80115f8:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80115fc:	f5a3 63be 	sub.w	r3, r3, #1520	; 0x5f0
 8011600:	681a      	ldr	r2, [r3, #0]
 8011602:	e00a      	b.n	801161a <arm_nn_mat_mult_nt_t_s8+0x243a>
    return (op1 >> op2) | (op1 << (32U - op2));
 8011604:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011608:	f5a3 62be 	sub.w	r2, r3, #1520	; 0x5f0
 801160c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011610:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8011614:	6812      	ldr	r2, [r2, #0]
 8011616:	681b      	ldr	r3, [r3, #0]
 8011618:	41da      	rors	r2, r3
 801161a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801161e:	f5a3 63bf 	sub.w	r3, r3, #1528	; 0x5f8
 8011622:	601a      	str	r2, [r3, #0]
    __ASM("sxtb16 %0, %1" : "=r"(result) : "r"(op1));
 8011624:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011628:	f5a3 63bf 	sub.w	r3, r3, #1528	; 0x5f8
 801162c:	681b      	ldr	r3, [r3, #0]
 801162e:	fa2f f283 	sxtb16	r2, r3
 8011632:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011636:	f2a3 53fc 	subw	r3, r3, #1532	; 0x5fc
 801163a:	601a      	str	r2, [r3, #0]
    return (result);
 801163c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011640:	f2a3 53fc 	subw	r3, r3, #1532	; 0x5fc
 8011644:	681a      	ldr	r2, [r3, #0]
        result = SXTB16(ROR(op1, rotate));
 8011646:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801164a:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
 801164e:	601a      	str	r2, [r3, #0]
    return result;
 8011650:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011654:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
 8011658:	681b      	ldr	r3, [r3, #0]
 801165a:	f8c7 3c44 	str.w	r3, [r7, #3140]	; 0xc44

                // 4 x MAC res00, res01
                res00 = SMLAD(val3, val2, res00);
 801165e:	f8d7 2c40 	ldr.w	r2, [r7, #3136]	; 0xc40
 8011662:	f8d7 1c48 	ldr.w	r1, [r7, #3144]	; 0xc48
 8011666:	f8d7 0cb4 	ldr.w	r0, [r7, #3252]	; 0xcb4
 801166a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801166e:	f5a3 63bb 	sub.w	r3, r3, #1496	; 0x5d8
 8011672:	601a      	str	r2, [r3, #0]
 8011674:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011678:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 801167c:	6019      	str	r1, [r3, #0]
 801167e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011682:	f5a3 63bc 	sub.w	r3, r3, #1504	; 0x5e0
 8011686:	6018      	str	r0, [r3, #0]
    __ASM volatile("smlad %0, %1, %2, %3" : "=r"(result) : "r"(op1), "r"(op2), "r"(op3));
 8011688:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801168c:	f5a3 63bb 	sub.w	r3, r3, #1496	; 0x5d8
 8011690:	6819      	ldr	r1, [r3, #0]
 8011692:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011696:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 801169a:	681a      	ldr	r2, [r3, #0]
 801169c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80116a0:	f5a3 63bc 	sub.w	r3, r3, #1504	; 0x5e0
 80116a4:	681b      	ldr	r3, [r3, #0]
 80116a6:	fb21 3202 	smlad	r2, r1, r2, r3
 80116aa:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80116ae:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 80116b2:	601a      	str	r2, [r3, #0]
    return (result);
 80116b4:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80116b8:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 80116bc:	681b      	ldr	r3, [r3, #0]
 80116be:	f8c7 3cb4 	str.w	r3, [r7, #3252]	; 0xcb4
                val5 = SXTB16(val4);
 80116c2:	f8d7 2c3c 	ldr.w	r2, [r7, #3132]	; 0xc3c
 80116c6:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80116ca:	f5a3 63ba 	sub.w	r3, r3, #1488	; 0x5d0
 80116ce:	601a      	str	r2, [r3, #0]
    __ASM("sxtb16 %0, %1" : "=r"(result) : "r"(op1));
 80116d0:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80116d4:	f5a3 63ba 	sub.w	r3, r3, #1488	; 0x5d0
 80116d8:	681b      	ldr	r3, [r3, #0]
 80116da:	fa2f f283 	sxtb16	r2, r3
 80116de:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80116e2:	f2a3 53d4 	subw	r3, r3, #1492	; 0x5d4
 80116e6:	601a      	str	r2, [r3, #0]
    return (result);
 80116e8:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80116ec:	f2a3 53d4 	subw	r3, r3, #1492	; 0x5d4
 80116f0:	681b      	ldr	r3, [r3, #0]
 80116f2:	f8c7 3c38 	str.w	r3, [r7, #3128]	; 0xc38
                res00 = SMLAD(val0, val1, res00);
 80116f6:	f8d7 2c44 	ldr.w	r2, [r7, #3140]	; 0xc44
 80116fa:	f8d7 1c4c 	ldr.w	r1, [r7, #3148]	; 0xc4c
 80116fe:	f8d7 0cb4 	ldr.w	r0, [r7, #3252]	; 0xcb4
 8011702:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011706:	f5a3 63b8 	sub.w	r3, r3, #1472	; 0x5c0
 801170a:	601a      	str	r2, [r3, #0]
 801170c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011710:	f2a3 53c4 	subw	r3, r3, #1476	; 0x5c4
 8011714:	6019      	str	r1, [r3, #0]
 8011716:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801171a:	f5a3 63b9 	sub.w	r3, r3, #1480	; 0x5c8
 801171e:	6018      	str	r0, [r3, #0]
    __ASM volatile("smlad %0, %1, %2, %3" : "=r"(result) : "r"(op1), "r"(op2), "r"(op3));
 8011720:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011724:	f5a3 63b8 	sub.w	r3, r3, #1472	; 0x5c0
 8011728:	6819      	ldr	r1, [r3, #0]
 801172a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801172e:	f2a3 53c4 	subw	r3, r3, #1476	; 0x5c4
 8011732:	681a      	ldr	r2, [r3, #0]
 8011734:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011738:	f5a3 63b9 	sub.w	r3, r3, #1480	; 0x5c8
 801173c:	681b      	ldr	r3, [r3, #0]
 801173e:	fb21 3202 	smlad	r2, r1, r2, r3
 8011742:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011746:	f2a3 53cc 	subw	r3, r3, #1484	; 0x5cc
 801174a:	601a      	str	r2, [r3, #0]
    return (result);
 801174c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011750:	f2a3 53cc 	subw	r3, r3, #1484	; 0x5cc
 8011754:	681b      	ldr	r3, [r3, #0]
 8011756:	f8c7 3cb4 	str.w	r3, [r7, #3252]	; 0xcb4
                val4 = SXTB16_RORn(val4, 8);
 801175a:	f8d7 2c3c 	ldr.w	r2, [r7, #3132]	; 0xc3c
 801175e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011762:	f2a3 53a4 	subw	r3, r3, #1444	; 0x5a4
 8011766:	601a      	str	r2, [r3, #0]
 8011768:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801176c:	f5a3 62b5 	sub.w	r2, r3, #1448	; 0x5a8
 8011770:	2308      	movs	r3, #8
 8011772:	6013      	str	r3, [r2, #0]
 8011774:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011778:	f2a3 52ac 	subw	r2, r3, #1452	; 0x5ac
 801177c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011780:	f2a3 53a4 	subw	r3, r3, #1444	; 0x5a4
 8011784:	681b      	ldr	r3, [r3, #0]
 8011786:	6013      	str	r3, [r2, #0]
 8011788:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801178c:	f5a3 62b6 	sub.w	r2, r3, #1456	; 0x5b0
 8011790:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011794:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 8011798:	681b      	ldr	r3, [r3, #0]
 801179a:	6013      	str	r3, [r2, #0]
    op2 %= 32U;
 801179c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80117a0:	f5a3 62b6 	sub.w	r2, r3, #1456	; 0x5b0
 80117a4:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80117a8:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 80117ac:	681b      	ldr	r3, [r3, #0]
 80117ae:	f003 031f 	and.w	r3, r3, #31
 80117b2:	6013      	str	r3, [r2, #0]
    if (op2 == 0U)
 80117b4:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80117b8:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 80117bc:	681b      	ldr	r3, [r3, #0]
 80117be:	2b00      	cmp	r3, #0
 80117c0:	d105      	bne.n	80117ce <arm_nn_mat_mult_nt_t_s8+0x25ee>
        return op1;
 80117c2:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80117c6:	f2a3 53ac 	subw	r3, r3, #1452	; 0x5ac
 80117ca:	681a      	ldr	r2, [r3, #0]
 80117cc:	e00a      	b.n	80117e4 <arm_nn_mat_mult_nt_t_s8+0x2604>
    return (op1 >> op2) | (op1 << (32U - op2));
 80117ce:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80117d2:	f2a3 52ac 	subw	r2, r3, #1452	; 0x5ac
 80117d6:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80117da:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 80117de:	6812      	ldr	r2, [r2, #0]
 80117e0:	681b      	ldr	r3, [r3, #0]
 80117e2:	41da      	rors	r2, r3
 80117e4:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80117e8:	f2a3 53b4 	subw	r3, r3, #1460	; 0x5b4
 80117ec:	601a      	str	r2, [r3, #0]
    __ASM("sxtb16 %0, %1" : "=r"(result) : "r"(op1));
 80117ee:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80117f2:	f2a3 53b4 	subw	r3, r3, #1460	; 0x5b4
 80117f6:	681b      	ldr	r3, [r3, #0]
 80117f8:	fa2f f283 	sxtb16	r2, r3
 80117fc:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011800:	f5a3 63b7 	sub.w	r3, r3, #1464	; 0x5b8
 8011804:	601a      	str	r2, [r3, #0]
    return (result);
 8011806:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801180a:	f5a3 63b7 	sub.w	r3, r3, #1464	; 0x5b8
 801180e:	681a      	ldr	r2, [r3, #0]
        result = SXTB16(ROR(op1, rotate));
 8011810:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011814:	f2a3 53bc 	subw	r3, r3, #1468	; 0x5bc
 8011818:	601a      	str	r2, [r3, #0]
    return result;
 801181a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801181e:	f2a3 53bc 	subw	r3, r3, #1468	; 0x5bc
 8011822:	681b      	ldr	r3, [r3, #0]
 8011824:	f8c7 3c3c 	str.w	r3, [r7, #3132]	; 0xc3c
                res01 = SMLAD(val3, val5, res01);
 8011828:	f8d7 2c40 	ldr.w	r2, [r7, #3136]	; 0xc40
 801182c:	f8d7 1c38 	ldr.w	r1, [r7, #3128]	; 0xc38
 8011830:	f8d7 0cb0 	ldr.w	r0, [r7, #3248]	; 0xcb0
 8011834:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011838:	f2a3 5394 	subw	r3, r3, #1428	; 0x594
 801183c:	601a      	str	r2, [r3, #0]
 801183e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011842:	f5a3 63b3 	sub.w	r3, r3, #1432	; 0x598
 8011846:	6019      	str	r1, [r3, #0]
 8011848:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801184c:	f2a3 539c 	subw	r3, r3, #1436	; 0x59c
 8011850:	6018      	str	r0, [r3, #0]
    __ASM volatile("smlad %0, %1, %2, %3" : "=r"(result) : "r"(op1), "r"(op2), "r"(op3));
 8011852:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011856:	f2a3 5394 	subw	r3, r3, #1428	; 0x594
 801185a:	6819      	ldr	r1, [r3, #0]
 801185c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011860:	f5a3 63b3 	sub.w	r3, r3, #1432	; 0x598
 8011864:	681a      	ldr	r2, [r3, #0]
 8011866:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801186a:	f2a3 539c 	subw	r3, r3, #1436	; 0x59c
 801186e:	681b      	ldr	r3, [r3, #0]
 8011870:	fb21 3202 	smlad	r2, r1, r2, r3
 8011874:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011878:	f5a3 63b4 	sub.w	r3, r3, #1440	; 0x5a0
 801187c:	601a      	str	r2, [r3, #0]
    return (result);
 801187e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011882:	f5a3 63b4 	sub.w	r3, r3, #1440	; 0x5a0
 8011886:	681b      	ldr	r3, [r3, #0]
 8011888:	f8c7 3cb0 	str.w	r3, [r7, #3248]	; 0xcb0
                res01 = SMLAD(val0, val4, res01);
 801188c:	f8d7 2c44 	ldr.w	r2, [r7, #3140]	; 0xc44
 8011890:	f8d7 1c3c 	ldr.w	r1, [r7, #3132]	; 0xc3c
 8011894:	f8d7 0cb0 	ldr.w	r0, [r7, #3248]	; 0xcb0
 8011898:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801189c:	f2a3 5384 	subw	r3, r3, #1412	; 0x584
 80118a0:	601a      	str	r2, [r3, #0]
 80118a2:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80118a6:	f5a3 63b1 	sub.w	r3, r3, #1416	; 0x588
 80118aa:	6019      	str	r1, [r3, #0]
 80118ac:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80118b0:	f2a3 538c 	subw	r3, r3, #1420	; 0x58c
 80118b4:	6018      	str	r0, [r3, #0]
    __ASM volatile("smlad %0, %1, %2, %3" : "=r"(result) : "r"(op1), "r"(op2), "r"(op3));
 80118b6:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80118ba:	f2a3 5384 	subw	r3, r3, #1412	; 0x584
 80118be:	6819      	ldr	r1, [r3, #0]
 80118c0:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80118c4:	f5a3 63b1 	sub.w	r3, r3, #1416	; 0x588
 80118c8:	681a      	ldr	r2, [r3, #0]
 80118ca:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80118ce:	f2a3 538c 	subw	r3, r3, #1420	; 0x58c
 80118d2:	681b      	ldr	r3, [r3, #0]
 80118d4:	fb21 3202 	smlad	r2, r1, r2, r3
 80118d8:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80118dc:	f5a3 63b2 	sub.w	r3, r3, #1424	; 0x590
 80118e0:	601a      	str	r2, [r3, #0]
    return (result);
 80118e2:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80118e6:	f5a3 63b2 	sub.w	r3, r3, #1424	; 0x590
 80118ea:	681b      	ldr	r3, [r3, #0]
 80118ec:	f8c7 3cb0 	str.w	r3, [r7, #3248]	; 0xcb0

                // 4 x MAC res10, res11
                val0 = arm_nn_read_s8x4((const int8_t *)&lhs_ptr[lhs_off0]);
 80118f0:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80118f4:	f6a3 3324 	subw	r3, r3, #2852	; 0xb24
 80118f8:	681a      	ldr	r2, [r3, #0]
 80118fa:	f8d7 3c78 	ldr.w	r3, [r7, #3192]	; 0xc78
 80118fe:	441a      	add	r2, r3
 8011900:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011904:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8011908:	601a      	str	r2, [r3, #0]
 801190a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801190e:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8011912:	681b      	ldr	r3, [r3, #0]
 8011914:	681b      	ldr	r3, [r3, #0]
 8011916:	461a      	mov	r2, r3
    memcpy(&val, in_s8, 4);
 8011918:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801191c:	f6a3 3358 	subw	r3, r3, #2904	; 0xb58
 8011920:	601a      	str	r2, [r3, #0]
    return (val);
 8011922:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011926:	f6a3 3358 	subw	r3, r3, #2904	; 0xb58
 801192a:	681b      	ldr	r3, [r3, #0]
 801192c:	f8c7 3c44 	str.w	r3, [r7, #3140]	; 0xc44
                val3 = SXTB16(val0);
 8011930:	f8d7 2c44 	ldr.w	r2, [r7, #3140]	; 0xc44
 8011934:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011938:	f5a3 63af 	sub.w	r3, r3, #1400	; 0x578
 801193c:	601a      	str	r2, [r3, #0]
    __ASM("sxtb16 %0, %1" : "=r"(result) : "r"(op1));
 801193e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011942:	f5a3 63af 	sub.w	r3, r3, #1400	; 0x578
 8011946:	681b      	ldr	r3, [r3, #0]
 8011948:	fa2f f283 	sxtb16	r2, r3
 801194c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011950:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8011954:	601a      	str	r2, [r3, #0]
    return (result);
 8011956:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801195a:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 801195e:	681b      	ldr	r3, [r3, #0]
 8011960:	f8c7 3c40 	str.w	r3, [r7, #3136]	; 0xc40
                val0 = SXTB16_RORn(val0, 8);
 8011964:	f8d7 2c44 	ldr.w	r2, [r7, #3140]	; 0xc44
 8011968:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801196c:	f2a3 535c 	subw	r3, r3, #1372	; 0x55c
 8011970:	601a      	str	r2, [r3, #0]
 8011972:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011976:	f5a3 62ac 	sub.w	r2, r3, #1376	; 0x560
 801197a:	2308      	movs	r3, #8
 801197c:	6013      	str	r3, [r2, #0]
 801197e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011982:	f2a3 5264 	subw	r2, r3, #1380	; 0x564
 8011986:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801198a:	f2a3 535c 	subw	r3, r3, #1372	; 0x55c
 801198e:	681b      	ldr	r3, [r3, #0]
 8011990:	6013      	str	r3, [r2, #0]
 8011992:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011996:	f5a3 62ad 	sub.w	r2, r3, #1384	; 0x568
 801199a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801199e:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 80119a2:	681b      	ldr	r3, [r3, #0]
 80119a4:	6013      	str	r3, [r2, #0]
    op2 %= 32U;
 80119a6:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80119aa:	f5a3 62ad 	sub.w	r2, r3, #1384	; 0x568
 80119ae:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80119b2:	f5a3 63ad 	sub.w	r3, r3, #1384	; 0x568
 80119b6:	681b      	ldr	r3, [r3, #0]
 80119b8:	f003 031f 	and.w	r3, r3, #31
 80119bc:	6013      	str	r3, [r2, #0]
    if (op2 == 0U)
 80119be:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80119c2:	f5a3 63ad 	sub.w	r3, r3, #1384	; 0x568
 80119c6:	681b      	ldr	r3, [r3, #0]
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d105      	bne.n	80119d8 <arm_nn_mat_mult_nt_t_s8+0x27f8>
        return op1;
 80119cc:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80119d0:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 80119d4:	681a      	ldr	r2, [r3, #0]
 80119d6:	e00a      	b.n	80119ee <arm_nn_mat_mult_nt_t_s8+0x280e>
    return (op1 >> op2) | (op1 << (32U - op2));
 80119d8:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80119dc:	f2a3 5264 	subw	r2, r3, #1380	; 0x564
 80119e0:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80119e4:	f5a3 63ad 	sub.w	r3, r3, #1384	; 0x568
 80119e8:	6812      	ldr	r2, [r2, #0]
 80119ea:	681b      	ldr	r3, [r3, #0]
 80119ec:	41da      	rors	r2, r3
 80119ee:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80119f2:	f2a3 536c 	subw	r3, r3, #1388	; 0x56c
 80119f6:	601a      	str	r2, [r3, #0]
    __ASM("sxtb16 %0, %1" : "=r"(result) : "r"(op1));
 80119f8:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80119fc:	f2a3 536c 	subw	r3, r3, #1388	; 0x56c
 8011a00:	681b      	ldr	r3, [r3, #0]
 8011a02:	fa2f f283 	sxtb16	r2, r3
 8011a06:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011a0a:	f5a3 63ae 	sub.w	r3, r3, #1392	; 0x570
 8011a0e:	601a      	str	r2, [r3, #0]
    return (result);
 8011a10:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011a14:	f5a3 63ae 	sub.w	r3, r3, #1392	; 0x570
 8011a18:	681a      	ldr	r2, [r3, #0]
        result = SXTB16(ROR(op1, rotate));
 8011a1a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011a1e:	f2a3 5374 	subw	r3, r3, #1396	; 0x574
 8011a22:	601a      	str	r2, [r3, #0]
    return result;
 8011a24:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011a28:	f2a3 5374 	subw	r3, r3, #1396	; 0x574
 8011a2c:	681b      	ldr	r3, [r3, #0]
 8011a2e:	f8c7 3c44 	str.w	r3, [r7, #3140]	; 0xc44
                res10 = SMLAD(val3, val2, res10);
 8011a32:	f8d7 2c40 	ldr.w	r2, [r7, #3136]	; 0xc40
 8011a36:	f8d7 1c48 	ldr.w	r1, [r7, #3144]	; 0xc48
 8011a3a:	f8d7 0cac 	ldr.w	r0, [r7, #3244]	; 0xcac
 8011a3e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011a42:	f2a3 534c 	subw	r3, r3, #1356	; 0x54c
 8011a46:	601a      	str	r2, [r3, #0]
 8011a48:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011a4c:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8011a50:	6019      	str	r1, [r3, #0]
 8011a52:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011a56:	f2a3 5354 	subw	r3, r3, #1364	; 0x554
 8011a5a:	6018      	str	r0, [r3, #0]
    __ASM volatile("smlad %0, %1, %2, %3" : "=r"(result) : "r"(op1), "r"(op2), "r"(op3));
 8011a5c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011a60:	f2a3 534c 	subw	r3, r3, #1356	; 0x54c
 8011a64:	6819      	ldr	r1, [r3, #0]
 8011a66:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011a6a:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8011a6e:	681a      	ldr	r2, [r3, #0]
 8011a70:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011a74:	f2a3 5354 	subw	r3, r3, #1364	; 0x554
 8011a78:	681b      	ldr	r3, [r3, #0]
 8011a7a:	fb21 3202 	smlad	r2, r1, r2, r3
 8011a7e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011a82:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8011a86:	601a      	str	r2, [r3, #0]
    return (result);
 8011a88:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011a8c:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8011a90:	681b      	ldr	r3, [r3, #0]
 8011a92:	f8c7 3cac 	str.w	r3, [r7, #3244]	; 0xcac
                res11 = SMLAD(val3, val5, res11);
 8011a96:	f8d7 2c40 	ldr.w	r2, [r7, #3136]	; 0xc40
 8011a9a:	f8d7 1c38 	ldr.w	r1, [r7, #3128]	; 0xc38
 8011a9e:	f8d7 0ca8 	ldr.w	r0, [r7, #3240]	; 0xca8
 8011aa2:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011aa6:	f2a3 533c 	subw	r3, r3, #1340	; 0x53c
 8011aaa:	601a      	str	r2, [r3, #0]
 8011aac:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011ab0:	f5a3 63a8 	sub.w	r3, r3, #1344	; 0x540
 8011ab4:	6019      	str	r1, [r3, #0]
 8011ab6:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011aba:	f2a3 5344 	subw	r3, r3, #1348	; 0x544
 8011abe:	6018      	str	r0, [r3, #0]
    __ASM volatile("smlad %0, %1, %2, %3" : "=r"(result) : "r"(op1), "r"(op2), "r"(op3));
 8011ac0:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011ac4:	f2a3 533c 	subw	r3, r3, #1340	; 0x53c
 8011ac8:	6819      	ldr	r1, [r3, #0]
 8011aca:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011ace:	f5a3 63a8 	sub.w	r3, r3, #1344	; 0x540
 8011ad2:	681a      	ldr	r2, [r3, #0]
 8011ad4:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011ad8:	f2a3 5344 	subw	r3, r3, #1348	; 0x544
 8011adc:	681b      	ldr	r3, [r3, #0]
 8011ade:	fb21 3202 	smlad	r2, r1, r2, r3
 8011ae2:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011ae6:	f5a3 63a9 	sub.w	r3, r3, #1352	; 0x548
 8011aea:	601a      	str	r2, [r3, #0]
    return (result);
 8011aec:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011af0:	f5a3 63a9 	sub.w	r3, r3, #1352	; 0x548
 8011af4:	681b      	ldr	r3, [r3, #0]
 8011af6:	f8c7 3ca8 	str.w	r3, [r7, #3240]	; 0xca8
                res10 = SMLAD(val0, val1, res10);
 8011afa:	f8d7 2c44 	ldr.w	r2, [r7, #3140]	; 0xc44
 8011afe:	f8d7 1c4c 	ldr.w	r1, [r7, #3148]	; 0xc4c
 8011b02:	f8d7 0cac 	ldr.w	r0, [r7, #3244]	; 0xcac
 8011b06:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011b0a:	f2a3 532c 	subw	r3, r3, #1324	; 0x52c
 8011b0e:	601a      	str	r2, [r3, #0]
 8011b10:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011b14:	f5a3 63a6 	sub.w	r3, r3, #1328	; 0x530
 8011b18:	6019      	str	r1, [r3, #0]
 8011b1a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011b1e:	f2a3 5334 	subw	r3, r3, #1332	; 0x534
 8011b22:	6018      	str	r0, [r3, #0]
    __ASM volatile("smlad %0, %1, %2, %3" : "=r"(result) : "r"(op1), "r"(op2), "r"(op3));
 8011b24:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011b28:	f2a3 532c 	subw	r3, r3, #1324	; 0x52c
 8011b2c:	6819      	ldr	r1, [r3, #0]
 8011b2e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011b32:	f5a3 63a6 	sub.w	r3, r3, #1328	; 0x530
 8011b36:	681a      	ldr	r2, [r3, #0]
 8011b38:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011b3c:	f2a3 5334 	subw	r3, r3, #1332	; 0x534
 8011b40:	681b      	ldr	r3, [r3, #0]
 8011b42:	fb21 3202 	smlad	r2, r1, r2, r3
 8011b46:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011b4a:	f5a3 63a7 	sub.w	r3, r3, #1336	; 0x538
 8011b4e:	601a      	str	r2, [r3, #0]
    return (result);
 8011b50:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011b54:	f5a3 63a7 	sub.w	r3, r3, #1336	; 0x538
 8011b58:	681b      	ldr	r3, [r3, #0]
 8011b5a:	f8c7 3cac 	str.w	r3, [r7, #3244]	; 0xcac
                res11 = SMLAD(val0, val4, res11);
 8011b5e:	f8d7 2c44 	ldr.w	r2, [r7, #3140]	; 0xc44
 8011b62:	f8d7 1c3c 	ldr.w	r1, [r7, #3132]	; 0xc3c
 8011b66:	f8d7 0ca8 	ldr.w	r0, [r7, #3240]	; 0xca8
 8011b6a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011b6e:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 8011b72:	601a      	str	r2, [r3, #0]
 8011b74:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011b78:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 8011b7c:	6019      	str	r1, [r3, #0]
 8011b7e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011b82:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8011b86:	6018      	str	r0, [r3, #0]
    __ASM volatile("smlad %0, %1, %2, %3" : "=r"(result) : "r"(op1), "r"(op2), "r"(op3));
 8011b88:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011b8c:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 8011b90:	6819      	ldr	r1, [r3, #0]
 8011b92:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011b96:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 8011b9a:	681a      	ldr	r2, [r3, #0]
 8011b9c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011ba0:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8011ba4:	681b      	ldr	r3, [r3, #0]
 8011ba6:	fb21 3202 	smlad	r2, r1, r2, r3
 8011baa:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011bae:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 8011bb2:	601a      	str	r2, [r3, #0]
    return (result);
 8011bb4:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011bb8:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 8011bbc:	681b      	ldr	r3, [r3, #0]
 8011bbe:	f8c7 3ca8 	str.w	r3, [r7, #3240]	; 0xca8
            for (; rhs_cols_idx <= (rhs_cols - 4); rhs_cols_idx += 4)
 8011bc2:	f8d7 3ca4 	ldr.w	r3, [r7, #3236]	; 0xca4
 8011bc6:	3304      	adds	r3, #4
 8011bc8:	f8c7 3ca4 	str.w	r3, [r7, #3236]	; 0xca4
 8011bcc:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 8011bd0:	1eda      	subs	r2, r3, #3
 8011bd2:	f8d7 3ca4 	ldr.w	r3, [r7, #3236]	; 0xca4
 8011bd6:	4293      	cmp	r3, r2
 8011bd8:	f6ff abcf 	blt.w	801137a <arm_nn_mat_mult_nt_t_s8+0x219a>
            }

            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 8011bdc:	e06c      	b.n	8011cb8 <arm_nn_mat_mult_nt_t_s8+0x2ad8>
            {
                int8_t rhs_value0 = rhs_ptr[0];
 8011bde:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011be2:	f6a3 3328 	subw	r3, r3, #2856	; 0xb28
 8011be6:	681b      	ldr	r3, [r3, #0]
 8011be8:	781b      	ldrb	r3, [r3, #0]
 8011bea:	f887 3c53 	strb.w	r3, [r7, #3155]	; 0xc53
                int8_t rhs_value1 = rhs_ptr[rhs_cols];
 8011bee:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011bf2:	f6a3 3328 	subw	r3, r3, #2856	; 0xb28
 8011bf6:	681a      	ldr	r2, [r3, #0]
 8011bf8:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 8011bfc:	4413      	add	r3, r2
 8011bfe:	781b      	ldrb	r3, [r3, #0]
 8011c00:	f887 3c52 	strb.w	r3, [r7, #3154]	; 0xc52
                int8_t lhs_value = lhs_ptr[0];
 8011c04:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011c08:	f6a3 3324 	subw	r3, r3, #2852	; 0xb24
 8011c0c:	681b      	ldr	r3, [r3, #0]
 8011c0e:	781b      	ldrb	r3, [r3, #0]
 8011c10:	f887 3c51 	strb.w	r3, [r7, #3153]	; 0xc51

                res00 += lhs_value * rhs_value0;
 8011c14:	f997 2c51 	ldrsb.w	r2, [r7, #3153]	; 0xc51
 8011c18:	f997 3c53 	ldrsb.w	r3, [r7, #3155]	; 0xc53
 8011c1c:	fb03 f202 	mul.w	r2, r3, r2
 8011c20:	f8d7 3cb4 	ldr.w	r3, [r7, #3252]	; 0xcb4
 8011c24:	4413      	add	r3, r2
 8011c26:	f8c7 3cb4 	str.w	r3, [r7, #3252]	; 0xcb4
                res01 += lhs_value * rhs_value1;
 8011c2a:	f997 2c51 	ldrsb.w	r2, [r7, #3153]	; 0xc51
 8011c2e:	f997 3c52 	ldrsb.w	r3, [r7, #3154]	; 0xc52
 8011c32:	fb03 f202 	mul.w	r2, r3, r2
 8011c36:	f8d7 3cb0 	ldr.w	r3, [r7, #3248]	; 0xcb0
 8011c3a:	4413      	add	r3, r2
 8011c3c:	f8c7 3cb0 	str.w	r3, [r7, #3248]	; 0xcb0

                lhs_value = lhs_ptr[lhs_cols_offset];
 8011c40:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011c44:	f6a3 3324 	subw	r3, r3, #2852	; 0xb24
 8011c48:	681a      	ldr	r2, [r3, #0]
 8011c4a:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 8011c4e:	4413      	add	r3, r2
 8011c50:	781b      	ldrb	r3, [r3, #0]
 8011c52:	f887 3c51 	strb.w	r3, [r7, #3153]	; 0xc51
                res10 += lhs_value * rhs_value0;
 8011c56:	f997 2c51 	ldrsb.w	r2, [r7, #3153]	; 0xc51
 8011c5a:	f997 3c53 	ldrsb.w	r3, [r7, #3155]	; 0xc53
 8011c5e:	fb03 f202 	mul.w	r2, r3, r2
 8011c62:	f8d7 3cac 	ldr.w	r3, [r7, #3244]	; 0xcac
 8011c66:	4413      	add	r3, r2
 8011c68:	f8c7 3cac 	str.w	r3, [r7, #3244]	; 0xcac
                res11 += lhs_value * rhs_value1;
 8011c6c:	f997 2c51 	ldrsb.w	r2, [r7, #3153]	; 0xc51
 8011c70:	f997 3c52 	ldrsb.w	r3, [r7, #3154]	; 0xc52
 8011c74:	fb03 f202 	mul.w	r2, r3, r2
 8011c78:	f8d7 3ca8 	ldr.w	r3, [r7, #3240]	; 0xca8
 8011c7c:	4413      	add	r3, r2
 8011c7e:	f8c7 3ca8 	str.w	r3, [r7, #3240]	; 0xca8

                ++rhs_ptr;
 8011c82:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011c86:	f6a3 3328 	subw	r3, r3, #2856	; 0xb28
 8011c8a:	681b      	ldr	r3, [r3, #0]
 8011c8c:	1c5a      	adds	r2, r3, #1
 8011c8e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011c92:	f6a3 3328 	subw	r3, r3, #2856	; 0xb28
 8011c96:	601a      	str	r2, [r3, #0]
                ++lhs_ptr;
 8011c98:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011c9c:	f6a3 3324 	subw	r3, r3, #2852	; 0xb24
 8011ca0:	681b      	ldr	r3, [r3, #0]
 8011ca2:	1c5a      	adds	r2, r3, #1
 8011ca4:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011ca8:	f6a3 3324 	subw	r3, r3, #2852	; 0xb24
 8011cac:	601a      	str	r2, [r3, #0]
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 8011cae:	f8d7 3ca4 	ldr.w	r3, [r7, #3236]	; 0xca4
 8011cb2:	3301      	adds	r3, #1
 8011cb4:	f8c7 3ca4 	str.w	r3, [r7, #3236]	; 0xca4
 8011cb8:	f8d7 2ca4 	ldr.w	r2, [r7, #3236]	; 0xca4
 8011cbc:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 8011cc0:	429a      	cmp	r2, r3
 8011cc2:	db8c      	blt.n	8011bde <arm_nn_mat_mult_nt_t_s8+0x29fe>
            }

            // Quantize down
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows_idx], dst_shifts[rhs_rows_idx]);
 8011cc4:	f8d7 3ccc 	ldr.w	r3, [r7, #3276]	; 0xccc
 8011cc8:	009a      	lsls	r2, r3, #2
 8011cca:	f8d7 3cf0 	ldr.w	r3, [r7, #3312]	; 0xcf0
 8011cce:	4413      	add	r3, r2
 8011cd0:	6818      	ldr	r0, [r3, #0]
 8011cd2:	f8d7 3ccc 	ldr.w	r3, [r7, #3276]	; 0xccc
 8011cd6:	009a      	lsls	r2, r3, #2
 8011cd8:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8011cdc:	4413      	add	r3, r2
 8011cde:	6819      	ldr	r1, [r3, #0]
 8011ce0:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011ce4:	f2a3 62cc 	subw	r2, r3, #1740	; 0x6cc
 8011ce8:	f8d7 3cb4 	ldr.w	r3, [r7, #3252]	; 0xcb4
 8011cec:	6013      	str	r3, [r2, #0]
 8011cee:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011cf2:	f5a3 63da 	sub.w	r3, r3, #1744	; 0x6d0
 8011cf6:	6018      	str	r0, [r3, #0]
 8011cf8:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011cfc:	f2a3 63d4 	subw	r3, r3, #1748	; 0x6d4
 8011d00:	6019      	str	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8011d02:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011d06:	f2a3 63d4 	subw	r3, r3, #1748	; 0x6d4
 8011d0a:	681b      	ldr	r3, [r3, #0]
 8011d0c:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8011d10:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011d14:	f2a3 63cc 	subw	r3, r3, #1740	; 0x6cc
 8011d18:	681b      	ldr	r3, [r3, #0]
 8011d1a:	fa03 f202 	lsl.w	r2, r3, r2
 8011d1e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011d22:	f5a3 63db 	sub.w	r3, r3, #1752	; 0x6d8
 8011d26:	601a      	str	r2, [r3, #0]
 8011d28:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011d2c:	f2a3 62dc 	subw	r2, r3, #1756	; 0x6dc
 8011d30:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011d34:	f5a3 63da 	sub.w	r3, r3, #1744	; 0x6d0
 8011d38:	681b      	ldr	r3, [r3, #0]
 8011d3a:	6013      	str	r3, [r2, #0]
    int32_t result = 0;
 8011d3c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011d40:	f5a3 62dc 	sub.w	r2, r3, #1760	; 0x6e0
 8011d44:	2300      	movs	r3, #0
 8011d46:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 8011d48:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8011d4c:	461a      	mov	r2, r3
 8011d4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011d52:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 8011d54:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8011d58:	461a      	mov	r2, r3
 8011d5a:	2300      	movs	r3, #0
 8011d5c:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (int64_t)m1 * m2;
 8011d5e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8011d62:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011d66:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011d6a:	f5a3 63db 	sub.w	r3, r3, #1752	; 0x6d8
 8011d6e:	681b      	ldr	r3, [r3, #0]
 8011d70:	17da      	asrs	r2, r3, #31
 8011d72:	673b      	str	r3, [r7, #112]	; 0x70
 8011d74:	677a      	str	r2, [r7, #116]	; 0x74
 8011d76:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011d7a:	f2a3 63dc 	subw	r3, r3, #1756	; 0x6dc
 8011d7e:	681b      	ldr	r3, [r3, #0]
 8011d80:	17da      	asrs	r2, r3, #31
 8011d82:	66bb      	str	r3, [r7, #104]	; 0x68
 8011d84:	66fa      	str	r2, [r7, #108]	; 0x6c
 8011d86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011d88:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011d8a:	fb02 f203 	mul.w	r2, r2, r3
 8011d8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011d90:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8011d92:	fb04 f303 	mul.w	r3, r4, r3
 8011d96:	4413      	add	r3, r2
 8011d98:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011d9a:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 8011d9c:	fba2 4204 	umull	r4, r2, r2, r4
 8011da0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8011da4:	4622      	mov	r2, r4
 8011da6:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 8011daa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8011dae:	4413      	add	r3, r2
 8011db0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8011db4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011db8:	18c3      	adds	r3, r0, r3
 8011dba:	62bb      	str	r3, [r7, #40]	; 0x28
 8011dbc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8011dc0:	eb41 0303 	adc.w	r3, r1, r3
 8011dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011dc6:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8011dca:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8011dce:	e9c3 1200 	strd	r1, r2, [r3]
    result = (int32_t)(mult.long_long >> 31);
 8011dd2:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8011dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dda:	f04f 0000 	mov.w	r0, #0
 8011dde:	f04f 0100 	mov.w	r1, #0
 8011de2:	0fd0      	lsrs	r0, r2, #31
 8011de4:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8011de8:	17d9      	asrs	r1, r3, #31
 8011dea:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011dee:	f5a3 62dc 	sub.w	r2, r3, #1760	; 0x6e0
 8011df2:	4603      	mov	r3, r0
 8011df4:	6013      	str	r3, [r2, #0]
    return result;
 8011df6:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011dfa:	f5a3 63dc 	sub.w	r3, r3, #1760	; 0x6e0
 8011dfe:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8011e00:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011e04:	f2a3 63d4 	subw	r3, r3, #1748	; 0x6d4
 8011e08:	681b      	ldr	r3, [r3, #0]
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	dc06      	bgt.n	8011e1c <arm_nn_mat_mult_nt_t_s8+0x2c3c>
 8011e0e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011e12:	f2a3 63d4 	subw	r3, r3, #1748	; 0x6d4
 8011e16:	681b      	ldr	r3, [r3, #0]
 8011e18:	425a      	negs	r2, r3
 8011e1a:	e000      	b.n	8011e1e <arm_nn_mat_mult_nt_t_s8+0x2c3e>
 8011e1c:	2200      	movs	r2, #0
 8011e1e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011e22:	f2a3 63e4 	subw	r3, r3, #1764	; 0x6e4
 8011e26:	6019      	str	r1, [r3, #0]
 8011e28:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011e2c:	f5a3 63dd 	sub.w	r3, r3, #1768	; 0x6e8
 8011e30:	601a      	str	r2, [r3, #0]
    int32_t result = 0;
 8011e32:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011e36:	f2a3 62ec 	subw	r2, r3, #1772	; 0x6ec
 8011e3a:	2300      	movs	r3, #0
 8011e3c:	6013      	str	r3, [r2, #0]
    const int32_t remainder_mask = (1 << exponent) - 1;
 8011e3e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011e42:	f5a3 63dd 	sub.w	r3, r3, #1768	; 0x6e8
 8011e46:	2201      	movs	r2, #1
 8011e48:	681b      	ldr	r3, [r3, #0]
 8011e4a:	fa02 f103 	lsl.w	r1, r2, r3
 8011e4e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011e52:	f5a3 62de 	sub.w	r2, r3, #1776	; 0x6f0
 8011e56:	1e4b      	subs	r3, r1, #1
 8011e58:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 8011e5a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011e5e:	f2a3 61f4 	subw	r1, r3, #1780	; 0x6f4
 8011e62:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011e66:	f2a3 62e4 	subw	r2, r3, #1764	; 0x6e4
 8011e6a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011e6e:	f5a3 63de 	sub.w	r3, r3, #1776	; 0x6f0
 8011e72:	6812      	ldr	r2, [r2, #0]
 8011e74:	681b      	ldr	r3, [r3, #0]
 8011e76:	4013      	ands	r3, r2
 8011e78:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 8011e7a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011e7e:	f2a3 61ec 	subw	r1, r3, #1772	; 0x6ec
 8011e82:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011e86:	f2a3 62e4 	subw	r2, r3, #1764	; 0x6e4
 8011e8a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011e8e:	f5a3 63dd 	sub.w	r3, r3, #1768	; 0x6e8
 8011e92:	6812      	ldr	r2, [r2, #0]
 8011e94:	681b      	ldr	r3, [r3, #0]
 8011e96:	fa42 f303 	asr.w	r3, r2, r3
 8011e9a:	600b      	str	r3, [r1, #0]
    int32_t threshold = remainder_mask >> 1;
 8011e9c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011ea0:	f5a3 62df 	sub.w	r2, r3, #1784	; 0x6f8
 8011ea4:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011ea8:	f5a3 63de 	sub.w	r3, r3, #1776	; 0x6f0
 8011eac:	681b      	ldr	r3, [r3, #0]
 8011eae:	105b      	asrs	r3, r3, #1
 8011eb0:	6013      	str	r3, [r2, #0]
    if (result < 0)
 8011eb2:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011eb6:	f2a3 63ec 	subw	r3, r3, #1772	; 0x6ec
 8011eba:	681b      	ldr	r3, [r3, #0]
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	da0a      	bge.n	8011ed6 <arm_nn_mat_mult_nt_t_s8+0x2cf6>
        threshold++;
 8011ec0:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011ec4:	f5a3 62df 	sub.w	r2, r3, #1784	; 0x6f8
 8011ec8:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011ecc:	f5a3 63df 	sub.w	r3, r3, #1784	; 0x6f8
 8011ed0:	681b      	ldr	r3, [r3, #0]
 8011ed2:	3301      	adds	r3, #1
 8011ed4:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 8011ed6:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011eda:	f2a3 62f4 	subw	r2, r3, #1780	; 0x6f4
 8011ede:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011ee2:	f5a3 63df 	sub.w	r3, r3, #1784	; 0x6f8
 8011ee6:	6812      	ldr	r2, [r2, #0]
 8011ee8:	681b      	ldr	r3, [r3, #0]
 8011eea:	429a      	cmp	r2, r3
 8011eec:	dd0a      	ble.n	8011f04 <arm_nn_mat_mult_nt_t_s8+0x2d24>
        result++;
 8011eee:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011ef2:	f2a3 62ec 	subw	r2, r3, #1772	; 0x6ec
 8011ef6:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011efa:	f2a3 63ec 	subw	r3, r3, #1772	; 0x6ec
 8011efe:	681b      	ldr	r3, [r3, #0]
 8011f00:	3301      	adds	r3, #1
 8011f02:	6013      	str	r3, [r2, #0]
    return result;
 8011f04:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011f08:	f2a3 63ec 	subw	r3, r3, #1772	; 0x6ec
 8011f0c:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8011f0e:	bf00      	nop
 8011f10:	f8c7 3cb4 	str.w	r3, [r7, #3252]	; 0xcb4
            res01 = arm_nn_requantize(res01, dst_multipliers[rhs_rows_idx + 1], dst_shifts[rhs_rows_idx + 1]);
 8011f14:	f8d7 3ccc 	ldr.w	r3, [r7, #3276]	; 0xccc
 8011f18:	3301      	adds	r3, #1
 8011f1a:	009a      	lsls	r2, r3, #2
 8011f1c:	f8d7 3cf0 	ldr.w	r3, [r7, #3312]	; 0xcf0
 8011f20:	4413      	add	r3, r2
 8011f22:	6818      	ldr	r0, [r3, #0]
 8011f24:	f8d7 3ccc 	ldr.w	r3, [r7, #3276]	; 0xccc
 8011f28:	3301      	adds	r3, #1
 8011f2a:	009a      	lsls	r2, r3, #2
 8011f2c:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8011f30:	4413      	add	r3, r2
 8011f32:	6819      	ldr	r1, [r3, #0]
 8011f34:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011f38:	f2a3 629c 	subw	r2, r3, #1692	; 0x69c
 8011f3c:	f8d7 3cb0 	ldr.w	r3, [r7, #3248]	; 0xcb0
 8011f40:	6013      	str	r3, [r2, #0]
 8011f42:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011f46:	f5a3 63d4 	sub.w	r3, r3, #1696	; 0x6a0
 8011f4a:	6018      	str	r0, [r3, #0]
 8011f4c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011f50:	f2a3 63a4 	subw	r3, r3, #1700	; 0x6a4
 8011f54:	6019      	str	r1, [r3, #0]
 8011f56:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011f5a:	f2a3 63a4 	subw	r3, r3, #1700	; 0x6a4
 8011f5e:	681b      	ldr	r3, [r3, #0]
 8011f60:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8011f64:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011f68:	f2a3 639c 	subw	r3, r3, #1692	; 0x69c
 8011f6c:	681b      	ldr	r3, [r3, #0]
 8011f6e:	fa03 f202 	lsl.w	r2, r3, r2
 8011f72:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011f76:	f5a3 63d5 	sub.w	r3, r3, #1704	; 0x6a8
 8011f7a:	601a      	str	r2, [r3, #0]
 8011f7c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011f80:	f2a3 62ac 	subw	r2, r3, #1708	; 0x6ac
 8011f84:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011f88:	f5a3 63d4 	sub.w	r3, r3, #1696	; 0x6a0
 8011f8c:	681b      	ldr	r3, [r3, #0]
 8011f8e:	6013      	str	r3, [r2, #0]
    int32_t result = 0;
 8011f90:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011f94:	f5a3 62d6 	sub.w	r2, r3, #1712	; 0x6b0
 8011f98:	2300      	movs	r3, #0
 8011f9a:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 8011f9c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8011fa0:	461a      	mov	r2, r3
 8011fa2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011fa6:	f842 3c08 	str.w	r3, [r2, #-8]
    mult.word.high = 0;
 8011faa:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8011fae:	461a      	mov	r2, r3
 8011fb0:	2300      	movs	r3, #0
 8011fb2:	f842 3c04 	str.w	r3, [r2, #-4]
    mult.long_long = mult.long_long + (int64_t)m1 * m2;
 8011fb6:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8011fba:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8011fbe:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011fc2:	f5a3 63d5 	sub.w	r3, r3, #1704	; 0x6a8
 8011fc6:	681b      	ldr	r3, [r3, #0]
 8011fc8:	17da      	asrs	r2, r3, #31
 8011fca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011fce:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8011fd2:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011fd6:	f2a3 63ac 	subw	r3, r3, #1708	; 0x6ac
 8011fda:	681b      	ldr	r3, [r3, #0]
 8011fdc:	17da      	asrs	r2, r3, #31
 8011fde:	67bb      	str	r3, [r7, #120]	; 0x78
 8011fe0:	67fa      	str	r2, [r7, #124]	; 0x7c
 8011fe2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011fe6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8011fe8:	fb02 f203 	mul.w	r2, r2, r3
 8011fec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011fee:	f8d7 4080 	ldr.w	r4, [r7, #128]	; 0x80
 8011ff2:	fb04 f303 	mul.w	r3, r4, r3
 8011ff6:	4413      	add	r3, r2
 8011ff8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8011ffc:	6fbc      	ldr	r4, [r7, #120]	; 0x78
 8011ffe:	fba2 4204 	umull	r4, r2, r2, r4
 8012002:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8012006:	4622      	mov	r2, r4
 8012008:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 801200c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8012010:	4413      	add	r3, r2
 8012012:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8012016:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801201a:	18c3      	adds	r3, r0, r3
 801201c:	633b      	str	r3, [r7, #48]	; 0x30
 801201e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8012022:	eb41 0303 	adc.w	r3, r1, r3
 8012026:	637b      	str	r3, [r7, #52]	; 0x34
 8012028:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 801202c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8012030:	e943 1202 	strd	r1, r2, [r3, #-8]
    result = (int32_t)(mult.long_long >> 31);
 8012034:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8012038:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801203c:	f04f 0000 	mov.w	r0, #0
 8012040:	f04f 0100 	mov.w	r1, #0
 8012044:	0fd0      	lsrs	r0, r2, #31
 8012046:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801204a:	17d9      	asrs	r1, r3, #31
 801204c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012050:	f5a3 62d6 	sub.w	r2, r3, #1712	; 0x6b0
 8012054:	4603      	mov	r3, r0
 8012056:	6013      	str	r3, [r2, #0]
    return result;
 8012058:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801205c:	f5a3 63d6 	sub.w	r3, r3, #1712	; 0x6b0
 8012060:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8012062:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012066:	f2a3 63a4 	subw	r3, r3, #1700	; 0x6a4
 801206a:	681b      	ldr	r3, [r3, #0]
 801206c:	2b00      	cmp	r3, #0
 801206e:	dc06      	bgt.n	801207e <arm_nn_mat_mult_nt_t_s8+0x2e9e>
 8012070:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012074:	f2a3 63a4 	subw	r3, r3, #1700	; 0x6a4
 8012078:	681b      	ldr	r3, [r3, #0]
 801207a:	425a      	negs	r2, r3
 801207c:	e000      	b.n	8012080 <arm_nn_mat_mult_nt_t_s8+0x2ea0>
 801207e:	2200      	movs	r2, #0
 8012080:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012084:	f2a3 63b4 	subw	r3, r3, #1716	; 0x6b4
 8012088:	6019      	str	r1, [r3, #0]
 801208a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801208e:	f5a3 63d7 	sub.w	r3, r3, #1720	; 0x6b8
 8012092:	601a      	str	r2, [r3, #0]
    int32_t result = 0;
 8012094:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012098:	f2a3 62bc 	subw	r2, r3, #1724	; 0x6bc
 801209c:	2300      	movs	r3, #0
 801209e:	6013      	str	r3, [r2, #0]
    const int32_t remainder_mask = (1 << exponent) - 1;
 80120a0:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80120a4:	f5a3 63d7 	sub.w	r3, r3, #1720	; 0x6b8
 80120a8:	2201      	movs	r2, #1
 80120aa:	681b      	ldr	r3, [r3, #0]
 80120ac:	fa02 f103 	lsl.w	r1, r2, r3
 80120b0:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80120b4:	f5a3 62d8 	sub.w	r2, r3, #1728	; 0x6c0
 80120b8:	1e4b      	subs	r3, r1, #1
 80120ba:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 80120bc:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80120c0:	f2a3 61c4 	subw	r1, r3, #1732	; 0x6c4
 80120c4:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80120c8:	f2a3 62b4 	subw	r2, r3, #1716	; 0x6b4
 80120cc:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80120d0:	f5a3 63d8 	sub.w	r3, r3, #1728	; 0x6c0
 80120d4:	6812      	ldr	r2, [r2, #0]
 80120d6:	681b      	ldr	r3, [r3, #0]
 80120d8:	4013      	ands	r3, r2
 80120da:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 80120dc:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80120e0:	f2a3 61bc 	subw	r1, r3, #1724	; 0x6bc
 80120e4:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80120e8:	f2a3 62b4 	subw	r2, r3, #1716	; 0x6b4
 80120ec:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80120f0:	f5a3 63d7 	sub.w	r3, r3, #1720	; 0x6b8
 80120f4:	6812      	ldr	r2, [r2, #0]
 80120f6:	681b      	ldr	r3, [r3, #0]
 80120f8:	fa42 f303 	asr.w	r3, r2, r3
 80120fc:	600b      	str	r3, [r1, #0]
    int32_t threshold = remainder_mask >> 1;
 80120fe:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012102:	f5a3 62d9 	sub.w	r2, r3, #1736	; 0x6c8
 8012106:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801210a:	f5a3 63d8 	sub.w	r3, r3, #1728	; 0x6c0
 801210e:	681b      	ldr	r3, [r3, #0]
 8012110:	105b      	asrs	r3, r3, #1
 8012112:	6013      	str	r3, [r2, #0]
    if (result < 0)
 8012114:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012118:	f2a3 63bc 	subw	r3, r3, #1724	; 0x6bc
 801211c:	681b      	ldr	r3, [r3, #0]
 801211e:	2b00      	cmp	r3, #0
 8012120:	da0a      	bge.n	8012138 <arm_nn_mat_mult_nt_t_s8+0x2f58>
        threshold++;
 8012122:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012126:	f5a3 62d9 	sub.w	r2, r3, #1736	; 0x6c8
 801212a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801212e:	f5a3 63d9 	sub.w	r3, r3, #1736	; 0x6c8
 8012132:	681b      	ldr	r3, [r3, #0]
 8012134:	3301      	adds	r3, #1
 8012136:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 8012138:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801213c:	f2a3 62c4 	subw	r2, r3, #1732	; 0x6c4
 8012140:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012144:	f5a3 63d9 	sub.w	r3, r3, #1736	; 0x6c8
 8012148:	6812      	ldr	r2, [r2, #0]
 801214a:	681b      	ldr	r3, [r3, #0]
 801214c:	429a      	cmp	r2, r3
 801214e:	dd0a      	ble.n	8012166 <arm_nn_mat_mult_nt_t_s8+0x2f86>
        result++;
 8012150:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012154:	f2a3 62bc 	subw	r2, r3, #1724	; 0x6bc
 8012158:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801215c:	f2a3 63bc 	subw	r3, r3, #1724	; 0x6bc
 8012160:	681b      	ldr	r3, [r3, #0]
 8012162:	3301      	adds	r3, #1
 8012164:	6013      	str	r3, [r2, #0]
    return result;
 8012166:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801216a:	f2a3 63bc 	subw	r3, r3, #1724	; 0x6bc
 801216e:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8012170:	bf00      	nop
 8012172:	f8c7 3cb0 	str.w	r3, [r7, #3248]	; 0xcb0
            res10 = arm_nn_requantize(res10, dst_multipliers[rhs_rows_idx], dst_shifts[rhs_rows_idx]);
 8012176:	f8d7 3ccc 	ldr.w	r3, [r7, #3276]	; 0xccc
 801217a:	009a      	lsls	r2, r3, #2
 801217c:	f8d7 3cf0 	ldr.w	r3, [r7, #3312]	; 0xcf0
 8012180:	4413      	add	r3, r2
 8012182:	6818      	ldr	r0, [r3, #0]
 8012184:	f8d7 3ccc 	ldr.w	r3, [r7, #3276]	; 0xccc
 8012188:	009a      	lsls	r2, r3, #2
 801218a:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 801218e:	4413      	add	r3, r2
 8012190:	6819      	ldr	r1, [r3, #0]
 8012192:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012196:	f2a3 626c 	subw	r2, r3, #1644	; 0x66c
 801219a:	f8d7 3cac 	ldr.w	r3, [r7, #3244]	; 0xcac
 801219e:	6013      	str	r3, [r2, #0]
 80121a0:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80121a4:	f5a3 63ce 	sub.w	r3, r3, #1648	; 0x670
 80121a8:	6018      	str	r0, [r3, #0]
 80121aa:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80121ae:	f2a3 6374 	subw	r3, r3, #1652	; 0x674
 80121b2:	6019      	str	r1, [r3, #0]
 80121b4:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80121b8:	f2a3 6374 	subw	r3, r3, #1652	; 0x674
 80121bc:	681b      	ldr	r3, [r3, #0]
 80121be:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 80121c2:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80121c6:	f2a3 636c 	subw	r3, r3, #1644	; 0x66c
 80121ca:	681b      	ldr	r3, [r3, #0]
 80121cc:	fa03 f202 	lsl.w	r2, r3, r2
 80121d0:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80121d4:	f5a3 63cf 	sub.w	r3, r3, #1656	; 0x678
 80121d8:	601a      	str	r2, [r3, #0]
 80121da:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80121de:	f2a3 627c 	subw	r2, r3, #1660	; 0x67c
 80121e2:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80121e6:	f5a3 63ce 	sub.w	r3, r3, #1648	; 0x670
 80121ea:	681b      	ldr	r3, [r3, #0]
 80121ec:	6013      	str	r3, [r2, #0]
    int32_t result = 0;
 80121ee:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80121f2:	f5a3 62d0 	sub.w	r2, r3, #1664	; 0x680
 80121f6:	2300      	movs	r3, #0
 80121f8:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 80121fa:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80121fe:	461a      	mov	r2, r3
 8012200:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012204:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 8012206:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 801220a:	461a      	mov	r2, r3
 801220c:	2300      	movs	r3, #0
 801220e:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (int64_t)m1 * m2;
 8012210:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8012214:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012218:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801221c:	f5a3 63cf 	sub.w	r3, r3, #1656	; 0x678
 8012220:	681b      	ldr	r3, [r3, #0]
 8012222:	17da      	asrs	r2, r3, #31
 8012224:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8012228:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 801222c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012230:	f2a3 637c 	subw	r3, r3, #1660	; 0x67c
 8012234:	681b      	ldr	r3, [r3, #0]
 8012236:	17da      	asrs	r2, r3, #31
 8012238:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801223c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8012240:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012244:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8012248:	fb02 f203 	mul.w	r2, r2, r3
 801224c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012250:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8012254:	fb04 f303 	mul.w	r3, r4, r3
 8012258:	4413      	add	r3, r2
 801225a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801225e:	f8d7 4088 	ldr.w	r4, [r7, #136]	; 0x88
 8012262:	fba2 5604 	umull	r5, r6, r2, r4
 8012266:	4433      	add	r3, r6
 8012268:	461e      	mov	r6, r3
 801226a:	1943      	adds	r3, r0, r5
 801226c:	63bb      	str	r3, [r7, #56]	; 0x38
 801226e:	eb41 0306 	adc.w	r3, r1, r6
 8012272:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012274:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8012278:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 801227c:	e9c3 1200 	strd	r1, r2, [r3]
    result = (int32_t)(mult.long_long >> 31);
 8012280:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8012284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012288:	f04f 0000 	mov.w	r0, #0
 801228c:	f04f 0100 	mov.w	r1, #0
 8012290:	0fd0      	lsrs	r0, r2, #31
 8012292:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8012296:	17d9      	asrs	r1, r3, #31
 8012298:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801229c:	f5a3 62d0 	sub.w	r2, r3, #1664	; 0x680
 80122a0:	4603      	mov	r3, r0
 80122a2:	6013      	str	r3, [r2, #0]
    return result;
 80122a4:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80122a8:	f5a3 63d0 	sub.w	r3, r3, #1664	; 0x680
 80122ac:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80122ae:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80122b2:	f2a3 6374 	subw	r3, r3, #1652	; 0x674
 80122b6:	681b      	ldr	r3, [r3, #0]
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	dc06      	bgt.n	80122ca <arm_nn_mat_mult_nt_t_s8+0x30ea>
 80122bc:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80122c0:	f2a3 6374 	subw	r3, r3, #1652	; 0x674
 80122c4:	681b      	ldr	r3, [r3, #0]
 80122c6:	425a      	negs	r2, r3
 80122c8:	e000      	b.n	80122cc <arm_nn_mat_mult_nt_t_s8+0x30ec>
 80122ca:	2200      	movs	r2, #0
 80122cc:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80122d0:	f2a3 6384 	subw	r3, r3, #1668	; 0x684
 80122d4:	6019      	str	r1, [r3, #0]
 80122d6:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80122da:	f5a3 63d1 	sub.w	r3, r3, #1672	; 0x688
 80122de:	601a      	str	r2, [r3, #0]
    int32_t result = 0;
 80122e0:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80122e4:	f2a3 628c 	subw	r2, r3, #1676	; 0x68c
 80122e8:	2300      	movs	r3, #0
 80122ea:	6013      	str	r3, [r2, #0]
    const int32_t remainder_mask = (1 << exponent) - 1;
 80122ec:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80122f0:	f5a3 63d1 	sub.w	r3, r3, #1672	; 0x688
 80122f4:	2201      	movs	r2, #1
 80122f6:	681b      	ldr	r3, [r3, #0]
 80122f8:	fa02 f103 	lsl.w	r1, r2, r3
 80122fc:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012300:	f5a3 62d2 	sub.w	r2, r3, #1680	; 0x690
 8012304:	1e4b      	subs	r3, r1, #1
 8012306:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 8012308:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801230c:	f2a3 6194 	subw	r1, r3, #1684	; 0x694
 8012310:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012314:	f2a3 6284 	subw	r2, r3, #1668	; 0x684
 8012318:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801231c:	f5a3 63d2 	sub.w	r3, r3, #1680	; 0x690
 8012320:	6812      	ldr	r2, [r2, #0]
 8012322:	681b      	ldr	r3, [r3, #0]
 8012324:	4013      	ands	r3, r2
 8012326:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 8012328:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801232c:	f2a3 618c 	subw	r1, r3, #1676	; 0x68c
 8012330:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012334:	f2a3 6284 	subw	r2, r3, #1668	; 0x684
 8012338:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801233c:	f5a3 63d1 	sub.w	r3, r3, #1672	; 0x688
 8012340:	6812      	ldr	r2, [r2, #0]
 8012342:	681b      	ldr	r3, [r3, #0]
 8012344:	fa42 f303 	asr.w	r3, r2, r3
 8012348:	600b      	str	r3, [r1, #0]
    int32_t threshold = remainder_mask >> 1;
 801234a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801234e:	f5a3 62d3 	sub.w	r2, r3, #1688	; 0x698
 8012352:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012356:	f5a3 63d2 	sub.w	r3, r3, #1680	; 0x690
 801235a:	681b      	ldr	r3, [r3, #0]
 801235c:	105b      	asrs	r3, r3, #1
 801235e:	6013      	str	r3, [r2, #0]
    if (result < 0)
 8012360:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012364:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8012368:	681b      	ldr	r3, [r3, #0]
 801236a:	2b00      	cmp	r3, #0
 801236c:	da0a      	bge.n	8012384 <arm_nn_mat_mult_nt_t_s8+0x31a4>
        threshold++;
 801236e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012372:	f5a3 62d3 	sub.w	r2, r3, #1688	; 0x698
 8012376:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801237a:	f5a3 63d3 	sub.w	r3, r3, #1688	; 0x698
 801237e:	681b      	ldr	r3, [r3, #0]
 8012380:	3301      	adds	r3, #1
 8012382:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 8012384:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012388:	f2a3 6294 	subw	r2, r3, #1684	; 0x694
 801238c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012390:	f5a3 63d3 	sub.w	r3, r3, #1688	; 0x698
 8012394:	6812      	ldr	r2, [r2, #0]
 8012396:	681b      	ldr	r3, [r3, #0]
 8012398:	429a      	cmp	r2, r3
 801239a:	dd0a      	ble.n	80123b2 <arm_nn_mat_mult_nt_t_s8+0x31d2>
        result++;
 801239c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80123a0:	f2a3 628c 	subw	r2, r3, #1676	; 0x68c
 80123a4:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80123a8:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 80123ac:	681b      	ldr	r3, [r3, #0]
 80123ae:	3301      	adds	r3, #1
 80123b0:	6013      	str	r3, [r2, #0]
    return result;
 80123b2:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80123b6:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 80123ba:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80123bc:	bf00      	nop
 80123be:	f8c7 3cac 	str.w	r3, [r7, #3244]	; 0xcac
            res11 = arm_nn_requantize(res11, dst_multipliers[rhs_rows_idx + 1], dst_shifts[rhs_rows_idx + 1]);
 80123c2:	f8d7 3ccc 	ldr.w	r3, [r7, #3276]	; 0xccc
 80123c6:	3301      	adds	r3, #1
 80123c8:	009a      	lsls	r2, r3, #2
 80123ca:	f8d7 3cf0 	ldr.w	r3, [r7, #3312]	; 0xcf0
 80123ce:	4413      	add	r3, r2
 80123d0:	6818      	ldr	r0, [r3, #0]
 80123d2:	f8d7 3ccc 	ldr.w	r3, [r7, #3276]	; 0xccc
 80123d6:	3301      	adds	r3, #1
 80123d8:	009a      	lsls	r2, r3, #2
 80123da:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 80123de:	4413      	add	r3, r2
 80123e0:	6819      	ldr	r1, [r3, #0]
 80123e2:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80123e6:	f2a3 623c 	subw	r2, r3, #1596	; 0x63c
 80123ea:	f8d7 3ca8 	ldr.w	r3, [r7, #3240]	; 0xca8
 80123ee:	6013      	str	r3, [r2, #0]
 80123f0:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80123f4:	f5a3 63c8 	sub.w	r3, r3, #1600	; 0x640
 80123f8:	6018      	str	r0, [r3, #0]
 80123fa:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80123fe:	f2a3 6344 	subw	r3, r3, #1604	; 0x644
 8012402:	6019      	str	r1, [r3, #0]
 8012404:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012408:	f2a3 6344 	subw	r3, r3, #1604	; 0x644
 801240c:	681b      	ldr	r3, [r3, #0]
 801240e:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8012412:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012416:	f2a3 633c 	subw	r3, r3, #1596	; 0x63c
 801241a:	681b      	ldr	r3, [r3, #0]
 801241c:	fa03 f202 	lsl.w	r2, r3, r2
 8012420:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012424:	f5a3 63c9 	sub.w	r3, r3, #1608	; 0x648
 8012428:	601a      	str	r2, [r3, #0]
 801242a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801242e:	f2a3 624c 	subw	r2, r3, #1612	; 0x64c
 8012432:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012436:	f5a3 63c8 	sub.w	r3, r3, #1600	; 0x640
 801243a:	681b      	ldr	r3, [r3, #0]
 801243c:	6013      	str	r3, [r2, #0]
    int32_t result = 0;
 801243e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012442:	f5a3 62ca 	sub.w	r2, r3, #1616	; 0x650
 8012446:	2300      	movs	r3, #0
 8012448:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 801244a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 801244e:	461a      	mov	r2, r3
 8012450:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012454:	f842 3c08 	str.w	r3, [r2, #-8]
    mult.word.high = 0;
 8012458:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 801245c:	461a      	mov	r2, r3
 801245e:	2300      	movs	r3, #0
 8012460:	f842 3c04 	str.w	r3, [r2, #-4]
    mult.long_long = mult.long_long + (int64_t)m1 * m2;
 8012464:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8012468:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 801246c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012470:	f5a3 63c9 	sub.w	r3, r3, #1608	; 0x648
 8012474:	681b      	ldr	r3, [r3, #0]
 8012476:	17da      	asrs	r2, r3, #31
 8012478:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 801247c:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8012480:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012484:	f2a3 634c 	subw	r3, r3, #1612	; 0x64c
 8012488:	681b      	ldr	r3, [r3, #0]
 801248a:	17da      	asrs	r2, r3, #31
 801248c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8012490:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8012494:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8012498:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801249c:	fb02 f203 	mul.w	r2, r2, r3
 80124a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80124a4:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 80124a8:	fb04 f303 	mul.w	r3, r4, r3
 80124ac:	4413      	add	r3, r2
 80124ae:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80124b2:	f8d7 4098 	ldr.w	r4, [r7, #152]	; 0x98
 80124b6:	fba2 ab04 	umull	sl, fp, r2, r4
 80124ba:	445b      	add	r3, fp
 80124bc:	469b      	mov	fp, r3
 80124be:	eb10 030a 	adds.w	r3, r0, sl
 80124c2:	643b      	str	r3, [r7, #64]	; 0x40
 80124c4:	eb41 030b 	adc.w	r3, r1, fp
 80124c8:	647b      	str	r3, [r7, #68]	; 0x44
 80124ca:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80124ce:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80124d2:	e943 1202 	strd	r1, r2, [r3, #-8]
    result = (int32_t)(mult.long_long >> 31);
 80124d6:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80124da:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80124de:	f04f 0000 	mov.w	r0, #0
 80124e2:	f04f 0100 	mov.w	r1, #0
 80124e6:	0fd0      	lsrs	r0, r2, #31
 80124e8:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80124ec:	17d9      	asrs	r1, r3, #31
 80124ee:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80124f2:	f5a3 62ca 	sub.w	r2, r3, #1616	; 0x650
 80124f6:	4603      	mov	r3, r0
 80124f8:	6013      	str	r3, [r2, #0]
    return result;
 80124fa:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80124fe:	f5a3 63ca 	sub.w	r3, r3, #1616	; 0x650
 8012502:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8012504:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012508:	f2a3 6344 	subw	r3, r3, #1604	; 0x644
 801250c:	681b      	ldr	r3, [r3, #0]
 801250e:	2b00      	cmp	r3, #0
 8012510:	dc06      	bgt.n	8012520 <arm_nn_mat_mult_nt_t_s8+0x3340>
 8012512:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012516:	f2a3 6344 	subw	r3, r3, #1604	; 0x644
 801251a:	681b      	ldr	r3, [r3, #0]
 801251c:	425a      	negs	r2, r3
 801251e:	e000      	b.n	8012522 <arm_nn_mat_mult_nt_t_s8+0x3342>
 8012520:	2200      	movs	r2, #0
 8012522:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012526:	f2a3 6354 	subw	r3, r3, #1620	; 0x654
 801252a:	6019      	str	r1, [r3, #0]
 801252c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012530:	f5a3 63cb 	sub.w	r3, r3, #1624	; 0x658
 8012534:	601a      	str	r2, [r3, #0]
    int32_t result = 0;
 8012536:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801253a:	f2a3 625c 	subw	r2, r3, #1628	; 0x65c
 801253e:	2300      	movs	r3, #0
 8012540:	6013      	str	r3, [r2, #0]
    const int32_t remainder_mask = (1 << exponent) - 1;
 8012542:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012546:	f5a3 63cb 	sub.w	r3, r3, #1624	; 0x658
 801254a:	2201      	movs	r2, #1
 801254c:	681b      	ldr	r3, [r3, #0]
 801254e:	fa02 f103 	lsl.w	r1, r2, r3
 8012552:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012556:	f5a3 62cc 	sub.w	r2, r3, #1632	; 0x660
 801255a:	1e4b      	subs	r3, r1, #1
 801255c:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 801255e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012562:	f2a3 6164 	subw	r1, r3, #1636	; 0x664
 8012566:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801256a:	f2a3 6254 	subw	r2, r3, #1620	; 0x654
 801256e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012572:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 8012576:	6812      	ldr	r2, [r2, #0]
 8012578:	681b      	ldr	r3, [r3, #0]
 801257a:	4013      	ands	r3, r2
 801257c:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 801257e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012582:	f2a3 615c 	subw	r1, r3, #1628	; 0x65c
 8012586:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801258a:	f2a3 6254 	subw	r2, r3, #1620	; 0x654
 801258e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012592:	f5a3 63cb 	sub.w	r3, r3, #1624	; 0x658
 8012596:	6812      	ldr	r2, [r2, #0]
 8012598:	681b      	ldr	r3, [r3, #0]
 801259a:	fa42 f303 	asr.w	r3, r2, r3
 801259e:	600b      	str	r3, [r1, #0]
    int32_t threshold = remainder_mask >> 1;
 80125a0:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80125a4:	f5a3 62cd 	sub.w	r2, r3, #1640	; 0x668
 80125a8:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80125ac:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 80125b0:	681b      	ldr	r3, [r3, #0]
 80125b2:	105b      	asrs	r3, r3, #1
 80125b4:	6013      	str	r3, [r2, #0]
    if (result < 0)
 80125b6:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80125ba:	f2a3 635c 	subw	r3, r3, #1628	; 0x65c
 80125be:	681b      	ldr	r3, [r3, #0]
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	da0a      	bge.n	80125da <arm_nn_mat_mult_nt_t_s8+0x33fa>
        threshold++;
 80125c4:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80125c8:	f5a3 62cd 	sub.w	r2, r3, #1640	; 0x668
 80125cc:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80125d0:	f5a3 63cd 	sub.w	r3, r3, #1640	; 0x668
 80125d4:	681b      	ldr	r3, [r3, #0]
 80125d6:	3301      	adds	r3, #1
 80125d8:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 80125da:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80125de:	f2a3 6264 	subw	r2, r3, #1636	; 0x664
 80125e2:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80125e6:	f5a3 63cd 	sub.w	r3, r3, #1640	; 0x668
 80125ea:	6812      	ldr	r2, [r2, #0]
 80125ec:	681b      	ldr	r3, [r3, #0]
 80125ee:	429a      	cmp	r2, r3
 80125f0:	dd0a      	ble.n	8012608 <arm_nn_mat_mult_nt_t_s8+0x3428>
        result++;
 80125f2:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80125f6:	f2a3 625c 	subw	r2, r3, #1628	; 0x65c
 80125fa:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80125fe:	f2a3 635c 	subw	r3, r3, #1628	; 0x65c
 8012602:	681b      	ldr	r3, [r3, #0]
 8012604:	3301      	adds	r3, #1
 8012606:	6013      	str	r3, [r2, #0]
    return result;
 8012608:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801260c:	f2a3 635c 	subw	r3, r3, #1628	; 0x65c
 8012610:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8012612:	bf00      	nop
 8012614:	f8c7 3ca8 	str.w	r3, [r7, #3240]	; 0xca8

            // Add offset
            res00 += dst_offset;
 8012618:	f8d7 2cb4 	ldr.w	r2, [r7, #3252]	; 0xcb4
 801261c:	f8d7 3d08 	ldr.w	r3, [r7, #3336]	; 0xd08
 8012620:	4413      	add	r3, r2
 8012622:	f8c7 3cb4 	str.w	r3, [r7, #3252]	; 0xcb4
            res01 += dst_offset;
 8012626:	f8d7 2cb0 	ldr.w	r2, [r7, #3248]	; 0xcb0
 801262a:	f8d7 3d08 	ldr.w	r3, [r7, #3336]	; 0xd08
 801262e:	4413      	add	r3, r2
 8012630:	f8c7 3cb0 	str.w	r3, [r7, #3248]	; 0xcb0
            res10 += dst_offset;
 8012634:	f8d7 2cac 	ldr.w	r2, [r7, #3244]	; 0xcac
 8012638:	f8d7 3d08 	ldr.w	r3, [r7, #3336]	; 0xd08
 801263c:	4413      	add	r3, r2
 801263e:	f8c7 3cac 	str.w	r3, [r7, #3244]	; 0xcac
            res11 += dst_offset;
 8012642:	f8d7 2ca8 	ldr.w	r2, [r7, #3240]	; 0xca8
 8012646:	f8d7 3d08 	ldr.w	r3, [r7, #3336]	; 0xd08
 801264a:	4413      	add	r3, r2
 801264c:	f8c7 3ca8 	str.w	r3, [r7, #3240]	; 0xca8

            // Clamp the result
            res00 = MAX(res00, activation_min);
 8012650:	f8d7 2cb4 	ldr.w	r2, [r7, #3252]	; 0xcb4
 8012654:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 8012658:	4293      	cmp	r3, r2
 801265a:	bfb8      	it	lt
 801265c:	4613      	movlt	r3, r2
 801265e:	f8c7 3cb4 	str.w	r3, [r7, #3252]	; 0xcb4
            res00 = MIN(res00, activation_max);
 8012662:	f8d7 2cb4 	ldr.w	r2, [r7, #3252]	; 0xcb4
 8012666:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	; 0xd10
 801266a:	4293      	cmp	r3, r2
 801266c:	bfa8      	it	ge
 801266e:	4613      	movge	r3, r2
 8012670:	f8c7 3cb4 	str.w	r3, [r7, #3252]	; 0xcb4
            res01 = MAX(res01, activation_min);
 8012674:	f8d7 2cb0 	ldr.w	r2, [r7, #3248]	; 0xcb0
 8012678:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 801267c:	4293      	cmp	r3, r2
 801267e:	bfb8      	it	lt
 8012680:	4613      	movlt	r3, r2
 8012682:	f8c7 3cb0 	str.w	r3, [r7, #3248]	; 0xcb0
            res01 = MIN(res01, activation_max);
 8012686:	f8d7 2cb0 	ldr.w	r2, [r7, #3248]	; 0xcb0
 801268a:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	; 0xd10
 801268e:	4293      	cmp	r3, r2
 8012690:	bfa8      	it	ge
 8012692:	4613      	movge	r3, r2
 8012694:	f8c7 3cb0 	str.w	r3, [r7, #3248]	; 0xcb0
            res10 = MAX(res10, activation_min);
 8012698:	f8d7 2cac 	ldr.w	r2, [r7, #3244]	; 0xcac
 801269c:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 80126a0:	4293      	cmp	r3, r2
 80126a2:	bfb8      	it	lt
 80126a4:	4613      	movlt	r3, r2
 80126a6:	f8c7 3cac 	str.w	r3, [r7, #3244]	; 0xcac
            res10 = MIN(res10, activation_max);
 80126aa:	f8d7 2cac 	ldr.w	r2, [r7, #3244]	; 0xcac
 80126ae:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	; 0xd10
 80126b2:	4293      	cmp	r3, r2
 80126b4:	bfa8      	it	ge
 80126b6:	4613      	movge	r3, r2
 80126b8:	f8c7 3cac 	str.w	r3, [r7, #3244]	; 0xcac
            res11 = MAX(res11, activation_min);
 80126bc:	f8d7 2ca8 	ldr.w	r2, [r7, #3240]	; 0xca8
 80126c0:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 80126c4:	4293      	cmp	r3, r2
 80126c6:	bfb8      	it	lt
 80126c8:	4613      	movlt	r3, r2
 80126ca:	f8c7 3ca8 	str.w	r3, [r7, #3240]	; 0xca8
            res11 = MIN(res11, activation_max);
 80126ce:	f8d7 2ca8 	ldr.w	r2, [r7, #3240]	; 0xca8
 80126d2:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	; 0xd10
 80126d6:	4293      	cmp	r3, r2
 80126d8:	bfa8      	it	ge
 80126da:	4613      	movge	r3, r2
 80126dc:	f8c7 3ca8 	str.w	r3, [r7, #3240]	; 0xca8

            dst_ptr[0] = (int8_t)res00;
 80126e0:	f8d7 3cb4 	ldr.w	r3, [r7, #3252]	; 0xcb4
 80126e4:	b25b      	sxtb	r3, r3
 80126e6:	f8d7 2cc8 	ldr.w	r2, [r7, #3272]	; 0xcc8
 80126ea:	7013      	strb	r3, [r2, #0]
            dst_ptr[1] = (int8_t)res01;
 80126ec:	f8d7 3cc8 	ldr.w	r3, [r7, #3272]	; 0xcc8
 80126f0:	1c5a      	adds	r2, r3, #1
 80126f2:	f8d7 3cb0 	ldr.w	r3, [r7, #3248]	; 0xcb0
 80126f6:	b25b      	sxtb	r3, r3
 80126f8:	7013      	strb	r3, [r2, #0]
            dst_ptr += rhs_rows;
 80126fa:	f8d7 2cfc 	ldr.w	r2, [r7, #3324]	; 0xcfc
 80126fe:	f8d7 3cc8 	ldr.w	r3, [r7, #3272]	; 0xcc8
 8012702:	4413      	add	r3, r2
 8012704:	f8c7 3cc8 	str.w	r3, [r7, #3272]	; 0xcc8
            dst_ptr[0] = (int8_t)res10;
 8012708:	f8d7 3cac 	ldr.w	r3, [r7, #3244]	; 0xcac
 801270c:	b25b      	sxtb	r3, r3
 801270e:	f8d7 2cc8 	ldr.w	r2, [r7, #3272]	; 0xcc8
 8012712:	7013      	strb	r3, [r2, #0]
            dst_ptr[1] = (int8_t)res11;
 8012714:	f8d7 3cc8 	ldr.w	r3, [r7, #3272]	; 0xcc8
 8012718:	1c5a      	adds	r2, r3, #1
 801271a:	f8d7 3ca8 	ldr.w	r3, [r7, #3240]	; 0xca8
 801271e:	b25b      	sxtb	r3, r3
 8012720:	7013      	strb	r3, [r2, #0]
            dst_ptr += rhs_rows;
 8012722:	f8d7 2cfc 	ldr.w	r2, [r7, #3324]	; 0xcfc
 8012726:	f8d7 3cc8 	ldr.w	r3, [r7, #3272]	; 0xcc8
 801272a:	4413      	add	r3, r2
 801272c:	f8c7 3cc8 	str.w	r3, [r7, #3272]	; 0xcc8

            lhs_ptr -= rhs_cols;
 8012730:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012734:	f6a3 3324 	subw	r3, r3, #2852	; 0xb24
 8012738:	681a      	ldr	r2, [r3, #0]
 801273a:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 801273e:	425b      	negs	r3, r3
 8012740:	441a      	add	r2, r3
 8012742:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012746:	f6a3 3324 	subw	r3, r3, #2852	; 0xb24
 801274a:	601a      	str	r2, [r3, #0]
            lhs_ptr += 2 * lhs_cols_offset;
 801274c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012750:	f6a3 3324 	subw	r3, r3, #2852	; 0xb24
 8012754:	681a      	ldr	r2, [r3, #0]
 8012756:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 801275a:	005b      	lsls	r3, r3, #1
 801275c:	441a      	add	r2, r3
 801275e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012762:	f6a3 3324 	subw	r3, r3, #2852	; 0xb24
 8012766:	601a      	str	r2, [r3, #0]

            lhs_rows_idx--;
 8012768:	f8d7 3cb8 	ldr.w	r3, [r7, #3256]	; 0xcb8
 801276c:	3b01      	subs	r3, #1
 801276e:	f8c7 3cb8 	str.w	r3, [r7, #3256]	; 0xcb8
        while (lhs_rows_idx)
 8012772:	f8d7 3cb8 	ldr.w	r3, [r7, #3256]	; 0xcb8
 8012776:	2b00      	cmp	r3, #0
 8012778:	f47c ade1 	bne.w	800f33e <arm_nn_mat_mult_nt_t_s8+0x15e>
        }

        // Left-over rows
        if (lhs_rows % 2)
 801277c:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	; 0xcf8
 8012780:	f003 0301 	and.w	r3, r3, #1
 8012784:	2b00      	cmp	r3, #0
 8012786:	f002 80c0 	beq.w	801490a <arm_nn_mat_mult_nt_t_s8+0x572a>
        {
            const int8_t *rhs_ptr = &rhs[0];
 801278a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801278e:	f6a3 329c 	subw	r2, r3, #2972	; 0xb9c
 8012792:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012796:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
 801279a:	681b      	ldr	r3, [r3, #0]
 801279c:	6013      	str	r3, [r2, #0]

            int32_t res00 = lhs_offset_contribution0;
 801279e:	f8d7 3cc4 	ldr.w	r3, [r7, #3268]	; 0xcc4
 80127a2:	f8c7 3ca0 	str.w	r3, [r7, #3232]	; 0xca0
            int32_t res01 = lhs_offset_contribution1;
 80127a6:	f8d7 3cc0 	ldr.w	r3, [r7, #3264]	; 0xcc0
 80127aa:	f8c7 3c9c 	str.w	r3, [r7, #3228]	; 0xc9c

            int32_t rhs_cols_idx = 0;
 80127ae:	2300      	movs	r3, #0
 80127b0:	f8c7 3c98 	str.w	r3, [r7, #3224]	; 0xc98

            int32_t val0, val1, val2, val3, val4, val5;
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 80127b4:	f001 baf1 	b.w	8013d9a <arm_nn_mat_mult_nt_t_s8+0x4bba>
 80127b8:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80127bc:	f6a3 12d8 	subw	r2, r3, #2520	; 0x9d8
 80127c0:	f507 739a 	add.w	r3, r7, #308	; 0x134
 80127c4:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_s8, 4);
 80127c6:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80127ca:	f6a3 13d8 	subw	r3, r3, #2520	; 0x9d8
 80127ce:	681b      	ldr	r3, [r3, #0]
 80127d0:	681b      	ldr	r3, [r3, #0]
 80127d2:	681b      	ldr	r3, [r3, #0]
 80127d4:	461a      	mov	r2, r3
 80127d6:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80127da:	f5a3 633c 	sub.w	r3, r3, #3008	; 0xbc0
 80127de:	601a      	str	r2, [r3, #0]
    *in_s8 += 4;
 80127e0:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80127e4:	f6a3 13d8 	subw	r3, r3, #2520	; 0x9d8
 80127e8:	681b      	ldr	r3, [r3, #0]
 80127ea:	681b      	ldr	r3, [r3, #0]
 80127ec:	1d1a      	adds	r2, r3, #4
 80127ee:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80127f2:	f6a3 13d8 	subw	r3, r3, #2520	; 0x9d8
 80127f6:	681b      	ldr	r3, [r3, #0]
 80127f8:	601a      	str	r2, [r3, #0]
    return (val);
 80127fa:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80127fe:	f5a3 633c 	sub.w	r3, r3, #3008	; 0xbc0
 8012802:	681b      	ldr	r3, [r3, #0]
            {
                val0 = arm_nn_read_s8x4_ia((const int8_t **)&rhs_ptr);
 8012804:	f8c7 3c68 	str.w	r3, [r7, #3176]	; 0xc68
                val1 = arm_nn_read_s8x4((const int8_t *)&rhs_ptr[rhs_off0]);
 8012808:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801280c:	f6a3 339c 	subw	r3, r3, #2972	; 0xb9c
 8012810:	681a      	ldr	r2, [r3, #0]
 8012812:	f8d7 3c7c 	ldr.w	r3, [r7, #3196]	; 0xc7c
 8012816:	441a      	add	r2, r3
 8012818:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801281c:	f6a3 13d4 	subw	r3, r3, #2516	; 0x9d4
 8012820:	601a      	str	r2, [r3, #0]
 8012822:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012826:	f6a3 13d4 	subw	r3, r3, #2516	; 0x9d4
 801282a:	681b      	ldr	r3, [r3, #0]
 801282c:	681b      	ldr	r3, [r3, #0]
 801282e:	461a      	mov	r2, r3
    memcpy(&val, in_s8, 4);
 8012830:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012834:	f6a3 33c4 	subw	r3, r3, #3012	; 0xbc4
 8012838:	601a      	str	r2, [r3, #0]
    return (val);
 801283a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801283e:	f6a3 33c4 	subw	r3, r3, #3012	; 0xbc4
 8012842:	681b      	ldr	r3, [r3, #0]
 8012844:	f8c7 3c64 	str.w	r3, [r7, #3172]	; 0xc64
 8012848:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801284c:	f5a3 621d 	sub.w	r2, r3, #2512	; 0x9d0
 8012850:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8012854:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_s8, 4);
 8012856:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801285a:	f5a3 631d 	sub.w	r3, r3, #2512	; 0x9d0
 801285e:	681b      	ldr	r3, [r3, #0]
 8012860:	681b      	ldr	r3, [r3, #0]
 8012862:	681b      	ldr	r3, [r3, #0]
 8012864:	461a      	mov	r2, r3
 8012866:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801286a:	f6a3 33c8 	subw	r3, r3, #3016	; 0xbc8
 801286e:	601a      	str	r2, [r3, #0]
    *in_s8 += 4;
 8012870:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012874:	f5a3 631d 	sub.w	r3, r3, #2512	; 0x9d0
 8012878:	681b      	ldr	r3, [r3, #0]
 801287a:	681b      	ldr	r3, [r3, #0]
 801287c:	1d1a      	adds	r2, r3, #4
 801287e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012882:	f5a3 631d 	sub.w	r3, r3, #2512	; 0x9d0
 8012886:	681b      	ldr	r3, [r3, #0]
 8012888:	601a      	str	r2, [r3, #0]
    return (val);
 801288a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801288e:	f6a3 33c8 	subw	r3, r3, #3016	; 0xbc8
 8012892:	681b      	ldr	r3, [r3, #0]
                val2 = arm_nn_read_s8x4_ia((const int8_t **)&lhs_ptr);
 8012894:	f8c7 3c60 	str.w	r3, [r7, #3168]	; 0xc60
                val3 = SXTB16(val0);
 8012898:	f8d7 2c68 	ldr.w	r2, [r7, #3176]	; 0xc68
 801289c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80128a0:	f6a3 13c8 	subw	r3, r3, #2504	; 0x9c8
 80128a4:	601a      	str	r2, [r3, #0]
    __ASM("sxtb16 %0, %1" : "=r"(result) : "r"(op1));
 80128a6:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80128aa:	f6a3 13c8 	subw	r3, r3, #2504	; 0x9c8
 80128ae:	681b      	ldr	r3, [r3, #0]
 80128b0:	fa2f f283 	sxtb16	r2, r3
 80128b4:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80128b8:	f6a3 13cc 	subw	r3, r3, #2508	; 0x9cc
 80128bc:	601a      	str	r2, [r3, #0]
    return (result);
 80128be:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80128c2:	f6a3 13cc 	subw	r3, r3, #2508	; 0x9cc
 80128c6:	681b      	ldr	r3, [r3, #0]
 80128c8:	f8c7 3c5c 	str.w	r3, [r7, #3164]	; 0xc5c
                val5 = SXTB16(val2);
 80128cc:	f8d7 2c60 	ldr.w	r2, [r7, #3168]	; 0xc60
 80128d0:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80128d4:	f5a3 631c 	sub.w	r3, r3, #2496	; 0x9c0
 80128d8:	601a      	str	r2, [r3, #0]
    __ASM("sxtb16 %0, %1" : "=r"(result) : "r"(op1));
 80128da:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80128de:	f5a3 631c 	sub.w	r3, r3, #2496	; 0x9c0
 80128e2:	681b      	ldr	r3, [r3, #0]
 80128e4:	fa2f f283 	sxtb16	r2, r3
 80128e8:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80128ec:	f6a3 13c4 	subw	r3, r3, #2500	; 0x9c4
 80128f0:	601a      	str	r2, [r3, #0]
    return (result);
 80128f2:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80128f6:	f6a3 13c4 	subw	r3, r3, #2500	; 0x9c4
 80128fa:	681b      	ldr	r3, [r3, #0]
 80128fc:	f8c7 3c58 	str.w	r3, [r7, #3160]	; 0xc58
                val4 = SXTB16(val1);
 8012900:	f8d7 2c64 	ldr.w	r2, [r7, #3172]	; 0xc64
 8012904:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012908:	f6a3 13b8 	subw	r3, r3, #2488	; 0x9b8
 801290c:	601a      	str	r2, [r3, #0]
    __ASM("sxtb16 %0, %1" : "=r"(result) : "r"(op1));
 801290e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012912:	f6a3 13b8 	subw	r3, r3, #2488	; 0x9b8
 8012916:	681b      	ldr	r3, [r3, #0]
 8012918:	fa2f f283 	sxtb16	r2, r3
 801291c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012920:	f6a3 13bc 	subw	r3, r3, #2492	; 0x9bc
 8012924:	601a      	str	r2, [r3, #0]
    return (result);
 8012926:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801292a:	f6a3 13bc 	subw	r3, r3, #2492	; 0x9bc
 801292e:	681b      	ldr	r3, [r3, #0]
 8012930:	f8c7 3c54 	str.w	r3, [r7, #3156]	; 0xc54
                val0 = SXTB16_RORn(val0, 8);
 8012934:	f8d7 2c68 	ldr.w	r2, [r7, #3176]	; 0xc68
 8012938:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801293c:	f6a3 139c 	subw	r3, r3, #2460	; 0x99c
 8012940:	601a      	str	r2, [r3, #0]
 8012942:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012946:	f5a3 621a 	sub.w	r2, r3, #2464	; 0x9a0
 801294a:	2308      	movs	r3, #8
 801294c:	6013      	str	r3, [r2, #0]
 801294e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012952:	f6a3 12a4 	subw	r2, r3, #2468	; 0x9a4
 8012956:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801295a:	f6a3 139c 	subw	r3, r3, #2460	; 0x99c
 801295e:	681b      	ldr	r3, [r3, #0]
 8012960:	6013      	str	r3, [r2, #0]
 8012962:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012966:	f6a3 12a8 	subw	r2, r3, #2472	; 0x9a8
 801296a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801296e:	f5a3 631a 	sub.w	r3, r3, #2464	; 0x9a0
 8012972:	681b      	ldr	r3, [r3, #0]
 8012974:	6013      	str	r3, [r2, #0]
    op2 %= 32U;
 8012976:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801297a:	f6a3 12a8 	subw	r2, r3, #2472	; 0x9a8
 801297e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012982:	f6a3 13a8 	subw	r3, r3, #2472	; 0x9a8
 8012986:	681b      	ldr	r3, [r3, #0]
 8012988:	f003 031f 	and.w	r3, r3, #31
 801298c:	6013      	str	r3, [r2, #0]
    if (op2 == 0U)
 801298e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012992:	f6a3 13a8 	subw	r3, r3, #2472	; 0x9a8
 8012996:	681b      	ldr	r3, [r3, #0]
 8012998:	2b00      	cmp	r3, #0
 801299a:	d105      	bne.n	80129a8 <arm_nn_mat_mult_nt_t_s8+0x37c8>
        return op1;
 801299c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80129a0:	f6a3 13a4 	subw	r3, r3, #2468	; 0x9a4
 80129a4:	681a      	ldr	r2, [r3, #0]
 80129a6:	e00a      	b.n	80129be <arm_nn_mat_mult_nt_t_s8+0x37de>
    return (op1 >> op2) | (op1 << (32U - op2));
 80129a8:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80129ac:	f6a3 12a4 	subw	r2, r3, #2468	; 0x9a4
 80129b0:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80129b4:	f6a3 13a8 	subw	r3, r3, #2472	; 0x9a8
 80129b8:	6812      	ldr	r2, [r2, #0]
 80129ba:	681b      	ldr	r3, [r3, #0]
 80129bc:	41da      	rors	r2, r3
 80129be:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80129c2:	f6a3 13ac 	subw	r3, r3, #2476	; 0x9ac
 80129c6:	601a      	str	r2, [r3, #0]
    __ASM("sxtb16 %0, %1" : "=r"(result) : "r"(op1));
 80129c8:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80129cc:	f6a3 13ac 	subw	r3, r3, #2476	; 0x9ac
 80129d0:	681b      	ldr	r3, [r3, #0]
 80129d2:	fa2f f283 	sxtb16	r2, r3
 80129d6:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80129da:	f5a3 631b 	sub.w	r3, r3, #2480	; 0x9b0
 80129de:	601a      	str	r2, [r3, #0]
    return (result);
 80129e0:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80129e4:	f5a3 631b 	sub.w	r3, r3, #2480	; 0x9b0
 80129e8:	681a      	ldr	r2, [r3, #0]
        result = SXTB16(ROR(op1, rotate));
 80129ea:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80129ee:	f6a3 13b4 	subw	r3, r3, #2484	; 0x9b4
 80129f2:	601a      	str	r2, [r3, #0]
    return result;
 80129f4:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80129f8:	f6a3 13b4 	subw	r3, r3, #2484	; 0x9b4
 80129fc:	681b      	ldr	r3, [r3, #0]
 80129fe:	f8c7 3c68 	str.w	r3, [r7, #3176]	; 0xc68
                val2 = SXTB16_RORn(val2, 8);
 8012a02:	f8d7 2c60 	ldr.w	r2, [r7, #3168]	; 0xc60
 8012a06:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012a0a:	f5a3 6318 	sub.w	r3, r3, #2432	; 0x980
 8012a0e:	601a      	str	r2, [r3, #0]
 8012a10:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012a14:	f6a3 1284 	subw	r2, r3, #2436	; 0x984
 8012a18:	2308      	movs	r3, #8
 8012a1a:	6013      	str	r3, [r2, #0]
 8012a1c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012a20:	f6a3 1288 	subw	r2, r3, #2440	; 0x988
 8012a24:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012a28:	f5a3 6318 	sub.w	r3, r3, #2432	; 0x980
 8012a2c:	681b      	ldr	r3, [r3, #0]
 8012a2e:	6013      	str	r3, [r2, #0]
 8012a30:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012a34:	f6a3 128c 	subw	r2, r3, #2444	; 0x98c
 8012a38:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012a3c:	f6a3 1384 	subw	r3, r3, #2436	; 0x984
 8012a40:	681b      	ldr	r3, [r3, #0]
 8012a42:	6013      	str	r3, [r2, #0]
    op2 %= 32U;
 8012a44:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012a48:	f6a3 128c 	subw	r2, r3, #2444	; 0x98c
 8012a4c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012a50:	f6a3 138c 	subw	r3, r3, #2444	; 0x98c
 8012a54:	681b      	ldr	r3, [r3, #0]
 8012a56:	f003 031f 	and.w	r3, r3, #31
 8012a5a:	6013      	str	r3, [r2, #0]
    if (op2 == 0U)
 8012a5c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012a60:	f6a3 138c 	subw	r3, r3, #2444	; 0x98c
 8012a64:	681b      	ldr	r3, [r3, #0]
 8012a66:	2b00      	cmp	r3, #0
 8012a68:	d105      	bne.n	8012a76 <arm_nn_mat_mult_nt_t_s8+0x3896>
        return op1;
 8012a6a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012a6e:	f6a3 1388 	subw	r3, r3, #2440	; 0x988
 8012a72:	681a      	ldr	r2, [r3, #0]
 8012a74:	e00a      	b.n	8012a8c <arm_nn_mat_mult_nt_t_s8+0x38ac>
    return (op1 >> op2) | (op1 << (32U - op2));
 8012a76:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012a7a:	f6a3 1288 	subw	r2, r3, #2440	; 0x988
 8012a7e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012a82:	f6a3 138c 	subw	r3, r3, #2444	; 0x98c
 8012a86:	6812      	ldr	r2, [r2, #0]
 8012a88:	681b      	ldr	r3, [r3, #0]
 8012a8a:	41da      	rors	r2, r3
 8012a8c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012a90:	f5a3 6319 	sub.w	r3, r3, #2448	; 0x990
 8012a94:	601a      	str	r2, [r3, #0]
    __ASM("sxtb16 %0, %1" : "=r"(result) : "r"(op1));
 8012a96:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012a9a:	f5a3 6319 	sub.w	r3, r3, #2448	; 0x990
 8012a9e:	681b      	ldr	r3, [r3, #0]
 8012aa0:	fa2f f283 	sxtb16	r2, r3
 8012aa4:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012aa8:	f6a3 1394 	subw	r3, r3, #2452	; 0x994
 8012aac:	601a      	str	r2, [r3, #0]
    return (result);
 8012aae:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012ab2:	f6a3 1394 	subw	r3, r3, #2452	; 0x994
 8012ab6:	681a      	ldr	r2, [r3, #0]
        result = SXTB16(ROR(op1, rotate));
 8012ab8:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012abc:	f6a3 1398 	subw	r3, r3, #2456	; 0x998
 8012ac0:	601a      	str	r2, [r3, #0]
    return result;
 8012ac2:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012ac6:	f6a3 1398 	subw	r3, r3, #2456	; 0x998
 8012aca:	681b      	ldr	r3, [r3, #0]
 8012acc:	f8c7 3c60 	str.w	r3, [r7, #3168]	; 0xc60
                val1 = SXTB16_RORn(val1, 8);
 8012ad0:	f8d7 2c64 	ldr.w	r2, [r7, #3172]	; 0xc64
 8012ad4:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012ad8:	f6a3 1364 	subw	r3, r3, #2404	; 0x964
 8012adc:	601a      	str	r2, [r3, #0]
 8012ade:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012ae2:	f6a3 1268 	subw	r2, r3, #2408	; 0x968
 8012ae6:	2308      	movs	r3, #8
 8012ae8:	6013      	str	r3, [r2, #0]
 8012aea:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012aee:	f6a3 126c 	subw	r2, r3, #2412	; 0x96c
 8012af2:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012af6:	f6a3 1364 	subw	r3, r3, #2404	; 0x964
 8012afa:	681b      	ldr	r3, [r3, #0]
 8012afc:	6013      	str	r3, [r2, #0]
 8012afe:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012b02:	f5a3 6217 	sub.w	r2, r3, #2416	; 0x970
 8012b06:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012b0a:	f6a3 1368 	subw	r3, r3, #2408	; 0x968
 8012b0e:	681b      	ldr	r3, [r3, #0]
 8012b10:	6013      	str	r3, [r2, #0]
    op2 %= 32U;
 8012b12:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012b16:	f5a3 6217 	sub.w	r2, r3, #2416	; 0x970
 8012b1a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012b1e:	f5a3 6317 	sub.w	r3, r3, #2416	; 0x970
 8012b22:	681b      	ldr	r3, [r3, #0]
 8012b24:	f003 031f 	and.w	r3, r3, #31
 8012b28:	6013      	str	r3, [r2, #0]
    if (op2 == 0U)
 8012b2a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012b2e:	f5a3 6317 	sub.w	r3, r3, #2416	; 0x970
 8012b32:	681b      	ldr	r3, [r3, #0]
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	d105      	bne.n	8012b44 <arm_nn_mat_mult_nt_t_s8+0x3964>
        return op1;
 8012b38:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012b3c:	f6a3 136c 	subw	r3, r3, #2412	; 0x96c
 8012b40:	681a      	ldr	r2, [r3, #0]
 8012b42:	e00a      	b.n	8012b5a <arm_nn_mat_mult_nt_t_s8+0x397a>
    return (op1 >> op2) | (op1 << (32U - op2));
 8012b44:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012b48:	f6a3 126c 	subw	r2, r3, #2412	; 0x96c
 8012b4c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012b50:	f5a3 6317 	sub.w	r3, r3, #2416	; 0x970
 8012b54:	6812      	ldr	r2, [r2, #0]
 8012b56:	681b      	ldr	r3, [r3, #0]
 8012b58:	41da      	rors	r2, r3
 8012b5a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012b5e:	f6a3 1374 	subw	r3, r3, #2420	; 0x974
 8012b62:	601a      	str	r2, [r3, #0]
    __ASM("sxtb16 %0, %1" : "=r"(result) : "r"(op1));
 8012b64:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012b68:	f6a3 1374 	subw	r3, r3, #2420	; 0x974
 8012b6c:	681b      	ldr	r3, [r3, #0]
 8012b6e:	fa2f f283 	sxtb16	r2, r3
 8012b72:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012b76:	f6a3 1378 	subw	r3, r3, #2424	; 0x978
 8012b7a:	601a      	str	r2, [r3, #0]
    return (result);
 8012b7c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012b80:	f6a3 1378 	subw	r3, r3, #2424	; 0x978
 8012b84:	681a      	ldr	r2, [r3, #0]
        result = SXTB16(ROR(op1, rotate));
 8012b86:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012b8a:	f6a3 137c 	subw	r3, r3, #2428	; 0x97c
 8012b8e:	601a      	str	r2, [r3, #0]
    return result;
 8012b90:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012b94:	f6a3 137c 	subw	r3, r3, #2428	; 0x97c
 8012b98:	681b      	ldr	r3, [r3, #0]
 8012b9a:	f8c7 3c64 	str.w	r3, [r7, #3172]	; 0xc64

                // 4 x MAC res00, res01
                res00 = SMLAD(val5, val3, res00);
 8012b9e:	f8d7 2c58 	ldr.w	r2, [r7, #3160]	; 0xc58
 8012ba2:	f8d7 1c5c 	ldr.w	r1, [r7, #3164]	; 0xc5c
 8012ba6:	f8d7 0ca0 	ldr.w	r0, [r7, #3232]	; 0xca0
 8012baa:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012bae:	f6a3 1354 	subw	r3, r3, #2388	; 0x954
 8012bb2:	601a      	str	r2, [r3, #0]
 8012bb4:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012bb8:	f6a3 1358 	subw	r3, r3, #2392	; 0x958
 8012bbc:	6019      	str	r1, [r3, #0]
 8012bbe:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012bc2:	f6a3 135c 	subw	r3, r3, #2396	; 0x95c
 8012bc6:	6018      	str	r0, [r3, #0]
    __ASM volatile("smlad %0, %1, %2, %3" : "=r"(result) : "r"(op1), "r"(op2), "r"(op3));
 8012bc8:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012bcc:	f6a3 1354 	subw	r3, r3, #2388	; 0x954
 8012bd0:	6819      	ldr	r1, [r3, #0]
 8012bd2:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012bd6:	f6a3 1358 	subw	r3, r3, #2392	; 0x958
 8012bda:	681a      	ldr	r2, [r3, #0]
 8012bdc:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012be0:	f6a3 135c 	subw	r3, r3, #2396	; 0x95c
 8012be4:	681b      	ldr	r3, [r3, #0]
 8012be6:	fb21 3202 	smlad	r2, r1, r2, r3
 8012bea:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012bee:	f5a3 6316 	sub.w	r3, r3, #2400	; 0x960
 8012bf2:	601a      	str	r2, [r3, #0]
    return (result);
 8012bf4:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012bf8:	f5a3 6316 	sub.w	r3, r3, #2400	; 0x960
 8012bfc:	681b      	ldr	r3, [r3, #0]
 8012bfe:	f8c7 3ca0 	str.w	r3, [r7, #3232]	; 0xca0
                res00 = SMLAD(val2, val0, res00);
 8012c02:	f8d7 2c60 	ldr.w	r2, [r7, #3168]	; 0xc60
 8012c06:	f8d7 1c68 	ldr.w	r1, [r7, #3176]	; 0xc68
 8012c0a:	f8d7 0ca0 	ldr.w	r0, [r7, #3232]	; 0xca0
 8012c0e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012c12:	f6a3 1344 	subw	r3, r3, #2372	; 0x944
 8012c16:	601a      	str	r2, [r3, #0]
 8012c18:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012c1c:	f6a3 1348 	subw	r3, r3, #2376	; 0x948
 8012c20:	6019      	str	r1, [r3, #0]
 8012c22:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012c26:	f6a3 134c 	subw	r3, r3, #2380	; 0x94c
 8012c2a:	6018      	str	r0, [r3, #0]
    __ASM volatile("smlad %0, %1, %2, %3" : "=r"(result) : "r"(op1), "r"(op2), "r"(op3));
 8012c2c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012c30:	f6a3 1344 	subw	r3, r3, #2372	; 0x944
 8012c34:	6819      	ldr	r1, [r3, #0]
 8012c36:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012c3a:	f6a3 1348 	subw	r3, r3, #2376	; 0x948
 8012c3e:	681a      	ldr	r2, [r3, #0]
 8012c40:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012c44:	f6a3 134c 	subw	r3, r3, #2380	; 0x94c
 8012c48:	681b      	ldr	r3, [r3, #0]
 8012c4a:	fb21 3202 	smlad	r2, r1, r2, r3
 8012c4e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012c52:	f5a3 6315 	sub.w	r3, r3, #2384	; 0x950
 8012c56:	601a      	str	r2, [r3, #0]
    return (result);
 8012c58:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012c5c:	f5a3 6315 	sub.w	r3, r3, #2384	; 0x950
 8012c60:	681b      	ldr	r3, [r3, #0]
 8012c62:	f8c7 3ca0 	str.w	r3, [r7, #3232]	; 0xca0
                res01 = SMLAD(val5, val4, res01);
 8012c66:	f8d7 2c58 	ldr.w	r2, [r7, #3160]	; 0xc58
 8012c6a:	f8d7 1c54 	ldr.w	r1, [r7, #3156]	; 0xc54
 8012c6e:	f8d7 0c9c 	ldr.w	r0, [r7, #3228]	; 0xc9c
 8012c72:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012c76:	f6a3 1334 	subw	r3, r3, #2356	; 0x934
 8012c7a:	601a      	str	r2, [r3, #0]
 8012c7c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012c80:	f6a3 1338 	subw	r3, r3, #2360	; 0x938
 8012c84:	6019      	str	r1, [r3, #0]
 8012c86:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012c8a:	f6a3 133c 	subw	r3, r3, #2364	; 0x93c
 8012c8e:	6018      	str	r0, [r3, #0]
    __ASM volatile("smlad %0, %1, %2, %3" : "=r"(result) : "r"(op1), "r"(op2), "r"(op3));
 8012c90:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012c94:	f6a3 1334 	subw	r3, r3, #2356	; 0x934
 8012c98:	6819      	ldr	r1, [r3, #0]
 8012c9a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012c9e:	f6a3 1338 	subw	r3, r3, #2360	; 0x938
 8012ca2:	681a      	ldr	r2, [r3, #0]
 8012ca4:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012ca8:	f6a3 133c 	subw	r3, r3, #2364	; 0x93c
 8012cac:	681b      	ldr	r3, [r3, #0]
 8012cae:	fb21 3202 	smlad	r2, r1, r2, r3
 8012cb2:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012cb6:	f5a3 6314 	sub.w	r3, r3, #2368	; 0x940
 8012cba:	601a      	str	r2, [r3, #0]
    return (result);
 8012cbc:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012cc0:	f5a3 6314 	sub.w	r3, r3, #2368	; 0x940
 8012cc4:	681b      	ldr	r3, [r3, #0]
 8012cc6:	f8c7 3c9c 	str.w	r3, [r7, #3228]	; 0xc9c
                res01 = SMLAD(val2, val1, res01);
 8012cca:	f8d7 2c60 	ldr.w	r2, [r7, #3168]	; 0xc60
 8012cce:	f8d7 1c64 	ldr.w	r1, [r7, #3172]	; 0xc64
 8012cd2:	f8d7 0c9c 	ldr.w	r0, [r7, #3228]	; 0xc9c
 8012cd6:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012cda:	f6a3 1324 	subw	r3, r3, #2340	; 0x924
 8012cde:	601a      	str	r2, [r3, #0]
 8012ce0:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012ce4:	f6a3 1328 	subw	r3, r3, #2344	; 0x928
 8012ce8:	6019      	str	r1, [r3, #0]
 8012cea:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012cee:	f6a3 132c 	subw	r3, r3, #2348	; 0x92c
 8012cf2:	6018      	str	r0, [r3, #0]
    __ASM volatile("smlad %0, %1, %2, %3" : "=r"(result) : "r"(op1), "r"(op2), "r"(op3));
 8012cf4:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012cf8:	f6a3 1324 	subw	r3, r3, #2340	; 0x924
 8012cfc:	6819      	ldr	r1, [r3, #0]
 8012cfe:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012d02:	f6a3 1328 	subw	r3, r3, #2344	; 0x928
 8012d06:	681a      	ldr	r2, [r3, #0]
 8012d08:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012d0c:	f6a3 132c 	subw	r3, r3, #2348	; 0x92c
 8012d10:	681b      	ldr	r3, [r3, #0]
 8012d12:	fb21 3202 	smlad	r2, r1, r2, r3
 8012d16:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012d1a:	f5a3 6313 	sub.w	r3, r3, #2352	; 0x930
 8012d1e:	601a      	str	r2, [r3, #0]
    return (result);
 8012d20:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012d24:	f5a3 6313 	sub.w	r3, r3, #2352	; 0x930
 8012d28:	681b      	ldr	r3, [r3, #0]
 8012d2a:	f8c7 3c9c 	str.w	r3, [r7, #3228]	; 0xc9c
 8012d2e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012d32:	f5a3 6212 	sub.w	r2, r3, #2336	; 0x920
 8012d36:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8012d3a:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_s8, 4);
 8012d3c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012d40:	f5a3 6312 	sub.w	r3, r3, #2336	; 0x920
 8012d44:	681b      	ldr	r3, [r3, #0]
 8012d46:	681b      	ldr	r3, [r3, #0]
 8012d48:	681b      	ldr	r3, [r3, #0]
 8012d4a:	461a      	mov	r2, r3
 8012d4c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012d50:	f6a3 33cc 	subw	r3, r3, #3020	; 0xbcc
 8012d54:	601a      	str	r2, [r3, #0]
    *in_s8 += 4;
 8012d56:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012d5a:	f5a3 6312 	sub.w	r3, r3, #2336	; 0x920
 8012d5e:	681b      	ldr	r3, [r3, #0]
 8012d60:	681b      	ldr	r3, [r3, #0]
 8012d62:	1d1a      	adds	r2, r3, #4
 8012d64:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012d68:	f5a3 6312 	sub.w	r3, r3, #2336	; 0x920
 8012d6c:	681b      	ldr	r3, [r3, #0]
 8012d6e:	601a      	str	r2, [r3, #0]
    return (val);
 8012d70:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012d74:	f6a3 33cc 	subw	r3, r3, #3020	; 0xbcc
 8012d78:	681b      	ldr	r3, [r3, #0]

                val0 = arm_nn_read_s8x4_ia((const int8_t **)&rhs_ptr);
 8012d7a:	f8c7 3c68 	str.w	r3, [r7, #3176]	; 0xc68
                val1 = arm_nn_read_s8x4((const int8_t *)&rhs_ptr[rhs_off0]);
 8012d7e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012d82:	f6a3 339c 	subw	r3, r3, #2972	; 0xb9c
 8012d86:	681a      	ldr	r2, [r3, #0]
 8012d88:	f8d7 3c7c 	ldr.w	r3, [r7, #3196]	; 0xc7c
 8012d8c:	441a      	add	r2, r3
 8012d8e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012d92:	f6a3 131c 	subw	r3, r3, #2332	; 0x91c
 8012d96:	601a      	str	r2, [r3, #0]
 8012d98:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012d9c:	f6a3 131c 	subw	r3, r3, #2332	; 0x91c
 8012da0:	681b      	ldr	r3, [r3, #0]
 8012da2:	681b      	ldr	r3, [r3, #0]
 8012da4:	461a      	mov	r2, r3
    memcpy(&val, in_s8, 4);
 8012da6:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012daa:	f5a3 633d 	sub.w	r3, r3, #3024	; 0xbd0
 8012dae:	601a      	str	r2, [r3, #0]
    return (val);
 8012db0:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012db4:	f5a3 633d 	sub.w	r3, r3, #3024	; 0xbd0
 8012db8:	681b      	ldr	r3, [r3, #0]
 8012dba:	f8c7 3c64 	str.w	r3, [r7, #3172]	; 0xc64
 8012dbe:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012dc2:	f6a3 1218 	subw	r2, r3, #2328	; 0x918
 8012dc6:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8012dca:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_s8, 4);
 8012dcc:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012dd0:	f6a3 1318 	subw	r3, r3, #2328	; 0x918
 8012dd4:	681b      	ldr	r3, [r3, #0]
 8012dd6:	681b      	ldr	r3, [r3, #0]
 8012dd8:	681b      	ldr	r3, [r3, #0]
 8012dda:	461a      	mov	r2, r3
 8012ddc:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012de0:	f6a3 33d4 	subw	r3, r3, #3028	; 0xbd4
 8012de4:	601a      	str	r2, [r3, #0]
    *in_s8 += 4;
 8012de6:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012dea:	f6a3 1318 	subw	r3, r3, #2328	; 0x918
 8012dee:	681b      	ldr	r3, [r3, #0]
 8012df0:	681b      	ldr	r3, [r3, #0]
 8012df2:	1d1a      	adds	r2, r3, #4
 8012df4:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012df8:	f6a3 1318 	subw	r3, r3, #2328	; 0x918
 8012dfc:	681b      	ldr	r3, [r3, #0]
 8012dfe:	601a      	str	r2, [r3, #0]
    return (val);
 8012e00:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012e04:	f6a3 33d4 	subw	r3, r3, #3028	; 0xbd4
 8012e08:	681b      	ldr	r3, [r3, #0]
                val2 = arm_nn_read_s8x4_ia((const int8_t **)&lhs_ptr);
 8012e0a:	f8c7 3c60 	str.w	r3, [r7, #3168]	; 0xc60
                val3 = SXTB16(val0);
 8012e0e:	f8d7 2c68 	ldr.w	r2, [r7, #3176]	; 0xc68
 8012e12:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012e16:	f5a3 6311 	sub.w	r3, r3, #2320	; 0x910
 8012e1a:	601a      	str	r2, [r3, #0]
    __ASM("sxtb16 %0, %1" : "=r"(result) : "r"(op1));
 8012e1c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012e20:	f5a3 6311 	sub.w	r3, r3, #2320	; 0x910
 8012e24:	681b      	ldr	r3, [r3, #0]
 8012e26:	fa2f f283 	sxtb16	r2, r3
 8012e2a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012e2e:	f6a3 1314 	subw	r3, r3, #2324	; 0x914
 8012e32:	601a      	str	r2, [r3, #0]
    return (result);
 8012e34:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012e38:	f6a3 1314 	subw	r3, r3, #2324	; 0x914
 8012e3c:	681b      	ldr	r3, [r3, #0]
 8012e3e:	f8c7 3c5c 	str.w	r3, [r7, #3164]	; 0xc5c
                val5 = SXTB16(val2);
 8012e42:	f8d7 2c60 	ldr.w	r2, [r7, #3168]	; 0xc60
 8012e46:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012e4a:	f6a3 1308 	subw	r3, r3, #2312	; 0x908
 8012e4e:	601a      	str	r2, [r3, #0]
    __ASM("sxtb16 %0, %1" : "=r"(result) : "r"(op1));
 8012e50:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012e54:	f6a3 1308 	subw	r3, r3, #2312	; 0x908
 8012e58:	681b      	ldr	r3, [r3, #0]
 8012e5a:	fa2f f283 	sxtb16	r2, r3
 8012e5e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012e62:	f6a3 130c 	subw	r3, r3, #2316	; 0x90c
 8012e66:	601a      	str	r2, [r3, #0]
    return (result);
 8012e68:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012e6c:	f6a3 130c 	subw	r3, r3, #2316	; 0x90c
 8012e70:	681b      	ldr	r3, [r3, #0]
 8012e72:	f8c7 3c58 	str.w	r3, [r7, #3160]	; 0xc58
                val4 = SXTB16(val1);
 8012e76:	f8d7 2c64 	ldr.w	r2, [r7, #3172]	; 0xc64
 8012e7a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012e7e:	f5a3 6310 	sub.w	r3, r3, #2304	; 0x900
 8012e82:	601a      	str	r2, [r3, #0]
    __ASM("sxtb16 %0, %1" : "=r"(result) : "r"(op1));
 8012e84:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012e88:	f5a3 6310 	sub.w	r3, r3, #2304	; 0x900
 8012e8c:	681b      	ldr	r3, [r3, #0]
 8012e8e:	fa2f f283 	sxtb16	r2, r3
 8012e92:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012e96:	f6a3 1304 	subw	r3, r3, #2308	; 0x904
 8012e9a:	601a      	str	r2, [r3, #0]
    return (result);
 8012e9c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012ea0:	f6a3 1304 	subw	r3, r3, #2308	; 0x904
 8012ea4:	681b      	ldr	r3, [r3, #0]
 8012ea6:	f8c7 3c54 	str.w	r3, [r7, #3156]	; 0xc54
                val0 = SXTB16_RORn(val0, 8);
 8012eaa:	f8d7 2c68 	ldr.w	r2, [r7, #3176]	; 0xc68
 8012eae:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012eb2:	f6a3 03e4 	subw	r3, r3, #2276	; 0x8e4
 8012eb6:	601a      	str	r2, [r3, #0]
 8012eb8:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012ebc:	f6a3 02e8 	subw	r2, r3, #2280	; 0x8e8
 8012ec0:	2308      	movs	r3, #8
 8012ec2:	6013      	str	r3, [r2, #0]
 8012ec4:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012ec8:	f6a3 02ec 	subw	r2, r3, #2284	; 0x8ec
 8012ecc:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012ed0:	f6a3 03e4 	subw	r3, r3, #2276	; 0x8e4
 8012ed4:	681b      	ldr	r3, [r3, #0]
 8012ed6:	6013      	str	r3, [r2, #0]
 8012ed8:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012edc:	f5a3 620f 	sub.w	r2, r3, #2288	; 0x8f0
 8012ee0:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012ee4:	f6a3 03e8 	subw	r3, r3, #2280	; 0x8e8
 8012ee8:	681b      	ldr	r3, [r3, #0]
 8012eea:	6013      	str	r3, [r2, #0]
    op2 %= 32U;
 8012eec:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012ef0:	f5a3 620f 	sub.w	r2, r3, #2288	; 0x8f0
 8012ef4:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012ef8:	f5a3 630f 	sub.w	r3, r3, #2288	; 0x8f0
 8012efc:	681b      	ldr	r3, [r3, #0]
 8012efe:	f003 031f 	and.w	r3, r3, #31
 8012f02:	6013      	str	r3, [r2, #0]
    if (op2 == 0U)
 8012f04:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012f08:	f5a3 630f 	sub.w	r3, r3, #2288	; 0x8f0
 8012f0c:	681b      	ldr	r3, [r3, #0]
 8012f0e:	2b00      	cmp	r3, #0
 8012f10:	d105      	bne.n	8012f1e <arm_nn_mat_mult_nt_t_s8+0x3d3e>
        return op1;
 8012f12:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012f16:	f6a3 03ec 	subw	r3, r3, #2284	; 0x8ec
 8012f1a:	681a      	ldr	r2, [r3, #0]
 8012f1c:	e00a      	b.n	8012f34 <arm_nn_mat_mult_nt_t_s8+0x3d54>
    return (op1 >> op2) | (op1 << (32U - op2));
 8012f1e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012f22:	f6a3 02ec 	subw	r2, r3, #2284	; 0x8ec
 8012f26:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012f2a:	f5a3 630f 	sub.w	r3, r3, #2288	; 0x8f0
 8012f2e:	6812      	ldr	r2, [r2, #0]
 8012f30:	681b      	ldr	r3, [r3, #0]
 8012f32:	41da      	rors	r2, r3
 8012f34:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012f38:	f6a3 03f4 	subw	r3, r3, #2292	; 0x8f4
 8012f3c:	601a      	str	r2, [r3, #0]
    __ASM("sxtb16 %0, %1" : "=r"(result) : "r"(op1));
 8012f3e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012f42:	f6a3 03f4 	subw	r3, r3, #2292	; 0x8f4
 8012f46:	681b      	ldr	r3, [r3, #0]
 8012f48:	fa2f f283 	sxtb16	r2, r3
 8012f4c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012f50:	f6a3 03f8 	subw	r3, r3, #2296	; 0x8f8
 8012f54:	601a      	str	r2, [r3, #0]
    return (result);
 8012f56:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012f5a:	f6a3 03f8 	subw	r3, r3, #2296	; 0x8f8
 8012f5e:	681a      	ldr	r2, [r3, #0]
        result = SXTB16(ROR(op1, rotate));
 8012f60:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012f64:	f6a3 03fc 	subw	r3, r3, #2300	; 0x8fc
 8012f68:	601a      	str	r2, [r3, #0]
    return result;
 8012f6a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012f6e:	f6a3 03fc 	subw	r3, r3, #2300	; 0x8fc
 8012f72:	681b      	ldr	r3, [r3, #0]
 8012f74:	f8c7 3c68 	str.w	r3, [r7, #3176]	; 0xc68
                val2 = SXTB16_RORn(val2, 8);
 8012f78:	f8d7 2c60 	ldr.w	r2, [r7, #3168]	; 0xc60
 8012f7c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012f80:	f6a3 03c8 	subw	r3, r3, #2248	; 0x8c8
 8012f84:	601a      	str	r2, [r3, #0]
 8012f86:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012f8a:	f6a3 02cc 	subw	r2, r3, #2252	; 0x8cc
 8012f8e:	2308      	movs	r3, #8
 8012f90:	6013      	str	r3, [r2, #0]
 8012f92:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012f96:	f5a3 620d 	sub.w	r2, r3, #2256	; 0x8d0
 8012f9a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012f9e:	f6a3 03c8 	subw	r3, r3, #2248	; 0x8c8
 8012fa2:	681b      	ldr	r3, [r3, #0]
 8012fa4:	6013      	str	r3, [r2, #0]
 8012fa6:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012faa:	f6a3 02d4 	subw	r2, r3, #2260	; 0x8d4
 8012fae:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012fb2:	f6a3 03cc 	subw	r3, r3, #2252	; 0x8cc
 8012fb6:	681b      	ldr	r3, [r3, #0]
 8012fb8:	6013      	str	r3, [r2, #0]
    op2 %= 32U;
 8012fba:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012fbe:	f6a3 02d4 	subw	r2, r3, #2260	; 0x8d4
 8012fc2:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012fc6:	f6a3 03d4 	subw	r3, r3, #2260	; 0x8d4
 8012fca:	681b      	ldr	r3, [r3, #0]
 8012fcc:	f003 031f 	and.w	r3, r3, #31
 8012fd0:	6013      	str	r3, [r2, #0]
    if (op2 == 0U)
 8012fd2:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012fd6:	f6a3 03d4 	subw	r3, r3, #2260	; 0x8d4
 8012fda:	681b      	ldr	r3, [r3, #0]
 8012fdc:	2b00      	cmp	r3, #0
 8012fde:	d105      	bne.n	8012fec <arm_nn_mat_mult_nt_t_s8+0x3e0c>
        return op1;
 8012fe0:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012fe4:	f5a3 630d 	sub.w	r3, r3, #2256	; 0x8d0
 8012fe8:	681a      	ldr	r2, [r3, #0]
 8012fea:	e00a      	b.n	8013002 <arm_nn_mat_mult_nt_t_s8+0x3e22>
    return (op1 >> op2) | (op1 << (32U - op2));
 8012fec:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012ff0:	f5a3 620d 	sub.w	r2, r3, #2256	; 0x8d0
 8012ff4:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8012ff8:	f6a3 03d4 	subw	r3, r3, #2260	; 0x8d4
 8012ffc:	6812      	ldr	r2, [r2, #0]
 8012ffe:	681b      	ldr	r3, [r3, #0]
 8013000:	41da      	rors	r2, r3
 8013002:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013006:	f6a3 03d8 	subw	r3, r3, #2264	; 0x8d8
 801300a:	601a      	str	r2, [r3, #0]
    __ASM("sxtb16 %0, %1" : "=r"(result) : "r"(op1));
 801300c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013010:	f6a3 03d8 	subw	r3, r3, #2264	; 0x8d8
 8013014:	681b      	ldr	r3, [r3, #0]
 8013016:	fa2f f283 	sxtb16	r2, r3
 801301a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801301e:	f6a3 03dc 	subw	r3, r3, #2268	; 0x8dc
 8013022:	601a      	str	r2, [r3, #0]
    return (result);
 8013024:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013028:	f6a3 03dc 	subw	r3, r3, #2268	; 0x8dc
 801302c:	681a      	ldr	r2, [r3, #0]
        result = SXTB16(ROR(op1, rotate));
 801302e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013032:	f5a3 630e 	sub.w	r3, r3, #2272	; 0x8e0
 8013036:	601a      	str	r2, [r3, #0]
    return result;
 8013038:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801303c:	f5a3 630e 	sub.w	r3, r3, #2272	; 0x8e0
 8013040:	681b      	ldr	r3, [r3, #0]
 8013042:	f8c7 3c60 	str.w	r3, [r7, #3168]	; 0xc60
                val1 = SXTB16_RORn(val1, 8);
 8013046:	f8d7 2c64 	ldr.w	r2, [r7, #3172]	; 0xc64
 801304a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801304e:	f6a3 03ac 	subw	r3, r3, #2220	; 0x8ac
 8013052:	601a      	str	r2, [r3, #0]
 8013054:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013058:	f5a3 620b 	sub.w	r2, r3, #2224	; 0x8b0
 801305c:	2308      	movs	r3, #8
 801305e:	6013      	str	r3, [r2, #0]
 8013060:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013064:	f6a3 02b4 	subw	r2, r3, #2228	; 0x8b4
 8013068:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801306c:	f6a3 03ac 	subw	r3, r3, #2220	; 0x8ac
 8013070:	681b      	ldr	r3, [r3, #0]
 8013072:	6013      	str	r3, [r2, #0]
 8013074:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013078:	f6a3 02b8 	subw	r2, r3, #2232	; 0x8b8
 801307c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013080:	f5a3 630b 	sub.w	r3, r3, #2224	; 0x8b0
 8013084:	681b      	ldr	r3, [r3, #0]
 8013086:	6013      	str	r3, [r2, #0]
    op2 %= 32U;
 8013088:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801308c:	f6a3 02b8 	subw	r2, r3, #2232	; 0x8b8
 8013090:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013094:	f6a3 03b8 	subw	r3, r3, #2232	; 0x8b8
 8013098:	681b      	ldr	r3, [r3, #0]
 801309a:	f003 031f 	and.w	r3, r3, #31
 801309e:	6013      	str	r3, [r2, #0]
    if (op2 == 0U)
 80130a0:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80130a4:	f6a3 03b8 	subw	r3, r3, #2232	; 0x8b8
 80130a8:	681b      	ldr	r3, [r3, #0]
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	d105      	bne.n	80130ba <arm_nn_mat_mult_nt_t_s8+0x3eda>
        return op1;
 80130ae:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80130b2:	f6a3 03b4 	subw	r3, r3, #2228	; 0x8b4
 80130b6:	681a      	ldr	r2, [r3, #0]
 80130b8:	e00a      	b.n	80130d0 <arm_nn_mat_mult_nt_t_s8+0x3ef0>
    return (op1 >> op2) | (op1 << (32U - op2));
 80130ba:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80130be:	f6a3 02b4 	subw	r2, r3, #2228	; 0x8b4
 80130c2:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80130c6:	f6a3 03b8 	subw	r3, r3, #2232	; 0x8b8
 80130ca:	6812      	ldr	r2, [r2, #0]
 80130cc:	681b      	ldr	r3, [r3, #0]
 80130ce:	41da      	rors	r2, r3
 80130d0:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80130d4:	f6a3 03bc 	subw	r3, r3, #2236	; 0x8bc
 80130d8:	601a      	str	r2, [r3, #0]
    __ASM("sxtb16 %0, %1" : "=r"(result) : "r"(op1));
 80130da:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80130de:	f6a3 03bc 	subw	r3, r3, #2236	; 0x8bc
 80130e2:	681b      	ldr	r3, [r3, #0]
 80130e4:	fa2f f283 	sxtb16	r2, r3
 80130e8:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80130ec:	f5a3 630c 	sub.w	r3, r3, #2240	; 0x8c0
 80130f0:	601a      	str	r2, [r3, #0]
    return (result);
 80130f2:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80130f6:	f5a3 630c 	sub.w	r3, r3, #2240	; 0x8c0
 80130fa:	681a      	ldr	r2, [r3, #0]
        result = SXTB16(ROR(op1, rotate));
 80130fc:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013100:	f6a3 03c4 	subw	r3, r3, #2244	; 0x8c4
 8013104:	601a      	str	r2, [r3, #0]
    return result;
 8013106:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801310a:	f6a3 03c4 	subw	r3, r3, #2244	; 0x8c4
 801310e:	681b      	ldr	r3, [r3, #0]
 8013110:	f8c7 3c64 	str.w	r3, [r7, #3172]	; 0xc64

                // 4 x MAC res00, res01
                res00 = SMLAD(val5, val3, res00);
 8013114:	f8d7 2c58 	ldr.w	r2, [r7, #3160]	; 0xc58
 8013118:	f8d7 1c5c 	ldr.w	r1, [r7, #3164]	; 0xc5c
 801311c:	f8d7 0ca0 	ldr.w	r0, [r7, #3232]	; 0xca0
 8013120:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013124:	f6a3 039c 	subw	r3, r3, #2204	; 0x89c
 8013128:	601a      	str	r2, [r3, #0]
 801312a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801312e:	f5a3 630a 	sub.w	r3, r3, #2208	; 0x8a0
 8013132:	6019      	str	r1, [r3, #0]
 8013134:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013138:	f6a3 03a4 	subw	r3, r3, #2212	; 0x8a4
 801313c:	6018      	str	r0, [r3, #0]
    __ASM volatile("smlad %0, %1, %2, %3" : "=r"(result) : "r"(op1), "r"(op2), "r"(op3));
 801313e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013142:	f6a3 039c 	subw	r3, r3, #2204	; 0x89c
 8013146:	6819      	ldr	r1, [r3, #0]
 8013148:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801314c:	f5a3 630a 	sub.w	r3, r3, #2208	; 0x8a0
 8013150:	681a      	ldr	r2, [r3, #0]
 8013152:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013156:	f6a3 03a4 	subw	r3, r3, #2212	; 0x8a4
 801315a:	681b      	ldr	r3, [r3, #0]
 801315c:	fb21 3202 	smlad	r2, r1, r2, r3
 8013160:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013164:	f6a3 03a8 	subw	r3, r3, #2216	; 0x8a8
 8013168:	601a      	str	r2, [r3, #0]
    return (result);
 801316a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801316e:	f6a3 03a8 	subw	r3, r3, #2216	; 0x8a8
 8013172:	681b      	ldr	r3, [r3, #0]
 8013174:	f8c7 3ca0 	str.w	r3, [r7, #3232]	; 0xca0
                res00 = SMLAD(val2, val0, res00);
 8013178:	f8d7 2c60 	ldr.w	r2, [r7, #3168]	; 0xc60
 801317c:	f8d7 1c68 	ldr.w	r1, [r7, #3176]	; 0xc68
 8013180:	f8d7 0ca0 	ldr.w	r0, [r7, #3232]	; 0xca0
 8013184:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013188:	f6a3 038c 	subw	r3, r3, #2188	; 0x88c
 801318c:	601a      	str	r2, [r3, #0]
 801318e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013192:	f5a3 6309 	sub.w	r3, r3, #2192	; 0x890
 8013196:	6019      	str	r1, [r3, #0]
 8013198:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801319c:	f6a3 0394 	subw	r3, r3, #2196	; 0x894
 80131a0:	6018      	str	r0, [r3, #0]
    __ASM volatile("smlad %0, %1, %2, %3" : "=r"(result) : "r"(op1), "r"(op2), "r"(op3));
 80131a2:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80131a6:	f6a3 038c 	subw	r3, r3, #2188	; 0x88c
 80131aa:	6819      	ldr	r1, [r3, #0]
 80131ac:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80131b0:	f5a3 6309 	sub.w	r3, r3, #2192	; 0x890
 80131b4:	681a      	ldr	r2, [r3, #0]
 80131b6:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80131ba:	f6a3 0394 	subw	r3, r3, #2196	; 0x894
 80131be:	681b      	ldr	r3, [r3, #0]
 80131c0:	fb21 3202 	smlad	r2, r1, r2, r3
 80131c4:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80131c8:	f6a3 0398 	subw	r3, r3, #2200	; 0x898
 80131cc:	601a      	str	r2, [r3, #0]
    return (result);
 80131ce:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80131d2:	f6a3 0398 	subw	r3, r3, #2200	; 0x898
 80131d6:	681b      	ldr	r3, [r3, #0]
 80131d8:	f8c7 3ca0 	str.w	r3, [r7, #3232]	; 0xca0
                res01 = SMLAD(val5, val4, res01);
 80131dc:	f8d7 2c58 	ldr.w	r2, [r7, #3160]	; 0xc58
 80131e0:	f8d7 1c54 	ldr.w	r1, [r7, #3156]	; 0xc54
 80131e4:	f8d7 0c9c 	ldr.w	r0, [r7, #3228]	; 0xc9c
 80131e8:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80131ec:	f6a3 037c 	subw	r3, r3, #2172	; 0x87c
 80131f0:	601a      	str	r2, [r3, #0]
 80131f2:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80131f6:	f5a3 6308 	sub.w	r3, r3, #2176	; 0x880
 80131fa:	6019      	str	r1, [r3, #0]
 80131fc:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013200:	f6a3 0384 	subw	r3, r3, #2180	; 0x884
 8013204:	6018      	str	r0, [r3, #0]
    __ASM volatile("smlad %0, %1, %2, %3" : "=r"(result) : "r"(op1), "r"(op2), "r"(op3));
 8013206:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801320a:	f6a3 037c 	subw	r3, r3, #2172	; 0x87c
 801320e:	6819      	ldr	r1, [r3, #0]
 8013210:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013214:	f5a3 6308 	sub.w	r3, r3, #2176	; 0x880
 8013218:	681a      	ldr	r2, [r3, #0]
 801321a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801321e:	f6a3 0384 	subw	r3, r3, #2180	; 0x884
 8013222:	681b      	ldr	r3, [r3, #0]
 8013224:	fb21 3202 	smlad	r2, r1, r2, r3
 8013228:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801322c:	f6a3 0388 	subw	r3, r3, #2184	; 0x888
 8013230:	601a      	str	r2, [r3, #0]
    return (result);
 8013232:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013236:	f6a3 0388 	subw	r3, r3, #2184	; 0x888
 801323a:	681b      	ldr	r3, [r3, #0]
 801323c:	f8c7 3c9c 	str.w	r3, [r7, #3228]	; 0xc9c
                res01 = SMLAD(val2, val1, res01);
 8013240:	f8d7 2c60 	ldr.w	r2, [r7, #3168]	; 0xc60
 8013244:	f8d7 1c64 	ldr.w	r1, [r7, #3172]	; 0xc64
 8013248:	f8d7 0c9c 	ldr.w	r0, [r7, #3228]	; 0xc9c
 801324c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013250:	f6a3 036c 	subw	r3, r3, #2156	; 0x86c
 8013254:	601a      	str	r2, [r3, #0]
 8013256:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801325a:	f5a3 6307 	sub.w	r3, r3, #2160	; 0x870
 801325e:	6019      	str	r1, [r3, #0]
 8013260:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013264:	f6a3 0374 	subw	r3, r3, #2164	; 0x874
 8013268:	6018      	str	r0, [r3, #0]
    __ASM volatile("smlad %0, %1, %2, %3" : "=r"(result) : "r"(op1), "r"(op2), "r"(op3));
 801326a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801326e:	f6a3 036c 	subw	r3, r3, #2156	; 0x86c
 8013272:	6819      	ldr	r1, [r3, #0]
 8013274:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013278:	f5a3 6307 	sub.w	r3, r3, #2160	; 0x870
 801327c:	681a      	ldr	r2, [r3, #0]
 801327e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013282:	f6a3 0374 	subw	r3, r3, #2164	; 0x874
 8013286:	681b      	ldr	r3, [r3, #0]
 8013288:	fb21 3202 	smlad	r2, r1, r2, r3
 801328c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013290:	f6a3 0378 	subw	r3, r3, #2168	; 0x878
 8013294:	601a      	str	r2, [r3, #0]
    return (result);
 8013296:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801329a:	f6a3 0378 	subw	r3, r3, #2168	; 0x878
 801329e:	681b      	ldr	r3, [r3, #0]
 80132a0:	f8c7 3c9c 	str.w	r3, [r7, #3228]	; 0xc9c
 80132a4:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80132a8:	f6a3 0268 	subw	r2, r3, #2152	; 0x868
 80132ac:	f507 739a 	add.w	r3, r7, #308	; 0x134
 80132b0:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_s8, 4);
 80132b2:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80132b6:	f6a3 0368 	subw	r3, r3, #2152	; 0x868
 80132ba:	681b      	ldr	r3, [r3, #0]
 80132bc:	681b      	ldr	r3, [r3, #0]
 80132be:	681b      	ldr	r3, [r3, #0]
 80132c0:	461a      	mov	r2, r3
 80132c2:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80132c6:	f6a3 33d8 	subw	r3, r3, #3032	; 0xbd8
 80132ca:	601a      	str	r2, [r3, #0]
    *in_s8 += 4;
 80132cc:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80132d0:	f6a3 0368 	subw	r3, r3, #2152	; 0x868
 80132d4:	681b      	ldr	r3, [r3, #0]
 80132d6:	681b      	ldr	r3, [r3, #0]
 80132d8:	1d1a      	adds	r2, r3, #4
 80132da:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80132de:	f6a3 0368 	subw	r3, r3, #2152	; 0x868
 80132e2:	681b      	ldr	r3, [r3, #0]
 80132e4:	601a      	str	r2, [r3, #0]
    return (val);
 80132e6:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80132ea:	f6a3 33d8 	subw	r3, r3, #3032	; 0xbd8
 80132ee:	681b      	ldr	r3, [r3, #0]

                val0 = arm_nn_read_s8x4_ia((const int8_t **)&rhs_ptr);
 80132f0:	f8c7 3c68 	str.w	r3, [r7, #3176]	; 0xc68
                val1 = arm_nn_read_s8x4((const int8_t *)&rhs_ptr[rhs_off0]);
 80132f4:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80132f8:	f6a3 339c 	subw	r3, r3, #2972	; 0xb9c
 80132fc:	681a      	ldr	r2, [r3, #0]
 80132fe:	f8d7 3c7c 	ldr.w	r3, [r7, #3196]	; 0xc7c
 8013302:	441a      	add	r2, r3
 8013304:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013308:	f6a3 0364 	subw	r3, r3, #2148	; 0x864
 801330c:	601a      	str	r2, [r3, #0]
 801330e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013312:	f6a3 0364 	subw	r3, r3, #2148	; 0x864
 8013316:	681b      	ldr	r3, [r3, #0]
 8013318:	681b      	ldr	r3, [r3, #0]
 801331a:	461a      	mov	r2, r3
    memcpy(&val, in_s8, 4);
 801331c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013320:	f6a3 33dc 	subw	r3, r3, #3036	; 0xbdc
 8013324:	601a      	str	r2, [r3, #0]
    return (val);
 8013326:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801332a:	f6a3 33dc 	subw	r3, r3, #3036	; 0xbdc
 801332e:	681b      	ldr	r3, [r3, #0]
 8013330:	f8c7 3c64 	str.w	r3, [r7, #3172]	; 0xc64
 8013334:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013338:	f5a3 6206 	sub.w	r2, r3, #2144	; 0x860
 801333c:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8013340:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_s8, 4);
 8013342:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013346:	f5a3 6306 	sub.w	r3, r3, #2144	; 0x860
 801334a:	681b      	ldr	r3, [r3, #0]
 801334c:	681b      	ldr	r3, [r3, #0]
 801334e:	681b      	ldr	r3, [r3, #0]
 8013350:	461a      	mov	r2, r3
 8013352:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013356:	f5a3 633e 	sub.w	r3, r3, #3040	; 0xbe0
 801335a:	601a      	str	r2, [r3, #0]
    *in_s8 += 4;
 801335c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013360:	f5a3 6306 	sub.w	r3, r3, #2144	; 0x860
 8013364:	681b      	ldr	r3, [r3, #0]
 8013366:	681b      	ldr	r3, [r3, #0]
 8013368:	1d1a      	adds	r2, r3, #4
 801336a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801336e:	f5a3 6306 	sub.w	r3, r3, #2144	; 0x860
 8013372:	681b      	ldr	r3, [r3, #0]
 8013374:	601a      	str	r2, [r3, #0]
    return (val);
 8013376:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801337a:	f5a3 633e 	sub.w	r3, r3, #3040	; 0xbe0
 801337e:	681b      	ldr	r3, [r3, #0]
                val2 = arm_nn_read_s8x4_ia((const int8_t **)&lhs_ptr);
 8013380:	f8c7 3c60 	str.w	r3, [r7, #3168]	; 0xc60
                val3 = SXTB16(val0);
 8013384:	f8d7 2c68 	ldr.w	r2, [r7, #3176]	; 0xc68
 8013388:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801338c:	f6a3 0358 	subw	r3, r3, #2136	; 0x858
 8013390:	601a      	str	r2, [r3, #0]
    __ASM("sxtb16 %0, %1" : "=r"(result) : "r"(op1));
 8013392:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013396:	f6a3 0358 	subw	r3, r3, #2136	; 0x858
 801339a:	681b      	ldr	r3, [r3, #0]
 801339c:	fa2f f283 	sxtb16	r2, r3
 80133a0:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80133a4:	f6a3 035c 	subw	r3, r3, #2140	; 0x85c
 80133a8:	601a      	str	r2, [r3, #0]
    return (result);
 80133aa:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80133ae:	f6a3 035c 	subw	r3, r3, #2140	; 0x85c
 80133b2:	681b      	ldr	r3, [r3, #0]
 80133b4:	f8c7 3c5c 	str.w	r3, [r7, #3164]	; 0xc5c
                val5 = SXTB16(val2);
 80133b8:	f8d7 2c60 	ldr.w	r2, [r7, #3168]	; 0xc60
 80133bc:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80133c0:	f5a3 6305 	sub.w	r3, r3, #2128	; 0x850
 80133c4:	601a      	str	r2, [r3, #0]
    __ASM("sxtb16 %0, %1" : "=r"(result) : "r"(op1));
 80133c6:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80133ca:	f5a3 6305 	sub.w	r3, r3, #2128	; 0x850
 80133ce:	681b      	ldr	r3, [r3, #0]
 80133d0:	fa2f f283 	sxtb16	r2, r3
 80133d4:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80133d8:	f6a3 0354 	subw	r3, r3, #2132	; 0x854
 80133dc:	601a      	str	r2, [r3, #0]
    return (result);
 80133de:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80133e2:	f6a3 0354 	subw	r3, r3, #2132	; 0x854
 80133e6:	681b      	ldr	r3, [r3, #0]
 80133e8:	f8c7 3c58 	str.w	r3, [r7, #3160]	; 0xc58
                val4 = SXTB16(val1);
 80133ec:	f8d7 2c64 	ldr.w	r2, [r7, #3172]	; 0xc64
 80133f0:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80133f4:	f6a3 0348 	subw	r3, r3, #2120	; 0x848
 80133f8:	601a      	str	r2, [r3, #0]
    __ASM("sxtb16 %0, %1" : "=r"(result) : "r"(op1));
 80133fa:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80133fe:	f6a3 0348 	subw	r3, r3, #2120	; 0x848
 8013402:	681b      	ldr	r3, [r3, #0]
 8013404:	fa2f f283 	sxtb16	r2, r3
 8013408:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801340c:	f6a3 034c 	subw	r3, r3, #2124	; 0x84c
 8013410:	601a      	str	r2, [r3, #0]
    return (result);
 8013412:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013416:	f6a3 034c 	subw	r3, r3, #2124	; 0x84c
 801341a:	681b      	ldr	r3, [r3, #0]
 801341c:	f8c7 3c54 	str.w	r3, [r7, #3156]	; 0xc54
                val0 = SXTB16_RORn(val0, 8);
 8013420:	f8d7 2c68 	ldr.w	r2, [r7, #3176]	; 0xc68
 8013424:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013428:	f6a3 032c 	subw	r3, r3, #2092	; 0x82c
 801342c:	601a      	str	r2, [r3, #0]
 801342e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013432:	f5a3 6203 	sub.w	r2, r3, #2096	; 0x830
 8013436:	2308      	movs	r3, #8
 8013438:	6013      	str	r3, [r2, #0]
 801343a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801343e:	f6a3 0234 	subw	r2, r3, #2100	; 0x834
 8013442:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013446:	f6a3 032c 	subw	r3, r3, #2092	; 0x82c
 801344a:	681b      	ldr	r3, [r3, #0]
 801344c:	6013      	str	r3, [r2, #0]
 801344e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013452:	f6a3 0238 	subw	r2, r3, #2104	; 0x838
 8013456:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801345a:	f5a3 6303 	sub.w	r3, r3, #2096	; 0x830
 801345e:	681b      	ldr	r3, [r3, #0]
 8013460:	6013      	str	r3, [r2, #0]
    op2 %= 32U;
 8013462:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013466:	f6a3 0238 	subw	r2, r3, #2104	; 0x838
 801346a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801346e:	f6a3 0338 	subw	r3, r3, #2104	; 0x838
 8013472:	681b      	ldr	r3, [r3, #0]
 8013474:	f003 031f 	and.w	r3, r3, #31
 8013478:	6013      	str	r3, [r2, #0]
    if (op2 == 0U)
 801347a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801347e:	f6a3 0338 	subw	r3, r3, #2104	; 0x838
 8013482:	681b      	ldr	r3, [r3, #0]
 8013484:	2b00      	cmp	r3, #0
 8013486:	d105      	bne.n	8013494 <arm_nn_mat_mult_nt_t_s8+0x42b4>
        return op1;
 8013488:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801348c:	f6a3 0334 	subw	r3, r3, #2100	; 0x834
 8013490:	681a      	ldr	r2, [r3, #0]
 8013492:	e00a      	b.n	80134aa <arm_nn_mat_mult_nt_t_s8+0x42ca>
    return (op1 >> op2) | (op1 << (32U - op2));
 8013494:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013498:	f6a3 0234 	subw	r2, r3, #2100	; 0x834
 801349c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80134a0:	f6a3 0338 	subw	r3, r3, #2104	; 0x838
 80134a4:	6812      	ldr	r2, [r2, #0]
 80134a6:	681b      	ldr	r3, [r3, #0]
 80134a8:	41da      	rors	r2, r3
 80134aa:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80134ae:	f6a3 033c 	subw	r3, r3, #2108	; 0x83c
 80134b2:	601a      	str	r2, [r3, #0]
    __ASM("sxtb16 %0, %1" : "=r"(result) : "r"(op1));
 80134b4:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80134b8:	f6a3 033c 	subw	r3, r3, #2108	; 0x83c
 80134bc:	681b      	ldr	r3, [r3, #0]
 80134be:	fa2f f283 	sxtb16	r2, r3
 80134c2:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80134c6:	f5a3 6304 	sub.w	r3, r3, #2112	; 0x840
 80134ca:	601a      	str	r2, [r3, #0]
    return (result);
 80134cc:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80134d0:	f5a3 6304 	sub.w	r3, r3, #2112	; 0x840
 80134d4:	681a      	ldr	r2, [r3, #0]
        result = SXTB16(ROR(op1, rotate));
 80134d6:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80134da:	f6a3 0344 	subw	r3, r3, #2116	; 0x844
 80134de:	601a      	str	r2, [r3, #0]
    return result;
 80134e0:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80134e4:	f6a3 0344 	subw	r3, r3, #2116	; 0x844
 80134e8:	681b      	ldr	r3, [r3, #0]
 80134ea:	f8c7 3c68 	str.w	r3, [r7, #3176]	; 0xc68
                val2 = SXTB16_RORn(val2, 8);
 80134ee:	f8d7 2c60 	ldr.w	r2, [r7, #3168]	; 0xc60
 80134f2:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80134f6:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 80134fa:	601a      	str	r2, [r3, #0]
 80134fc:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013500:	f6a3 0214 	subw	r2, r3, #2068	; 0x814
 8013504:	2308      	movs	r3, #8
 8013506:	6013      	str	r3, [r2, #0]
 8013508:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801350c:	f6a3 0218 	subw	r2, r3, #2072	; 0x818
 8013510:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013514:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 8013518:	681b      	ldr	r3, [r3, #0]
 801351a:	6013      	str	r3, [r2, #0]
 801351c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013520:	f6a3 021c 	subw	r2, r3, #2076	; 0x81c
 8013524:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013528:	f6a3 0314 	subw	r3, r3, #2068	; 0x814
 801352c:	681b      	ldr	r3, [r3, #0]
 801352e:	6013      	str	r3, [r2, #0]
    op2 %= 32U;
 8013530:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013534:	f6a3 021c 	subw	r2, r3, #2076	; 0x81c
 8013538:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801353c:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 8013540:	681b      	ldr	r3, [r3, #0]
 8013542:	f003 031f 	and.w	r3, r3, #31
 8013546:	6013      	str	r3, [r2, #0]
    if (op2 == 0U)
 8013548:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801354c:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 8013550:	681b      	ldr	r3, [r3, #0]
 8013552:	2b00      	cmp	r3, #0
 8013554:	d105      	bne.n	8013562 <arm_nn_mat_mult_nt_t_s8+0x4382>
        return op1;
 8013556:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801355a:	f6a3 0318 	subw	r3, r3, #2072	; 0x818
 801355e:	681a      	ldr	r2, [r3, #0]
 8013560:	e00a      	b.n	8013578 <arm_nn_mat_mult_nt_t_s8+0x4398>
    return (op1 >> op2) | (op1 << (32U - op2));
 8013562:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013566:	f6a3 0218 	subw	r2, r3, #2072	; 0x818
 801356a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801356e:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 8013572:	6812      	ldr	r2, [r2, #0]
 8013574:	681b      	ldr	r3, [r3, #0]
 8013576:	41da      	rors	r2, r3
 8013578:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801357c:	f5a3 6302 	sub.w	r3, r3, #2080	; 0x820
 8013580:	601a      	str	r2, [r3, #0]
    __ASM("sxtb16 %0, %1" : "=r"(result) : "r"(op1));
 8013582:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013586:	f5a3 6302 	sub.w	r3, r3, #2080	; 0x820
 801358a:	681b      	ldr	r3, [r3, #0]
 801358c:	fa2f f283 	sxtb16	r2, r3
 8013590:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013594:	f6a3 0324 	subw	r3, r3, #2084	; 0x824
 8013598:	601a      	str	r2, [r3, #0]
    return (result);
 801359a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801359e:	f6a3 0324 	subw	r3, r3, #2084	; 0x824
 80135a2:	681a      	ldr	r2, [r3, #0]
        result = SXTB16(ROR(op1, rotate));
 80135a4:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80135a8:	f6a3 0328 	subw	r3, r3, #2088	; 0x828
 80135ac:	601a      	str	r2, [r3, #0]
    return result;
 80135ae:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80135b2:	f6a3 0328 	subw	r3, r3, #2088	; 0x828
 80135b6:	681b      	ldr	r3, [r3, #0]
 80135b8:	f8c7 3c60 	str.w	r3, [r7, #3168]	; 0xc60
                val1 = SXTB16_RORn(val1, 8);
 80135bc:	f8d7 2c64 	ldr.w	r2, [r7, #3172]	; 0xc64
 80135c0:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80135c4:	f2a3 73f4 	subw	r3, r3, #2036	; 0x7f4
 80135c8:	601a      	str	r2, [r3, #0]
 80135ca:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80135ce:	f5a3 62ff 	sub.w	r2, r3, #2040	; 0x7f8
 80135d2:	2308      	movs	r3, #8
 80135d4:	6013      	str	r3, [r2, #0]
 80135d6:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80135da:	f2a3 72fc 	subw	r2, r3, #2044	; 0x7fc
 80135de:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80135e2:	f2a3 73f4 	subw	r3, r3, #2036	; 0x7f4
 80135e6:	681b      	ldr	r3, [r3, #0]
 80135e8:	6013      	str	r3, [r2, #0]
 80135ea:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80135ee:	f5a3 6200 	sub.w	r2, r3, #2048	; 0x800
 80135f2:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80135f6:	f5a3 63ff 	sub.w	r3, r3, #2040	; 0x7f8
 80135fa:	681b      	ldr	r3, [r3, #0]
 80135fc:	6013      	str	r3, [r2, #0]
    op2 %= 32U;
 80135fe:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013602:	f5a3 6200 	sub.w	r2, r3, #2048	; 0x800
 8013606:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801360a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 801360e:	681b      	ldr	r3, [r3, #0]
 8013610:	f003 031f 	and.w	r3, r3, #31
 8013614:	6013      	str	r3, [r2, #0]
    if (op2 == 0U)
 8013616:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801361a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 801361e:	681b      	ldr	r3, [r3, #0]
 8013620:	2b00      	cmp	r3, #0
 8013622:	d105      	bne.n	8013630 <arm_nn_mat_mult_nt_t_s8+0x4450>
        return op1;
 8013624:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013628:	f2a3 73fc 	subw	r3, r3, #2044	; 0x7fc
 801362c:	681a      	ldr	r2, [r3, #0]
 801362e:	e00a      	b.n	8013646 <arm_nn_mat_mult_nt_t_s8+0x4466>
    return (op1 >> op2) | (op1 << (32U - op2));
 8013630:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013634:	f2a3 72fc 	subw	r2, r3, #2044	; 0x7fc
 8013638:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801363c:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8013640:	6812      	ldr	r2, [r2, #0]
 8013642:	681b      	ldr	r3, [r3, #0]
 8013644:	41da      	rors	r2, r3
 8013646:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801364a:	f6a3 0304 	subw	r3, r3, #2052	; 0x804
 801364e:	601a      	str	r2, [r3, #0]
    __ASM("sxtb16 %0, %1" : "=r"(result) : "r"(op1));
 8013650:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013654:	f6a3 0304 	subw	r3, r3, #2052	; 0x804
 8013658:	681b      	ldr	r3, [r3, #0]
 801365a:	fa2f f283 	sxtb16	r2, r3
 801365e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013662:	f6a3 0308 	subw	r3, r3, #2056	; 0x808
 8013666:	601a      	str	r2, [r3, #0]
    return (result);
 8013668:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801366c:	f6a3 0308 	subw	r3, r3, #2056	; 0x808
 8013670:	681a      	ldr	r2, [r3, #0]
        result = SXTB16(ROR(op1, rotate));
 8013672:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013676:	f6a3 030c 	subw	r3, r3, #2060	; 0x80c
 801367a:	601a      	str	r2, [r3, #0]
    return result;
 801367c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013680:	f6a3 030c 	subw	r3, r3, #2060	; 0x80c
 8013684:	681b      	ldr	r3, [r3, #0]
 8013686:	f8c7 3c64 	str.w	r3, [r7, #3172]	; 0xc64

                // 4 x MAC res00, res01
                res00 = SMLAD(val5, val3, res00);
 801368a:	f8d7 2c58 	ldr.w	r2, [r7, #3160]	; 0xc58
 801368e:	f8d7 1c5c 	ldr.w	r1, [r7, #3164]	; 0xc5c
 8013692:	f8d7 0ca0 	ldr.w	r0, [r7, #3232]	; 0xca0
 8013696:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801369a:	f2a3 73e4 	subw	r3, r3, #2020	; 0x7e4
 801369e:	601a      	str	r2, [r3, #0]
 80136a0:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80136a4:	f5a3 63fd 	sub.w	r3, r3, #2024	; 0x7e8
 80136a8:	6019      	str	r1, [r3, #0]
 80136aa:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80136ae:	f2a3 73ec 	subw	r3, r3, #2028	; 0x7ec
 80136b2:	6018      	str	r0, [r3, #0]
    __ASM volatile("smlad %0, %1, %2, %3" : "=r"(result) : "r"(op1), "r"(op2), "r"(op3));
 80136b4:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80136b8:	f2a3 73e4 	subw	r3, r3, #2020	; 0x7e4
 80136bc:	6819      	ldr	r1, [r3, #0]
 80136be:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80136c2:	f5a3 63fd 	sub.w	r3, r3, #2024	; 0x7e8
 80136c6:	681a      	ldr	r2, [r3, #0]
 80136c8:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80136cc:	f2a3 73ec 	subw	r3, r3, #2028	; 0x7ec
 80136d0:	681b      	ldr	r3, [r3, #0]
 80136d2:	fb21 3202 	smlad	r2, r1, r2, r3
 80136d6:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80136da:	f5a3 63fe 	sub.w	r3, r3, #2032	; 0x7f0
 80136de:	601a      	str	r2, [r3, #0]
    return (result);
 80136e0:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80136e4:	f5a3 63fe 	sub.w	r3, r3, #2032	; 0x7f0
 80136e8:	681b      	ldr	r3, [r3, #0]
 80136ea:	f8c7 3ca0 	str.w	r3, [r7, #3232]	; 0xca0
                res00 = SMLAD(val2, val0, res00);
 80136ee:	f8d7 2c60 	ldr.w	r2, [r7, #3168]	; 0xc60
 80136f2:	f8d7 1c68 	ldr.w	r1, [r7, #3176]	; 0xc68
 80136f6:	f8d7 0ca0 	ldr.w	r0, [r7, #3232]	; 0xca0
 80136fa:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80136fe:	f2a3 73d4 	subw	r3, r3, #2004	; 0x7d4
 8013702:	601a      	str	r2, [r3, #0]
 8013704:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013708:	f5a3 63fb 	sub.w	r3, r3, #2008	; 0x7d8
 801370c:	6019      	str	r1, [r3, #0]
 801370e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013712:	f2a3 73dc 	subw	r3, r3, #2012	; 0x7dc
 8013716:	6018      	str	r0, [r3, #0]
    __ASM volatile("smlad %0, %1, %2, %3" : "=r"(result) : "r"(op1), "r"(op2), "r"(op3));
 8013718:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801371c:	f2a3 73d4 	subw	r3, r3, #2004	; 0x7d4
 8013720:	6819      	ldr	r1, [r3, #0]
 8013722:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013726:	f5a3 63fb 	sub.w	r3, r3, #2008	; 0x7d8
 801372a:	681a      	ldr	r2, [r3, #0]
 801372c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013730:	f2a3 73dc 	subw	r3, r3, #2012	; 0x7dc
 8013734:	681b      	ldr	r3, [r3, #0]
 8013736:	fb21 3202 	smlad	r2, r1, r2, r3
 801373a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801373e:	f5a3 63fc 	sub.w	r3, r3, #2016	; 0x7e0
 8013742:	601a      	str	r2, [r3, #0]
    return (result);
 8013744:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013748:	f5a3 63fc 	sub.w	r3, r3, #2016	; 0x7e0
 801374c:	681b      	ldr	r3, [r3, #0]
 801374e:	f8c7 3ca0 	str.w	r3, [r7, #3232]	; 0xca0
                res01 = SMLAD(val5, val4, res01);
 8013752:	f8d7 2c58 	ldr.w	r2, [r7, #3160]	; 0xc58
 8013756:	f8d7 1c54 	ldr.w	r1, [r7, #3156]	; 0xc54
 801375a:	f8d7 0c9c 	ldr.w	r0, [r7, #3228]	; 0xc9c
 801375e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013762:	f2a3 73c4 	subw	r3, r3, #1988	; 0x7c4
 8013766:	601a      	str	r2, [r3, #0]
 8013768:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801376c:	f5a3 63f9 	sub.w	r3, r3, #1992	; 0x7c8
 8013770:	6019      	str	r1, [r3, #0]
 8013772:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013776:	f2a3 73cc 	subw	r3, r3, #1996	; 0x7cc
 801377a:	6018      	str	r0, [r3, #0]
    __ASM volatile("smlad %0, %1, %2, %3" : "=r"(result) : "r"(op1), "r"(op2), "r"(op3));
 801377c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013780:	f2a3 73c4 	subw	r3, r3, #1988	; 0x7c4
 8013784:	6819      	ldr	r1, [r3, #0]
 8013786:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801378a:	f5a3 63f9 	sub.w	r3, r3, #1992	; 0x7c8
 801378e:	681a      	ldr	r2, [r3, #0]
 8013790:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013794:	f2a3 73cc 	subw	r3, r3, #1996	; 0x7cc
 8013798:	681b      	ldr	r3, [r3, #0]
 801379a:	fb21 3202 	smlad	r2, r1, r2, r3
 801379e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80137a2:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 80137a6:	601a      	str	r2, [r3, #0]
    return (result);
 80137a8:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80137ac:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 80137b0:	681b      	ldr	r3, [r3, #0]
 80137b2:	f8c7 3c9c 	str.w	r3, [r7, #3228]	; 0xc9c
                res01 = SMLAD(val2, val1, res01);
 80137b6:	f8d7 2c60 	ldr.w	r2, [r7, #3168]	; 0xc60
 80137ba:	f8d7 1c64 	ldr.w	r1, [r7, #3172]	; 0xc64
 80137be:	f8d7 0c9c 	ldr.w	r0, [r7, #3228]	; 0xc9c
 80137c2:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80137c6:	f2a3 73b4 	subw	r3, r3, #1972	; 0x7b4
 80137ca:	601a      	str	r2, [r3, #0]
 80137cc:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80137d0:	f5a3 63f7 	sub.w	r3, r3, #1976	; 0x7b8
 80137d4:	6019      	str	r1, [r3, #0]
 80137d6:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80137da:	f2a3 73bc 	subw	r3, r3, #1980	; 0x7bc
 80137de:	6018      	str	r0, [r3, #0]
    __ASM volatile("smlad %0, %1, %2, %3" : "=r"(result) : "r"(op1), "r"(op2), "r"(op3));
 80137e0:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80137e4:	f2a3 73b4 	subw	r3, r3, #1972	; 0x7b4
 80137e8:	6819      	ldr	r1, [r3, #0]
 80137ea:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80137ee:	f5a3 63f7 	sub.w	r3, r3, #1976	; 0x7b8
 80137f2:	681a      	ldr	r2, [r3, #0]
 80137f4:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80137f8:	f2a3 73bc 	subw	r3, r3, #1980	; 0x7bc
 80137fc:	681b      	ldr	r3, [r3, #0]
 80137fe:	fb21 3202 	smlad	r2, r1, r2, r3
 8013802:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013806:	f5a3 63f8 	sub.w	r3, r3, #1984	; 0x7c0
 801380a:	601a      	str	r2, [r3, #0]
    return (result);
 801380c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013810:	f5a3 63f8 	sub.w	r3, r3, #1984	; 0x7c0
 8013814:	681b      	ldr	r3, [r3, #0]
 8013816:	f8c7 3c9c 	str.w	r3, [r7, #3228]	; 0xc9c
 801381a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801381e:	f5a3 62f6 	sub.w	r2, r3, #1968	; 0x7b0
 8013822:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8013826:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_s8, 4);
 8013828:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801382c:	f5a3 63f6 	sub.w	r3, r3, #1968	; 0x7b0
 8013830:	681b      	ldr	r3, [r3, #0]
 8013832:	681b      	ldr	r3, [r3, #0]
 8013834:	681b      	ldr	r3, [r3, #0]
 8013836:	461a      	mov	r2, r3
 8013838:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801383c:	f6a3 33e4 	subw	r3, r3, #3044	; 0xbe4
 8013840:	601a      	str	r2, [r3, #0]
    *in_s8 += 4;
 8013842:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013846:	f5a3 63f6 	sub.w	r3, r3, #1968	; 0x7b0
 801384a:	681b      	ldr	r3, [r3, #0]
 801384c:	681b      	ldr	r3, [r3, #0]
 801384e:	1d1a      	adds	r2, r3, #4
 8013850:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013854:	f5a3 63f6 	sub.w	r3, r3, #1968	; 0x7b0
 8013858:	681b      	ldr	r3, [r3, #0]
 801385a:	601a      	str	r2, [r3, #0]
    return (val);
 801385c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013860:	f6a3 33e4 	subw	r3, r3, #3044	; 0xbe4
 8013864:	681b      	ldr	r3, [r3, #0]

                val0 = arm_nn_read_s8x4_ia((const int8_t **)&rhs_ptr);
 8013866:	f8c7 3c68 	str.w	r3, [r7, #3176]	; 0xc68
                val1 = arm_nn_read_s8x4((const int8_t *)&rhs_ptr[rhs_off0]);
 801386a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801386e:	f6a3 339c 	subw	r3, r3, #2972	; 0xb9c
 8013872:	681a      	ldr	r2, [r3, #0]
 8013874:	f8d7 3c7c 	ldr.w	r3, [r7, #3196]	; 0xc7c
 8013878:	441a      	add	r2, r3
 801387a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801387e:	f2a3 73ac 	subw	r3, r3, #1964	; 0x7ac
 8013882:	601a      	str	r2, [r3, #0]
 8013884:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013888:	f2a3 73ac 	subw	r3, r3, #1964	; 0x7ac
 801388c:	681b      	ldr	r3, [r3, #0]
 801388e:	681b      	ldr	r3, [r3, #0]
 8013890:	461a      	mov	r2, r3
    memcpy(&val, in_s8, 4);
 8013892:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013896:	f6a3 33e8 	subw	r3, r3, #3048	; 0xbe8
 801389a:	601a      	str	r2, [r3, #0]
    return (val);
 801389c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80138a0:	f6a3 33e8 	subw	r3, r3, #3048	; 0xbe8
 80138a4:	681b      	ldr	r3, [r3, #0]
 80138a6:	f8c7 3c64 	str.w	r3, [r7, #3172]	; 0xc64
 80138aa:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80138ae:	f5a3 62f5 	sub.w	r2, r3, #1960	; 0x7a8
 80138b2:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 80138b6:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_s8, 4);
 80138b8:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80138bc:	f5a3 63f5 	sub.w	r3, r3, #1960	; 0x7a8
 80138c0:	681b      	ldr	r3, [r3, #0]
 80138c2:	681b      	ldr	r3, [r3, #0]
 80138c4:	681b      	ldr	r3, [r3, #0]
 80138c6:	461a      	mov	r2, r3
 80138c8:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80138cc:	f6a3 33ec 	subw	r3, r3, #3052	; 0xbec
 80138d0:	601a      	str	r2, [r3, #0]
    *in_s8 += 4;
 80138d2:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80138d6:	f5a3 63f5 	sub.w	r3, r3, #1960	; 0x7a8
 80138da:	681b      	ldr	r3, [r3, #0]
 80138dc:	681b      	ldr	r3, [r3, #0]
 80138de:	1d1a      	adds	r2, r3, #4
 80138e0:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80138e4:	f5a3 63f5 	sub.w	r3, r3, #1960	; 0x7a8
 80138e8:	681b      	ldr	r3, [r3, #0]
 80138ea:	601a      	str	r2, [r3, #0]
    return (val);
 80138ec:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80138f0:	f6a3 33ec 	subw	r3, r3, #3052	; 0xbec
 80138f4:	681b      	ldr	r3, [r3, #0]
                val2 = arm_nn_read_s8x4_ia((const int8_t **)&lhs_ptr);
 80138f6:	f8c7 3c60 	str.w	r3, [r7, #3168]	; 0xc60
                val3 = SXTB16(val0);
 80138fa:	f8d7 2c68 	ldr.w	r2, [r7, #3176]	; 0xc68
 80138fe:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013902:	f5a3 63f4 	sub.w	r3, r3, #1952	; 0x7a0
 8013906:	601a      	str	r2, [r3, #0]
    __ASM("sxtb16 %0, %1" : "=r"(result) : "r"(op1));
 8013908:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801390c:	f5a3 63f4 	sub.w	r3, r3, #1952	; 0x7a0
 8013910:	681b      	ldr	r3, [r3, #0]
 8013912:	fa2f f283 	sxtb16	r2, r3
 8013916:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801391a:	f2a3 73a4 	subw	r3, r3, #1956	; 0x7a4
 801391e:	601a      	str	r2, [r3, #0]
    return (result);
 8013920:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013924:	f2a3 73a4 	subw	r3, r3, #1956	; 0x7a4
 8013928:	681b      	ldr	r3, [r3, #0]
 801392a:	f8c7 3c5c 	str.w	r3, [r7, #3164]	; 0xc5c
                val5 = SXTB16(val2);
 801392e:	f8d7 2c60 	ldr.w	r2, [r7, #3168]	; 0xc60
 8013932:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013936:	f5a3 63f3 	sub.w	r3, r3, #1944	; 0x798
 801393a:	601a      	str	r2, [r3, #0]
    __ASM("sxtb16 %0, %1" : "=r"(result) : "r"(op1));
 801393c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013940:	f5a3 63f3 	sub.w	r3, r3, #1944	; 0x798
 8013944:	681b      	ldr	r3, [r3, #0]
 8013946:	fa2f f283 	sxtb16	r2, r3
 801394a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801394e:	f2a3 739c 	subw	r3, r3, #1948	; 0x79c
 8013952:	601a      	str	r2, [r3, #0]
    return (result);
 8013954:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013958:	f2a3 739c 	subw	r3, r3, #1948	; 0x79c
 801395c:	681b      	ldr	r3, [r3, #0]
 801395e:	f8c7 3c58 	str.w	r3, [r7, #3160]	; 0xc58
                val4 = SXTB16(val1);
 8013962:	f8d7 2c64 	ldr.w	r2, [r7, #3172]	; 0xc64
 8013966:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801396a:	f5a3 63f2 	sub.w	r3, r3, #1936	; 0x790
 801396e:	601a      	str	r2, [r3, #0]
    __ASM("sxtb16 %0, %1" : "=r"(result) : "r"(op1));
 8013970:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013974:	f5a3 63f2 	sub.w	r3, r3, #1936	; 0x790
 8013978:	681b      	ldr	r3, [r3, #0]
 801397a:	fa2f f283 	sxtb16	r2, r3
 801397e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013982:	f2a3 7394 	subw	r3, r3, #1940	; 0x794
 8013986:	601a      	str	r2, [r3, #0]
    return (result);
 8013988:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801398c:	f2a3 7394 	subw	r3, r3, #1940	; 0x794
 8013990:	681b      	ldr	r3, [r3, #0]
 8013992:	f8c7 3c54 	str.w	r3, [r7, #3156]	; 0xc54
                val0 = SXTB16_RORn(val0, 8);
 8013996:	f8d7 2c68 	ldr.w	r2, [r7, #3176]	; 0xc68
 801399a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801399e:	f2a3 7374 	subw	r3, r3, #1908	; 0x774
 80139a2:	601a      	str	r2, [r3, #0]
 80139a4:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80139a8:	f5a3 62ef 	sub.w	r2, r3, #1912	; 0x778
 80139ac:	2308      	movs	r3, #8
 80139ae:	6013      	str	r3, [r2, #0]
 80139b0:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80139b4:	f2a3 727c 	subw	r2, r3, #1916	; 0x77c
 80139b8:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80139bc:	f2a3 7374 	subw	r3, r3, #1908	; 0x774
 80139c0:	681b      	ldr	r3, [r3, #0]
 80139c2:	6013      	str	r3, [r2, #0]
 80139c4:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80139c8:	f5a3 62f0 	sub.w	r2, r3, #1920	; 0x780
 80139cc:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80139d0:	f5a3 63ef 	sub.w	r3, r3, #1912	; 0x778
 80139d4:	681b      	ldr	r3, [r3, #0]
 80139d6:	6013      	str	r3, [r2, #0]
    op2 %= 32U;
 80139d8:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80139dc:	f5a3 62f0 	sub.w	r2, r3, #1920	; 0x780
 80139e0:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80139e4:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 80139e8:	681b      	ldr	r3, [r3, #0]
 80139ea:	f003 031f 	and.w	r3, r3, #31
 80139ee:	6013      	str	r3, [r2, #0]
    if (op2 == 0U)
 80139f0:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80139f4:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 80139f8:	681b      	ldr	r3, [r3, #0]
 80139fa:	2b00      	cmp	r3, #0
 80139fc:	d105      	bne.n	8013a0a <arm_nn_mat_mult_nt_t_s8+0x482a>
        return op1;
 80139fe:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013a02:	f2a3 737c 	subw	r3, r3, #1916	; 0x77c
 8013a06:	681a      	ldr	r2, [r3, #0]
 8013a08:	e00a      	b.n	8013a20 <arm_nn_mat_mult_nt_t_s8+0x4840>
    return (op1 >> op2) | (op1 << (32U - op2));
 8013a0a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013a0e:	f2a3 727c 	subw	r2, r3, #1916	; 0x77c
 8013a12:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013a16:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 8013a1a:	6812      	ldr	r2, [r2, #0]
 8013a1c:	681b      	ldr	r3, [r3, #0]
 8013a1e:	41da      	rors	r2, r3
 8013a20:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013a24:	f2a3 7384 	subw	r3, r3, #1924	; 0x784
 8013a28:	601a      	str	r2, [r3, #0]
    __ASM("sxtb16 %0, %1" : "=r"(result) : "r"(op1));
 8013a2a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013a2e:	f2a3 7384 	subw	r3, r3, #1924	; 0x784
 8013a32:	681b      	ldr	r3, [r3, #0]
 8013a34:	fa2f f283 	sxtb16	r2, r3
 8013a38:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013a3c:	f5a3 63f1 	sub.w	r3, r3, #1928	; 0x788
 8013a40:	601a      	str	r2, [r3, #0]
    return (result);
 8013a42:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013a46:	f5a3 63f1 	sub.w	r3, r3, #1928	; 0x788
 8013a4a:	681a      	ldr	r2, [r3, #0]
        result = SXTB16(ROR(op1, rotate));
 8013a4c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013a50:	f2a3 738c 	subw	r3, r3, #1932	; 0x78c
 8013a54:	601a      	str	r2, [r3, #0]
    return result;
 8013a56:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013a5a:	f2a3 738c 	subw	r3, r3, #1932	; 0x78c
 8013a5e:	681b      	ldr	r3, [r3, #0]
 8013a60:	f8c7 3c68 	str.w	r3, [r7, #3176]	; 0xc68
                val2 = SXTB16_RORn(val2, 8);
 8013a64:	f8d7 2c60 	ldr.w	r2, [r7, #3168]	; 0xc60
 8013a68:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013a6c:	f5a3 63eb 	sub.w	r3, r3, #1880	; 0x758
 8013a70:	601a      	str	r2, [r3, #0]
 8013a72:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013a76:	f2a3 725c 	subw	r2, r3, #1884	; 0x75c
 8013a7a:	2308      	movs	r3, #8
 8013a7c:	6013      	str	r3, [r2, #0]
 8013a7e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013a82:	f5a3 62ec 	sub.w	r2, r3, #1888	; 0x760
 8013a86:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013a8a:	f5a3 63eb 	sub.w	r3, r3, #1880	; 0x758
 8013a8e:	681b      	ldr	r3, [r3, #0]
 8013a90:	6013      	str	r3, [r2, #0]
 8013a92:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013a96:	f2a3 7264 	subw	r2, r3, #1892	; 0x764
 8013a9a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013a9e:	f2a3 735c 	subw	r3, r3, #1884	; 0x75c
 8013aa2:	681b      	ldr	r3, [r3, #0]
 8013aa4:	6013      	str	r3, [r2, #0]
    op2 %= 32U;
 8013aa6:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013aaa:	f2a3 7264 	subw	r2, r3, #1892	; 0x764
 8013aae:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013ab2:	f2a3 7364 	subw	r3, r3, #1892	; 0x764
 8013ab6:	681b      	ldr	r3, [r3, #0]
 8013ab8:	f003 031f 	and.w	r3, r3, #31
 8013abc:	6013      	str	r3, [r2, #0]
    if (op2 == 0U)
 8013abe:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013ac2:	f2a3 7364 	subw	r3, r3, #1892	; 0x764
 8013ac6:	681b      	ldr	r3, [r3, #0]
 8013ac8:	2b00      	cmp	r3, #0
 8013aca:	d105      	bne.n	8013ad8 <arm_nn_mat_mult_nt_t_s8+0x48f8>
        return op1;
 8013acc:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013ad0:	f5a3 63ec 	sub.w	r3, r3, #1888	; 0x760
 8013ad4:	681a      	ldr	r2, [r3, #0]
 8013ad6:	e00a      	b.n	8013aee <arm_nn_mat_mult_nt_t_s8+0x490e>
    return (op1 >> op2) | (op1 << (32U - op2));
 8013ad8:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013adc:	f5a3 62ec 	sub.w	r2, r3, #1888	; 0x760
 8013ae0:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013ae4:	f2a3 7364 	subw	r3, r3, #1892	; 0x764
 8013ae8:	6812      	ldr	r2, [r2, #0]
 8013aea:	681b      	ldr	r3, [r3, #0]
 8013aec:	41da      	rors	r2, r3
 8013aee:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013af2:	f5a3 63ed 	sub.w	r3, r3, #1896	; 0x768
 8013af6:	601a      	str	r2, [r3, #0]
    __ASM("sxtb16 %0, %1" : "=r"(result) : "r"(op1));
 8013af8:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013afc:	f5a3 63ed 	sub.w	r3, r3, #1896	; 0x768
 8013b00:	681b      	ldr	r3, [r3, #0]
 8013b02:	fa2f f283 	sxtb16	r2, r3
 8013b06:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013b0a:	f2a3 736c 	subw	r3, r3, #1900	; 0x76c
 8013b0e:	601a      	str	r2, [r3, #0]
    return (result);
 8013b10:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013b14:	f2a3 736c 	subw	r3, r3, #1900	; 0x76c
 8013b18:	681a      	ldr	r2, [r3, #0]
        result = SXTB16(ROR(op1, rotate));
 8013b1a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013b1e:	f5a3 63ee 	sub.w	r3, r3, #1904	; 0x770
 8013b22:	601a      	str	r2, [r3, #0]
    return result;
 8013b24:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013b28:	f5a3 63ee 	sub.w	r3, r3, #1904	; 0x770
 8013b2c:	681b      	ldr	r3, [r3, #0]
 8013b2e:	f8c7 3c60 	str.w	r3, [r7, #3168]	; 0xc60
                val1 = SXTB16_RORn(val1, 8);
 8013b32:	f8d7 2c64 	ldr.w	r2, [r7, #3172]	; 0xc64
 8013b36:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013b3a:	f2a3 733c 	subw	r3, r3, #1852	; 0x73c
 8013b3e:	601a      	str	r2, [r3, #0]
 8013b40:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013b44:	f5a3 62e8 	sub.w	r2, r3, #1856	; 0x740
 8013b48:	2308      	movs	r3, #8
 8013b4a:	6013      	str	r3, [r2, #0]
 8013b4c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013b50:	f2a3 7244 	subw	r2, r3, #1860	; 0x744
 8013b54:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013b58:	f2a3 733c 	subw	r3, r3, #1852	; 0x73c
 8013b5c:	681b      	ldr	r3, [r3, #0]
 8013b5e:	6013      	str	r3, [r2, #0]
 8013b60:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013b64:	f5a3 62e9 	sub.w	r2, r3, #1864	; 0x748
 8013b68:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013b6c:	f5a3 63e8 	sub.w	r3, r3, #1856	; 0x740
 8013b70:	681b      	ldr	r3, [r3, #0]
 8013b72:	6013      	str	r3, [r2, #0]
    op2 %= 32U;
 8013b74:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013b78:	f5a3 62e9 	sub.w	r2, r3, #1864	; 0x748
 8013b7c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013b80:	f5a3 63e9 	sub.w	r3, r3, #1864	; 0x748
 8013b84:	681b      	ldr	r3, [r3, #0]
 8013b86:	f003 031f 	and.w	r3, r3, #31
 8013b8a:	6013      	str	r3, [r2, #0]
    if (op2 == 0U)
 8013b8c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013b90:	f5a3 63e9 	sub.w	r3, r3, #1864	; 0x748
 8013b94:	681b      	ldr	r3, [r3, #0]
 8013b96:	2b00      	cmp	r3, #0
 8013b98:	d105      	bne.n	8013ba6 <arm_nn_mat_mult_nt_t_s8+0x49c6>
        return op1;
 8013b9a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013b9e:	f2a3 7344 	subw	r3, r3, #1860	; 0x744
 8013ba2:	681a      	ldr	r2, [r3, #0]
 8013ba4:	e00a      	b.n	8013bbc <arm_nn_mat_mult_nt_t_s8+0x49dc>
    return (op1 >> op2) | (op1 << (32U - op2));
 8013ba6:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013baa:	f2a3 7244 	subw	r2, r3, #1860	; 0x744
 8013bae:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013bb2:	f5a3 63e9 	sub.w	r3, r3, #1864	; 0x748
 8013bb6:	6812      	ldr	r2, [r2, #0]
 8013bb8:	681b      	ldr	r3, [r3, #0]
 8013bba:	41da      	rors	r2, r3
 8013bbc:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013bc0:	f2a3 734c 	subw	r3, r3, #1868	; 0x74c
 8013bc4:	601a      	str	r2, [r3, #0]
    __ASM("sxtb16 %0, %1" : "=r"(result) : "r"(op1));
 8013bc6:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013bca:	f2a3 734c 	subw	r3, r3, #1868	; 0x74c
 8013bce:	681b      	ldr	r3, [r3, #0]
 8013bd0:	fa2f f283 	sxtb16	r2, r3
 8013bd4:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013bd8:	f5a3 63ea 	sub.w	r3, r3, #1872	; 0x750
 8013bdc:	601a      	str	r2, [r3, #0]
    return (result);
 8013bde:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013be2:	f5a3 63ea 	sub.w	r3, r3, #1872	; 0x750
 8013be6:	681a      	ldr	r2, [r3, #0]
        result = SXTB16(ROR(op1, rotate));
 8013be8:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013bec:	f2a3 7354 	subw	r3, r3, #1876	; 0x754
 8013bf0:	601a      	str	r2, [r3, #0]
    return result;
 8013bf2:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013bf6:	f2a3 7354 	subw	r3, r3, #1876	; 0x754
 8013bfa:	681b      	ldr	r3, [r3, #0]
 8013bfc:	f8c7 3c64 	str.w	r3, [r7, #3172]	; 0xc64

                // 4 x MAC res00, res01
                res00 = SMLAD(val5, val3, res00);
 8013c00:	f8d7 2c58 	ldr.w	r2, [r7, #3160]	; 0xc58
 8013c04:	f8d7 1c5c 	ldr.w	r1, [r7, #3164]	; 0xc5c
 8013c08:	f8d7 0ca0 	ldr.w	r0, [r7, #3232]	; 0xca0
 8013c0c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013c10:	f2a3 732c 	subw	r3, r3, #1836	; 0x72c
 8013c14:	601a      	str	r2, [r3, #0]
 8013c16:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013c1a:	f5a3 63e6 	sub.w	r3, r3, #1840	; 0x730
 8013c1e:	6019      	str	r1, [r3, #0]
 8013c20:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013c24:	f2a3 7334 	subw	r3, r3, #1844	; 0x734
 8013c28:	6018      	str	r0, [r3, #0]
    __ASM volatile("smlad %0, %1, %2, %3" : "=r"(result) : "r"(op1), "r"(op2), "r"(op3));
 8013c2a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013c2e:	f2a3 732c 	subw	r3, r3, #1836	; 0x72c
 8013c32:	6819      	ldr	r1, [r3, #0]
 8013c34:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013c38:	f5a3 63e6 	sub.w	r3, r3, #1840	; 0x730
 8013c3c:	681a      	ldr	r2, [r3, #0]
 8013c3e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013c42:	f2a3 7334 	subw	r3, r3, #1844	; 0x734
 8013c46:	681b      	ldr	r3, [r3, #0]
 8013c48:	fb21 3202 	smlad	r2, r1, r2, r3
 8013c4c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013c50:	f5a3 63e7 	sub.w	r3, r3, #1848	; 0x738
 8013c54:	601a      	str	r2, [r3, #0]
    return (result);
 8013c56:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013c5a:	f5a3 63e7 	sub.w	r3, r3, #1848	; 0x738
 8013c5e:	681b      	ldr	r3, [r3, #0]
 8013c60:	f8c7 3ca0 	str.w	r3, [r7, #3232]	; 0xca0
                res00 = SMLAD(val2, val0, res00);
 8013c64:	f8d7 2c60 	ldr.w	r2, [r7, #3168]	; 0xc60
 8013c68:	f8d7 1c68 	ldr.w	r1, [r7, #3176]	; 0xc68
 8013c6c:	f8d7 0ca0 	ldr.w	r0, [r7, #3232]	; 0xca0
 8013c70:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013c74:	f2a3 731c 	subw	r3, r3, #1820	; 0x71c
 8013c78:	601a      	str	r2, [r3, #0]
 8013c7a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013c7e:	f5a3 63e4 	sub.w	r3, r3, #1824	; 0x720
 8013c82:	6019      	str	r1, [r3, #0]
 8013c84:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013c88:	f2a3 7324 	subw	r3, r3, #1828	; 0x724
 8013c8c:	6018      	str	r0, [r3, #0]
    __ASM volatile("smlad %0, %1, %2, %3" : "=r"(result) : "r"(op1), "r"(op2), "r"(op3));
 8013c8e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013c92:	f2a3 731c 	subw	r3, r3, #1820	; 0x71c
 8013c96:	6819      	ldr	r1, [r3, #0]
 8013c98:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013c9c:	f5a3 63e4 	sub.w	r3, r3, #1824	; 0x720
 8013ca0:	681a      	ldr	r2, [r3, #0]
 8013ca2:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013ca6:	f2a3 7324 	subw	r3, r3, #1828	; 0x724
 8013caa:	681b      	ldr	r3, [r3, #0]
 8013cac:	fb21 3202 	smlad	r2, r1, r2, r3
 8013cb0:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013cb4:	f5a3 63e5 	sub.w	r3, r3, #1832	; 0x728
 8013cb8:	601a      	str	r2, [r3, #0]
    return (result);
 8013cba:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013cbe:	f5a3 63e5 	sub.w	r3, r3, #1832	; 0x728
 8013cc2:	681b      	ldr	r3, [r3, #0]
 8013cc4:	f8c7 3ca0 	str.w	r3, [r7, #3232]	; 0xca0
                res01 = SMLAD(val5, val4, res01);
 8013cc8:	f8d7 2c58 	ldr.w	r2, [r7, #3160]	; 0xc58
 8013ccc:	f8d7 1c54 	ldr.w	r1, [r7, #3156]	; 0xc54
 8013cd0:	f8d7 0c9c 	ldr.w	r0, [r7, #3228]	; 0xc9c
 8013cd4:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013cd8:	f2a3 730c 	subw	r3, r3, #1804	; 0x70c
 8013cdc:	601a      	str	r2, [r3, #0]
 8013cde:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013ce2:	f5a3 63e2 	sub.w	r3, r3, #1808	; 0x710
 8013ce6:	6019      	str	r1, [r3, #0]
 8013ce8:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013cec:	f2a3 7314 	subw	r3, r3, #1812	; 0x714
 8013cf0:	6018      	str	r0, [r3, #0]
    __ASM volatile("smlad %0, %1, %2, %3" : "=r"(result) : "r"(op1), "r"(op2), "r"(op3));
 8013cf2:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013cf6:	f2a3 730c 	subw	r3, r3, #1804	; 0x70c
 8013cfa:	6819      	ldr	r1, [r3, #0]
 8013cfc:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013d00:	f5a3 63e2 	sub.w	r3, r3, #1808	; 0x710
 8013d04:	681a      	ldr	r2, [r3, #0]
 8013d06:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013d0a:	f2a3 7314 	subw	r3, r3, #1812	; 0x714
 8013d0e:	681b      	ldr	r3, [r3, #0]
 8013d10:	fb21 3202 	smlad	r2, r1, r2, r3
 8013d14:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013d18:	f5a3 63e3 	sub.w	r3, r3, #1816	; 0x718
 8013d1c:	601a      	str	r2, [r3, #0]
    return (result);
 8013d1e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013d22:	f5a3 63e3 	sub.w	r3, r3, #1816	; 0x718
 8013d26:	681b      	ldr	r3, [r3, #0]
 8013d28:	f8c7 3c9c 	str.w	r3, [r7, #3228]	; 0xc9c
                res01 = SMLAD(val2, val1, res01);
 8013d2c:	f8d7 2c60 	ldr.w	r2, [r7, #3168]	; 0xc60
 8013d30:	f8d7 1c64 	ldr.w	r1, [r7, #3172]	; 0xc64
 8013d34:	f8d7 0c9c 	ldr.w	r0, [r7, #3228]	; 0xc9c
 8013d38:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013d3c:	f2a3 63fc 	subw	r3, r3, #1788	; 0x6fc
 8013d40:	601a      	str	r2, [r3, #0]
 8013d42:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013d46:	f5a3 63e0 	sub.w	r3, r3, #1792	; 0x700
 8013d4a:	6019      	str	r1, [r3, #0]
 8013d4c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013d50:	f2a3 7304 	subw	r3, r3, #1796	; 0x704
 8013d54:	6018      	str	r0, [r3, #0]
    __ASM volatile("smlad %0, %1, %2, %3" : "=r"(result) : "r"(op1), "r"(op2), "r"(op3));
 8013d56:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013d5a:	f2a3 63fc 	subw	r3, r3, #1788	; 0x6fc
 8013d5e:	6819      	ldr	r1, [r3, #0]
 8013d60:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013d64:	f5a3 63e0 	sub.w	r3, r3, #1792	; 0x700
 8013d68:	681a      	ldr	r2, [r3, #0]
 8013d6a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013d6e:	f2a3 7304 	subw	r3, r3, #1796	; 0x704
 8013d72:	681b      	ldr	r3, [r3, #0]
 8013d74:	fb21 3202 	smlad	r2, r1, r2, r3
 8013d78:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013d7c:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 8013d80:	601a      	str	r2, [r3, #0]
    return (result);
 8013d82:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013d86:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 8013d8a:	681b      	ldr	r3, [r3, #0]
 8013d8c:	f8c7 3c9c 	str.w	r3, [r7, #3228]	; 0xc9c
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 8013d90:	f8d7 3c98 	ldr.w	r3, [r7, #3224]	; 0xc98
 8013d94:	3310      	adds	r3, #16
 8013d96:	f8c7 3c98 	str.w	r3, [r7, #3224]	; 0xc98
 8013d9a:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 8013d9e:	f1a3 020f 	sub.w	r2, r3, #15
 8013da2:	f8d7 3c98 	ldr.w	r3, [r7, #3224]	; 0xc98
 8013da6:	4293      	cmp	r3, r2
 8013da8:	f6fe ad06 	blt.w	80127b8 <arm_nn_mat_mult_nt_t_s8+0x35d8>
            }

            for (; rhs_cols_idx <= (rhs_cols - 4); rhs_cols_idx += 4)
 8013dac:	e2bf      	b.n	801432e <arm_nn_mat_mult_nt_t_s8+0x514e>
 8013dae:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013db2:	f5a3 6229 	sub.w	r2, r3, #2704	; 0xa90
 8013db6:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8013dba:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_s8, 4);
 8013dbc:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013dc0:	f5a3 6329 	sub.w	r3, r3, #2704	; 0xa90
 8013dc4:	681b      	ldr	r3, [r3, #0]
 8013dc6:	681b      	ldr	r3, [r3, #0]
 8013dc8:	681b      	ldr	r3, [r3, #0]
 8013dca:	461a      	mov	r2, r3
 8013dcc:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013dd0:	f6a3 33b4 	subw	r3, r3, #2996	; 0xbb4
 8013dd4:	601a      	str	r2, [r3, #0]
    *in_s8 += 4;
 8013dd6:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013dda:	f5a3 6329 	sub.w	r3, r3, #2704	; 0xa90
 8013dde:	681b      	ldr	r3, [r3, #0]
 8013de0:	681b      	ldr	r3, [r3, #0]
 8013de2:	1d1a      	adds	r2, r3, #4
 8013de4:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013de8:	f5a3 6329 	sub.w	r3, r3, #2704	; 0xa90
 8013dec:	681b      	ldr	r3, [r3, #0]
 8013dee:	601a      	str	r2, [r3, #0]
    return (val);
 8013df0:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013df4:	f6a3 33b4 	subw	r3, r3, #2996	; 0xbb4
 8013df8:	681b      	ldr	r3, [r3, #0]
            {
                val0 = arm_nn_read_s8x4_ia((const int8_t **)&rhs_ptr);
 8013dfa:	f8c7 3c68 	str.w	r3, [r7, #3176]	; 0xc68
                val1 = arm_nn_read_s8x4((const int8_t *)&rhs_ptr[rhs_off0]);
 8013dfe:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013e02:	f6a3 339c 	subw	r3, r3, #2972	; 0xb9c
 8013e06:	681a      	ldr	r2, [r3, #0]
 8013e08:	f8d7 3c7c 	ldr.w	r3, [r7, #3196]	; 0xc7c
 8013e0c:	441a      	add	r2, r3
 8013e0e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013e12:	f6a3 238c 	subw	r3, r3, #2700	; 0xa8c
 8013e16:	601a      	str	r2, [r3, #0]
 8013e18:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013e1c:	f6a3 238c 	subw	r3, r3, #2700	; 0xa8c
 8013e20:	681b      	ldr	r3, [r3, #0]
 8013e22:	681b      	ldr	r3, [r3, #0]
 8013e24:	461a      	mov	r2, r3
    memcpy(&val, in_s8, 4);
 8013e26:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013e2a:	f6a3 33b8 	subw	r3, r3, #3000	; 0xbb8
 8013e2e:	601a      	str	r2, [r3, #0]
    return (val);
 8013e30:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013e34:	f6a3 33b8 	subw	r3, r3, #3000	; 0xbb8
 8013e38:	681b      	ldr	r3, [r3, #0]
 8013e3a:	f8c7 3c64 	str.w	r3, [r7, #3172]	; 0xc64
 8013e3e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013e42:	f6a3 2288 	subw	r2, r3, #2696	; 0xa88
 8013e46:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8013e4a:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_s8, 4);
 8013e4c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013e50:	f6a3 2388 	subw	r3, r3, #2696	; 0xa88
 8013e54:	681b      	ldr	r3, [r3, #0]
 8013e56:	681b      	ldr	r3, [r3, #0]
 8013e58:	681b      	ldr	r3, [r3, #0]
 8013e5a:	461a      	mov	r2, r3
 8013e5c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013e60:	f6a3 33bc 	subw	r3, r3, #3004	; 0xbbc
 8013e64:	601a      	str	r2, [r3, #0]
    *in_s8 += 4;
 8013e66:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013e6a:	f6a3 2388 	subw	r3, r3, #2696	; 0xa88
 8013e6e:	681b      	ldr	r3, [r3, #0]
 8013e70:	681b      	ldr	r3, [r3, #0]
 8013e72:	1d1a      	adds	r2, r3, #4
 8013e74:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013e78:	f6a3 2388 	subw	r3, r3, #2696	; 0xa88
 8013e7c:	681b      	ldr	r3, [r3, #0]
 8013e7e:	601a      	str	r2, [r3, #0]
    return (val);
 8013e80:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013e84:	f6a3 33bc 	subw	r3, r3, #3004	; 0xbbc
 8013e88:	681b      	ldr	r3, [r3, #0]
                val2 = arm_nn_read_s8x4_ia((const int8_t **)&lhs_ptr);
 8013e8a:	f8c7 3c60 	str.w	r3, [r7, #3168]	; 0xc60
                val3 = SXTB16(val0);
 8013e8e:	f8d7 2c68 	ldr.w	r2, [r7, #3176]	; 0xc68
 8013e92:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013e96:	f5a3 6328 	sub.w	r3, r3, #2688	; 0xa80
 8013e9a:	601a      	str	r2, [r3, #0]
    __ASM("sxtb16 %0, %1" : "=r"(result) : "r"(op1));
 8013e9c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013ea0:	f5a3 6328 	sub.w	r3, r3, #2688	; 0xa80
 8013ea4:	681b      	ldr	r3, [r3, #0]
 8013ea6:	fa2f f283 	sxtb16	r2, r3
 8013eaa:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013eae:	f6a3 2384 	subw	r3, r3, #2692	; 0xa84
 8013eb2:	601a      	str	r2, [r3, #0]
    return (result);
 8013eb4:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013eb8:	f6a3 2384 	subw	r3, r3, #2692	; 0xa84
 8013ebc:	681b      	ldr	r3, [r3, #0]
 8013ebe:	f8c7 3c5c 	str.w	r3, [r7, #3164]	; 0xc5c
                val5 = SXTB16(val2);
 8013ec2:	f8d7 2c60 	ldr.w	r2, [r7, #3168]	; 0xc60
 8013ec6:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013eca:	f6a3 2378 	subw	r3, r3, #2680	; 0xa78
 8013ece:	601a      	str	r2, [r3, #0]
    __ASM("sxtb16 %0, %1" : "=r"(result) : "r"(op1));
 8013ed0:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013ed4:	f6a3 2378 	subw	r3, r3, #2680	; 0xa78
 8013ed8:	681b      	ldr	r3, [r3, #0]
 8013eda:	fa2f f283 	sxtb16	r2, r3
 8013ede:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013ee2:	f6a3 237c 	subw	r3, r3, #2684	; 0xa7c
 8013ee6:	601a      	str	r2, [r3, #0]
    return (result);
 8013ee8:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013eec:	f6a3 237c 	subw	r3, r3, #2684	; 0xa7c
 8013ef0:	681b      	ldr	r3, [r3, #0]
 8013ef2:	f8c7 3c58 	str.w	r3, [r7, #3160]	; 0xc58
                val4 = SXTB16(val1);
 8013ef6:	f8d7 2c64 	ldr.w	r2, [r7, #3172]	; 0xc64
 8013efa:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013efe:	f5a3 6327 	sub.w	r3, r3, #2672	; 0xa70
 8013f02:	601a      	str	r2, [r3, #0]
    __ASM("sxtb16 %0, %1" : "=r"(result) : "r"(op1));
 8013f04:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013f08:	f5a3 6327 	sub.w	r3, r3, #2672	; 0xa70
 8013f0c:	681b      	ldr	r3, [r3, #0]
 8013f0e:	fa2f f283 	sxtb16	r2, r3
 8013f12:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013f16:	f6a3 2374 	subw	r3, r3, #2676	; 0xa74
 8013f1a:	601a      	str	r2, [r3, #0]
    return (result);
 8013f1c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013f20:	f6a3 2374 	subw	r3, r3, #2676	; 0xa74
 8013f24:	681b      	ldr	r3, [r3, #0]
 8013f26:	f8c7 3c54 	str.w	r3, [r7, #3156]	; 0xc54
                val0 = SXTB16_RORn(val0, 8);
 8013f2a:	f8d7 2c68 	ldr.w	r2, [r7, #3176]	; 0xc68
 8013f2e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013f32:	f6a3 2354 	subw	r3, r3, #2644	; 0xa54
 8013f36:	601a      	str	r2, [r3, #0]
 8013f38:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013f3c:	f6a3 2258 	subw	r2, r3, #2648	; 0xa58
 8013f40:	2308      	movs	r3, #8
 8013f42:	6013      	str	r3, [r2, #0]
 8013f44:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013f48:	f6a3 225c 	subw	r2, r3, #2652	; 0xa5c
 8013f4c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013f50:	f6a3 2354 	subw	r3, r3, #2644	; 0xa54
 8013f54:	681b      	ldr	r3, [r3, #0]
 8013f56:	6013      	str	r3, [r2, #0]
 8013f58:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013f5c:	f5a3 6226 	sub.w	r2, r3, #2656	; 0xa60
 8013f60:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013f64:	f6a3 2358 	subw	r3, r3, #2648	; 0xa58
 8013f68:	681b      	ldr	r3, [r3, #0]
 8013f6a:	6013      	str	r3, [r2, #0]
    op2 %= 32U;
 8013f6c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013f70:	f5a3 6226 	sub.w	r2, r3, #2656	; 0xa60
 8013f74:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013f78:	f5a3 6326 	sub.w	r3, r3, #2656	; 0xa60
 8013f7c:	681b      	ldr	r3, [r3, #0]
 8013f7e:	f003 031f 	and.w	r3, r3, #31
 8013f82:	6013      	str	r3, [r2, #0]
    if (op2 == 0U)
 8013f84:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013f88:	f5a3 6326 	sub.w	r3, r3, #2656	; 0xa60
 8013f8c:	681b      	ldr	r3, [r3, #0]
 8013f8e:	2b00      	cmp	r3, #0
 8013f90:	d105      	bne.n	8013f9e <arm_nn_mat_mult_nt_t_s8+0x4dbe>
        return op1;
 8013f92:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013f96:	f6a3 235c 	subw	r3, r3, #2652	; 0xa5c
 8013f9a:	681a      	ldr	r2, [r3, #0]
 8013f9c:	e00a      	b.n	8013fb4 <arm_nn_mat_mult_nt_t_s8+0x4dd4>
    return (op1 >> op2) | (op1 << (32U - op2));
 8013f9e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013fa2:	f6a3 225c 	subw	r2, r3, #2652	; 0xa5c
 8013fa6:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013faa:	f5a3 6326 	sub.w	r3, r3, #2656	; 0xa60
 8013fae:	6812      	ldr	r2, [r2, #0]
 8013fb0:	681b      	ldr	r3, [r3, #0]
 8013fb2:	41da      	rors	r2, r3
 8013fb4:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013fb8:	f6a3 2364 	subw	r3, r3, #2660	; 0xa64
 8013fbc:	601a      	str	r2, [r3, #0]
    __ASM("sxtb16 %0, %1" : "=r"(result) : "r"(op1));
 8013fbe:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013fc2:	f6a3 2364 	subw	r3, r3, #2660	; 0xa64
 8013fc6:	681b      	ldr	r3, [r3, #0]
 8013fc8:	fa2f f283 	sxtb16	r2, r3
 8013fcc:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013fd0:	f6a3 2368 	subw	r3, r3, #2664	; 0xa68
 8013fd4:	601a      	str	r2, [r3, #0]
    return (result);
 8013fd6:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013fda:	f6a3 2368 	subw	r3, r3, #2664	; 0xa68
 8013fde:	681a      	ldr	r2, [r3, #0]
        result = SXTB16(ROR(op1, rotate));
 8013fe0:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013fe4:	f6a3 236c 	subw	r3, r3, #2668	; 0xa6c
 8013fe8:	601a      	str	r2, [r3, #0]
    return result;
 8013fea:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8013fee:	f6a3 236c 	subw	r3, r3, #2668	; 0xa6c
 8013ff2:	681b      	ldr	r3, [r3, #0]
 8013ff4:	f8c7 3c68 	str.w	r3, [r7, #3176]	; 0xc68
                val2 = SXTB16_RORn(val2, 8);
 8013ff8:	f8d7 2c60 	ldr.w	r2, [r7, #3168]	; 0xc60
 8013ffc:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8014000:	f6a3 2338 	subw	r3, r3, #2616	; 0xa38
 8014004:	601a      	str	r2, [r3, #0]
 8014006:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801400a:	f6a3 223c 	subw	r2, r3, #2620	; 0xa3c
 801400e:	2308      	movs	r3, #8
 8014010:	6013      	str	r3, [r2, #0]
 8014012:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8014016:	f5a3 6224 	sub.w	r2, r3, #2624	; 0xa40
 801401a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801401e:	f6a3 2338 	subw	r3, r3, #2616	; 0xa38
 8014022:	681b      	ldr	r3, [r3, #0]
 8014024:	6013      	str	r3, [r2, #0]
 8014026:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801402a:	f6a3 2244 	subw	r2, r3, #2628	; 0xa44
 801402e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8014032:	f6a3 233c 	subw	r3, r3, #2620	; 0xa3c
 8014036:	681b      	ldr	r3, [r3, #0]
 8014038:	6013      	str	r3, [r2, #0]
    op2 %= 32U;
 801403a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801403e:	f6a3 2244 	subw	r2, r3, #2628	; 0xa44
 8014042:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8014046:	f6a3 2344 	subw	r3, r3, #2628	; 0xa44
 801404a:	681b      	ldr	r3, [r3, #0]
 801404c:	f003 031f 	and.w	r3, r3, #31
 8014050:	6013      	str	r3, [r2, #0]
    if (op2 == 0U)
 8014052:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8014056:	f6a3 2344 	subw	r3, r3, #2628	; 0xa44
 801405a:	681b      	ldr	r3, [r3, #0]
 801405c:	2b00      	cmp	r3, #0
 801405e:	d105      	bne.n	801406c <arm_nn_mat_mult_nt_t_s8+0x4e8c>
        return op1;
 8014060:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8014064:	f5a3 6324 	sub.w	r3, r3, #2624	; 0xa40
 8014068:	681a      	ldr	r2, [r3, #0]
 801406a:	e00a      	b.n	8014082 <arm_nn_mat_mult_nt_t_s8+0x4ea2>
    return (op1 >> op2) | (op1 << (32U - op2));
 801406c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8014070:	f5a3 6224 	sub.w	r2, r3, #2624	; 0xa40
 8014074:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8014078:	f6a3 2344 	subw	r3, r3, #2628	; 0xa44
 801407c:	6812      	ldr	r2, [r2, #0]
 801407e:	681b      	ldr	r3, [r3, #0]
 8014080:	41da      	rors	r2, r3
 8014082:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8014086:	f6a3 2348 	subw	r3, r3, #2632	; 0xa48
 801408a:	601a      	str	r2, [r3, #0]
    __ASM("sxtb16 %0, %1" : "=r"(result) : "r"(op1));
 801408c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8014090:	f6a3 2348 	subw	r3, r3, #2632	; 0xa48
 8014094:	681b      	ldr	r3, [r3, #0]
 8014096:	fa2f f283 	sxtb16	r2, r3
 801409a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801409e:	f6a3 234c 	subw	r3, r3, #2636	; 0xa4c
 80140a2:	601a      	str	r2, [r3, #0]
    return (result);
 80140a4:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80140a8:	f6a3 234c 	subw	r3, r3, #2636	; 0xa4c
 80140ac:	681a      	ldr	r2, [r3, #0]
        result = SXTB16(ROR(op1, rotate));
 80140ae:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80140b2:	f5a3 6325 	sub.w	r3, r3, #2640	; 0xa50
 80140b6:	601a      	str	r2, [r3, #0]
    return result;
 80140b8:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80140bc:	f5a3 6325 	sub.w	r3, r3, #2640	; 0xa50
 80140c0:	681b      	ldr	r3, [r3, #0]
 80140c2:	f8c7 3c60 	str.w	r3, [r7, #3168]	; 0xc60
                val1 = SXTB16_RORn(val1, 8);
 80140c6:	f8d7 2c64 	ldr.w	r2, [r7, #3172]	; 0xc64
 80140ca:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80140ce:	f6a3 231c 	subw	r3, r3, #2588	; 0xa1c
 80140d2:	601a      	str	r2, [r3, #0]
 80140d4:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80140d8:	f5a3 6222 	sub.w	r2, r3, #2592	; 0xa20
 80140dc:	2308      	movs	r3, #8
 80140de:	6013      	str	r3, [r2, #0]
 80140e0:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80140e4:	f6a3 2224 	subw	r2, r3, #2596	; 0xa24
 80140e8:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80140ec:	f6a3 231c 	subw	r3, r3, #2588	; 0xa1c
 80140f0:	681b      	ldr	r3, [r3, #0]
 80140f2:	6013      	str	r3, [r2, #0]
 80140f4:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80140f8:	f6a3 2228 	subw	r2, r3, #2600	; 0xa28
 80140fc:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8014100:	f5a3 6322 	sub.w	r3, r3, #2592	; 0xa20
 8014104:	681b      	ldr	r3, [r3, #0]
 8014106:	6013      	str	r3, [r2, #0]
    op2 %= 32U;
 8014108:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801410c:	f6a3 2228 	subw	r2, r3, #2600	; 0xa28
 8014110:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8014114:	f6a3 2328 	subw	r3, r3, #2600	; 0xa28
 8014118:	681b      	ldr	r3, [r3, #0]
 801411a:	f003 031f 	and.w	r3, r3, #31
 801411e:	6013      	str	r3, [r2, #0]
    if (op2 == 0U)
 8014120:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8014124:	f6a3 2328 	subw	r3, r3, #2600	; 0xa28
 8014128:	681b      	ldr	r3, [r3, #0]
 801412a:	2b00      	cmp	r3, #0
 801412c:	d105      	bne.n	801413a <arm_nn_mat_mult_nt_t_s8+0x4f5a>
        return op1;
 801412e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8014132:	f6a3 2324 	subw	r3, r3, #2596	; 0xa24
 8014136:	681a      	ldr	r2, [r3, #0]
 8014138:	e00a      	b.n	8014150 <arm_nn_mat_mult_nt_t_s8+0x4f70>
    return (op1 >> op2) | (op1 << (32U - op2));
 801413a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801413e:	f6a3 2224 	subw	r2, r3, #2596	; 0xa24
 8014142:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8014146:	f6a3 2328 	subw	r3, r3, #2600	; 0xa28
 801414a:	6812      	ldr	r2, [r2, #0]
 801414c:	681b      	ldr	r3, [r3, #0]
 801414e:	41da      	rors	r2, r3
 8014150:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8014154:	f6a3 232c 	subw	r3, r3, #2604	; 0xa2c
 8014158:	601a      	str	r2, [r3, #0]
    __ASM("sxtb16 %0, %1" : "=r"(result) : "r"(op1));
 801415a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801415e:	f6a3 232c 	subw	r3, r3, #2604	; 0xa2c
 8014162:	681b      	ldr	r3, [r3, #0]
 8014164:	fa2f f283 	sxtb16	r2, r3
 8014168:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801416c:	f5a3 6323 	sub.w	r3, r3, #2608	; 0xa30
 8014170:	601a      	str	r2, [r3, #0]
    return (result);
 8014172:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8014176:	f5a3 6323 	sub.w	r3, r3, #2608	; 0xa30
 801417a:	681a      	ldr	r2, [r3, #0]
        result = SXTB16(ROR(op1, rotate));
 801417c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8014180:	f6a3 2334 	subw	r3, r3, #2612	; 0xa34
 8014184:	601a      	str	r2, [r3, #0]
    return result;
 8014186:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801418a:	f6a3 2334 	subw	r3, r3, #2612	; 0xa34
 801418e:	681b      	ldr	r3, [r3, #0]
 8014190:	f8c7 3c64 	str.w	r3, [r7, #3172]	; 0xc64

                // 4 x MAC res00, res01
                res00 = SMLAD(val5, val3, res00);
 8014194:	f8d7 2c58 	ldr.w	r2, [r7, #3160]	; 0xc58
 8014198:	f8d7 1c5c 	ldr.w	r1, [r7, #3164]	; 0xc5c
 801419c:	f8d7 0ca0 	ldr.w	r0, [r7, #3232]	; 0xca0
 80141a0:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80141a4:	f6a3 230c 	subw	r3, r3, #2572	; 0xa0c
 80141a8:	601a      	str	r2, [r3, #0]
 80141aa:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80141ae:	f5a3 6321 	sub.w	r3, r3, #2576	; 0xa10
 80141b2:	6019      	str	r1, [r3, #0]
 80141b4:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80141b8:	f6a3 2314 	subw	r3, r3, #2580	; 0xa14
 80141bc:	6018      	str	r0, [r3, #0]
    __ASM volatile("smlad %0, %1, %2, %3" : "=r"(result) : "r"(op1), "r"(op2), "r"(op3));
 80141be:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80141c2:	f6a3 230c 	subw	r3, r3, #2572	; 0xa0c
 80141c6:	6819      	ldr	r1, [r3, #0]
 80141c8:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80141cc:	f5a3 6321 	sub.w	r3, r3, #2576	; 0xa10
 80141d0:	681a      	ldr	r2, [r3, #0]
 80141d2:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80141d6:	f6a3 2314 	subw	r3, r3, #2580	; 0xa14
 80141da:	681b      	ldr	r3, [r3, #0]
 80141dc:	fb21 3202 	smlad	r2, r1, r2, r3
 80141e0:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80141e4:	f6a3 2318 	subw	r3, r3, #2584	; 0xa18
 80141e8:	601a      	str	r2, [r3, #0]
    return (result);
 80141ea:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80141ee:	f6a3 2318 	subw	r3, r3, #2584	; 0xa18
 80141f2:	681b      	ldr	r3, [r3, #0]
 80141f4:	f8c7 3ca0 	str.w	r3, [r7, #3232]	; 0xca0
                res00 = SMLAD(val2, val0, res00);
 80141f8:	f8d7 2c60 	ldr.w	r2, [r7, #3168]	; 0xc60
 80141fc:	f8d7 1c68 	ldr.w	r1, [r7, #3176]	; 0xc68
 8014200:	f8d7 0ca0 	ldr.w	r0, [r7, #3232]	; 0xca0
 8014204:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8014208:	f6a3 13fc 	subw	r3, r3, #2556	; 0x9fc
 801420c:	601a      	str	r2, [r3, #0]
 801420e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8014212:	f5a3 6320 	sub.w	r3, r3, #2560	; 0xa00
 8014216:	6019      	str	r1, [r3, #0]
 8014218:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801421c:	f6a3 2304 	subw	r3, r3, #2564	; 0xa04
 8014220:	6018      	str	r0, [r3, #0]
    __ASM volatile("smlad %0, %1, %2, %3" : "=r"(result) : "r"(op1), "r"(op2), "r"(op3));
 8014222:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8014226:	f6a3 13fc 	subw	r3, r3, #2556	; 0x9fc
 801422a:	6819      	ldr	r1, [r3, #0]
 801422c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8014230:	f5a3 6320 	sub.w	r3, r3, #2560	; 0xa00
 8014234:	681a      	ldr	r2, [r3, #0]
 8014236:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801423a:	f6a3 2304 	subw	r3, r3, #2564	; 0xa04
 801423e:	681b      	ldr	r3, [r3, #0]
 8014240:	fb21 3202 	smlad	r2, r1, r2, r3
 8014244:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8014248:	f6a3 2308 	subw	r3, r3, #2568	; 0xa08
 801424c:	601a      	str	r2, [r3, #0]
    return (result);
 801424e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8014252:	f6a3 2308 	subw	r3, r3, #2568	; 0xa08
 8014256:	681b      	ldr	r3, [r3, #0]
 8014258:	f8c7 3ca0 	str.w	r3, [r7, #3232]	; 0xca0
                res01 = SMLAD(val5, val4, res01);
 801425c:	f8d7 2c58 	ldr.w	r2, [r7, #3160]	; 0xc58
 8014260:	f8d7 1c54 	ldr.w	r1, [r7, #3156]	; 0xc54
 8014264:	f8d7 0c9c 	ldr.w	r0, [r7, #3228]	; 0xc9c
 8014268:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801426c:	f6a3 13ec 	subw	r3, r3, #2540	; 0x9ec
 8014270:	601a      	str	r2, [r3, #0]
 8014272:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8014276:	f5a3 631f 	sub.w	r3, r3, #2544	; 0x9f0
 801427a:	6019      	str	r1, [r3, #0]
 801427c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8014280:	f6a3 13f4 	subw	r3, r3, #2548	; 0x9f4
 8014284:	6018      	str	r0, [r3, #0]
    __ASM volatile("smlad %0, %1, %2, %3" : "=r"(result) : "r"(op1), "r"(op2), "r"(op3));
 8014286:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801428a:	f6a3 13ec 	subw	r3, r3, #2540	; 0x9ec
 801428e:	6819      	ldr	r1, [r3, #0]
 8014290:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8014294:	f5a3 631f 	sub.w	r3, r3, #2544	; 0x9f0
 8014298:	681a      	ldr	r2, [r3, #0]
 801429a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801429e:	f6a3 13f4 	subw	r3, r3, #2548	; 0x9f4
 80142a2:	681b      	ldr	r3, [r3, #0]
 80142a4:	fb21 3202 	smlad	r2, r1, r2, r3
 80142a8:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80142ac:	f6a3 13f8 	subw	r3, r3, #2552	; 0x9f8
 80142b0:	601a      	str	r2, [r3, #0]
    return (result);
 80142b2:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80142b6:	f6a3 13f8 	subw	r3, r3, #2552	; 0x9f8
 80142ba:	681b      	ldr	r3, [r3, #0]
 80142bc:	f8c7 3c9c 	str.w	r3, [r7, #3228]	; 0xc9c
                res01 = SMLAD(val2, val1, res01);
 80142c0:	f8d7 2c60 	ldr.w	r2, [r7, #3168]	; 0xc60
 80142c4:	f8d7 1c64 	ldr.w	r1, [r7, #3172]	; 0xc64
 80142c8:	f8d7 0c9c 	ldr.w	r0, [r7, #3228]	; 0xc9c
 80142cc:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80142d0:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 80142d4:	601a      	str	r2, [r3, #0]
 80142d6:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80142da:	f5a3 631e 	sub.w	r3, r3, #2528	; 0x9e0
 80142de:	6019      	str	r1, [r3, #0]
 80142e0:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80142e4:	f6a3 13e4 	subw	r3, r3, #2532	; 0x9e4
 80142e8:	6018      	str	r0, [r3, #0]
    __ASM volatile("smlad %0, %1, %2, %3" : "=r"(result) : "r"(op1), "r"(op2), "r"(op3));
 80142ea:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80142ee:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 80142f2:	6819      	ldr	r1, [r3, #0]
 80142f4:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80142f8:	f5a3 631e 	sub.w	r3, r3, #2528	; 0x9e0
 80142fc:	681a      	ldr	r2, [r3, #0]
 80142fe:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8014302:	f6a3 13e4 	subw	r3, r3, #2532	; 0x9e4
 8014306:	681b      	ldr	r3, [r3, #0]
 8014308:	fb21 3202 	smlad	r2, r1, r2, r3
 801430c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8014310:	f6a3 13e8 	subw	r3, r3, #2536	; 0x9e8
 8014314:	601a      	str	r2, [r3, #0]
    return (result);
 8014316:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801431a:	f6a3 13e8 	subw	r3, r3, #2536	; 0x9e8
 801431e:	681b      	ldr	r3, [r3, #0]
 8014320:	f8c7 3c9c 	str.w	r3, [r7, #3228]	; 0xc9c
            for (; rhs_cols_idx <= (rhs_cols - 4); rhs_cols_idx += 4)
 8014324:	f8d7 3c98 	ldr.w	r3, [r7, #3224]	; 0xc98
 8014328:	3304      	adds	r3, #4
 801432a:	f8c7 3c98 	str.w	r3, [r7, #3224]	; 0xc98
 801432e:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 8014332:	1eda      	subs	r2, r3, #3
 8014334:	f8d7 3c98 	ldr.w	r3, [r7, #3224]	; 0xc98
 8014338:	4293      	cmp	r3, r2
 801433a:	f6ff ad38 	blt.w	8013dae <arm_nn_mat_mult_nt_t_s8+0x4bce>
            }

            // Left-over accumulations
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 801433e:	e04b      	b.n	80143d8 <arm_nn_mat_mult_nt_t_s8+0x51f8>
            {
                int8_t rhs_value0 = rhs_ptr[0];
 8014340:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8014344:	f6a3 339c 	subw	r3, r3, #2972	; 0xb9c
 8014348:	681b      	ldr	r3, [r3, #0]
 801434a:	781b      	ldrb	r3, [r3, #0]
 801434c:	f887 3c6f 	strb.w	r3, [r7, #3183]	; 0xc6f
                int8_t rhs_value1 = rhs_ptr[rhs_cols];
 8014350:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8014354:	f6a3 339c 	subw	r3, r3, #2972	; 0xb9c
 8014358:	681a      	ldr	r2, [r3, #0]
 801435a:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 801435e:	4413      	add	r3, r2
 8014360:	781b      	ldrb	r3, [r3, #0]
 8014362:	f887 3c6e 	strb.w	r3, [r7, #3182]	; 0xc6e
                int8_t lhs_value = lhs_ptr[0];
 8014366:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801436a:	f6a3 3324 	subw	r3, r3, #2852	; 0xb24
 801436e:	681b      	ldr	r3, [r3, #0]
 8014370:	781b      	ldrb	r3, [r3, #0]
 8014372:	f887 3c6d 	strb.w	r3, [r7, #3181]	; 0xc6d

                res00 += lhs_value * rhs_value0;
 8014376:	f997 2c6d 	ldrsb.w	r2, [r7, #3181]	; 0xc6d
 801437a:	f997 3c6f 	ldrsb.w	r3, [r7, #3183]	; 0xc6f
 801437e:	fb03 f202 	mul.w	r2, r3, r2
 8014382:	f8d7 3ca0 	ldr.w	r3, [r7, #3232]	; 0xca0
 8014386:	4413      	add	r3, r2
 8014388:	f8c7 3ca0 	str.w	r3, [r7, #3232]	; 0xca0
                res01 += lhs_value * rhs_value1;
 801438c:	f997 2c6d 	ldrsb.w	r2, [r7, #3181]	; 0xc6d
 8014390:	f997 3c6e 	ldrsb.w	r3, [r7, #3182]	; 0xc6e
 8014394:	fb03 f202 	mul.w	r2, r3, r2
 8014398:	f8d7 3c9c 	ldr.w	r3, [r7, #3228]	; 0xc9c
 801439c:	4413      	add	r3, r2
 801439e:	f8c7 3c9c 	str.w	r3, [r7, #3228]	; 0xc9c

                ++rhs_ptr;
 80143a2:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80143a6:	f6a3 339c 	subw	r3, r3, #2972	; 0xb9c
 80143aa:	681b      	ldr	r3, [r3, #0]
 80143ac:	1c5a      	adds	r2, r3, #1
 80143ae:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80143b2:	f6a3 339c 	subw	r3, r3, #2972	; 0xb9c
 80143b6:	601a      	str	r2, [r3, #0]
                ++lhs_ptr;
 80143b8:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80143bc:	f6a3 3324 	subw	r3, r3, #2852	; 0xb24
 80143c0:	681b      	ldr	r3, [r3, #0]
 80143c2:	1c5a      	adds	r2, r3, #1
 80143c4:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80143c8:	f6a3 3324 	subw	r3, r3, #2852	; 0xb24
 80143cc:	601a      	str	r2, [r3, #0]
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 80143ce:	f8d7 3c98 	ldr.w	r3, [r7, #3224]	; 0xc98
 80143d2:	3301      	adds	r3, #1
 80143d4:	f8c7 3c98 	str.w	r3, [r7, #3224]	; 0xc98
 80143d8:	f8d7 2c98 	ldr.w	r2, [r7, #3224]	; 0xc98
 80143dc:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 80143e0:	429a      	cmp	r2, r3
 80143e2:	dbad      	blt.n	8014340 <arm_nn_mat_mult_nt_t_s8+0x5160>
            }

            // Quantize down
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows_idx], dst_shifts[rhs_rows_idx]);
 80143e4:	f8d7 3ccc 	ldr.w	r3, [r7, #3276]	; 0xccc
 80143e8:	009a      	lsls	r2, r3, #2
 80143ea:	f8d7 3cf0 	ldr.w	r3, [r7, #3312]	; 0xcf0
 80143ee:	4413      	add	r3, r2
 80143f0:	6818      	ldr	r0, [r3, #0]
 80143f2:	f8d7 3ccc 	ldr.w	r3, [r7, #3276]	; 0xccc
 80143f6:	009a      	lsls	r2, r3, #2
 80143f8:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 80143fc:	4413      	add	r3, r2
 80143fe:	6819      	ldr	r1, [r3, #0]
 8014400:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8014404:	f6a3 22c4 	subw	r2, r3, #2756	; 0xac4
 8014408:	f8d7 3ca0 	ldr.w	r3, [r7, #3232]	; 0xca0
 801440c:	6013      	str	r3, [r2, #0]
 801440e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8014412:	f6a3 23c8 	subw	r3, r3, #2760	; 0xac8
 8014416:	6018      	str	r0, [r3, #0]
 8014418:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801441c:	f6a3 23cc 	subw	r3, r3, #2764	; 0xacc
 8014420:	6019      	str	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8014422:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8014426:	f6a3 23cc 	subw	r3, r3, #2764	; 0xacc
 801442a:	681b      	ldr	r3, [r3, #0]
 801442c:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8014430:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8014434:	f6a3 23c4 	subw	r3, r3, #2756	; 0xac4
 8014438:	681b      	ldr	r3, [r3, #0]
 801443a:	fa03 f202 	lsl.w	r2, r3, r2
 801443e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8014442:	f5a3 632d 	sub.w	r3, r3, #2768	; 0xad0
 8014446:	601a      	str	r2, [r3, #0]
 8014448:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801444c:	f6a3 22d4 	subw	r2, r3, #2772	; 0xad4
 8014450:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8014454:	f6a3 23c8 	subw	r3, r3, #2760	; 0xac8
 8014458:	681b      	ldr	r3, [r3, #0]
 801445a:	6013      	str	r3, [r2, #0]
    int32_t result = 0;
 801445c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8014460:	f6a3 22d8 	subw	r2, r3, #2776	; 0xad8
 8014464:	2300      	movs	r3, #0
 8014466:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 8014468:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801446c:	461a      	mov	r2, r3
 801446e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014472:	f842 3c08 	str.w	r3, [r2, #-8]
    mult.word.high = 0;
 8014476:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801447a:	461a      	mov	r2, r3
 801447c:	2300      	movs	r3, #0
 801447e:	f842 3c04 	str.w	r3, [r2, #-4]
    mult.long_long = mult.long_long + (int64_t)m1 * m2;
 8014482:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8014486:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 801448a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801448e:	f5a3 632d 	sub.w	r3, r3, #2768	; 0xad0
 8014492:	681b      	ldr	r3, [r3, #0]
 8014494:	17da      	asrs	r2, r3, #31
 8014496:	653b      	str	r3, [r7, #80]	; 0x50
 8014498:	657a      	str	r2, [r7, #84]	; 0x54
 801449a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801449e:	f6a3 23d4 	subw	r3, r3, #2772	; 0xad4
 80144a2:	681b      	ldr	r3, [r3, #0]
 80144a4:	17da      	asrs	r2, r3, #31
 80144a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80144a8:	64fa      	str	r2, [r7, #76]	; 0x4c
 80144aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80144ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80144ae:	fb02 f203 	mul.w	r2, r2, r3
 80144b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80144b4:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 80144b6:	fb04 f303 	mul.w	r3, r4, r3
 80144ba:	4413      	add	r3, r2
 80144bc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80144be:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 80144c0:	fba2 4204 	umull	r4, r2, r2, r4
 80144c4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80144c8:	4622      	mov	r2, r4
 80144ca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80144ce:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80144d2:	4413      	add	r3, r2
 80144d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80144d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80144dc:	18c3      	adds	r3, r0, r3
 80144de:	61bb      	str	r3, [r7, #24]
 80144e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80144e4:	eb41 0303 	adc.w	r3, r1, r3
 80144e8:	61fb      	str	r3, [r7, #28]
 80144ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80144ee:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80144f2:	e943 1202 	strd	r1, r2, [r3, #-8]
    result = (int32_t)(mult.long_long >> 31);
 80144f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80144fa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80144fe:	f04f 0000 	mov.w	r0, #0
 8014502:	f04f 0100 	mov.w	r1, #0
 8014506:	0fd0      	lsrs	r0, r2, #31
 8014508:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801450c:	17d9      	asrs	r1, r3, #31
 801450e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8014512:	f6a3 22d8 	subw	r2, r3, #2776	; 0xad8
 8014516:	4603      	mov	r3, r0
 8014518:	6013      	str	r3, [r2, #0]
    return result;
 801451a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801451e:	f6a3 23d8 	subw	r3, r3, #2776	; 0xad8
 8014522:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8014524:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8014528:	f6a3 23cc 	subw	r3, r3, #2764	; 0xacc
 801452c:	681b      	ldr	r3, [r3, #0]
 801452e:	2b00      	cmp	r3, #0
 8014530:	dc06      	bgt.n	8014540 <arm_nn_mat_mult_nt_t_s8+0x5360>
 8014532:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8014536:	f6a3 23cc 	subw	r3, r3, #2764	; 0xacc
 801453a:	681b      	ldr	r3, [r3, #0]
 801453c:	425a      	negs	r2, r3
 801453e:	e000      	b.n	8014542 <arm_nn_mat_mult_nt_t_s8+0x5362>
 8014540:	2200      	movs	r2, #0
 8014542:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8014546:	f6a3 23dc 	subw	r3, r3, #2780	; 0xadc
 801454a:	6019      	str	r1, [r3, #0]
 801454c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8014550:	f5a3 632e 	sub.w	r3, r3, #2784	; 0xae0
 8014554:	601a      	str	r2, [r3, #0]
    int32_t result = 0;
 8014556:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801455a:	f6a3 22e4 	subw	r2, r3, #2788	; 0xae4
 801455e:	2300      	movs	r3, #0
 8014560:	6013      	str	r3, [r2, #0]
    const int32_t remainder_mask = (1 << exponent) - 1;
 8014562:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8014566:	f5a3 632e 	sub.w	r3, r3, #2784	; 0xae0
 801456a:	2201      	movs	r2, #1
 801456c:	681b      	ldr	r3, [r3, #0]
 801456e:	fa02 f103 	lsl.w	r1, r2, r3
 8014572:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8014576:	f6a3 22e8 	subw	r2, r3, #2792	; 0xae8
 801457a:	1e4b      	subs	r3, r1, #1
 801457c:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 801457e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8014582:	f6a3 21ec 	subw	r1, r3, #2796	; 0xaec
 8014586:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801458a:	f6a3 22dc 	subw	r2, r3, #2780	; 0xadc
 801458e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8014592:	f6a3 23e8 	subw	r3, r3, #2792	; 0xae8
 8014596:	6812      	ldr	r2, [r2, #0]
 8014598:	681b      	ldr	r3, [r3, #0]
 801459a:	4013      	ands	r3, r2
 801459c:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 801459e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80145a2:	f6a3 21e4 	subw	r1, r3, #2788	; 0xae4
 80145a6:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80145aa:	f6a3 22dc 	subw	r2, r3, #2780	; 0xadc
 80145ae:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80145b2:	f5a3 632e 	sub.w	r3, r3, #2784	; 0xae0
 80145b6:	6812      	ldr	r2, [r2, #0]
 80145b8:	681b      	ldr	r3, [r3, #0]
 80145ba:	fa42 f303 	asr.w	r3, r2, r3
 80145be:	600b      	str	r3, [r1, #0]
    int32_t threshold = remainder_mask >> 1;
 80145c0:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80145c4:	f5a3 622f 	sub.w	r2, r3, #2800	; 0xaf0
 80145c8:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80145cc:	f6a3 23e8 	subw	r3, r3, #2792	; 0xae8
 80145d0:	681b      	ldr	r3, [r3, #0]
 80145d2:	105b      	asrs	r3, r3, #1
 80145d4:	6013      	str	r3, [r2, #0]
    if (result < 0)
 80145d6:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80145da:	f6a3 23e4 	subw	r3, r3, #2788	; 0xae4
 80145de:	681b      	ldr	r3, [r3, #0]
 80145e0:	2b00      	cmp	r3, #0
 80145e2:	da0a      	bge.n	80145fa <arm_nn_mat_mult_nt_t_s8+0x541a>
        threshold++;
 80145e4:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80145e8:	f5a3 622f 	sub.w	r2, r3, #2800	; 0xaf0
 80145ec:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80145f0:	f5a3 632f 	sub.w	r3, r3, #2800	; 0xaf0
 80145f4:	681b      	ldr	r3, [r3, #0]
 80145f6:	3301      	adds	r3, #1
 80145f8:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 80145fa:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80145fe:	f6a3 22ec 	subw	r2, r3, #2796	; 0xaec
 8014602:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8014606:	f5a3 632f 	sub.w	r3, r3, #2800	; 0xaf0
 801460a:	6812      	ldr	r2, [r2, #0]
 801460c:	681b      	ldr	r3, [r3, #0]
 801460e:	429a      	cmp	r2, r3
 8014610:	dd0a      	ble.n	8014628 <arm_nn_mat_mult_nt_t_s8+0x5448>
        result++;
 8014612:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8014616:	f6a3 22e4 	subw	r2, r3, #2788	; 0xae4
 801461a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801461e:	f6a3 23e4 	subw	r3, r3, #2788	; 0xae4
 8014622:	681b      	ldr	r3, [r3, #0]
 8014624:	3301      	adds	r3, #1
 8014626:	6013      	str	r3, [r2, #0]
    return result;
 8014628:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801462c:	f6a3 23e4 	subw	r3, r3, #2788	; 0xae4
 8014630:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8014632:	bf00      	nop
 8014634:	f8c7 3ca0 	str.w	r3, [r7, #3232]	; 0xca0
            res01 = arm_nn_requantize(res01, dst_multipliers[rhs_rows_idx + 1], dst_shifts[rhs_rows_idx + 1]);
 8014638:	f8d7 3ccc 	ldr.w	r3, [r7, #3276]	; 0xccc
 801463c:	3301      	adds	r3, #1
 801463e:	009a      	lsls	r2, r3, #2
 8014640:	f8d7 3cf0 	ldr.w	r3, [r7, #3312]	; 0xcf0
 8014644:	4413      	add	r3, r2
 8014646:	6818      	ldr	r0, [r3, #0]
 8014648:	f8d7 3ccc 	ldr.w	r3, [r7, #3276]	; 0xccc
 801464c:	3301      	adds	r3, #1
 801464e:	009a      	lsls	r2, r3, #2
 8014650:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8014654:	4413      	add	r3, r2
 8014656:	6819      	ldr	r1, [r3, #0]
 8014658:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801465c:	f6a3 2294 	subw	r2, r3, #2708	; 0xa94
 8014660:	f8d7 3c9c 	ldr.w	r3, [r7, #3228]	; 0xc9c
 8014664:	6013      	str	r3, [r2, #0]
 8014666:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801466a:	f6a3 2398 	subw	r3, r3, #2712	; 0xa98
 801466e:	6018      	str	r0, [r3, #0]
 8014670:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8014674:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 8014678:	6019      	str	r1, [r3, #0]
 801467a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801467e:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 8014682:	681b      	ldr	r3, [r3, #0]
 8014684:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8014688:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801468c:	f6a3 2394 	subw	r3, r3, #2708	; 0xa94
 8014690:	681b      	ldr	r3, [r3, #0]
 8014692:	fa03 f202 	lsl.w	r2, r3, r2
 8014696:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801469a:	f5a3 632a 	sub.w	r3, r3, #2720	; 0xaa0
 801469e:	601a      	str	r2, [r3, #0]
 80146a0:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80146a4:	f6a3 22a4 	subw	r2, r3, #2724	; 0xaa4
 80146a8:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80146ac:	f6a3 2398 	subw	r3, r3, #2712	; 0xa98
 80146b0:	681b      	ldr	r3, [r3, #0]
 80146b2:	6013      	str	r3, [r2, #0]
    int32_t result = 0;
 80146b4:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80146b8:	f6a3 22a8 	subw	r2, r3, #2728	; 0xaa8
 80146bc:	2300      	movs	r3, #0
 80146be:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 80146c0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80146c4:	461a      	mov	r2, r3
 80146c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80146ca:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 80146cc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80146d0:	461a      	mov	r2, r3
 80146d2:	2300      	movs	r3, #0
 80146d4:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (int64_t)m1 * m2;
 80146d6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80146da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80146de:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80146e2:	f5a3 632a 	sub.w	r3, r3, #2720	; 0xaa0
 80146e6:	681b      	ldr	r3, [r3, #0]
 80146e8:	17da      	asrs	r2, r3, #31
 80146ea:	663b      	str	r3, [r7, #96]	; 0x60
 80146ec:	667a      	str	r2, [r7, #100]	; 0x64
 80146ee:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80146f2:	f6a3 23a4 	subw	r3, r3, #2724	; 0xaa4
 80146f6:	681b      	ldr	r3, [r3, #0]
 80146f8:	17da      	asrs	r2, r3, #31
 80146fa:	65bb      	str	r3, [r7, #88]	; 0x58
 80146fc:	65fa      	str	r2, [r7, #92]	; 0x5c
 80146fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014700:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014702:	fb02 f203 	mul.w	r2, r2, r3
 8014706:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014708:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 801470a:	fb04 f303 	mul.w	r3, r4, r3
 801470e:	4413      	add	r3, r2
 8014710:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8014712:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8014714:	fba2 4204 	umull	r4, r2, r2, r4
 8014718:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 801471c:	4622      	mov	r2, r4
 801471e:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 8014722:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8014726:	4413      	add	r3, r2
 8014728:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801472c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8014730:	18c3      	adds	r3, r0, r3
 8014732:	623b      	str	r3, [r7, #32]
 8014734:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014738:	eb41 0303 	adc.w	r3, r1, r3
 801473c:	627b      	str	r3, [r7, #36]	; 0x24
 801473e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014742:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8014746:	e9c3 1200 	strd	r1, r2, [r3]
    result = (int32_t)(mult.long_long >> 31);
 801474a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801474e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014752:	f04f 0000 	mov.w	r0, #0
 8014756:	f04f 0100 	mov.w	r1, #0
 801475a:	0fd0      	lsrs	r0, r2, #31
 801475c:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8014760:	17d9      	asrs	r1, r3, #31
 8014762:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8014766:	f6a3 22a8 	subw	r2, r3, #2728	; 0xaa8
 801476a:	4603      	mov	r3, r0
 801476c:	6013      	str	r3, [r2, #0]
    return result;
 801476e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8014772:	f6a3 23a8 	subw	r3, r3, #2728	; 0xaa8
 8014776:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8014778:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801477c:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 8014780:	681b      	ldr	r3, [r3, #0]
 8014782:	2b00      	cmp	r3, #0
 8014784:	dc06      	bgt.n	8014794 <arm_nn_mat_mult_nt_t_s8+0x55b4>
 8014786:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801478a:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 801478e:	681b      	ldr	r3, [r3, #0]
 8014790:	425a      	negs	r2, r3
 8014792:	e000      	b.n	8014796 <arm_nn_mat_mult_nt_t_s8+0x55b6>
 8014794:	2200      	movs	r2, #0
 8014796:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801479a:	f6a3 23ac 	subw	r3, r3, #2732	; 0xaac
 801479e:	6019      	str	r1, [r3, #0]
 80147a0:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80147a4:	f5a3 632b 	sub.w	r3, r3, #2736	; 0xab0
 80147a8:	601a      	str	r2, [r3, #0]
    int32_t result = 0;
 80147aa:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80147ae:	f6a3 22b4 	subw	r2, r3, #2740	; 0xab4
 80147b2:	2300      	movs	r3, #0
 80147b4:	6013      	str	r3, [r2, #0]
    const int32_t remainder_mask = (1 << exponent) - 1;
 80147b6:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80147ba:	f5a3 632b 	sub.w	r3, r3, #2736	; 0xab0
 80147be:	2201      	movs	r2, #1
 80147c0:	681b      	ldr	r3, [r3, #0]
 80147c2:	fa02 f103 	lsl.w	r1, r2, r3
 80147c6:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80147ca:	f6a3 22b8 	subw	r2, r3, #2744	; 0xab8
 80147ce:	1e4b      	subs	r3, r1, #1
 80147d0:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 80147d2:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80147d6:	f6a3 21bc 	subw	r1, r3, #2748	; 0xabc
 80147da:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80147de:	f6a3 22ac 	subw	r2, r3, #2732	; 0xaac
 80147e2:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80147e6:	f6a3 23b8 	subw	r3, r3, #2744	; 0xab8
 80147ea:	6812      	ldr	r2, [r2, #0]
 80147ec:	681b      	ldr	r3, [r3, #0]
 80147ee:	4013      	ands	r3, r2
 80147f0:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 80147f2:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80147f6:	f6a3 21b4 	subw	r1, r3, #2740	; 0xab4
 80147fa:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80147fe:	f6a3 22ac 	subw	r2, r3, #2732	; 0xaac
 8014802:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8014806:	f5a3 632b 	sub.w	r3, r3, #2736	; 0xab0
 801480a:	6812      	ldr	r2, [r2, #0]
 801480c:	681b      	ldr	r3, [r3, #0]
 801480e:	fa42 f303 	asr.w	r3, r2, r3
 8014812:	600b      	str	r3, [r1, #0]
    int32_t threshold = remainder_mask >> 1;
 8014814:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8014818:	f5a3 622c 	sub.w	r2, r3, #2752	; 0xac0
 801481c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8014820:	f6a3 23b8 	subw	r3, r3, #2744	; 0xab8
 8014824:	681b      	ldr	r3, [r3, #0]
 8014826:	105b      	asrs	r3, r3, #1
 8014828:	6013      	str	r3, [r2, #0]
    if (result < 0)
 801482a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801482e:	f6a3 23b4 	subw	r3, r3, #2740	; 0xab4
 8014832:	681b      	ldr	r3, [r3, #0]
 8014834:	2b00      	cmp	r3, #0
 8014836:	da0a      	bge.n	801484e <arm_nn_mat_mult_nt_t_s8+0x566e>
        threshold++;
 8014838:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801483c:	f5a3 622c 	sub.w	r2, r3, #2752	; 0xac0
 8014840:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8014844:	f5a3 632c 	sub.w	r3, r3, #2752	; 0xac0
 8014848:	681b      	ldr	r3, [r3, #0]
 801484a:	3301      	adds	r3, #1
 801484c:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 801484e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8014852:	f6a3 22bc 	subw	r2, r3, #2748	; 0xabc
 8014856:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801485a:	f5a3 632c 	sub.w	r3, r3, #2752	; 0xac0
 801485e:	6812      	ldr	r2, [r2, #0]
 8014860:	681b      	ldr	r3, [r3, #0]
 8014862:	429a      	cmp	r2, r3
 8014864:	dd0a      	ble.n	801487c <arm_nn_mat_mult_nt_t_s8+0x569c>
        result++;
 8014866:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801486a:	f6a3 22b4 	subw	r2, r3, #2740	; 0xab4
 801486e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8014872:	f6a3 23b4 	subw	r3, r3, #2740	; 0xab4
 8014876:	681b      	ldr	r3, [r3, #0]
 8014878:	3301      	adds	r3, #1
 801487a:	6013      	str	r3, [r2, #0]
    return result;
 801487c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8014880:	f6a3 23b4 	subw	r3, r3, #2740	; 0xab4
 8014884:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8014886:	bf00      	nop
 8014888:	f8c7 3c9c 	str.w	r3, [r7, #3228]	; 0xc9c

            // Add offset
            res00 += dst_offset;
 801488c:	f8d7 2ca0 	ldr.w	r2, [r7, #3232]	; 0xca0
 8014890:	f8d7 3d08 	ldr.w	r3, [r7, #3336]	; 0xd08
 8014894:	4413      	add	r3, r2
 8014896:	f8c7 3ca0 	str.w	r3, [r7, #3232]	; 0xca0
            res01 += dst_offset;
 801489a:	f8d7 2c9c 	ldr.w	r2, [r7, #3228]	; 0xc9c
 801489e:	f8d7 3d08 	ldr.w	r3, [r7, #3336]	; 0xd08
 80148a2:	4413      	add	r3, r2
 80148a4:	f8c7 3c9c 	str.w	r3, [r7, #3228]	; 0xc9c

            // Clamp the result
            res00 = MAX(res00, activation_min);
 80148a8:	f8d7 2ca0 	ldr.w	r2, [r7, #3232]	; 0xca0
 80148ac:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 80148b0:	4293      	cmp	r3, r2
 80148b2:	bfb8      	it	lt
 80148b4:	4613      	movlt	r3, r2
 80148b6:	f8c7 3ca0 	str.w	r3, [r7, #3232]	; 0xca0
            res00 = MIN(res00, activation_max);
 80148ba:	f8d7 2ca0 	ldr.w	r2, [r7, #3232]	; 0xca0
 80148be:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	; 0xd10
 80148c2:	4293      	cmp	r3, r2
 80148c4:	bfa8      	it	ge
 80148c6:	4613      	movge	r3, r2
 80148c8:	f8c7 3ca0 	str.w	r3, [r7, #3232]	; 0xca0
            res01 = MAX(res01, activation_min);
 80148cc:	f8d7 2c9c 	ldr.w	r2, [r7, #3228]	; 0xc9c
 80148d0:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 80148d4:	4293      	cmp	r3, r2
 80148d6:	bfb8      	it	lt
 80148d8:	4613      	movlt	r3, r2
 80148da:	f8c7 3c9c 	str.w	r3, [r7, #3228]	; 0xc9c
            res01 = MIN(res01, activation_max);
 80148de:	f8d7 2c9c 	ldr.w	r2, [r7, #3228]	; 0xc9c
 80148e2:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	; 0xd10
 80148e6:	4293      	cmp	r3, r2
 80148e8:	bfa8      	it	ge
 80148ea:	4613      	movge	r3, r2
 80148ec:	f8c7 3c9c 	str.w	r3, [r7, #3228]	; 0xc9c

            dst_ptr[0] = (int8_t)res00;
 80148f0:	f8d7 3ca0 	ldr.w	r3, [r7, #3232]	; 0xca0
 80148f4:	b25b      	sxtb	r3, r3
 80148f6:	f8d7 2cc8 	ldr.w	r2, [r7, #3272]	; 0xcc8
 80148fa:	7013      	strb	r3, [r2, #0]
            dst_ptr[1] = (int8_t)res01;
 80148fc:	f8d7 3cc8 	ldr.w	r3, [r7, #3272]	; 0xcc8
 8014900:	1c5a      	adds	r2, r3, #1
 8014902:	f8d7 3c9c 	ldr.w	r3, [r7, #3228]	; 0xc9c
 8014906:	b25b      	sxtb	r3, r3
 8014908:	7013      	strb	r3, [r2, #0]
        }

        rhs += 2 * rhs_cols;
 801490a:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 801490e:	005b      	lsls	r3, r3, #1
 8014910:	4619      	mov	r1, r3
 8014912:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8014916:	f5a3 6240 	sub.w	r2, r3, #3072	; 0xc00
 801491a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801491e:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
 8014922:	681b      	ldr	r3, [r3, #0]
 8014924:	440b      	add	r3, r1
 8014926:	6013      	str	r3, [r2, #0]
        dst += 2;
 8014928:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801492c:	f6a3 4208 	subw	r2, r3, #3080	; 0xc08
 8014930:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8014934:	f6a3 4308 	subw	r3, r3, #3080	; 0xc08
 8014938:	681b      	ldr	r3, [r3, #0]
 801493a:	3302      	adds	r3, #2
 801493c:	6013      	str	r3, [r2, #0]
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 801493e:	f8d7 3ccc 	ldr.w	r3, [r7, #3276]	; 0xccc
 8014942:	3302      	adds	r3, #2
 8014944:	f8c7 3ccc 	str.w	r3, [r7, #3276]	; 0xccc
 8014948:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 801494c:	1e5a      	subs	r2, r3, #1
 801494e:	f8d7 3ccc 	ldr.w	r3, [r7, #3276]	; 0xccc
 8014952:	4293      	cmp	r3, r2
 8014954:	f6fa ac6c 	blt.w	800f230 <arm_nn_mat_mult_nt_t_s8+0x50>
    }

    if (rhs_rows % 2)
 8014958:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 801495c:	f003 0301 	and.w	r3, r3, #1
 8014960:	2b00      	cmp	r3, #0
 8014962:	f000 81ce 	beq.w	8014d02 <arm_nn_mat_mult_nt_t_s8+0x5b22>
    {
        const int8_t *lhs_ptr = &lhs[0];
 8014966:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801496a:	f6a3 33fc 	subw	r3, r3, #3068	; 0xbfc
 801496e:	681b      	ldr	r3, [r3, #0]
 8014970:	f8c7 3c94 	str.w	r3, [r7, #3220]	; 0xc94
        int8_t *dst_ptr = &dst[0];
 8014974:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8014978:	f6a3 4308 	subw	r3, r3, #3080	; 0xc08
 801497c:	681b      	ldr	r3, [r3, #0]
 801497e:	f8c7 3c90 	str.w	r3, [r7, #3216]	; 0xc90

        for (int32_t lhs_rows_idx = 0; lhs_rows_idx < lhs_rows; ++lhs_rows_idx)
 8014982:	2300      	movs	r3, #0
 8014984:	f8c7 3c8c 	str.w	r3, [r7, #3212]	; 0xc8c
 8014988:	e1b4      	b.n	8014cf4 <arm_nn_mat_mult_nt_t_s8+0x5b14>
        {
            const int8_t *rhs_ptr = &rhs[0];
 801498a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 801498e:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
 8014992:	681b      	ldr	r3, [r3, #0]
 8014994:	f8c7 3c88 	str.w	r3, [r7, #3208]	; 0xc88
            int32_t res00 = 0;
 8014998:	2300      	movs	r3, #0
 801499a:	f8c7 3c84 	str.w	r3, [r7, #3204]	; 0xc84
            if (bias)
 801499e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80149a2:	f6a3 4304 	subw	r3, r3, #3076	; 0xc04
 80149a6:	681b      	ldr	r3, [r3, #0]
 80149a8:	2b00      	cmp	r3, #0
 80149aa:	d00e      	beq.n	80149ca <arm_nn_mat_mult_nt_t_s8+0x57ea>
            {
                res00 = bias[rhs_rows - 1];
 80149ac:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 80149b0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80149b4:	3b01      	subs	r3, #1
 80149b6:	009b      	lsls	r3, r3, #2
 80149b8:	f507 624d 	add.w	r2, r7, #3280	; 0xcd0
 80149bc:	f6a2 4204 	subw	r2, r2, #3076	; 0xc04
 80149c0:	6812      	ldr	r2, [r2, #0]
 80149c2:	4413      	add	r3, r2
 80149c4:	681b      	ldr	r3, [r3, #0]
 80149c6:	f8c7 3c84 	str.w	r3, [r7, #3204]	; 0xc84
            }

            for (int32_t rhs_cols_idx = 0; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 80149ca:	2300      	movs	r3, #0
 80149cc:	f8c7 3c80 	str.w	r3, [r7, #3200]	; 0xc80
 80149d0:	e029      	b.n	8014a26 <arm_nn_mat_mult_nt_t_s8+0x5846>
            {
                int32_t rhs_value = rhs_ptr[0];
 80149d2:	f8d7 3c88 	ldr.w	r3, [r7, #3208]	; 0xc88
 80149d6:	f993 3000 	ldrsb.w	r3, [r3]
 80149da:	f8c7 3c74 	str.w	r3, [r7, #3188]	; 0xc74
                int32_t lhs_value = lhs_ptr[0] + lhs_offset;
 80149de:	f8d7 3c94 	ldr.w	r3, [r7, #3220]	; 0xc94
 80149e2:	f993 3000 	ldrsb.w	r3, [r3]
 80149e6:	461a      	mov	r2, r3
 80149e8:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 80149ec:	4413      	add	r3, r2
 80149ee:	f8c7 3c70 	str.w	r3, [r7, #3184]	; 0xc70

                res00 += lhs_value * rhs_value;
 80149f2:	f8d7 3c70 	ldr.w	r3, [r7, #3184]	; 0xc70
 80149f6:	f8d7 2c74 	ldr.w	r2, [r7, #3188]	; 0xc74
 80149fa:	fb02 f303 	mul.w	r3, r2, r3
 80149fe:	f8d7 2c84 	ldr.w	r2, [r7, #3204]	; 0xc84
 8014a02:	4413      	add	r3, r2
 8014a04:	f8c7 3c84 	str.w	r3, [r7, #3204]	; 0xc84

                ++rhs_ptr;
 8014a08:	f8d7 3c88 	ldr.w	r3, [r7, #3208]	; 0xc88
 8014a0c:	3301      	adds	r3, #1
 8014a0e:	f8c7 3c88 	str.w	r3, [r7, #3208]	; 0xc88
                ++lhs_ptr;
 8014a12:	f8d7 3c94 	ldr.w	r3, [r7, #3220]	; 0xc94
 8014a16:	3301      	adds	r3, #1
 8014a18:	f8c7 3c94 	str.w	r3, [r7, #3220]	; 0xc94
            for (int32_t rhs_cols_idx = 0; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 8014a1c:	f8d7 3c80 	ldr.w	r3, [r7, #3200]	; 0xc80
 8014a20:	3301      	adds	r3, #1
 8014a22:	f8c7 3c80 	str.w	r3, [r7, #3200]	; 0xc80
 8014a26:	f8d7 2c80 	ldr.w	r2, [r7, #3200]	; 0xc80
 8014a2a:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 8014a2e:	429a      	cmp	r2, r3
 8014a30:	dbcf      	blt.n	80149d2 <arm_nn_mat_mult_nt_t_s8+0x57f2>
            }
            lhs_ptr -= rhs_cols;
 8014a32:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 8014a36:	425b      	negs	r3, r3
 8014a38:	f8d7 2c94 	ldr.w	r2, [r7, #3220]	; 0xc94
 8014a3c:	4413      	add	r3, r2
 8014a3e:	f8c7 3c94 	str.w	r3, [r7, #3220]	; 0xc94
            lhs_ptr += lhs_cols_offset;
 8014a42:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 8014a46:	f8d7 2c94 	ldr.w	r2, [r7, #3220]	; 0xc94
 8014a4a:	4413      	add	r3, r2
 8014a4c:	f8c7 3c94 	str.w	r3, [r7, #3220]	; 0xc94

            // Quantize down
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows - 1], dst_shifts[rhs_rows - 1]);
 8014a50:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 8014a54:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8014a58:	3b01      	subs	r3, #1
 8014a5a:	009b      	lsls	r3, r3, #2
 8014a5c:	f8d7 2cf0 	ldr.w	r2, [r7, #3312]	; 0xcf0
 8014a60:	4413      	add	r3, r2
 8014a62:	6819      	ldr	r1, [r3, #0]
 8014a64:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 8014a68:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8014a6c:	3b01      	subs	r3, #1
 8014a6e:	009b      	lsls	r3, r3, #2
 8014a70:	f8d7 2cf4 	ldr.w	r2, [r7, #3316]	; 0xcf4
 8014a74:	4413      	add	r3, r2
 8014a76:	681a      	ldr	r2, [r3, #0]
 8014a78:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8014a7c:	f6a3 23f4 	subw	r3, r3, #2804	; 0xaf4
 8014a80:	f8d7 0c84 	ldr.w	r0, [r7, #3204]	; 0xc84
 8014a84:	6018      	str	r0, [r3, #0]
 8014a86:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8014a8a:	f6a3 23f8 	subw	r3, r3, #2808	; 0xaf8
 8014a8e:	6019      	str	r1, [r3, #0]
 8014a90:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8014a94:	f6a3 23fc 	subw	r3, r3, #2812	; 0xafc
 8014a98:	601a      	str	r2, [r3, #0]
 8014a9a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8014a9e:	f6a3 23fc 	subw	r3, r3, #2812	; 0xafc
 8014aa2:	681b      	ldr	r3, [r3, #0]
 8014aa4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014aa8:	f507 624d 	add.w	r2, r7, #3280	; 0xcd0
 8014aac:	f6a2 22f4 	subw	r2, r2, #2804	; 0xaf4
 8014ab0:	6812      	ldr	r2, [r2, #0]
 8014ab2:	409a      	lsls	r2, r3
 8014ab4:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8014ab8:	f5a3 6330 	sub.w	r3, r3, #2816	; 0xb00
 8014abc:	601a      	str	r2, [r3, #0]
 8014abe:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8014ac2:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8014ac6:	f507 624d 	add.w	r2, r7, #3280	; 0xcd0
 8014aca:	f6a2 22f8 	subw	r2, r2, #2808	; 0xaf8
 8014ace:	6812      	ldr	r2, [r2, #0]
 8014ad0:	601a      	str	r2, [r3, #0]
    int32_t result = 0;
 8014ad2:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8014ad6:	f6a3 3308 	subw	r3, r3, #2824	; 0xb08
 8014ada:	2200      	movs	r2, #0
 8014adc:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 8014ade:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8014ae2:	461a      	mov	r2, r3
 8014ae4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014ae8:	f842 3c08 	str.w	r3, [r2, #-8]
    mult.word.high = 0;
 8014aec:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8014af0:	461a      	mov	r2, r3
 8014af2:	2300      	movs	r3, #0
 8014af4:	f842 3c04 	str.w	r3, [r2, #-4]
    mult.long_long = mult.long_long + (int64_t)m1 * m2;
 8014af8:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8014afc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8014b00:	f507 614d 	add.w	r1, r7, #3280	; 0xcd0
 8014b04:	f5a1 6130 	sub.w	r1, r1, #2816	; 0xb00
 8014b08:	6809      	ldr	r1, [r1, #0]
 8014b0a:	17c8      	asrs	r0, r1, #31
 8014b0c:	6139      	str	r1, [r7, #16]
 8014b0e:	6178      	str	r0, [r7, #20]
 8014b10:	f507 614d 	add.w	r1, r7, #3280	; 0xcd0
 8014b14:	f6a1 3104 	subw	r1, r1, #2820	; 0xb04
 8014b18:	6809      	ldr	r1, [r1, #0]
 8014b1a:	17c8      	asrs	r0, r1, #31
 8014b1c:	60b9      	str	r1, [r7, #8]
 8014b1e:	60f8      	str	r0, [r7, #12]
 8014b20:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 8014b24:	4631      	mov	r1, r6
 8014b26:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8014b2a:	4650      	mov	r0, sl
 8014b2c:	fb00 f001 	mul.w	r0, r0, r1
 8014b30:	4659      	mov	r1, fp
 8014b32:	462c      	mov	r4, r5
 8014b34:	fb04 f101 	mul.w	r1, r4, r1
 8014b38:	4401      	add	r1, r0
 8014b3a:	4628      	mov	r0, r5
 8014b3c:	4654      	mov	r4, sl
 8014b3e:	fba0 8904 	umull	r8, r9, r0, r4
 8014b42:	4449      	add	r1, r9
 8014b44:	4689      	mov	r9, r1
 8014b46:	eb12 0108 	adds.w	r1, r2, r8
 8014b4a:	6039      	str	r1, [r7, #0]
 8014b4c:	eb43 0309 	adc.w	r3, r3, r9
 8014b50:	607b      	str	r3, [r7, #4]
 8014b52:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8014b56:	e9d7 1200 	ldrd	r1, r2, [r7]
 8014b5a:	e943 1202 	strd	r1, r2, [r3, #-8]
    result = (int32_t)(mult.long_long >> 31);
 8014b5e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8014b62:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8014b66:	f04f 0200 	mov.w	r2, #0
 8014b6a:	f04f 0300 	mov.w	r3, #0
 8014b6e:	0fc2      	lsrs	r2, r0, #31
 8014b70:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8014b74:	17cb      	asrs	r3, r1, #31
 8014b76:	f507 614d 	add.w	r1, r7, #3280	; 0xcd0
 8014b7a:	f6a1 3108 	subw	r1, r1, #2824	; 0xb08
 8014b7e:	4613      	mov	r3, r2
 8014b80:	600b      	str	r3, [r1, #0]
    return result;
 8014b82:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8014b86:	f6a3 3308 	subw	r3, r3, #2824	; 0xb08
 8014b8a:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8014b8c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8014b90:	f6a3 23fc 	subw	r3, r3, #2812	; 0xafc
 8014b94:	681b      	ldr	r3, [r3, #0]
 8014b96:	2b00      	cmp	r3, #0
 8014b98:	dc06      	bgt.n	8014ba8 <arm_nn_mat_mult_nt_t_s8+0x59c8>
 8014b9a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8014b9e:	f6a3 23fc 	subw	r3, r3, #2812	; 0xafc
 8014ba2:	681b      	ldr	r3, [r3, #0]
 8014ba4:	425b      	negs	r3, r3
 8014ba6:	e000      	b.n	8014baa <arm_nn_mat_mult_nt_t_s8+0x59ca>
 8014ba8:	2300      	movs	r3, #0
 8014baa:	f507 624d 	add.w	r2, r7, #3280	; 0xcd0
 8014bae:	f6a2 320c 	subw	r2, r2, #2828	; 0xb0c
 8014bb2:	6011      	str	r1, [r2, #0]
 8014bb4:	f507 624d 	add.w	r2, r7, #3280	; 0xcd0
 8014bb8:	f5a2 6231 	sub.w	r2, r2, #2832	; 0xb10
 8014bbc:	6013      	str	r3, [r2, #0]
    int32_t result = 0;
 8014bbe:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8014bc2:	f6a3 3314 	subw	r3, r3, #2836	; 0xb14
 8014bc6:	2200      	movs	r2, #0
 8014bc8:	601a      	str	r2, [r3, #0]
    const int32_t remainder_mask = (1 << exponent) - 1;
 8014bca:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8014bce:	f5a3 6331 	sub.w	r3, r3, #2832	; 0xb10
 8014bd2:	2201      	movs	r2, #1
 8014bd4:	681b      	ldr	r3, [r3, #0]
 8014bd6:	409a      	lsls	r2, r3
 8014bd8:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8014bdc:	f6a3 3318 	subw	r3, r3, #2840	; 0xb18
 8014be0:	3a01      	subs	r2, #1
 8014be2:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 8014be4:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8014be8:	f6a3 331c 	subw	r3, r3, #2844	; 0xb1c
 8014bec:	f507 624d 	add.w	r2, r7, #3280	; 0xcd0
 8014bf0:	f6a2 310c 	subw	r1, r2, #2828	; 0xb0c
 8014bf4:	f507 624d 	add.w	r2, r7, #3280	; 0xcd0
 8014bf8:	f6a2 3218 	subw	r2, r2, #2840	; 0xb18
 8014bfc:	6809      	ldr	r1, [r1, #0]
 8014bfe:	6812      	ldr	r2, [r2, #0]
 8014c00:	400a      	ands	r2, r1
 8014c02:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 8014c04:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8014c08:	f6a3 3314 	subw	r3, r3, #2836	; 0xb14
 8014c0c:	f507 624d 	add.w	r2, r7, #3280	; 0xcd0
 8014c10:	f6a2 310c 	subw	r1, r2, #2828	; 0xb0c
 8014c14:	f507 624d 	add.w	r2, r7, #3280	; 0xcd0
 8014c18:	f5a2 6231 	sub.w	r2, r2, #2832	; 0xb10
 8014c1c:	6809      	ldr	r1, [r1, #0]
 8014c1e:	6812      	ldr	r2, [r2, #0]
 8014c20:	fa41 f202 	asr.w	r2, r1, r2
 8014c24:	601a      	str	r2, [r3, #0]
    int32_t threshold = remainder_mask >> 1;
 8014c26:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8014c2a:	f5a3 6332 	sub.w	r3, r3, #2848	; 0xb20
 8014c2e:	f507 624d 	add.w	r2, r7, #3280	; 0xcd0
 8014c32:	f6a2 3218 	subw	r2, r2, #2840	; 0xb18
 8014c36:	6812      	ldr	r2, [r2, #0]
 8014c38:	1052      	asrs	r2, r2, #1
 8014c3a:	601a      	str	r2, [r3, #0]
    if (result < 0)
 8014c3c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8014c40:	f6a3 3314 	subw	r3, r3, #2836	; 0xb14
 8014c44:	681b      	ldr	r3, [r3, #0]
 8014c46:	2b00      	cmp	r3, #0
 8014c48:	da0a      	bge.n	8014c60 <arm_nn_mat_mult_nt_t_s8+0x5a80>
        threshold++;
 8014c4a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8014c4e:	f5a3 6332 	sub.w	r3, r3, #2848	; 0xb20
 8014c52:	f507 624d 	add.w	r2, r7, #3280	; 0xcd0
 8014c56:	f5a2 6232 	sub.w	r2, r2, #2848	; 0xb20
 8014c5a:	6812      	ldr	r2, [r2, #0]
 8014c5c:	3201      	adds	r2, #1
 8014c5e:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 8014c60:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8014c64:	f6a3 321c 	subw	r2, r3, #2844	; 0xb1c
 8014c68:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8014c6c:	f5a3 6332 	sub.w	r3, r3, #2848	; 0xb20
 8014c70:	6812      	ldr	r2, [r2, #0]
 8014c72:	681b      	ldr	r3, [r3, #0]
 8014c74:	429a      	cmp	r2, r3
 8014c76:	dd0a      	ble.n	8014c8e <arm_nn_mat_mult_nt_t_s8+0x5aae>
        result++;
 8014c78:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8014c7c:	f6a3 3314 	subw	r3, r3, #2836	; 0xb14
 8014c80:	f507 624d 	add.w	r2, r7, #3280	; 0xcd0
 8014c84:	f6a2 3214 	subw	r2, r2, #2836	; 0xb14
 8014c88:	6812      	ldr	r2, [r2, #0]
 8014c8a:	3201      	adds	r2, #1
 8014c8c:	601a      	str	r2, [r3, #0]
    return result;
 8014c8e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8014c92:	f6a3 3314 	subw	r3, r3, #2836	; 0xb14
 8014c96:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8014c98:	bf00      	nop
 8014c9a:	f8c7 3c84 	str.w	r3, [r7, #3204]	; 0xc84

            // Add offset
            res00 += dst_offset;
 8014c9e:	f8d7 2c84 	ldr.w	r2, [r7, #3204]	; 0xc84
 8014ca2:	f8d7 3d08 	ldr.w	r3, [r7, #3336]	; 0xd08
 8014ca6:	4413      	add	r3, r2
 8014ca8:	f8c7 3c84 	str.w	r3, [r7, #3204]	; 0xc84

            // Clamp the result
            res00 = MAX(res00, activation_min);
 8014cac:	f8d7 2c84 	ldr.w	r2, [r7, #3204]	; 0xc84
 8014cb0:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 8014cb4:	4293      	cmp	r3, r2
 8014cb6:	bfb8      	it	lt
 8014cb8:	4613      	movlt	r3, r2
 8014cba:	f8c7 3c84 	str.w	r3, [r7, #3204]	; 0xc84
            res00 = MIN(res00, activation_max);
 8014cbe:	f8d7 2c84 	ldr.w	r2, [r7, #3204]	; 0xc84
 8014cc2:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	; 0xd10
 8014cc6:	4293      	cmp	r3, r2
 8014cc8:	bfa8      	it	ge
 8014cca:	4613      	movge	r3, r2
 8014ccc:	f8c7 3c84 	str.w	r3, [r7, #3204]	; 0xc84

            dst_ptr[0] = (int8_t)res00;
 8014cd0:	f8d7 3c84 	ldr.w	r3, [r7, #3204]	; 0xc84
 8014cd4:	b25a      	sxtb	r2, r3
 8014cd6:	f8d7 3c90 	ldr.w	r3, [r7, #3216]	; 0xc90
 8014cda:	701a      	strb	r2, [r3, #0]
            dst_ptr += rhs_rows;
 8014cdc:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 8014ce0:	f8d7 2c90 	ldr.w	r2, [r7, #3216]	; 0xc90
 8014ce4:	4413      	add	r3, r2
 8014ce6:	f8c7 3c90 	str.w	r3, [r7, #3216]	; 0xc90
        for (int32_t lhs_rows_idx = 0; lhs_rows_idx < lhs_rows; ++lhs_rows_idx)
 8014cea:	f8d7 3c8c 	ldr.w	r3, [r7, #3212]	; 0xc8c
 8014cee:	3301      	adds	r3, #1
 8014cf0:	f8c7 3c8c 	str.w	r3, [r7, #3212]	; 0xc8c
 8014cf4:	f8d7 2c8c 	ldr.w	r2, [r7, #3212]	; 0xc8c
 8014cf8:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	; 0xcf8
 8014cfc:	429a      	cmp	r2, r3
 8014cfe:	f6ff ae44 	blt.w	801498a <arm_nn_mat_mult_nt_t_s8+0x57aa>
            dst_ptr[0] = (int8_t)res00;
            dst_ptr += rhs_rows;
        }
    }
#endif
    return ARM_CMSIS_NN_SUCCESS;
 8014d02:	2300      	movs	r3, #0
}
 8014d04:	4618      	mov	r0, r3
 8014d06:	f507 674d 	add.w	r7, r7, #3280	; 0xcd0
 8014d0a:	46bd      	mov	sp, r7
 8014d0c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8014d10:	4770      	bx	lr

08014d12 <arm_nn_vec_mat_mult_t_s8>:
                                             const int32_t rhs_cols,
                                             const int32_t rhs_rows,
                                             const int32_t activation_min,
                                             const int32_t activation_max,
                                             const int32_t address_offset)
{
 8014d12:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8014d16:	f5ad 7d36 	sub.w	sp, sp, #728	; 0x2d8
 8014d1a:	af00      	add	r7, sp, #0
 8014d1c:	f507 7436 	add.w	r4, r7, #728	; 0x2d8
 8014d20:	f5a4 7421 	sub.w	r4, r4, #644	; 0x284
 8014d24:	6020      	str	r0, [r4, #0]
 8014d26:	f507 7036 	add.w	r0, r7, #728	; 0x2d8
 8014d2a:	f5a0 7022 	sub.w	r0, r0, #648	; 0x288
 8014d2e:	6001      	str	r1, [r0, #0]
 8014d30:	f507 7136 	add.w	r1, r7, #728	; 0x2d8
 8014d34:	f5a1 7123 	sub.w	r1, r1, #652	; 0x28c
 8014d38:	600a      	str	r2, [r1, #0]
 8014d3a:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 8014d3e:	f5a2 7224 	sub.w	r2, r2, #656	; 0x290
 8014d42:	6013      	str	r3, [r2, #0]
    }

#elif defined(ARM_MATH_DSP)
    (void)kernel_sum;

    const int32_t row_loop_cnt = rhs_rows / 2;
 8014d44:	f8d7 2310 	ldr.w	r2, [r7, #784]	; 0x310
 8014d48:	0fd3      	lsrs	r3, r2, #31
 8014d4a:	4413      	add	r3, r2
 8014d4c:	105b      	asrs	r3, r3, #1
 8014d4e:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
    const int16_t lhs_offset_s16 = (int16_t)lhs_offset;
 8014d52:	f8d7 32fc 	ldr.w	r3, [r7, #764]	; 0x2fc
 8014d56:	f8a7 32b2 	strh.w	r3, [r7, #690]	; 0x2b2
    const uint32_t lhs_offset_s16x2 = PKHBT(lhs_offset_s16, lhs_offset_s16, 16);
 8014d5a:	f9b7 32b2 	ldrsh.w	r3, [r7, #690]	; 0x2b2
 8014d5e:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 8014d62:	f9b7 32b2 	ldrsh.w	r3, [r7, #690]	; 0x2b2
 8014d66:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
 8014d6a:	f8d7 22ac 	ldr.w	r2, [r7, #684]	; 0x2ac
 8014d6e:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 8014d72:	eac2 4303 	pkhbt	r3, r2, r3, lsl #16
 8014d76:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
 8014d7a:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8014d7e:	f8c7 32a0 	str.w	r3, [r7, #672]	; 0x2a0

    for (int32_t i = 0; i < row_loop_cnt; i++)
 8014d82:	2300      	movs	r3, #0
 8014d84:	f8c7 32d4 	str.w	r3, [r7, #724]	; 0x2d4
 8014d88:	f000 bd23 	b.w	80157d2 <arm_nn_vec_mat_mult_t_s8+0xac0>
    {
        int32_t acc_0 = 0;
 8014d8c:	2300      	movs	r3, #0
 8014d8e:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
        int32_t acc_1 = 0;
 8014d92:	2300      	movs	r3, #0
 8014d94:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
        if (bias)
 8014d98:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8014d9c:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8014da0:	681b      	ldr	r3, [r3, #0]
 8014da2:	2b00      	cmp	r3, #0
 8014da4:	d01b      	beq.n	8014dde <arm_nn_vec_mat_mult_t_s8+0xcc>
        {
            acc_0 = *bias++;
 8014da6:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8014daa:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8014dae:	6819      	ldr	r1, [r3, #0]
 8014db0:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8014db4:	f5a3 7224 	sub.w	r2, r3, #656	; 0x290
 8014db8:	1d0b      	adds	r3, r1, #4
 8014dba:	6013      	str	r3, [r2, #0]
 8014dbc:	680b      	ldr	r3, [r1, #0]
 8014dbe:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
            acc_1 = *bias++;
 8014dc2:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8014dc6:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8014dca:	6819      	ldr	r1, [r3, #0]
 8014dcc:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8014dd0:	f5a3 7224 	sub.w	r2, r3, #656	; 0x290
 8014dd4:	1d0b      	adds	r3, r1, #4
 8014dd6:	6013      	str	r3, [r2, #0]
 8014dd8:	680b      	ldr	r3, [r1, #0]
 8014dda:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
        }

        const int32_t col_loop_cnt = rhs_cols / 4;
 8014dde:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
 8014de2:	2b00      	cmp	r3, #0
 8014de4:	da00      	bge.n	8014de8 <arm_nn_vec_mat_mult_t_s8+0xd6>
 8014de6:	3303      	adds	r3, #3
 8014de8:	109b      	asrs	r3, r3, #2
 8014dea:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284

        const int8_t *lhs_vec = lhs;
 8014dee:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8014df2:	f5a3 720f 	sub.w	r2, r3, #572	; 0x23c
 8014df6:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8014dfa:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 8014dfe:	681b      	ldr	r3, [r3, #0]
 8014e00:	6013      	str	r3, [r2, #0]
        const int8_t *rhs_0 = rhs;
 8014e02:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8014e06:	f5a3 7210 	sub.w	r2, r3, #576	; 0x240
 8014e0a:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8014e0e:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8014e12:	681b      	ldr	r3, [r3, #0]
 8014e14:	6013      	str	r3, [r2, #0]
        const int8_t *rhs_1 = rhs + rhs_cols;
 8014e16:	f8d7 230c 	ldr.w	r2, [r7, #780]	; 0x30c
 8014e1a:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8014e1e:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8014e22:	681b      	ldr	r3, [r3, #0]
 8014e24:	441a      	add	r2, r3
 8014e26:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8014e2a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8014e2e:	601a      	str	r2, [r3, #0]
        rhs += 2 * rhs_cols;
 8014e30:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
 8014e34:	005b      	lsls	r3, r3, #1
 8014e36:	4619      	mov	r1, r3
 8014e38:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8014e3c:	f5a3 7222 	sub.w	r2, r3, #648	; 0x288
 8014e40:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8014e44:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8014e48:	681b      	ldr	r3, [r3, #0]
 8014e4a:	440b      	add	r3, r1
 8014e4c:	6013      	str	r3, [r2, #0]

        for (int j = col_loop_cnt; j != 0; j--)
 8014e4e:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8014e52:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
 8014e56:	e1ea      	b.n	801522e <arm_nn_vec_mat_mult_t_s8+0x51c>
 8014e58:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8014e5c:	f5a3 7296 	sub.w	r2, r3, #300	; 0x12c
 8014e60:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8014e64:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_s8, 4);
 8014e66:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8014e6a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8014e6e:	681b      	ldr	r3, [r3, #0]
 8014e70:	681b      	ldr	r3, [r3, #0]
 8014e72:	681b      	ldr	r3, [r3, #0]
 8014e74:	461a      	mov	r2, r3
 8014e76:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8014e7a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8014e7e:	601a      	str	r2, [r3, #0]
    *in_s8 += 4;
 8014e80:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8014e84:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8014e88:	681b      	ldr	r3, [r3, #0]
 8014e8a:	681b      	ldr	r3, [r3, #0]
 8014e8c:	1d1a      	adds	r2, r3, #4
 8014e8e:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8014e92:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8014e96:	681b      	ldr	r3, [r3, #0]
 8014e98:	601a      	str	r2, [r3, #0]
    return (val);
 8014e9a:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8014e9e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8014ea2:	681b      	ldr	r3, [r3, #0]
        {
            int32_t vec_0 = arm_nn_read_s8x4_ia(&lhs_vec);
 8014ea4:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
            int32_t vec_1 = SXTAB16_RORn(lhs_offset_s16x2, (uint32_t)vec_0, 8);
 8014ea8:	f8d7 127c 	ldr.w	r1, [r7, #636]	; 0x27c
 8014eac:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8014eb0:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 8014eb4:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 8014eb8:	6013      	str	r3, [r2, #0]
 8014eba:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8014ebe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8014ec2:	6019      	str	r1, [r3, #0]
 8014ec4:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8014ec8:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8014ecc:	2308      	movs	r3, #8
 8014ece:	6013      	str	r3, [r2, #0]
 8014ed0:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8014ed4:	f5a3 728a 	sub.w	r2, r3, #276	; 0x114
 8014ed8:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8014edc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8014ee0:	681b      	ldr	r3, [r3, #0]
 8014ee2:	6013      	str	r3, [r2, #0]
 8014ee4:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8014ee8:	f5a3 728c 	sub.w	r2, r3, #280	; 0x118
 8014eec:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8014ef0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8014ef4:	681b      	ldr	r3, [r3, #0]
 8014ef6:	6013      	str	r3, [r2, #0]
    op2 %= 32U;
 8014ef8:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8014efc:	f5a3 728c 	sub.w	r2, r3, #280	; 0x118
 8014f00:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8014f04:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8014f08:	681b      	ldr	r3, [r3, #0]
 8014f0a:	f003 031f 	and.w	r3, r3, #31
 8014f0e:	6013      	str	r3, [r2, #0]
    if (op2 == 0U)
 8014f10:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8014f14:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8014f18:	681b      	ldr	r3, [r3, #0]
 8014f1a:	2b00      	cmp	r3, #0
 8014f1c:	d105      	bne.n	8014f2a <arm_nn_vec_mat_mult_t_s8+0x218>
        return op1;
 8014f1e:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8014f22:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8014f26:	6819      	ldr	r1, [r3, #0]
 8014f28:	e00b      	b.n	8014f42 <arm_nn_vec_mat_mult_t_s8+0x230>
    return (op1 >> op2) | (op1 << (32U - op2));
 8014f2a:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8014f2e:	f5a3 728a 	sub.w	r2, r3, #276	; 0x114
 8014f32:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8014f36:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8014f3a:	6812      	ldr	r2, [r2, #0]
 8014f3c:	681b      	ldr	r3, [r3, #0]
 8014f3e:	fa62 f103 	ror.w	r1, r2, r3
 8014f42:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8014f46:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 8014f4a:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8014f4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014f52:	681b      	ldr	r3, [r3, #0]
 8014f54:	6013      	str	r3, [r2, #0]
 8014f56:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8014f5a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8014f5e:	6019      	str	r1, [r3, #0]
    __ASM("sxtab16 %0, %1, %2" : "=r"(result) : "r"(op1), "r"(op2));
 8014f60:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8014f64:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8014f68:	681a      	ldr	r2, [r3, #0]
 8014f6a:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8014f6e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8014f72:	681b      	ldr	r3, [r3, #0]
 8014f74:	fa22 f283 	sxtab16	r2, r2, r3
 8014f78:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8014f7c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8014f80:	601a      	str	r2, [r3, #0]
    return (result);
 8014f82:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8014f86:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8014f8a:	681a      	ldr	r2, [r3, #0]
    {
        __ASM volatile("sxtab16 %0, %1, %2, ROR %3" : "=r"(result) : "r"(op1), "r"(op2), "i"(rotate));
    }
    else
    {
        result = SXTAB16(op1, ROR(op2, rotate));
 8014f8c:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8014f90:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8014f94:	601a      	str	r2, [r3, #0]
    }
    return result;
 8014f96:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8014f9a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8014f9e:	681b      	ldr	r3, [r3, #0]
 8014fa0:	f8c7 3278 	str.w	r3, [r7, #632]	; 0x278

            vec_0 = SXTAB16(lhs_offset_s16x2, vec_0);
 8014fa4:	f8d7 227c 	ldr.w	r2, [r7, #636]	; 0x27c
 8014fa8:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 8014fac:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8014fb0:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8014fb4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8014fb8:	601a      	str	r2, [r3, #0]
    __ASM("sxtab16 %0, %1, %2" : "=r"(result) : "r"(op1), "r"(op2));
 8014fba:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8014fbe:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8014fc2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8014fc6:	681b      	ldr	r3, [r3, #0]
 8014fc8:	fa22 f283 	sxtab16	r2, r2, r3
 8014fcc:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8014fd0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014fd4:	601a      	str	r2, [r3, #0]
    return (result);
 8014fd6:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8014fda:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014fde:	681b      	ldr	r3, [r3, #0]
 8014fe0:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
 8014fe4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8014fe8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
    memcpy(&val, *in_s8, 4);
 8014fec:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8014ff0:	681b      	ldr	r3, [r3, #0]
 8014ff2:	681b      	ldr	r3, [r3, #0]
 8014ff4:	461a      	mov	r2, r3
 8014ff6:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8014ffa:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8014ffe:	601a      	str	r2, [r3, #0]
    *in_s8 += 4;
 8015000:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8015004:	681b      	ldr	r3, [r3, #0]
 8015006:	1d1a      	adds	r2, r3, #4
 8015008:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 801500c:	601a      	str	r2, [r3, #0]
    return (val);
 801500e:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015012:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8015016:	681b      	ldr	r3, [r3, #0]

            int32_t ker_0 = arm_nn_read_s8x4_ia(&rhs_0);
 8015018:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
            int32_t ker_1 = SXTB16_RORn((uint32_t)ker_0, 8);
 801501c:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8015020:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 8015024:	2308      	movs	r3, #8
 8015026:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 801502a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801502e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 8015032:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8015036:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    op2 %= 32U;
 801503a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801503e:	f003 031f 	and.w	r3, r3, #31
 8015042:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    if (op2 == 0U)
 8015046:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801504a:	2b00      	cmp	r3, #0
 801504c:	d102      	bne.n	8015054 <arm_nn_vec_mat_mult_t_s8+0x342>
        return op1;
 801504e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8015052:	e005      	b.n	8015060 <arm_nn_vec_mat_mult_t_s8+0x34e>
    return (op1 >> op2) | (op1 << (32U - op2));
 8015054:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 8015058:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801505c:	fa62 f303 	ror.w	r3, r2, r3
 8015060:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    __ASM("sxtb16 %0, %1" : "=r"(result) : "r"(op1));
 8015064:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8015068:	fa2f f383 	sxtb16	r3, r3
 801506c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
    return (result);
 8015070:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
        result = SXTB16(ROR(op1, rotate));
 8015074:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
    return result;
 8015078:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 801507c:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270
            ker_0 = SXTB16(ker_0);
 8015080:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8015084:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
    __ASM("sxtb16 %0, %1" : "=r"(result) : "r"(op1));
 8015088:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 801508c:	fa2f f383 	sxtb16	r3, r3
 8015090:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
    return (result);
 8015094:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8015098:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274

            acc_0 = SMLAD(ker_1, vec_1, acc_0);
 801509c:	f8d7 1270 	ldr.w	r1, [r7, #624]	; 0x270
 80150a0:	f8d7 2278 	ldr.w	r2, [r7, #632]	; 0x278
 80150a4:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 80150a8:	f8c7 1214 	str.w	r1, [r7, #532]	; 0x214
 80150ac:	f8c7 2210 	str.w	r2, [r7, #528]	; 0x210
 80150b0:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
    __ASM volatile("smlad %0, %1, %2, %3" : "=r"(result) : "r"(op1), "r"(op2), "r"(op3));
 80150b4:	f8d7 1214 	ldr.w	r1, [r7, #532]	; 0x214
 80150b8:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 80150bc:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80150c0:	fb21 3302 	smlad	r3, r1, r2, r3
 80150c4:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
    return (result);
 80150c8:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80150cc:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
            acc_0 = SMLAD(ker_0, vec_0, acc_0);
 80150d0:	f8d7 1274 	ldr.w	r1, [r7, #628]	; 0x274
 80150d4:	f8d7 227c 	ldr.w	r2, [r7, #636]	; 0x27c
 80150d8:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 80150dc:	f8c7 1224 	str.w	r1, [r7, #548]	; 0x224
 80150e0:	f8c7 2220 	str.w	r2, [r7, #544]	; 0x220
 80150e4:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
    __ASM volatile("smlad %0, %1, %2, %3" : "=r"(result) : "r"(op1), "r"(op2), "r"(op3));
 80150e8:	f8d7 1224 	ldr.w	r1, [r7, #548]	; 0x224
 80150ec:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 80150f0:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80150f4:	fb21 3302 	smlad	r3, r1, r2, r3
 80150f8:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
    return (result);
 80150fc:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8015100:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
 8015104:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8015108:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
    memcpy(&val, *in_s8, 4);
 801510c:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8015110:	681b      	ldr	r3, [r3, #0]
 8015112:	681b      	ldr	r3, [r3, #0]
 8015114:	461a      	mov	r2, r3
 8015116:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801511a:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 801511e:	601a      	str	r2, [r3, #0]
    *in_s8 += 4;
 8015120:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8015124:	681b      	ldr	r3, [r3, #0]
 8015126:	1d1a      	adds	r2, r3, #4
 8015128:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 801512c:	601a      	str	r2, [r3, #0]
    return (val);
 801512e:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015132:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8015136:	681b      	ldr	r3, [r3, #0]

            ker_0 = arm_nn_read_s8x4_ia(&rhs_1);
 8015138:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
            ker_1 = SXTB16_RORn((uint32_t)ker_0, 8);
 801513c:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8015140:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8015144:	2308      	movs	r3, #8
 8015146:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
 801514a:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 801514e:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 8015152:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8015156:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
    op2 %= 32U;
 801515a:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 801515e:	f003 031f 	and.w	r3, r3, #31
 8015162:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
    if (op2 == 0U)
 8015166:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 801516a:	2b00      	cmp	r3, #0
 801516c:	d102      	bne.n	8015174 <arm_nn_vec_mat_mult_t_s8+0x462>
        return op1;
 801516e:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8015172:	e005      	b.n	8015180 <arm_nn_vec_mat_mult_t_s8+0x46e>
    return (op1 >> op2) | (op1 << (32U - op2));
 8015174:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 8015178:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 801517c:	fa62 f303 	ror.w	r3, r2, r3
 8015180:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
    __ASM("sxtb16 %0, %1" : "=r"(result) : "r"(op1));
 8015184:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8015188:	fa2f f383 	sxtb16	r3, r3
 801518c:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
    return (result);
 8015190:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
        result = SXTB16(ROR(op1, rotate));
 8015194:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
    return result;
 8015198:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 801519c:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270
            ker_0 = SXTB16(ker_0);
 80151a0:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 80151a4:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
    __ASM("sxtb16 %0, %1" : "=r"(result) : "r"(op1));
 80151a8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80151ac:	fa2f f383 	sxtb16	r3, r3
 80151b0:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
    return (result);
 80151b4:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80151b8:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274

            acc_1 = SMLAD(ker_1, vec_1, acc_1);
 80151bc:	f8d7 1270 	ldr.w	r1, [r7, #624]	; 0x270
 80151c0:	f8d7 2278 	ldr.w	r2, [r7, #632]	; 0x278
 80151c4:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 80151c8:	f8c7 125c 	str.w	r1, [r7, #604]	; 0x25c
 80151cc:	f8c7 2258 	str.w	r2, [r7, #600]	; 0x258
 80151d0:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
    __ASM volatile("smlad %0, %1, %2, %3" : "=r"(result) : "r"(op1), "r"(op2), "r"(op3));
 80151d4:	f8d7 125c 	ldr.w	r1, [r7, #604]	; 0x25c
 80151d8:	f8d7 2258 	ldr.w	r2, [r7, #600]	; 0x258
 80151dc:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80151e0:	fb21 3302 	smlad	r3, r1, r2, r3
 80151e4:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
    return (result);
 80151e8:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80151ec:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
            acc_1 = SMLAD(ker_0, vec_0, acc_1);
 80151f0:	f8d7 1274 	ldr.w	r1, [r7, #628]	; 0x274
 80151f4:	f8d7 227c 	ldr.w	r2, [r7, #636]	; 0x27c
 80151f8:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 80151fc:	f8c7 126c 	str.w	r1, [r7, #620]	; 0x26c
 8015200:	f8c7 2268 	str.w	r2, [r7, #616]	; 0x268
 8015204:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
    __ASM volatile("smlad %0, %1, %2, %3" : "=r"(result) : "r"(op1), "r"(op2), "r"(op3));
 8015208:	f8d7 126c 	ldr.w	r1, [r7, #620]	; 0x26c
 801520c:	f8d7 2268 	ldr.w	r2, [r7, #616]	; 0x268
 8015210:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8015214:	fb21 3302 	smlad	r3, r1, r2, r3
 8015218:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
    return (result);
 801521c:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8015220:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
        for (int j = col_loop_cnt; j != 0; j--)
 8015224:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 8015228:	3b01      	subs	r3, #1
 801522a:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
 801522e:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 8015232:	2b00      	cmp	r3, #0
 8015234:	f47f ae10 	bne.w	8014e58 <arm_nn_vec_mat_mult_t_s8+0x146>
        }

        for (int k = col_loop_cnt * 4; k < rhs_cols; k++)
 8015238:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 801523c:	009b      	lsls	r3, r3, #2
 801523e:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
 8015242:	e054      	b.n	80152ee <arm_nn_vec_mat_mult_t_s8+0x5dc>
        {
            const int32_t lhs_temp = (*lhs_vec + lhs_offset);
 8015244:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015248:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 801524c:	681b      	ldr	r3, [r3, #0]
 801524e:	f993 3000 	ldrsb.w	r3, [r3]
 8015252:	461a      	mov	r2, r3
 8015254:	f8d7 32fc 	ldr.w	r3, [r7, #764]	; 0x2fc
 8015258:	4413      	add	r3, r2
 801525a:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
            lhs_vec++;
 801525e:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015262:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8015266:	681b      	ldr	r3, [r3, #0]
 8015268:	1c5a      	adds	r2, r3, #1
 801526a:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801526e:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8015272:	601a      	str	r2, [r3, #0]
            acc_0 += lhs_temp * (*rhs_0);
 8015274:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015278:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 801527c:	681b      	ldr	r3, [r3, #0]
 801527e:	f993 3000 	ldrsb.w	r3, [r3]
 8015282:	461a      	mov	r2, r3
 8015284:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 8015288:	fb03 f202 	mul.w	r2, r3, r2
 801528c:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 8015290:	4413      	add	r3, r2
 8015292:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
            rhs_0++;
 8015296:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801529a:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 801529e:	681b      	ldr	r3, [r3, #0]
 80152a0:	1c5a      	adds	r2, r3, #1
 80152a2:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80152a6:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 80152aa:	601a      	str	r2, [r3, #0]
            acc_1 += lhs_temp * (*rhs_1);
 80152ac:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80152b0:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80152b4:	681b      	ldr	r3, [r3, #0]
 80152b6:	f993 3000 	ldrsb.w	r3, [r3]
 80152ba:	461a      	mov	r2, r3
 80152bc:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 80152c0:	fb03 f202 	mul.w	r2, r3, r2
 80152c4:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 80152c8:	4413      	add	r3, r2
 80152ca:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
            rhs_1++;
 80152ce:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80152d2:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80152d6:	681b      	ldr	r3, [r3, #0]
 80152d8:	1c5a      	adds	r2, r3, #1
 80152da:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80152de:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80152e2:	601a      	str	r2, [r3, #0]
        for (int k = col_loop_cnt * 4; k < rhs_cols; k++)
 80152e4:	f8d7 32c4 	ldr.w	r3, [r7, #708]	; 0x2c4
 80152e8:	3301      	adds	r3, #1
 80152ea:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
 80152ee:	f8d7 22c4 	ldr.w	r2, [r7, #708]	; 0x2c4
 80152f2:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
 80152f6:	429a      	cmp	r2, r3
 80152f8:	dba4      	blt.n	8015244 <arm_nn_vec_mat_mult_t_s8+0x532>
 80152fa:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80152fe:	f5a3 72b0 	sub.w	r2, r3, #352	; 0x160
 8015302:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 8015306:	6013      	str	r3, [r2, #0]
 8015308:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801530c:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 8015310:	f8d7 3304 	ldr.w	r3, [r7, #772]	; 0x304
 8015314:	6013      	str	r3, [r2, #0]
 8015316:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801531a:	f5a3 72b4 	sub.w	r2, r3, #360	; 0x168
 801531e:	f8d7 3308 	ldr.w	r3, [r7, #776]	; 0x308
 8015322:	6013      	str	r3, [r2, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8015324:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015328:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 801532c:	681b      	ldr	r3, [r3, #0]
 801532e:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8015332:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015336:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 801533a:	681b      	ldr	r3, [r3, #0]
 801533c:	fa03 f202 	lsl.w	r2, r3, r2
 8015340:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015344:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8015348:	601a      	str	r2, [r3, #0]
 801534a:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801534e:	f5a3 72b8 	sub.w	r2, r3, #368	; 0x170
 8015352:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015356:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 801535a:	681b      	ldr	r3, [r3, #0]
 801535c:	6013      	str	r3, [r2, #0]
    int32_t result = 0;
 801535e:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015362:	f5a3 72ba 	sub.w	r2, r3, #372	; 0x174
 8015366:	2300      	movs	r3, #0
 8015368:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 801536a:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801536e:	f5a3 7214 	sub.w	r2, r3, #592	; 0x250
 8015372:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8015376:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 8015378:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801537c:	f5a3 7214 	sub.w	r2, r3, #592	; 0x250
 8015380:	2300      	movs	r3, #0
 8015382:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (int64_t)m1 * m2;
 8015384:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8015388:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801538c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8015390:	681b      	ldr	r3, [r3, #0]
 8015392:	17da      	asrs	r2, r3, #31
 8015394:	633b      	str	r3, [r7, #48]	; 0x30
 8015396:	637a      	str	r2, [r7, #52]	; 0x34
 8015398:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801539c:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80153a0:	681b      	ldr	r3, [r3, #0]
 80153a2:	17da      	asrs	r2, r3, #31
 80153a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80153a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80153a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80153aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80153ac:	fb02 f203 	mul.w	r2, r2, r3
 80153b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80153b2:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 80153b4:	fb04 f303 	mul.w	r3, r4, r3
 80153b8:	4413      	add	r3, r2
 80153ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80153bc:	6abc      	ldr	r4, [r7, #40]	; 0x28
 80153be:	fba2 5604 	umull	r5, r6, r2, r4
 80153c2:	4433      	add	r3, r6
 80153c4:	461e      	mov	r6, r3
 80153c6:	1943      	adds	r3, r0, r5
 80153c8:	61bb      	str	r3, [r7, #24]
 80153ca:	eb41 0306 	adc.w	r3, r1, r6
 80153ce:	61fb      	str	r3, [r7, #28]
 80153d0:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80153d4:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
    result = (int32_t)(mult.long_long >> 31);
 80153d8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80153dc:	f04f 0000 	mov.w	r0, #0
 80153e0:	f04f 0100 	mov.w	r1, #0
 80153e4:	0fd0      	lsrs	r0, r2, #31
 80153e6:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80153ea:	17d9      	asrs	r1, r3, #31
 80153ec:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80153f0:	f5a3 72ba 	sub.w	r2, r3, #372	; 0x174
 80153f4:	4603      	mov	r3, r0
 80153f6:	6013      	str	r3, [r2, #0]
    return result;
 80153f8:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80153fc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8015400:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8015402:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015406:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 801540a:	681b      	ldr	r3, [r3, #0]
 801540c:	2b00      	cmp	r3, #0
 801540e:	dc06      	bgt.n	801541e <arm_nn_vec_mat_mult_t_s8+0x70c>
 8015410:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015414:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8015418:	681b      	ldr	r3, [r3, #0]
 801541a:	425a      	negs	r2, r3
 801541c:	e000      	b.n	8015420 <arm_nn_vec_mat_mult_t_s8+0x70e>
 801541e:	2200      	movs	r2, #0
 8015420:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015424:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8015428:	6019      	str	r1, [r3, #0]
 801542a:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801542e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8015432:	601a      	str	r2, [r3, #0]
    int32_t result = 0;
 8015434:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015438:	f5a3 72c0 	sub.w	r2, r3, #384	; 0x180
 801543c:	2300      	movs	r3, #0
 801543e:	6013      	str	r3, [r2, #0]
    const int32_t remainder_mask = (1 << exponent) - 1;
 8015440:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015444:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8015448:	2201      	movs	r2, #1
 801544a:	681b      	ldr	r3, [r3, #0]
 801544c:	fa02 f103 	lsl.w	r1, r2, r3
 8015450:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015454:	f5a3 72c2 	sub.w	r2, r3, #388	; 0x184
 8015458:	1e4b      	subs	r3, r1, #1
 801545a:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 801545c:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015460:	f5a3 71c4 	sub.w	r1, r3, #392	; 0x188
 8015464:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015468:	f5a3 72bc 	sub.w	r2, r3, #376	; 0x178
 801546c:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015470:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8015474:	6812      	ldr	r2, [r2, #0]
 8015476:	681b      	ldr	r3, [r3, #0]
 8015478:	4013      	ands	r3, r2
 801547a:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 801547c:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015480:	f5a3 71c0 	sub.w	r1, r3, #384	; 0x180
 8015484:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015488:	f5a3 72bc 	sub.w	r2, r3, #376	; 0x178
 801548c:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015490:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8015494:	6812      	ldr	r2, [r2, #0]
 8015496:	681b      	ldr	r3, [r3, #0]
 8015498:	fa42 f303 	asr.w	r3, r2, r3
 801549c:	600b      	str	r3, [r1, #0]
    int32_t threshold = remainder_mask >> 1;
 801549e:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80154a2:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 80154a6:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80154aa:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80154ae:	681b      	ldr	r3, [r3, #0]
 80154b0:	105b      	asrs	r3, r3, #1
 80154b2:	6013      	str	r3, [r2, #0]
    if (result < 0)
 80154b4:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80154b8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80154bc:	681b      	ldr	r3, [r3, #0]
 80154be:	2b00      	cmp	r3, #0
 80154c0:	da0a      	bge.n	80154d8 <arm_nn_vec_mat_mult_t_s8+0x7c6>
        threshold++;
 80154c2:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80154c6:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 80154ca:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80154ce:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80154d2:	681b      	ldr	r3, [r3, #0]
 80154d4:	3301      	adds	r3, #1
 80154d6:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 80154d8:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80154dc:	f5a3 72c4 	sub.w	r2, r3, #392	; 0x188
 80154e0:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80154e4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80154e8:	6812      	ldr	r2, [r2, #0]
 80154ea:	681b      	ldr	r3, [r3, #0]
 80154ec:	429a      	cmp	r2, r3
 80154ee:	dd0a      	ble.n	8015506 <arm_nn_vec_mat_mult_t_s8+0x7f4>
        result++;
 80154f0:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80154f4:	f5a3 72c0 	sub.w	r2, r3, #384	; 0x180
 80154f8:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80154fc:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8015500:	681b      	ldr	r3, [r3, #0]
 8015502:	3301      	adds	r3, #1
 8015504:	6013      	str	r3, [r2, #0]
    return result;
 8015506:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801550a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 801550e:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8015510:	bf00      	nop
        }

        acc_0 = arm_nn_requantize(acc_0, dst_multiplier, dst_shift);
 8015512:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
 8015516:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801551a:	f5a3 7298 	sub.w	r2, r3, #304	; 0x130
 801551e:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 8015522:	6013      	str	r3, [r2, #0]
 8015524:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015528:	f5a3 729a 	sub.w	r2, r3, #308	; 0x134
 801552c:	f8d7 3304 	ldr.w	r3, [r7, #772]	; 0x304
 8015530:	6013      	str	r3, [r2, #0]
 8015532:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015536:	f5a3 729c 	sub.w	r2, r3, #312	; 0x138
 801553a:	f8d7 3308 	ldr.w	r3, [r7, #776]	; 0x308
 801553e:	6013      	str	r3, [r2, #0]
 8015540:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015544:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8015548:	681b      	ldr	r3, [r3, #0]
 801554a:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 801554e:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015552:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015556:	681b      	ldr	r3, [r3, #0]
 8015558:	fa03 f202 	lsl.w	r2, r3, r2
 801555c:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015560:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8015564:	601a      	str	r2, [r3, #0]
 8015566:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801556a:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 801556e:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015572:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8015576:	681b      	ldr	r3, [r3, #0]
 8015578:	6013      	str	r3, [r2, #0]
    int32_t result = 0;
 801557a:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801557e:	f5a3 72a2 	sub.w	r2, r3, #324	; 0x144
 8015582:	2300      	movs	r3, #0
 8015584:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 8015586:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801558a:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 801558e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8015592:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 8015594:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015598:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 801559c:	2300      	movs	r3, #0
 801559e:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (int64_t)m1 * m2;
 80155a0:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80155a4:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80155a8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80155ac:	681b      	ldr	r3, [r3, #0]
 80155ae:	17da      	asrs	r2, r3, #31
 80155b0:	643b      	str	r3, [r7, #64]	; 0x40
 80155b2:	647a      	str	r2, [r7, #68]	; 0x44
 80155b4:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80155b8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80155bc:	681b      	ldr	r3, [r3, #0]
 80155be:	17da      	asrs	r2, r3, #31
 80155c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80155c2:	63fa      	str	r2, [r7, #60]	; 0x3c
 80155c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80155c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80155c8:	fb02 f203 	mul.w	r2, r2, r3
 80155cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80155ce:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 80155d0:	fb04 f303 	mul.w	r3, r4, r3
 80155d4:	4413      	add	r3, r2
 80155d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80155d8:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 80155da:	fba2 ab04 	umull	sl, fp, r2, r4
 80155de:	445b      	add	r3, fp
 80155e0:	469b      	mov	fp, r3
 80155e2:	eb10 030a 	adds.w	r3, r0, sl
 80155e6:	623b      	str	r3, [r7, #32]
 80155e8:	eb41 030b 	adc.w	r3, r1, fp
 80155ec:	627b      	str	r3, [r7, #36]	; 0x24
 80155ee:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80155f2:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
    result = (int32_t)(mult.long_long >> 31);
 80155f6:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80155fa:	f04f 0000 	mov.w	r0, #0
 80155fe:	f04f 0100 	mov.w	r1, #0
 8015602:	0fd0      	lsrs	r0, r2, #31
 8015604:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8015608:	17d9      	asrs	r1, r3, #31
 801560a:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801560e:	f5a3 72a2 	sub.w	r2, r3, #324	; 0x144
 8015612:	4603      	mov	r3, r0
 8015614:	6013      	str	r3, [r2, #0]
    return result;
 8015616:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801561a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 801561e:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8015620:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015624:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8015628:	681b      	ldr	r3, [r3, #0]
 801562a:	2b00      	cmp	r3, #0
 801562c:	dc06      	bgt.n	801563c <arm_nn_vec_mat_mult_t_s8+0x92a>
 801562e:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015632:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8015636:	681b      	ldr	r3, [r3, #0]
 8015638:	425a      	negs	r2, r3
 801563a:	e000      	b.n	801563e <arm_nn_vec_mat_mult_t_s8+0x92c>
 801563c:	2200      	movs	r2, #0
 801563e:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015642:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8015646:	6019      	str	r1, [r3, #0]
 8015648:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801564c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8015650:	601a      	str	r2, [r3, #0]
    int32_t result = 0;
 8015652:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015656:	f5a3 72a8 	sub.w	r2, r3, #336	; 0x150
 801565a:	2300      	movs	r3, #0
 801565c:	6013      	str	r3, [r2, #0]
    const int32_t remainder_mask = (1 << exponent) - 1;
 801565e:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015662:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8015666:	2201      	movs	r2, #1
 8015668:	681b      	ldr	r3, [r3, #0]
 801566a:	fa02 f103 	lsl.w	r1, r2, r3
 801566e:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015672:	f5a3 72aa 	sub.w	r2, r3, #340	; 0x154
 8015676:	1e4b      	subs	r3, r1, #1
 8015678:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 801567a:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801567e:	f5a3 71ac 	sub.w	r1, r3, #344	; 0x158
 8015682:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015686:	f5a3 72a4 	sub.w	r2, r3, #328	; 0x148
 801568a:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801568e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8015692:	6812      	ldr	r2, [r2, #0]
 8015694:	681b      	ldr	r3, [r3, #0]
 8015696:	4013      	ands	r3, r2
 8015698:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 801569a:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801569e:	f5a3 71a8 	sub.w	r1, r3, #336	; 0x150
 80156a2:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80156a6:	f5a3 72a4 	sub.w	r2, r3, #328	; 0x148
 80156aa:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80156ae:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80156b2:	6812      	ldr	r2, [r2, #0]
 80156b4:	681b      	ldr	r3, [r3, #0]
 80156b6:	fa42 f303 	asr.w	r3, r2, r3
 80156ba:	600b      	str	r3, [r1, #0]
    int32_t threshold = remainder_mask >> 1;
 80156bc:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80156c0:	f5a3 72ae 	sub.w	r2, r3, #348	; 0x15c
 80156c4:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80156c8:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80156cc:	681b      	ldr	r3, [r3, #0]
 80156ce:	105b      	asrs	r3, r3, #1
 80156d0:	6013      	str	r3, [r2, #0]
    if (result < 0)
 80156d2:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80156d6:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80156da:	681b      	ldr	r3, [r3, #0]
 80156dc:	2b00      	cmp	r3, #0
 80156de:	da0a      	bge.n	80156f6 <arm_nn_vec_mat_mult_t_s8+0x9e4>
        threshold++;
 80156e0:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80156e4:	f5a3 72ae 	sub.w	r2, r3, #348	; 0x15c
 80156e8:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80156ec:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80156f0:	681b      	ldr	r3, [r3, #0]
 80156f2:	3301      	adds	r3, #1
 80156f4:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 80156f6:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80156fa:	f5a3 72ac 	sub.w	r2, r3, #344	; 0x158
 80156fe:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015702:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8015706:	6812      	ldr	r2, [r2, #0]
 8015708:	681b      	ldr	r3, [r3, #0]
 801570a:	429a      	cmp	r2, r3
 801570c:	dd0a      	ble.n	8015724 <arm_nn_vec_mat_mult_t_s8+0xa12>
        result++;
 801570e:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015712:	f5a3 72a8 	sub.w	r2, r3, #336	; 0x150
 8015716:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801571a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 801571e:	681b      	ldr	r3, [r3, #0]
 8015720:	3301      	adds	r3, #1
 8015722:	6013      	str	r3, [r2, #0]
    return result;
 8015724:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015728:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 801572c:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801572e:	bf00      	nop
        acc_1 = arm_nn_requantize(acc_1, dst_multiplier, dst_shift);
 8015730:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc

        // Add offset
        acc_0 += dst_offset;
 8015734:	f8d7 22d0 	ldr.w	r2, [r7, #720]	; 0x2d0
 8015738:	f8d7 3300 	ldr.w	r3, [r7, #768]	; 0x300
 801573c:	4413      	add	r3, r2
 801573e:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
        acc_1 += dst_offset;
 8015742:	f8d7 22cc 	ldr.w	r2, [r7, #716]	; 0x2cc
 8015746:	f8d7 3300 	ldr.w	r3, [r7, #768]	; 0x300
 801574a:	4413      	add	r3, r2
 801574c:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
        // Clamp the result
        acc_0 = MAX(acc_0, activation_min);
 8015750:	f8d7 22d0 	ldr.w	r2, [r7, #720]	; 0x2d0
 8015754:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 8015758:	4293      	cmp	r3, r2
 801575a:	bfb8      	it	lt
 801575c:	4613      	movlt	r3, r2
 801575e:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
        acc_0 = MIN(acc_0, activation_max);
 8015762:	f8d7 22d0 	ldr.w	r2, [r7, #720]	; 0x2d0
 8015766:	f8d7 3318 	ldr.w	r3, [r7, #792]	; 0x318
 801576a:	4293      	cmp	r3, r2
 801576c:	bfa8      	it	ge
 801576e:	4613      	movge	r3, r2
 8015770:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
        acc_1 = MAX(acc_1, activation_min);
 8015774:	f8d7 22cc 	ldr.w	r2, [r7, #716]	; 0x2cc
 8015778:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 801577c:	4293      	cmp	r3, r2
 801577e:	bfb8      	it	lt
 8015780:	4613      	movlt	r3, r2
 8015782:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
        acc_1 = MIN(acc_1, activation_max);
 8015786:	f8d7 22cc 	ldr.w	r2, [r7, #716]	; 0x2cc
 801578a:	f8d7 3318 	ldr.w	r3, [r7, #792]	; 0x318
 801578e:	4293      	cmp	r3, r2
 8015790:	bfa8      	it	ge
 8015792:	4613      	movge	r3, r2
 8015794:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
        *dst = (int8_t)acc_0;
 8015798:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 801579c:	b25b      	sxtb	r3, r3
 801579e:	f8d7 22f8 	ldr.w	r2, [r7, #760]	; 0x2f8
 80157a2:	7013      	strb	r3, [r2, #0]
        *(dst + address_offset) = (int8_t)acc_1;
 80157a4:	f8d7 231c 	ldr.w	r2, [r7, #796]	; 0x31c
 80157a8:	f8d7 32f8 	ldr.w	r3, [r7, #760]	; 0x2f8
 80157ac:	441a      	add	r2, r3
 80157ae:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 80157b2:	b25b      	sxtb	r3, r3
 80157b4:	7013      	strb	r3, [r2, #0]
        dst += 2 * address_offset;
 80157b6:	f8d7 331c 	ldr.w	r3, [r7, #796]	; 0x31c
 80157ba:	005b      	lsls	r3, r3, #1
 80157bc:	461a      	mov	r2, r3
 80157be:	f8d7 32f8 	ldr.w	r3, [r7, #760]	; 0x2f8
 80157c2:	4413      	add	r3, r2
 80157c4:	f8c7 32f8 	str.w	r3, [r7, #760]	; 0x2f8
    for (int32_t i = 0; i < row_loop_cnt; i++)
 80157c8:	f8d7 32d4 	ldr.w	r3, [r7, #724]	; 0x2d4
 80157cc:	3301      	adds	r3, #1
 80157ce:	f8c7 32d4 	str.w	r3, [r7, #724]	; 0x2d4
 80157d2:	f8d7 22d4 	ldr.w	r2, [r7, #724]	; 0x2d4
 80157d6:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 80157da:	429a      	cmp	r2, r3
 80157dc:	f6ff aad6 	blt.w	8014d8c <arm_nn_vec_mat_mult_t_s8+0x7a>
    }

    if (rhs_rows & 0x1)
 80157e0:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 80157e4:	f003 0301 	and.w	r3, r3, #1
 80157e8:	2b00      	cmp	r3, #0
 80157ea:	f000 8399 	beq.w	8015f20 <arm_nn_vec_mat_mult_t_s8+0x120e>
    {
        int32_t acc_0 = 0;
 80157ee:	2300      	movs	r3, #0
 80157f0:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
        if (bias)
 80157f4:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80157f8:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80157fc:	681b      	ldr	r3, [r3, #0]
 80157fe:	2b00      	cmp	r3, #0
 8015800:	d00d      	beq.n	801581e <arm_nn_vec_mat_mult_t_s8+0xb0c>
        {
            acc_0 = *bias++;
 8015802:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015806:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 801580a:	681b      	ldr	r3, [r3, #0]
 801580c:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 8015810:	f5a2 7224 	sub.w	r2, r2, #656	; 0x290
 8015814:	1d19      	adds	r1, r3, #4
 8015816:	6011      	str	r1, [r2, #0]
 8015818:	681b      	ldr	r3, [r3, #0]
 801581a:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
        }
        const int32_t col_loop_cnt = rhs_cols / 4;
 801581e:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
 8015822:	2b00      	cmp	r3, #0
 8015824:	da00      	bge.n	8015828 <arm_nn_vec_mat_mult_t_s8+0xb16>
 8015826:	3303      	adds	r3, #3
 8015828:	109b      	asrs	r3, r3, #2
 801582a:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c

        const int8_t *lhs_vec = lhs;
 801582e:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015832:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8015836:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 801583a:	f5a2 7221 	sub.w	r2, r2, #644	; 0x284
 801583e:	6812      	ldr	r2, [r2, #0]
 8015840:	601a      	str	r2, [r3, #0]
        const int8_t *rhs_0 = rhs;
 8015842:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015846:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 801584a:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 801584e:	f5a2 7222 	sub.w	r2, r2, #648	; 0x288
 8015852:	6812      	ldr	r2, [r2, #0]
 8015854:	601a      	str	r2, [r3, #0]

        for (int i = col_loop_cnt; i != 0; i--)
 8015856:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 801585a:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
 801585e:	e1de      	b.n	8015c1e <arm_nn_vec_mat_mult_t_s8+0xf0c>
 8015860:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015864:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8015868:	f107 0270 	add.w	r2, r7, #112	; 0x70
 801586c:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_s8, 4);
 801586e:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015872:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8015876:	681b      	ldr	r3, [r3, #0]
 8015878:	681b      	ldr	r3, [r3, #0]
 801587a:	681b      	ldr	r3, [r3, #0]
 801587c:	461a      	mov	r2, r3
 801587e:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015882:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8015886:	601a      	str	r2, [r3, #0]
    *in_s8 += 4;
 8015888:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801588c:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8015890:	681b      	ldr	r3, [r3, #0]
 8015892:	681b      	ldr	r3, [r3, #0]
 8015894:	1d1a      	adds	r2, r3, #4
 8015896:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801589a:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 801589e:	681b      	ldr	r3, [r3, #0]
 80158a0:	601a      	str	r2, [r3, #0]
    return (val);
 80158a2:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80158a6:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 80158aa:	681b      	ldr	r3, [r3, #0]
        {
            int32_t vec_0 = arm_nn_read_s8x4_ia(&lhs_vec);
 80158ac:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
            int32_t vec_1 = SXTAB16_RORn(lhs_offset_s16x2, (uint32_t)vec_0, 8);
 80158b0:	f8d7 2294 	ldr.w	r2, [r7, #660]	; 0x294
 80158b4:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80158b8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80158bc:	f8d7 12a0 	ldr.w	r1, [r7, #672]	; 0x2a0
 80158c0:	6019      	str	r1, [r3, #0]
 80158c2:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80158c6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80158ca:	601a      	str	r2, [r3, #0]
 80158cc:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80158d0:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80158d4:	2208      	movs	r2, #8
 80158d6:	601a      	str	r2, [r3, #0]
 80158d8:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80158dc:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 80158e0:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 80158e4:	f5a2 72f4 	sub.w	r2, r2, #488	; 0x1e8
 80158e8:	6812      	ldr	r2, [r2, #0]
 80158ea:	601a      	str	r2, [r3, #0]
 80158ec:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80158f0:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 80158f4:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 80158f8:	f5a2 72f6 	sub.w	r2, r2, #492	; 0x1ec
 80158fc:	6812      	ldr	r2, [r2, #0]
 80158fe:	601a      	str	r2, [r3, #0]
    op2 %= 32U;
 8015900:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015904:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8015908:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 801590c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8015910:	6812      	ldr	r2, [r2, #0]
 8015912:	f002 021f 	and.w	r2, r2, #31
 8015916:	601a      	str	r2, [r3, #0]
    if (op2 == 0U)
 8015918:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801591c:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8015920:	681b      	ldr	r3, [r3, #0]
 8015922:	2b00      	cmp	r3, #0
 8015924:	d105      	bne.n	8015932 <arm_nn_vec_mat_mult_t_s8+0xc20>
        return op1;
 8015926:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801592a:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 801592e:	681b      	ldr	r3, [r3, #0]
 8015930:	e00b      	b.n	801594a <arm_nn_vec_mat_mult_t_s8+0xc38>
    return (op1 >> op2) | (op1 << (32U - op2));
 8015932:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015936:	f5a3 72f8 	sub.w	r2, r3, #496	; 0x1f0
 801593a:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801593e:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8015942:	6812      	ldr	r2, [r2, #0]
 8015944:	681b      	ldr	r3, [r3, #0]
 8015946:	fa62 f303 	ror.w	r3, r2, r3
 801594a:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 801594e:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8015952:	f507 7136 	add.w	r1, r7, #728	; 0x2d8
 8015956:	f5a1 71f2 	sub.w	r1, r1, #484	; 0x1e4
 801595a:	6809      	ldr	r1, [r1, #0]
 801595c:	6011      	str	r1, [r2, #0]
 801595e:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 8015962:	f5a2 72fe 	sub.w	r2, r2, #508	; 0x1fc
 8015966:	6013      	str	r3, [r2, #0]
    __ASM("sxtab16 %0, %1, %2" : "=r"(result) : "r"(op1), "r"(op2));
 8015968:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801596c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8015970:	681b      	ldr	r3, [r3, #0]
 8015972:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 8015976:	f5a2 72fe 	sub.w	r2, r2, #508	; 0x1fc
 801597a:	6812      	ldr	r2, [r2, #0]
 801597c:	fa23 f282 	sxtab16	r2, r3, r2
 8015980:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015984:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8015988:	601a      	str	r2, [r3, #0]
    return (result);
 801598a:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801598e:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8015992:	681a      	ldr	r2, [r3, #0]
        result = SXTAB16(op1, ROR(op2, rotate));
 8015994:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015998:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 801599c:	601a      	str	r2, [r3, #0]
    return result;
 801599e:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80159a2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80159a6:	681b      	ldr	r3, [r3, #0]
 80159a8:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
            vec_0 = SXTAB16(lhs_offset_s16x2, vec_0);
 80159ac:	f8d7 2294 	ldr.w	r2, [r7, #660]	; 0x294
 80159b0:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80159b4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80159b8:	f8d7 12a0 	ldr.w	r1, [r7, #672]	; 0x2a0
 80159bc:	6019      	str	r1, [r3, #0]
 80159be:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80159c2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80159c6:	601a      	str	r2, [r3, #0]
    __ASM("sxtab16 %0, %1, %2" : "=r"(result) : "r"(op1), "r"(op2));
 80159c8:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80159cc:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80159d0:	681b      	ldr	r3, [r3, #0]
 80159d2:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 80159d6:	f5a2 72ee 	sub.w	r2, r2, #476	; 0x1dc
 80159da:	6812      	ldr	r2, [r2, #0]
 80159dc:	fa23 f282 	sxtab16	r2, r3, r2
 80159e0:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80159e4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80159e8:	601a      	str	r2, [r3, #0]
    return (result);
 80159ea:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80159ee:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80159f2:	681b      	ldr	r3, [r3, #0]
 80159f4:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 80159f8:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80159fc:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8015a00:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8015a04:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_s8, 4);
 8015a06:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015a0a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8015a0e:	681b      	ldr	r3, [r3, #0]
 8015a10:	681b      	ldr	r3, [r3, #0]
 8015a12:	681b      	ldr	r3, [r3, #0]
 8015a14:	461a      	mov	r2, r3
 8015a16:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015a1a:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8015a1e:	601a      	str	r2, [r3, #0]
    *in_s8 += 4;
 8015a20:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015a24:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8015a28:	681b      	ldr	r3, [r3, #0]
 8015a2a:	681b      	ldr	r3, [r3, #0]
 8015a2c:	1d1a      	adds	r2, r3, #4
 8015a2e:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015a32:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8015a36:	681b      	ldr	r3, [r3, #0]
 8015a38:	601a      	str	r2, [r3, #0]
    return (val);
 8015a3a:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015a3e:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8015a42:	681b      	ldr	r3, [r3, #0]

            int32_t ker_0 = arm_nn_read_s8x4_ia(&rhs_0);
 8015a44:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
            int32_t ker_1 = SXTB16_RORn((uint32_t)ker_0, 8);
 8015a48:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 8015a4c:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015a50:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8015a54:	601a      	str	r2, [r3, #0]
 8015a56:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015a5a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8015a5e:	2208      	movs	r2, #8
 8015a60:	601a      	str	r2, [r3, #0]
 8015a62:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015a66:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8015a6a:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 8015a6e:	f5a2 72dc 	sub.w	r2, r2, #440	; 0x1b8
 8015a72:	6812      	ldr	r2, [r2, #0]
 8015a74:	601a      	str	r2, [r3, #0]
 8015a76:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015a7a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8015a7e:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 8015a82:	f5a2 72de 	sub.w	r2, r2, #444	; 0x1bc
 8015a86:	6812      	ldr	r2, [r2, #0]
 8015a88:	601a      	str	r2, [r3, #0]
    op2 %= 32U;
 8015a8a:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015a8e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8015a92:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 8015a96:	f5a2 72e2 	sub.w	r2, r2, #452	; 0x1c4
 8015a9a:	6812      	ldr	r2, [r2, #0]
 8015a9c:	f002 021f 	and.w	r2, r2, #31
 8015aa0:	601a      	str	r2, [r3, #0]
    if (op2 == 0U)
 8015aa2:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015aa6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8015aaa:	681b      	ldr	r3, [r3, #0]
 8015aac:	2b00      	cmp	r3, #0
 8015aae:	d105      	bne.n	8015abc <arm_nn_vec_mat_mult_t_s8+0xdaa>
        return op1;
 8015ab0:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015ab4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8015ab8:	681b      	ldr	r3, [r3, #0]
 8015aba:	e00b      	b.n	8015ad4 <arm_nn_vec_mat_mult_t_s8+0xdc2>
    return (op1 >> op2) | (op1 << (32U - op2));
 8015abc:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015ac0:	f5a3 72e0 	sub.w	r2, r3, #448	; 0x1c0
 8015ac4:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015ac8:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8015acc:	6812      	ldr	r2, [r2, #0]
 8015ace:	681b      	ldr	r3, [r3, #0]
 8015ad0:	fa62 f303 	ror.w	r3, r2, r3
 8015ad4:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 8015ad8:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8015adc:	6013      	str	r3, [r2, #0]
    __ASM("sxtb16 %0, %1" : "=r"(result) : "r"(op1));
 8015ade:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015ae2:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8015ae6:	681b      	ldr	r3, [r3, #0]
 8015ae8:	fa2f f283 	sxtb16	r2, r3
 8015aec:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015af0:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8015af4:	601a      	str	r2, [r3, #0]
    return (result);
 8015af6:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015afa:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8015afe:	681a      	ldr	r2, [r3, #0]
        result = SXTB16(ROR(op1, rotate));
 8015b00:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015b04:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8015b08:	601a      	str	r2, [r3, #0]
    return result;
 8015b0a:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015b0e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8015b12:	681b      	ldr	r3, [r3, #0]
 8015b14:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
            ker_0 = SXTB16(ker_0);
 8015b18:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 8015b1c:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015b20:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8015b24:	601a      	str	r2, [r3, #0]
    __ASM("sxtb16 %0, %1" : "=r"(result) : "r"(op1));
 8015b26:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015b2a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8015b2e:	681b      	ldr	r3, [r3, #0]
 8015b30:	fa2f f283 	sxtb16	r2, r3
 8015b34:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015b38:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8015b3c:	601a      	str	r2, [r3, #0]
    return (result);
 8015b3e:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015b42:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8015b46:	681b      	ldr	r3, [r3, #0]
 8015b48:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c

            acc_0 = SMLAD(ker_1, vec_1, acc_0);
 8015b4c:	f8d7 0288 	ldr.w	r0, [r7, #648]	; 0x288
 8015b50:	f8d7 1290 	ldr.w	r1, [r7, #656]	; 0x290
 8015b54:	f8d7 22c0 	ldr.w	r2, [r7, #704]	; 0x2c0
 8015b58:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015b5c:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8015b60:	6018      	str	r0, [r3, #0]
 8015b62:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015b66:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8015b6a:	6019      	str	r1, [r3, #0]
 8015b6c:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015b70:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8015b74:	601a      	str	r2, [r3, #0]
    __ASM volatile("smlad %0, %1, %2, %3" : "=r"(result) : "r"(op1), "r"(op2), "r"(op3));
 8015b76:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015b7a:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8015b7e:	681b      	ldr	r3, [r3, #0]
 8015b80:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 8015b84:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8015b88:	6812      	ldr	r2, [r2, #0]
 8015b8a:	f507 7136 	add.w	r1, r7, #728	; 0x2d8
 8015b8e:	f5a1 71d4 	sub.w	r1, r1, #424	; 0x1a8
 8015b92:	6809      	ldr	r1, [r1, #0]
 8015b94:	fb23 1202 	smlad	r2, r3, r2, r1
 8015b98:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015b9c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8015ba0:	601a      	str	r2, [r3, #0]
    return (result);
 8015ba2:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015ba6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8015baa:	681b      	ldr	r3, [r3, #0]
 8015bac:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
            acc_0 = SMLAD(ker_0, vec_0, acc_0);
 8015bb0:	f8d7 028c 	ldr.w	r0, [r7, #652]	; 0x28c
 8015bb4:	f8d7 1294 	ldr.w	r1, [r7, #660]	; 0x294
 8015bb8:	f8d7 22c0 	ldr.w	r2, [r7, #704]	; 0x2c0
 8015bbc:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015bc0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8015bc4:	6018      	str	r0, [r3, #0]
 8015bc6:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015bca:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8015bce:	6019      	str	r1, [r3, #0]
 8015bd0:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015bd4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8015bd8:	601a      	str	r2, [r3, #0]
    __ASM volatile("smlad %0, %1, %2, %3" : "=r"(result) : "r"(op1), "r"(op2), "r"(op3));
 8015bda:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015bde:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8015be2:	681b      	ldr	r3, [r3, #0]
 8015be4:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 8015be8:	f5a2 72ca 	sub.w	r2, r2, #404	; 0x194
 8015bec:	6812      	ldr	r2, [r2, #0]
 8015bee:	f507 7136 	add.w	r1, r7, #728	; 0x2d8
 8015bf2:	f5a1 71cc 	sub.w	r1, r1, #408	; 0x198
 8015bf6:	6809      	ldr	r1, [r1, #0]
 8015bf8:	fb23 1202 	smlad	r2, r3, r2, r1
 8015bfc:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015c00:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8015c04:	601a      	str	r2, [r3, #0]
    return (result);
 8015c06:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015c0a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8015c0e:	681b      	ldr	r3, [r3, #0]
 8015c10:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
        for (int i = col_loop_cnt; i != 0; i--)
 8015c14:	f8d7 32bc 	ldr.w	r3, [r7, #700]	; 0x2bc
 8015c18:	3b01      	subs	r3, #1
 8015c1a:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
 8015c1e:	f8d7 32bc 	ldr.w	r3, [r7, #700]	; 0x2bc
 8015c22:	2b00      	cmp	r3, #0
 8015c24:	f47f ae1c 	bne.w	8015860 <arm_nn_vec_mat_mult_t_s8+0xb4e>
        }

        for (int j = col_loop_cnt * 4; j < rhs_cols; j++)
 8015c28:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8015c2c:	009b      	lsls	r3, r3, #2
 8015c2e:	f8c7 32b8 	str.w	r3, [r7, #696]	; 0x2b8
 8015c32:	e038      	b.n	8015ca6 <arm_nn_vec_mat_mult_t_s8+0xf94>
        {
            const int32_t lhs_temp = (*lhs_vec + lhs_offset);
 8015c34:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015c38:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8015c3c:	681b      	ldr	r3, [r3, #0]
 8015c3e:	f993 3000 	ldrsb.w	r3, [r3]
 8015c42:	461a      	mov	r2, r3
 8015c44:	f8d7 32fc 	ldr.w	r3, [r7, #764]	; 0x2fc
 8015c48:	4413      	add	r3, r2
 8015c4a:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
            lhs_vec++;
 8015c4e:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015c52:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8015c56:	681b      	ldr	r3, [r3, #0]
 8015c58:	1c5a      	adds	r2, r3, #1
 8015c5a:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015c5e:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8015c62:	601a      	str	r2, [r3, #0]
            acc_0 += lhs_temp * (*rhs_0);
 8015c64:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015c68:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8015c6c:	681b      	ldr	r3, [r3, #0]
 8015c6e:	f993 3000 	ldrsb.w	r3, [r3]
 8015c72:	461a      	mov	r2, r3
 8015c74:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8015c78:	fb02 f303 	mul.w	r3, r2, r3
 8015c7c:	f8d7 22c0 	ldr.w	r2, [r7, #704]	; 0x2c0
 8015c80:	4413      	add	r3, r2
 8015c82:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
            rhs_0++;
 8015c86:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015c8a:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8015c8e:	681b      	ldr	r3, [r3, #0]
 8015c90:	1c5a      	adds	r2, r3, #1
 8015c92:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015c96:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8015c9a:	601a      	str	r2, [r3, #0]
        for (int j = col_loop_cnt * 4; j < rhs_cols; j++)
 8015c9c:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 8015ca0:	3301      	adds	r3, #1
 8015ca2:	f8c7 32b8 	str.w	r3, [r7, #696]	; 0x2b8
 8015ca6:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 8015caa:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
 8015cae:	429a      	cmp	r2, r3
 8015cb0:	dbc0      	blt.n	8015c34 <arm_nn_vec_mat_mult_t_s8+0xf22>
 8015cb2:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015cb6:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8015cba:	f8d7 22c0 	ldr.w	r2, [r7, #704]	; 0x2c0
 8015cbe:	601a      	str	r2, [r3, #0]
 8015cc0:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015cc4:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8015cc8:	f8d7 2304 	ldr.w	r2, [r7, #772]	; 0x304
 8015ccc:	601a      	str	r2, [r3, #0]
 8015cce:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015cd2:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8015cd6:	f8d7 2308 	ldr.w	r2, [r7, #776]	; 0x308
 8015cda:	601a      	str	r2, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8015cdc:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015ce0:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8015ce4:	681b      	ldr	r3, [r3, #0]
 8015ce6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015cea:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 8015cee:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8015cf2:	6812      	ldr	r2, [r2, #0]
 8015cf4:	409a      	lsls	r2, r3
 8015cf6:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015cfa:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8015cfe:	601a      	str	r2, [r3, #0]
 8015d00:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015d04:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8015d08:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 8015d0c:	f5a2 7204 	sub.w	r2, r2, #528	; 0x210
 8015d10:	6812      	ldr	r2, [r2, #0]
 8015d12:	601a      	str	r2, [r3, #0]
    int32_t result = 0;
 8015d14:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015d18:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8015d1c:	2200      	movs	r2, #0
 8015d1e:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 8015d20:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015d24:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8015d28:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8015d2c:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 8015d2e:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015d32:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8015d36:	2200      	movs	r2, #0
 8015d38:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (int64_t)m1 * m2;
 8015d3a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8015d3e:	f507 7136 	add.w	r1, r7, #728	; 0x2d8
 8015d42:	f5a1 7106 	sub.w	r1, r1, #536	; 0x218
 8015d46:	6809      	ldr	r1, [r1, #0]
 8015d48:	17c8      	asrs	r0, r1, #31
 8015d4a:	6139      	str	r1, [r7, #16]
 8015d4c:	6178      	str	r0, [r7, #20]
 8015d4e:	f507 7136 	add.w	r1, r7, #728	; 0x2d8
 8015d52:	f5a1 7107 	sub.w	r1, r1, #540	; 0x21c
 8015d56:	6809      	ldr	r1, [r1, #0]
 8015d58:	17c8      	asrs	r0, r1, #31
 8015d5a:	60b9      	str	r1, [r7, #8]
 8015d5c:	60f8      	str	r0, [r7, #12]
 8015d5e:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 8015d62:	4631      	mov	r1, r6
 8015d64:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8015d68:	4650      	mov	r0, sl
 8015d6a:	fb00 f001 	mul.w	r0, r0, r1
 8015d6e:	4659      	mov	r1, fp
 8015d70:	462c      	mov	r4, r5
 8015d72:	fb04 f101 	mul.w	r1, r4, r1
 8015d76:	4401      	add	r1, r0
 8015d78:	4628      	mov	r0, r5
 8015d7a:	4654      	mov	r4, sl
 8015d7c:	fba0 8904 	umull	r8, r9, r0, r4
 8015d80:	4449      	add	r1, r9
 8015d82:	4689      	mov	r9, r1
 8015d84:	eb12 0108 	adds.w	r1, r2, r8
 8015d88:	6039      	str	r1, [r7, #0]
 8015d8a:	eb43 0309 	adc.w	r3, r3, r9
 8015d8e:	607b      	str	r3, [r7, #4]
 8015d90:	e9d7 3400 	ldrd	r3, r4, [r7]
 8015d94:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
    result = (int32_t)(mult.long_long >> 31);
 8015d98:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8015d9c:	f04f 0200 	mov.w	r2, #0
 8015da0:	f04f 0300 	mov.w	r3, #0
 8015da4:	0fc2      	lsrs	r2, r0, #31
 8015da6:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8015daa:	17cb      	asrs	r3, r1, #31
 8015dac:	f507 7136 	add.w	r1, r7, #728	; 0x2d8
 8015db0:	f5a1 7108 	sub.w	r1, r1, #544	; 0x220
 8015db4:	4613      	mov	r3, r2
 8015db6:	600b      	str	r3, [r1, #0]
    return result;
 8015db8:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015dbc:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8015dc0:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8015dc2:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015dc6:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8015dca:	681b      	ldr	r3, [r3, #0]
 8015dcc:	2b00      	cmp	r3, #0
 8015dce:	dc06      	bgt.n	8015dde <arm_nn_vec_mat_mult_t_s8+0x10cc>
 8015dd0:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015dd4:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8015dd8:	681b      	ldr	r3, [r3, #0]
 8015dda:	425b      	negs	r3, r3
 8015ddc:	e000      	b.n	8015de0 <arm_nn_vec_mat_mult_t_s8+0x10ce>
 8015dde:	2300      	movs	r3, #0
 8015de0:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 8015de4:	f5a2 7209 	sub.w	r2, r2, #548	; 0x224
 8015de8:	6011      	str	r1, [r2, #0]
 8015dea:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 8015dee:	f5a2 720a 	sub.w	r2, r2, #552	; 0x228
 8015df2:	6013      	str	r3, [r2, #0]
    int32_t result = 0;
 8015df4:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015df8:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8015dfc:	2200      	movs	r2, #0
 8015dfe:	601a      	str	r2, [r3, #0]
    const int32_t remainder_mask = (1 << exponent) - 1;
 8015e00:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015e04:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8015e08:	2201      	movs	r2, #1
 8015e0a:	681b      	ldr	r3, [r3, #0]
 8015e0c:	409a      	lsls	r2, r3
 8015e0e:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015e12:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8015e16:	3a01      	subs	r2, #1
 8015e18:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 8015e1a:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015e1e:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8015e22:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 8015e26:	f5a2 7109 	sub.w	r1, r2, #548	; 0x224
 8015e2a:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 8015e2e:	f5a2 720c 	sub.w	r2, r2, #560	; 0x230
 8015e32:	6809      	ldr	r1, [r1, #0]
 8015e34:	6812      	ldr	r2, [r2, #0]
 8015e36:	400a      	ands	r2, r1
 8015e38:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 8015e3a:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015e3e:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8015e42:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 8015e46:	f5a2 7109 	sub.w	r1, r2, #548	; 0x224
 8015e4a:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 8015e4e:	f5a2 720a 	sub.w	r2, r2, #552	; 0x228
 8015e52:	6809      	ldr	r1, [r1, #0]
 8015e54:	6812      	ldr	r2, [r2, #0]
 8015e56:	fa41 f202 	asr.w	r2, r1, r2
 8015e5a:	601a      	str	r2, [r3, #0]
    int32_t threshold = remainder_mask >> 1;
 8015e5c:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015e60:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8015e64:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 8015e68:	f5a2 720c 	sub.w	r2, r2, #560	; 0x230
 8015e6c:	6812      	ldr	r2, [r2, #0]
 8015e6e:	1052      	asrs	r2, r2, #1
 8015e70:	601a      	str	r2, [r3, #0]
    if (result < 0)
 8015e72:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015e76:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8015e7a:	681b      	ldr	r3, [r3, #0]
 8015e7c:	2b00      	cmp	r3, #0
 8015e7e:	da0a      	bge.n	8015e96 <arm_nn_vec_mat_mult_t_s8+0x1184>
        threshold++;
 8015e80:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015e84:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8015e88:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 8015e8c:	f5a2 720e 	sub.w	r2, r2, #568	; 0x238
 8015e90:	6812      	ldr	r2, [r2, #0]
 8015e92:	3201      	adds	r2, #1
 8015e94:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 8015e96:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015e9a:	f5a3 720d 	sub.w	r2, r3, #564	; 0x234
 8015e9e:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015ea2:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8015ea6:	6812      	ldr	r2, [r2, #0]
 8015ea8:	681b      	ldr	r3, [r3, #0]
 8015eaa:	429a      	cmp	r2, r3
 8015eac:	dd0a      	ble.n	8015ec4 <arm_nn_vec_mat_mult_t_s8+0x11b2>
        result++;
 8015eae:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015eb2:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8015eb6:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 8015eba:	f5a2 720b 	sub.w	r2, r2, #556	; 0x22c
 8015ebe:	6812      	ldr	r2, [r2, #0]
 8015ec0:	3201      	adds	r2, #1
 8015ec2:	601a      	str	r2, [r3, #0]
    return result;
 8015ec4:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015ec8:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8015ecc:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8015ece:	bf00      	nop
        }

        acc_0 = arm_nn_requantize(acc_0, dst_multiplier, dst_shift);
 8015ed0:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0

        // Add offset
        acc_0 += dst_offset;
 8015ed4:	f8d7 22c0 	ldr.w	r2, [r7, #704]	; 0x2c0
 8015ed8:	f8d7 3300 	ldr.w	r3, [r7, #768]	; 0x300
 8015edc:	4413      	add	r3, r2
 8015ede:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
        // Clamp the result
        acc_0 = MAX(acc_0, activation_min);
 8015ee2:	f8d7 22c0 	ldr.w	r2, [r7, #704]	; 0x2c0
 8015ee6:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 8015eea:	4293      	cmp	r3, r2
 8015eec:	bfb8      	it	lt
 8015eee:	4613      	movlt	r3, r2
 8015ef0:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
        acc_0 = MIN(acc_0, activation_max);
 8015ef4:	f8d7 22c0 	ldr.w	r2, [r7, #704]	; 0x2c0
 8015ef8:	f8d7 3318 	ldr.w	r3, [r7, #792]	; 0x318
 8015efc:	4293      	cmp	r3, r2
 8015efe:	bfa8      	it	ge
 8015f00:	4613      	movge	r3, r2
 8015f02:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
        *dst = (int8_t)acc_0;
 8015f06:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8015f0a:	b25a      	sxtb	r2, r3
 8015f0c:	f8d7 32f8 	ldr.w	r3, [r7, #760]	; 0x2f8
 8015f10:	701a      	strb	r2, [r3, #0]
        dst += address_offset;
 8015f12:	f8d7 331c 	ldr.w	r3, [r7, #796]	; 0x31c
 8015f16:	f8d7 22f8 	ldr.w	r2, [r7, #760]	; 0x2f8
 8015f1a:	4413      	add	r3, r2
 8015f1c:	f8c7 32f8 	str.w	r3, [r7, #760]	; 0x2f8
        *dst = (int8_t)res00;
        dst += address_offset;
        rhs += rhs_cols;
    }
#endif
    return ARM_CMSIS_NN_SUCCESS;
 8015f20:	2300      	movs	r3, #0
}
 8015f22:	4618      	mov	r0, r3
 8015f24:	f507 7736 	add.w	r7, r7, #728	; 0x2d8
 8015f28:	46bd      	mov	sp, r7
 8015f2a:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8015f2e:	4770      	bx	lr

08015f30 <arm_s8_to_s16_unordered_with_offset>:
 * @addtogroup supportConversion
 * @{
 */
#if defined(ARM_MATH_DSP)
void arm_s8_to_s16_unordered_with_offset(const int8_t *src, int16_t *dst, int32_t block_size, int16_t offset)
{
 8015f30:	b480      	push	{r7}
 8015f32:	b09d      	sub	sp, #116	; 0x74
 8015f34:	af00      	add	r7, sp, #0
 8015f36:	60f8      	str	r0, [r7, #12]
 8015f38:	60b9      	str	r1, [r7, #8]
 8015f3a:	607a      	str	r2, [r7, #4]
 8015f3c:	807b      	strh	r3, [r7, #2]
    int32_t in_s8x4;
    int32_t in_s16x2_1;
    int32_t in_s16x2_2;
    int32_t block_cnt = block_size >> 2;
 8015f3e:	687b      	ldr	r3, [r7, #4]
 8015f40:	109b      	asrs	r3, r3, #2
 8015f42:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* Compute 4 outputs at a time. */
    const int32_t offset_s16x2 = PKHBT(offset, offset, 16);
 8015f44:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015f48:	66bb      	str	r3, [r7, #104]	; 0x68
 8015f4a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015f4e:	667b      	str	r3, [r7, #100]	; 0x64
 8015f50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015f52:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8015f54:	eac3 4302 	pkhbt	r3, r3, r2, lsl #16
 8015f58:	663b      	str	r3, [r7, #96]	; 0x60
 8015f5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015f5c:	65fb      	str	r3, [r7, #92]	; 0x5c
    while (block_cnt > 0)
 8015f5e:	e058      	b.n	8016012 <arm_s8_to_s16_unordered_with_offset+0xe2>
 8015f60:	f107 030c 	add.w	r3, r7, #12
 8015f64:	61fb      	str	r3, [r7, #28]
    memcpy(&val, *in_s8, 4);
 8015f66:	69fb      	ldr	r3, [r7, #28]
 8015f68:	681b      	ldr	r3, [r3, #0]
 8015f6a:	681b      	ldr	r3, [r3, #0]
 8015f6c:	61bb      	str	r3, [r7, #24]
    *in_s8 += 4;
 8015f6e:	69fb      	ldr	r3, [r7, #28]
 8015f70:	681b      	ldr	r3, [r3, #0]
 8015f72:	1d1a      	adds	r2, r3, #4
 8015f74:	69fb      	ldr	r3, [r7, #28]
 8015f76:	601a      	str	r2, [r3, #0]
    return (val);
 8015f78:	69bb      	ldr	r3, [r7, #24]
    {
        in_s8x4 = arm_nn_read_s8x4_ia(&src);
 8015f7a:	65bb      	str	r3, [r7, #88]	; 0x58

        in_s16x2_1 = SXTAB16(offset_s16x2, in_s8x4);
 8015f7c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8015f7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015f80:	62ba      	str	r2, [r7, #40]	; 0x28
 8015f82:	627b      	str	r3, [r7, #36]	; 0x24
    __ASM("sxtab16 %0, %1, %2" : "=r"(result) : "r"(op1), "r"(op2));
 8015f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015f88:	fa23 f382 	sxtab16	r3, r3, r2
 8015f8c:	623b      	str	r3, [r7, #32]
    return (result);
 8015f8e:	6a3b      	ldr	r3, [r7, #32]
 8015f90:	657b      	str	r3, [r7, #84]	; 0x54
        in_s16x2_2 = SXTAB16(offset_s16x2, ROR(in_s8x4, 8));
 8015f92:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8015f94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015f96:	633b      	str	r3, [r7, #48]	; 0x30
 8015f98:	2308      	movs	r3, #8
 8015f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    op2 %= 32U;
 8015f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f9e:	f003 031f 	and.w	r3, r3, #31
 8015fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (op2 == 0U)
 8015fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fa6:	2b00      	cmp	r3, #0
 8015fa8:	d101      	bne.n	8015fae <arm_s8_to_s16_unordered_with_offset+0x7e>
        return op1;
 8015faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015fac:	e003      	b.n	8015fb6 <arm_s8_to_s16_unordered_with_offset+0x86>
    return (op1 >> op2) | (op1 << (32U - op2));
 8015fae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fb2:	fa61 f303 	ror.w	r3, r1, r3
 8015fb6:	63fa      	str	r2, [r7, #60]	; 0x3c
 8015fb8:	63bb      	str	r3, [r7, #56]	; 0x38
    __ASM("sxtab16 %0, %1, %2" : "=r"(result) : "r"(op1), "r"(op2));
 8015fba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015fbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015fbe:	fa23 f382 	sxtab16	r3, r3, r2
 8015fc2:	637b      	str	r3, [r7, #52]	; 0x34
    return (result);
 8015fc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015fc6:	653b      	str	r3, [r7, #80]	; 0x50
 8015fc8:	f107 0308 	add.w	r3, r7, #8
 8015fcc:	647b      	str	r3, [r7, #68]	; 0x44
 8015fce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015fd0:	643b      	str	r3, [r7, #64]	; 0x40
  @param[in]     dest_q15  Pointer to pointer that holds address of destination.
  @param[in]     src_q31   Input value to be written.
 */
__STATIC_FORCEINLINE void arm_nn_write_q15x2_ia(int16_t **dest_q15, int32_t src_q31)
{
    int32_t val = src_q31;
 8015fd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015fd4:	617b      	str	r3, [r7, #20]

    memcpy(*dest_q15, &val, 4);
 8015fd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015fd8:	681b      	ldr	r3, [r3, #0]
 8015fda:	697a      	ldr	r2, [r7, #20]
 8015fdc:	601a      	str	r2, [r3, #0]
    *dest_q15 += 2;
 8015fde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015fe0:	681b      	ldr	r3, [r3, #0]
 8015fe2:	1d1a      	adds	r2, r3, #4
 8015fe4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015fe6:	601a      	str	r2, [r3, #0]
}
 8015fe8:	bf00      	nop
 8015fea:	f107 0308 	add.w	r3, r7, #8
 8015fee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015ff0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015ff2:	64bb      	str	r3, [r7, #72]	; 0x48
    int32_t val = src_q31;
 8015ff4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015ff6:	613b      	str	r3, [r7, #16]
    memcpy(*dest_q15, &val, 4);
 8015ff8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015ffa:	681b      	ldr	r3, [r3, #0]
 8015ffc:	693a      	ldr	r2, [r7, #16]
 8015ffe:	601a      	str	r2, [r3, #0]
    *dest_q15 += 2;
 8016000:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016002:	681b      	ldr	r3, [r3, #0]
 8016004:	1d1a      	adds	r2, r3, #4
 8016006:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016008:	601a      	str	r2, [r3, #0]
}
 801600a:	bf00      	nop

        arm_nn_write_q15x2_ia(&dst, in_s16x2_1);
        arm_nn_write_q15x2_ia(&dst, in_s16x2_2);

        block_cnt--;
 801600c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801600e:	3b01      	subs	r3, #1
 8016010:	66fb      	str	r3, [r7, #108]	; 0x6c
    while (block_cnt > 0)
 8016012:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016014:	2b00      	cmp	r3, #0
 8016016:	dca3      	bgt.n	8015f60 <arm_s8_to_s16_unordered_with_offset+0x30>
    }

    /* Handle left over samples. */
    block_cnt = block_size % 4;
 8016018:	687b      	ldr	r3, [r7, #4]
 801601a:	425a      	negs	r2, r3
 801601c:	f003 0303 	and.w	r3, r3, #3
 8016020:	f002 0203 	and.w	r2, r2, #3
 8016024:	bf58      	it	pl
 8016026:	4253      	negpl	r3, r2
 8016028:	66fb      	str	r3, [r7, #108]	; 0x6c
    while (block_cnt > 0)
 801602a:	e010      	b.n	801604e <arm_s8_to_s16_unordered_with_offset+0x11e>
    {
        *dst++ = (int16_t)*src++ + offset;
 801602c:	68fb      	ldr	r3, [r7, #12]
 801602e:	1c5a      	adds	r2, r3, #1
 8016030:	60fa      	str	r2, [r7, #12]
 8016032:	f993 3000 	ldrsb.w	r3, [r3]
 8016036:	b29a      	uxth	r2, r3
 8016038:	887b      	ldrh	r3, [r7, #2]
 801603a:	4413      	add	r3, r2
 801603c:	b299      	uxth	r1, r3
 801603e:	68bb      	ldr	r3, [r7, #8]
 8016040:	1c9a      	adds	r2, r3, #2
 8016042:	60ba      	str	r2, [r7, #8]
 8016044:	b20a      	sxth	r2, r1
 8016046:	801a      	strh	r2, [r3, #0]
        block_cnt--;
 8016048:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801604a:	3b01      	subs	r3, #1
 801604c:	66fb      	str	r3, [r7, #108]	; 0x6c
    while (block_cnt > 0)
 801604e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016050:	2b00      	cmp	r3, #0
 8016052:	dceb      	bgt.n	801602c <arm_s8_to_s16_unordered_with_offset+0xfc>
    }
}
 8016054:	bf00      	nop
 8016056:	bf00      	nop
 8016058:	3774      	adds	r7, #116	; 0x74
 801605a:	46bd      	mov	sp, r7
 801605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016060:	4770      	bx	lr

08016062 <compare_and_replace_if_larger>:

#include "arm_nnfunctions.h"
#include "arm_nnsupportfunctions.h"

static void compare_and_replace_if_larger(int16_t *base, const int16_t *target, int32_t length)
{
 8016062:	b480      	push	{r7}
 8016064:	b091      	sub	sp, #68	; 0x44
 8016066:	af00      	add	r7, sp, #0
 8016068:	60f8      	str	r0, [r7, #12]
 801606a:	60b9      	str	r1, [r7, #8]
 801606c:	607a      	str	r2, [r7, #4]
        base += 8;
        target += 8;
        length -= 8;
    }
#else
    int16_t *dst = base;
 801606e:	68fb      	ldr	r3, [r7, #12]
 8016070:	62bb      	str	r3, [r7, #40]	; 0x28
    const int16_t *src = target;
 8016072:	68bb      	ldr	r3, [r7, #8]
 8016074:	627b      	str	r3, [r7, #36]	; 0x24
    union arm_nnword ref_max;
    union arm_nnword comp_max;
    int32_t cnt = length >> 1;
 8016076:	687b      	ldr	r3, [r7, #4]
 8016078:	105b      	asrs	r3, r3, #1
 801607a:	63fb      	str	r3, [r7, #60]	; 0x3c

    while (cnt > 0l)
 801607c:	e03a      	b.n	80160f4 <compare_and_replace_if_larger+0x92>
    {
        ref_max.word = arm_nn_read_s16x2(dst);
 801607e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016080:	637b      	str	r3, [r7, #52]	; 0x34
 8016082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016084:	681b      	ldr	r3, [r3, #0]
    memcpy(&val, in, 4);
 8016086:	617b      	str	r3, [r7, #20]
    return (val);
 8016088:	697b      	ldr	r3, [r7, #20]
 801608a:	623b      	str	r3, [r7, #32]
 801608c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016090:	63bb      	str	r3, [r7, #56]	; 0x38
    memcpy(&val, *in_q15, 4);
 8016092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016094:	681b      	ldr	r3, [r3, #0]
 8016096:	681b      	ldr	r3, [r3, #0]
 8016098:	613b      	str	r3, [r7, #16]
    *in_q15 += 2;
 801609a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801609c:	681b      	ldr	r3, [r3, #0]
 801609e:	1d1a      	adds	r2, r3, #4
 80160a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80160a2:	601a      	str	r2, [r3, #0]
    return (val);
 80160a4:	693b      	ldr	r3, [r7, #16]
        comp_max.word = arm_nn_read_q15x2_ia(&src);
 80160a6:	61fb      	str	r3, [r7, #28]

        if (comp_max.half_words[0] > ref_max.half_words[0])
 80160a8:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80160ac:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80160b0:	429a      	cmp	r2, r3
 80160b2:	dd02      	ble.n	80160ba <compare_and_replace_if_larger+0x58>
        {
            ref_max.half_words[0] = comp_max.half_words[0];
 80160b4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80160b8:	843b      	strh	r3, [r7, #32]
        }
        if (comp_max.half_words[1] > ref_max.half_words[1])
 80160ba:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80160be:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80160c2:	429a      	cmp	r2, r3
 80160c4:	dd02      	ble.n	80160cc <compare_and_replace_if_larger+0x6a>
        {
            ref_max.half_words[1] = comp_max.half_words[1];
 80160c6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80160ca:	847b      	strh	r3, [r7, #34]	; 0x22
        }

        arm_nn_write_q15x2_ia(&dst, ref_max.word);
 80160cc:	6a3b      	ldr	r3, [r7, #32]
 80160ce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80160d2:	633a      	str	r2, [r7, #48]	; 0x30
 80160d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    int32_t val = src_q31;
 80160d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160d8:	61bb      	str	r3, [r7, #24]
    memcpy(*dest_q15, &val, 4);
 80160da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160dc:	681b      	ldr	r3, [r3, #0]
 80160de:	69ba      	ldr	r2, [r7, #24]
 80160e0:	601a      	str	r2, [r3, #0]
    *dest_q15 += 2;
 80160e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160e4:	681b      	ldr	r3, [r3, #0]
 80160e6:	1d1a      	adds	r2, r3, #4
 80160e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160ea:	601a      	str	r2, [r3, #0]
}
 80160ec:	bf00      	nop

        cnt--;
 80160ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80160f0:	3b01      	subs	r3, #1
 80160f2:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (cnt > 0l)
 80160f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80160f6:	2b00      	cmp	r3, #0
 80160f8:	dcc1      	bgt.n	801607e <compare_and_replace_if_larger+0x1c>
    }

    if (length & 0x1)
 80160fa:	687b      	ldr	r3, [r7, #4]
 80160fc:	f003 0301 	and.w	r3, r3, #1
 8016100:	2b00      	cmp	r3, #0
 8016102:	d00c      	beq.n	801611e <compare_and_replace_if_larger+0xbc>
    {
        if (*src > *dst)
 8016104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016106:	f9b3 2000 	ldrsh.w	r2, [r3]
 801610a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801610c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016110:	429a      	cmp	r2, r3
 8016112:	dd04      	ble.n	801611e <compare_and_replace_if_larger+0xbc>
        {
            *dst = *src;
 8016114:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016118:	f9b2 2000 	ldrsh.w	r2, [r2]
 801611c:	801a      	strh	r2, [r3, #0]
        }
    }
#endif
}
 801611e:	bf00      	nop
 8016120:	3744      	adds	r7, #68	; 0x44
 8016122:	46bd      	mov	sp, r7
 8016124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016128:	4770      	bx	lr

0801612a <clamp_output>:

static void clamp_output(int16_t *source, int32_t length, const int16_t act_min, const int16_t act_max)
{
 801612a:	b480      	push	{r7}
 801612c:	b08d      	sub	sp, #52	; 0x34
 801612e:	af00      	add	r7, sp, #0
 8016130:	60f8      	str	r0, [r7, #12]
 8016132:	60b9      	str	r1, [r7, #8]
 8016134:	4611      	mov	r1, r2
 8016136:	461a      	mov	r2, r3
 8016138:	460b      	mov	r3, r1
 801613a:	80fb      	strh	r3, [r7, #6]
 801613c:	4613      	mov	r3, r2
 801613e:	80bb      	strh	r3, [r7, #4]
        vstrhq_p_s16(source, res, p);
        source += 8;
    }
#else
    union arm_nnword in;
    int32_t cnt = length >> 1;
 8016140:	68bb      	ldr	r3, [r7, #8]
 8016142:	105b      	asrs	r3, r3, #1
 8016144:	62fb      	str	r3, [r7, #44]	; 0x2c

    while (cnt > 0l)
 8016146:	e03e      	b.n	80161c6 <clamp_output+0x9c>
    {
        in.word = arm_nn_read_s16x2(source);
 8016148:	68fb      	ldr	r3, [r7, #12]
 801614a:	61fb      	str	r3, [r7, #28]
 801614c:	69fb      	ldr	r3, [r7, #28]
 801614e:	681b      	ldr	r3, [r3, #0]
    memcpy(&val, in, 4);
 8016150:	617b      	str	r3, [r7, #20]
    return (val);
 8016152:	697b      	ldr	r3, [r7, #20]
 8016154:	61bb      	str	r3, [r7, #24]

        in.half_words[0] = MAX(in.half_words[0], act_min);
 8016156:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 801615a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801615e:	4293      	cmp	r3, r2
 8016160:	bfb8      	it	lt
 8016162:	4613      	movlt	r3, r2
 8016164:	b21b      	sxth	r3, r3
 8016166:	833b      	strh	r3, [r7, #24]
        in.half_words[0] = MIN(in.half_words[0], act_max);
 8016168:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 801616c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8016170:	4293      	cmp	r3, r2
 8016172:	bfa8      	it	ge
 8016174:	4613      	movge	r3, r2
 8016176:	b21b      	sxth	r3, r3
 8016178:	833b      	strh	r3, [r7, #24]
        in.half_words[1] = MAX(in.half_words[1], act_min);
 801617a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801617e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8016182:	4293      	cmp	r3, r2
 8016184:	bfb8      	it	lt
 8016186:	4613      	movlt	r3, r2
 8016188:	b21b      	sxth	r3, r3
 801618a:	837b      	strh	r3, [r7, #26]
        in.half_words[1] = MIN(in.half_words[1], act_max);
 801618c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8016190:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8016194:	4293      	cmp	r3, r2
 8016196:	bfa8      	it	ge
 8016198:	4613      	movge	r3, r2
 801619a:	b21b      	sxth	r3, r3
 801619c:	837b      	strh	r3, [r7, #26]

        arm_nn_write_q15x2_ia(&source, in.word);
 801619e:	69bb      	ldr	r3, [r7, #24]
 80161a0:	f107 020c 	add.w	r2, r7, #12
 80161a4:	627a      	str	r2, [r7, #36]	; 0x24
 80161a6:	623b      	str	r3, [r7, #32]
    int32_t val = src_q31;
 80161a8:	6a3b      	ldr	r3, [r7, #32]
 80161aa:	613b      	str	r3, [r7, #16]
    memcpy(*dest_q15, &val, 4);
 80161ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161ae:	681b      	ldr	r3, [r3, #0]
 80161b0:	693a      	ldr	r2, [r7, #16]
 80161b2:	601a      	str	r2, [r3, #0]
    *dest_q15 += 2;
 80161b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161b6:	681b      	ldr	r3, [r3, #0]
 80161b8:	1d1a      	adds	r2, r3, #4
 80161ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161bc:	601a      	str	r2, [r3, #0]
}
 80161be:	bf00      	nop
        cnt--;
 80161c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161c2:	3b01      	subs	r3, #1
 80161c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (cnt > 0l)
 80161c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161c8:	2b00      	cmp	r3, #0
 80161ca:	dcbd      	bgt.n	8016148 <clamp_output+0x1e>
    }

    if (length & 0x1)
 80161cc:	68bb      	ldr	r3, [r7, #8]
 80161ce:	f003 0301 	and.w	r3, r3, #1
 80161d2:	2b00      	cmp	r3, #0
 80161d4:	d015      	beq.n	8016202 <clamp_output+0xd8>
    {
        int16_t comp = *source;
 80161d6:	68fb      	ldr	r3, [r7, #12]
 80161d8:	881b      	ldrh	r3, [r3, #0]
 80161da:	857b      	strh	r3, [r7, #42]	; 0x2a
        comp = MAX(comp, act_min);
 80161dc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80161e0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80161e4:	4293      	cmp	r3, r2
 80161e6:	bfb8      	it	lt
 80161e8:	4613      	movlt	r3, r2
 80161ea:	857b      	strh	r3, [r7, #42]	; 0x2a
        comp = MIN(comp, act_max);
 80161ec:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80161f0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80161f4:	4293      	cmp	r3, r2
 80161f6:	bfa8      	it	ge
 80161f8:	4613      	movge	r3, r2
 80161fa:	857b      	strh	r3, [r7, #42]	; 0x2a
        *source = comp;
 80161fc:	68fb      	ldr	r3, [r7, #12]
 80161fe:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8016200:	801a      	strh	r2, [r3, #0]
    }
#endif
}
 8016202:	bf00      	nop
 8016204:	3734      	adds	r7, #52	; 0x34
 8016206:	46bd      	mov	sp, r7
 8016208:	f85d 7b04 	ldr.w	r7, [sp], #4
 801620c:	4770      	bx	lr

0801620e <arm_max_pool_s16>:
                                     const cmsis_nn_dims *input_dims,
                                     const int16_t *src,
                                     const cmsis_nn_dims *filter_dims,
                                     const cmsis_nn_dims *output_dims,
                                     int16_t *dst)
{
 801620e:	b580      	push	{r7, lr}
 8016210:	b09e      	sub	sp, #120	; 0x78
 8016212:	af00      	add	r7, sp, #0
 8016214:	60f8      	str	r0, [r7, #12]
 8016216:	60b9      	str	r1, [r7, #8]
 8016218:	607a      	str	r2, [r7, #4]
 801621a:	603b      	str	r3, [r7, #0]
    const int32_t input_y = input_dims->h;
 801621c:	687b      	ldr	r3, [r7, #4]
 801621e:	685b      	ldr	r3, [r3, #4]
 8016220:	65bb      	str	r3, [r7, #88]	; 0x58
    const int32_t input_x = input_dims->w;
 8016222:	687b      	ldr	r3, [r7, #4]
 8016224:	689b      	ldr	r3, [r3, #8]
 8016226:	657b      	str	r3, [r7, #84]	; 0x54
    const int32_t output_y = output_dims->h;
 8016228:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801622c:	685b      	ldr	r3, [r3, #4]
 801622e:	653b      	str	r3, [r7, #80]	; 0x50
    const int32_t output_x = output_dims->w;
 8016230:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8016234:	689b      	ldr	r3, [r3, #8]
 8016236:	64fb      	str	r3, [r7, #76]	; 0x4c
    const int32_t stride_y = pool_params->stride.h;
 8016238:	68bb      	ldr	r3, [r7, #8]
 801623a:	685b      	ldr	r3, [r3, #4]
 801623c:	64bb      	str	r3, [r7, #72]	; 0x48
    const int32_t stride_x = pool_params->stride.w;
 801623e:	68bb      	ldr	r3, [r7, #8]
 8016240:	681b      	ldr	r3, [r3, #0]
 8016242:	647b      	str	r3, [r7, #68]	; 0x44
    const int32_t kernel_y = filter_dims->h;
 8016244:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016248:	685b      	ldr	r3, [r3, #4]
 801624a:	643b      	str	r3, [r7, #64]	; 0x40
    const int32_t kernel_x = filter_dims->w;
 801624c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016250:	689b      	ldr	r3, [r3, #8]
 8016252:	63fb      	str	r3, [r7, #60]	; 0x3c
    const int32_t pad_y = pool_params->padding.h;
 8016254:	68bb      	ldr	r3, [r7, #8]
 8016256:	68db      	ldr	r3, [r3, #12]
 8016258:	63bb      	str	r3, [r7, #56]	; 0x38
    const int32_t pad_x = pool_params->padding.w;
 801625a:	68bb      	ldr	r3, [r7, #8]
 801625c:	689b      	ldr	r3, [r3, #8]
 801625e:	637b      	str	r3, [r7, #52]	; 0x34
    const int16_t act_min = pool_params->activation.min;
 8016260:	68bb      	ldr	r3, [r7, #8]
 8016262:	691b      	ldr	r3, [r3, #16]
 8016264:	867b      	strh	r3, [r7, #50]	; 0x32
    const int16_t act_max = pool_params->activation.max;
 8016266:	68bb      	ldr	r3, [r7, #8]
 8016268:	695b      	ldr	r3, [r3, #20]
 801626a:	863b      	strh	r3, [r7, #48]	; 0x30
    const int32_t channel_in = input_dims->c;
 801626c:	687b      	ldr	r3, [r7, #4]
 801626e:	68db      	ldr	r3, [r3, #12]
 8016270:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)ctx;
    int16_t *dst_base = dst;
 8016272:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016276:	62bb      	str	r3, [r7, #40]	; 0x28

    for (int i_y = 0, base_idx_y = -pad_y; i_y < output_y; base_idx_y += stride_y, i_y++)
 8016278:	2300      	movs	r3, #0
 801627a:	677b      	str	r3, [r7, #116]	; 0x74
 801627c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801627e:	425b      	negs	r3, r3
 8016280:	673b      	str	r3, [r7, #112]	; 0x70
 8016282:	e07a      	b.n	801637a <arm_max_pool_s16+0x16c>
    {
        for (int i_x = 0, base_idx_x = -pad_x; i_x < output_x; base_idx_x += stride_x, i_x++)
 8016284:	2300      	movs	r3, #0
 8016286:	66fb      	str	r3, [r7, #108]	; 0x6c
 8016288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801628a:	425b      	negs	r3, r3
 801628c:	66bb      	str	r3, [r7, #104]	; 0x68
 801628e:	e069      	b.n	8016364 <arm_max_pool_s16+0x156>
        {
            /* Condition for kernel start dimension: (base_idx_<x,y> + kernel_<x,y>_start) >= 0 */
            const int32_t ker_y_start = MAX(0, -base_idx_y);
 8016290:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016292:	2b00      	cmp	r3, #0
 8016294:	dc02      	bgt.n	801629c <arm_max_pool_s16+0x8e>
 8016296:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016298:	425b      	negs	r3, r3
 801629a:	e000      	b.n	801629e <arm_max_pool_s16+0x90>
 801629c:	2300      	movs	r3, #0
 801629e:	627b      	str	r3, [r7, #36]	; 0x24
            const int32_t ker_x_start = MAX(0, -base_idx_x);
 80162a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80162a2:	2b00      	cmp	r3, #0
 80162a4:	dc02      	bgt.n	80162ac <arm_max_pool_s16+0x9e>
 80162a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80162a8:	425b      	negs	r3, r3
 80162aa:	e000      	b.n	80162ae <arm_max_pool_s16+0xa0>
 80162ac:	2300      	movs	r3, #0
 80162ae:	623b      	str	r3, [r7, #32]

            /* Condition for kernel end dimension: (base_idx_<x,y> + kernel_<x,y>_end) < dim_src_<width,height> */
            const int32_t kernel_y_end = MIN(kernel_y, input_y - base_idx_y);
 80162b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80162b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80162b4:	1ad3      	subs	r3, r2, r3
 80162b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80162b8:	4293      	cmp	r3, r2
 80162ba:	bfa8      	it	ge
 80162bc:	4613      	movge	r3, r2
 80162be:	61fb      	str	r3, [r7, #28]
            const int32_t kernel_x_end = MIN(kernel_x, input_x - base_idx_x);
 80162c0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80162c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80162c4:	1ad3      	subs	r3, r2, r3
 80162c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80162c8:	4293      	cmp	r3, r2
 80162ca:	bfa8      	it	ge
 80162cc:	4613      	movge	r3, r2
 80162ce:	61bb      	str	r3, [r7, #24]

            int count = 0;
 80162d0:	2300      	movs	r3, #0
 80162d2:	667b      	str	r3, [r7, #100]	; 0x64

            for (int k_y = ker_y_start; k_y < kernel_y_end; k_y++)
 80162d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162d6:	663b      	str	r3, [r7, #96]	; 0x60
 80162d8:	e032      	b.n	8016340 <arm_max_pool_s16+0x132>
            {
                for (int k_x = ker_x_start; k_x < kernel_x_end; k_x++)
 80162da:	6a3b      	ldr	r3, [r7, #32]
 80162dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80162de:	e028      	b.n	8016332 <arm_max_pool_s16+0x124>
                {
                    const int16_t *start = src + channel_in * (k_x + base_idx_x + (k_y + base_idx_y) * input_x);
 80162e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80162e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80162e4:	441a      	add	r2, r3
 80162e6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80162e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80162ea:	440b      	add	r3, r1
 80162ec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80162ee:	fb01 f303 	mul.w	r3, r1, r3
 80162f2:	4413      	add	r3, r2
 80162f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80162f6:	fb02 f303 	mul.w	r3, r2, r3
 80162fa:	005b      	lsls	r3, r3, #1
 80162fc:	683a      	ldr	r2, [r7, #0]
 80162fe:	4413      	add	r3, r2
 8016300:	617b      	str	r3, [r7, #20]

                    if (count == 0)
 8016302:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016304:	2b00      	cmp	r3, #0
 8016306:	d10b      	bne.n	8016320 <arm_max_pool_s16+0x112>
                    {
                        memcpy(dst, start, channel_in * sizeof(int16_t));
 8016308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801630a:	005b      	lsls	r3, r3, #1
 801630c:	461a      	mov	r2, r3
 801630e:	6979      	ldr	r1, [r7, #20]
 8016310:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8016314:	f001 fbcf 	bl	8017ab6 <memcpy>
                        count++;
 8016318:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801631a:	3301      	adds	r3, #1
 801631c:	667b      	str	r3, [r7, #100]	; 0x64
 801631e:	e005      	b.n	801632c <arm_max_pool_s16+0x11e>
                    }
                    else
                    {
                        compare_and_replace_if_larger(dst, start, channel_in);
 8016320:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016322:	6979      	ldr	r1, [r7, #20]
 8016324:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8016328:	f7ff fe9b 	bl	8016062 <compare_and_replace_if_larger>
                for (int k_x = ker_x_start; k_x < kernel_x_end; k_x++)
 801632c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801632e:	3301      	adds	r3, #1
 8016330:	65fb      	str	r3, [r7, #92]	; 0x5c
 8016332:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8016334:	69bb      	ldr	r3, [r7, #24]
 8016336:	429a      	cmp	r2, r3
 8016338:	dbd2      	blt.n	80162e0 <arm_max_pool_s16+0xd2>
            for (int k_y = ker_y_start; k_y < kernel_y_end; k_y++)
 801633a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801633c:	3301      	adds	r3, #1
 801633e:	663b      	str	r3, [r7, #96]	; 0x60
 8016340:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8016342:	69fb      	ldr	r3, [r7, #28]
 8016344:	429a      	cmp	r2, r3
 8016346:	dbc8      	blt.n	80162da <arm_max_pool_s16+0xcc>
                    }
                }
            }
            /* 'count' is expected to be non-zero here. */
            dst += channel_in;
 8016348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801634a:	005b      	lsls	r3, r3, #1
 801634c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8016350:	4413      	add	r3, r2
 8016352:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (int i_x = 0, base_idx_x = -pad_x; i_x < output_x; base_idx_x += stride_x, i_x++)
 8016356:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8016358:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801635a:	4413      	add	r3, r2
 801635c:	66bb      	str	r3, [r7, #104]	; 0x68
 801635e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016360:	3301      	adds	r3, #1
 8016362:	66fb      	str	r3, [r7, #108]	; 0x6c
 8016364:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8016366:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016368:	429a      	cmp	r2, r3
 801636a:	db91      	blt.n	8016290 <arm_max_pool_s16+0x82>
    for (int i_y = 0, base_idx_y = -pad_y; i_y < output_y; base_idx_y += stride_y, i_y++)
 801636c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801636e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016370:	4413      	add	r3, r2
 8016372:	673b      	str	r3, [r7, #112]	; 0x70
 8016374:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016376:	3301      	adds	r3, #1
 8016378:	677b      	str	r3, [r7, #116]	; 0x74
 801637a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801637c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801637e:	429a      	cmp	r2, r3
 8016380:	db80      	blt.n	8016284 <arm_max_pool_s16+0x76>
        }
    }

    clamp_output(dst_base, output_x * output_y * channel_in, act_min, act_max);
 8016382:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016384:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8016386:	fb02 f303 	mul.w	r3, r2, r3
 801638a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801638c:	fb02 f103 	mul.w	r1, r2, r3
 8016390:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8016394:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8016398:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801639a:	f7ff fec6 	bl	801612a <clamp_output>

    return ARM_CMSIS_NN_SUCCESS;
 801639e:	2300      	movs	r3, #0
}
 80163a0:	4618      	mov	r0, r3
 80163a2:	3778      	adds	r7, #120	; 0x78
 80163a4:	46bd      	mov	sp, r7
 80163a6:	bd80      	pop	{r7, pc}

080163a8 <compare_and_replace_if_larger_q7>:

#include "arm_nnfunctions.h"
#include "arm_nnsupportfunctions.h"

static void compare_and_replace_if_larger_q7(int8_t *base, const int8_t *target, int32_t length)
{
 80163a8:	b480      	push	{r7}
 80163aa:	b091      	sub	sp, #68	; 0x44
 80163ac:	af00      	add	r7, sp, #0
 80163ae:	60f8      	str	r0, [r7, #12]
 80163b0:	60b9      	str	r1, [r7, #8]
 80163b2:	607a      	str	r2, [r7, #4]
        base += 16;
        target += 16;
        length -= 16;
    }
#else
    int8_t *dst = base;
 80163b4:	68fb      	ldr	r3, [r7, #12]
 80163b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const int8_t *src = target;
 80163b8:	68bb      	ldr	r3, [r7, #8]
 80163ba:	62bb      	str	r3, [r7, #40]	; 0x28
    union arm_nnword ref_max;
    union arm_nnword comp_max;
    int32_t cnt = length >> 2;
 80163bc:	687b      	ldr	r3, [r7, #4]
 80163be:	109b      	asrs	r3, r3, #2
 80163c0:	63fb      	str	r3, [r7, #60]	; 0x3c

    while (cnt > 0l)
 80163c2:	e04e      	b.n	8016462 <compare_and_replace_if_larger_q7+0xba>
    {
        ref_max.word = arm_nn_read_s8x4(dst);
 80163c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163c6:	637b      	str	r3, [r7, #52]	; 0x34
 80163c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80163ca:	681b      	ldr	r3, [r3, #0]
    memcpy(&val, in_s8, 4);
 80163cc:	61bb      	str	r3, [r7, #24]
    return (val);
 80163ce:	69bb      	ldr	r3, [r7, #24]
 80163d0:	627b      	str	r3, [r7, #36]	; 0x24
 80163d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80163d6:	63bb      	str	r3, [r7, #56]	; 0x38
    memcpy(&val, *in_s8, 4);
 80163d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163da:	681b      	ldr	r3, [r3, #0]
 80163dc:	681b      	ldr	r3, [r3, #0]
 80163de:	617b      	str	r3, [r7, #20]
    *in_s8 += 4;
 80163e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163e2:	681b      	ldr	r3, [r3, #0]
 80163e4:	1d1a      	adds	r2, r3, #4
 80163e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163e8:	601a      	str	r2, [r3, #0]
    return (val);
 80163ea:	697b      	ldr	r3, [r7, #20]
        comp_max.word = arm_nn_read_s8x4_ia(&src);
 80163ec:	623b      	str	r3, [r7, #32]

        if (comp_max.bytes[0] > ref_max.bytes[0])
 80163ee:	f997 2020 	ldrsb.w	r2, [r7, #32]
 80163f2:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 80163f6:	429a      	cmp	r2, r3
 80163f8:	dd03      	ble.n	8016402 <compare_and_replace_if_larger_q7+0x5a>
        {
            ref_max.bytes[0] = comp_max.bytes[0];
 80163fa:	f997 3020 	ldrsb.w	r3, [r7, #32]
 80163fe:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        }
        if (comp_max.bytes[1] > ref_max.bytes[1])
 8016402:	f997 2021 	ldrsb.w	r2, [r7, #33]	; 0x21
 8016406:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 801640a:	429a      	cmp	r2, r3
 801640c:	dd03      	ble.n	8016416 <compare_and_replace_if_larger_q7+0x6e>
        {
            ref_max.bytes[1] = comp_max.bytes[1];
 801640e:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8016412:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        }
        if (comp_max.bytes[2] > ref_max.bytes[2])
 8016416:	f997 2022 	ldrsb.w	r2, [r7, #34]	; 0x22
 801641a:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 801641e:	429a      	cmp	r2, r3
 8016420:	dd03      	ble.n	801642a <compare_and_replace_if_larger_q7+0x82>
        {
            ref_max.bytes[2] = comp_max.bytes[2];
 8016422:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8016426:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        }
        if (comp_max.bytes[3] > ref_max.bytes[3])
 801642a:	f997 2023 	ldrsb.w	r2, [r7, #35]	; 0x23
 801642e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8016432:	429a      	cmp	r2, r3
 8016434:	dd03      	ble.n	801643e <compare_and_replace_if_larger_q7+0x96>
        {
            ref_max.bytes[3] = comp_max.bytes[3];
 8016436:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801643a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }

        arm_nn_write_s8x4_ia(&dst, ref_max.word);
 801643e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016440:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8016444:	633a      	str	r2, [r7, #48]	; 0x30
 8016446:	61fb      	str	r3, [r7, #28]
    memcpy(*in, &value, 4);
 8016448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801644a:	681b      	ldr	r3, [r3, #0]
 801644c:	69fa      	ldr	r2, [r7, #28]
 801644e:	601a      	str	r2, [r3, #0]
    *in += 4;
 8016450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016452:	681b      	ldr	r3, [r3, #0]
 8016454:	1d1a      	adds	r2, r3, #4
 8016456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016458:	601a      	str	r2, [r3, #0]
}
 801645a:	bf00      	nop

        cnt--;
 801645c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801645e:	3b01      	subs	r3, #1
 8016460:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (cnt > 0l)
 8016462:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016464:	2b00      	cmp	r3, #0
 8016466:	dcad      	bgt.n	80163c4 <compare_and_replace_if_larger_q7+0x1c>
    }

    cnt = length & 0x3;
 8016468:	687b      	ldr	r3, [r7, #4]
 801646a:	f003 0303 	and.w	r3, r3, #3
 801646e:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (cnt > 0l)
 8016470:	e015      	b.n	801649e <compare_and_replace_if_larger_q7+0xf6>
    {
        if (*src > *dst)
 8016472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016474:	f993 2000 	ldrsb.w	r2, [r3]
 8016478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801647a:	f993 3000 	ldrsb.w	r3, [r3]
 801647e:	429a      	cmp	r2, r3
 8016480:	dd04      	ble.n	801648c <compare_and_replace_if_larger_q7+0xe4>
        {
            *dst = *src;
 8016482:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016486:	f992 2000 	ldrsb.w	r2, [r2]
 801648a:	701a      	strb	r2, [r3, #0]
        }
        dst++;
 801648c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801648e:	3301      	adds	r3, #1
 8016490:	62fb      	str	r3, [r7, #44]	; 0x2c
        src++;
 8016492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016494:	3301      	adds	r3, #1
 8016496:	62bb      	str	r3, [r7, #40]	; 0x28
        cnt--;
 8016498:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801649a:	3b01      	subs	r3, #1
 801649c:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (cnt > 0l)
 801649e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80164a0:	2b00      	cmp	r3, #0
 80164a2:	dce6      	bgt.n	8016472 <compare_and_replace_if_larger_q7+0xca>
    }
#endif
}
 80164a4:	bf00      	nop
 80164a6:	bf00      	nop
 80164a8:	3744      	adds	r7, #68	; 0x44
 80164aa:	46bd      	mov	sp, r7
 80164ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164b0:	4770      	bx	lr

080164b2 <clamp_output>:

static void clamp_output(int8_t *source, int32_t length, const int32_t act_min, const int32_t act_max)
{
 80164b2:	b480      	push	{r7}
 80164b4:	b08d      	sub	sp, #52	; 0x34
 80164b6:	af00      	add	r7, sp, #0
 80164b8:	60f8      	str	r0, [r7, #12]
 80164ba:	60b9      	str	r1, [r7, #8]
 80164bc:	607a      	str	r2, [r7, #4]
 80164be:	603b      	str	r3, [r7, #0]
        vstrbq_p_s8(source, res, p);
        source += 16;
    }
#else
    union arm_nnword in;
    int32_t cnt = length >> 2;
 80164c0:	68bb      	ldr	r3, [r7, #8]
 80164c2:	109b      	asrs	r3, r3, #2
 80164c4:	62fb      	str	r3, [r7, #44]	; 0x2c

    while (cnt > 0l)
 80164c6:	e060      	b.n	801658a <clamp_output+0xd8>
    {
        in.word = arm_nn_read_s8x4(source);
 80164c8:	68fb      	ldr	r3, [r7, #12]
 80164ca:	623b      	str	r3, [r7, #32]
 80164cc:	6a3b      	ldr	r3, [r7, #32]
 80164ce:	681b      	ldr	r3, [r3, #0]
    memcpy(&val, in_s8, 4);
 80164d0:	61bb      	str	r3, [r7, #24]
    return (val);
 80164d2:	69bb      	ldr	r3, [r7, #24]
 80164d4:	61fb      	str	r3, [r7, #28]

        in.bytes[0] = MAX(in.bytes[0], act_min);
 80164d6:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80164da:	461a      	mov	r2, r3
 80164dc:	687b      	ldr	r3, [r7, #4]
 80164de:	4293      	cmp	r3, r2
 80164e0:	bfb8      	it	lt
 80164e2:	4613      	movlt	r3, r2
 80164e4:	b25b      	sxtb	r3, r3
 80164e6:	773b      	strb	r3, [r7, #28]
        in.bytes[0] = MIN(in.bytes[0], act_max);
 80164e8:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80164ec:	461a      	mov	r2, r3
 80164ee:	683b      	ldr	r3, [r7, #0]
 80164f0:	4293      	cmp	r3, r2
 80164f2:	bfa8      	it	ge
 80164f4:	4613      	movge	r3, r2
 80164f6:	b25b      	sxtb	r3, r3
 80164f8:	773b      	strb	r3, [r7, #28]
        in.bytes[1] = MAX(in.bytes[1], act_min);
 80164fa:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80164fe:	461a      	mov	r2, r3
 8016500:	687b      	ldr	r3, [r7, #4]
 8016502:	4293      	cmp	r3, r2
 8016504:	bfb8      	it	lt
 8016506:	4613      	movlt	r3, r2
 8016508:	b25b      	sxtb	r3, r3
 801650a:	777b      	strb	r3, [r7, #29]
        in.bytes[1] = MIN(in.bytes[1], act_max);
 801650c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8016510:	461a      	mov	r2, r3
 8016512:	683b      	ldr	r3, [r7, #0]
 8016514:	4293      	cmp	r3, r2
 8016516:	bfa8      	it	ge
 8016518:	4613      	movge	r3, r2
 801651a:	b25b      	sxtb	r3, r3
 801651c:	777b      	strb	r3, [r7, #29]
        in.bytes[2] = MAX(in.bytes[2], act_min);
 801651e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8016522:	461a      	mov	r2, r3
 8016524:	687b      	ldr	r3, [r7, #4]
 8016526:	4293      	cmp	r3, r2
 8016528:	bfb8      	it	lt
 801652a:	4613      	movlt	r3, r2
 801652c:	b25b      	sxtb	r3, r3
 801652e:	77bb      	strb	r3, [r7, #30]
        in.bytes[2] = MIN(in.bytes[2], act_max);
 8016530:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8016534:	461a      	mov	r2, r3
 8016536:	683b      	ldr	r3, [r7, #0]
 8016538:	4293      	cmp	r3, r2
 801653a:	bfa8      	it	ge
 801653c:	4613      	movge	r3, r2
 801653e:	b25b      	sxtb	r3, r3
 8016540:	77bb      	strb	r3, [r7, #30]
        in.bytes[3] = MAX(in.bytes[3], act_min);
 8016542:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8016546:	461a      	mov	r2, r3
 8016548:	687b      	ldr	r3, [r7, #4]
 801654a:	4293      	cmp	r3, r2
 801654c:	bfb8      	it	lt
 801654e:	4613      	movlt	r3, r2
 8016550:	b25b      	sxtb	r3, r3
 8016552:	77fb      	strb	r3, [r7, #31]
        in.bytes[3] = MIN(in.bytes[3], act_max);
 8016554:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8016558:	461a      	mov	r2, r3
 801655a:	683b      	ldr	r3, [r7, #0]
 801655c:	4293      	cmp	r3, r2
 801655e:	bfa8      	it	ge
 8016560:	4613      	movge	r3, r2
 8016562:	b25b      	sxtb	r3, r3
 8016564:	77fb      	strb	r3, [r7, #31]

        arm_nn_write_s8x4_ia(&source, in.word);
 8016566:	69fb      	ldr	r3, [r7, #28]
 8016568:	f107 020c 	add.w	r2, r7, #12
 801656c:	627a      	str	r2, [r7, #36]	; 0x24
 801656e:	617b      	str	r3, [r7, #20]
    memcpy(*in, &value, 4);
 8016570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016572:	681b      	ldr	r3, [r3, #0]
 8016574:	697a      	ldr	r2, [r7, #20]
 8016576:	601a      	str	r2, [r3, #0]
    *in += 4;
 8016578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801657a:	681b      	ldr	r3, [r3, #0]
 801657c:	1d1a      	adds	r2, r3, #4
 801657e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016580:	601a      	str	r2, [r3, #0]
}
 8016582:	bf00      	nop
        cnt--;
 8016584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016586:	3b01      	subs	r3, #1
 8016588:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (cnt > 0l)
 801658a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801658c:	2b00      	cmp	r3, #0
 801658e:	dc9b      	bgt.n	80164c8 <clamp_output+0x16>
    }

    cnt = length & 0x3;
 8016590:	68bb      	ldr	r3, [r7, #8]
 8016592:	f003 0303 	and.w	r3, r3, #3
 8016596:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (cnt > 0l)
 8016598:	e018      	b.n	80165cc <clamp_output+0x11a>
    {
        int32_t comp = *source;
 801659a:	68fb      	ldr	r3, [r7, #12]
 801659c:	f993 3000 	ldrsb.w	r3, [r3]
 80165a0:	62bb      	str	r3, [r7, #40]	; 0x28
        comp = MAX(comp, act_min);
 80165a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80165a4:	687b      	ldr	r3, [r7, #4]
 80165a6:	4293      	cmp	r3, r2
 80165a8:	bfb8      	it	lt
 80165aa:	4613      	movlt	r3, r2
 80165ac:	62bb      	str	r3, [r7, #40]	; 0x28
        comp = MIN(comp, act_max);
 80165ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80165b0:	683b      	ldr	r3, [r7, #0]
 80165b2:	4293      	cmp	r3, r2
 80165b4:	bfa8      	it	ge
 80165b6:	4613      	movge	r3, r2
 80165b8:	62bb      	str	r3, [r7, #40]	; 0x28
        *source++ = (int8_t)comp;
 80165ba:	68fb      	ldr	r3, [r7, #12]
 80165bc:	1c5a      	adds	r2, r3, #1
 80165be:	60fa      	str	r2, [r7, #12]
 80165c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80165c2:	b252      	sxtb	r2, r2
 80165c4:	701a      	strb	r2, [r3, #0]
        cnt--;
 80165c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165c8:	3b01      	subs	r3, #1
 80165ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (cnt > 0l)
 80165cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165ce:	2b00      	cmp	r3, #0
 80165d0:	dce3      	bgt.n	801659a <clamp_output+0xe8>
    }
#endif
}
 80165d2:	bf00      	nop
 80165d4:	bf00      	nop
 80165d6:	3734      	adds	r7, #52	; 0x34
 80165d8:	46bd      	mov	sp, r7
 80165da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165de:	4770      	bx	lr

080165e0 <arm_max_pool_s8>:
                                    const cmsis_nn_dims *input_dims,
                                    const int8_t *src,
                                    const cmsis_nn_dims *filter_dims,
                                    const cmsis_nn_dims *output_dims,
                                    int8_t *dst)
{
 80165e0:	b580      	push	{r7, lr}
 80165e2:	b0a2      	sub	sp, #136	; 0x88
 80165e4:	af00      	add	r7, sp, #0
 80165e6:	60f8      	str	r0, [r7, #12]
 80165e8:	60b9      	str	r1, [r7, #8]
 80165ea:	607a      	str	r2, [r7, #4]
 80165ec:	603b      	str	r3, [r7, #0]
    const int32_t input_y = input_dims->h;
 80165ee:	687b      	ldr	r3, [r7, #4]
 80165f0:	685b      	ldr	r3, [r3, #4]
 80165f2:	66bb      	str	r3, [r7, #104]	; 0x68
    const int32_t input_x = input_dims->w;
 80165f4:	687b      	ldr	r3, [r7, #4]
 80165f6:	689b      	ldr	r3, [r3, #8]
 80165f8:	667b      	str	r3, [r7, #100]	; 0x64
    const int32_t output_y = output_dims->h;
 80165fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80165fe:	685b      	ldr	r3, [r3, #4]
 8016600:	663b      	str	r3, [r7, #96]	; 0x60
    const int32_t output_x = output_dims->w;
 8016602:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8016606:	689b      	ldr	r3, [r3, #8]
 8016608:	65fb      	str	r3, [r7, #92]	; 0x5c
    const int32_t stride_y = pool_params->stride.h;
 801660a:	68bb      	ldr	r3, [r7, #8]
 801660c:	685b      	ldr	r3, [r3, #4]
 801660e:	65bb      	str	r3, [r7, #88]	; 0x58
    const int32_t stride_x = pool_params->stride.w;
 8016610:	68bb      	ldr	r3, [r7, #8]
 8016612:	681b      	ldr	r3, [r3, #0]
 8016614:	657b      	str	r3, [r7, #84]	; 0x54
    const int32_t kernel_y = filter_dims->h;
 8016616:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801661a:	685b      	ldr	r3, [r3, #4]
 801661c:	653b      	str	r3, [r7, #80]	; 0x50
    const int32_t kernel_x = filter_dims->w;
 801661e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8016622:	689b      	ldr	r3, [r3, #8]
 8016624:	64fb      	str	r3, [r7, #76]	; 0x4c
    const int32_t pad_y = pool_params->padding.h;
 8016626:	68bb      	ldr	r3, [r7, #8]
 8016628:	68db      	ldr	r3, [r3, #12]
 801662a:	64bb      	str	r3, [r7, #72]	; 0x48
    const int32_t pad_x = pool_params->padding.w;
 801662c:	68bb      	ldr	r3, [r7, #8]
 801662e:	689b      	ldr	r3, [r3, #8]
 8016630:	647b      	str	r3, [r7, #68]	; 0x44
    const int32_t act_min = pool_params->activation.min;
 8016632:	68bb      	ldr	r3, [r7, #8]
 8016634:	691b      	ldr	r3, [r3, #16]
 8016636:	643b      	str	r3, [r7, #64]	; 0x40
    const int32_t act_max = pool_params->activation.max;
 8016638:	68bb      	ldr	r3, [r7, #8]
 801663a:	695b      	ldr	r3, [r3, #20]
 801663c:	63fb      	str	r3, [r7, #60]	; 0x3c
    const int32_t channel_in = input_dims->c;
 801663e:	687b      	ldr	r3, [r7, #4]
 8016640:	68db      	ldr	r3, [r3, #12]
 8016642:	63bb      	str	r3, [r7, #56]	; 0x38
    (void)ctx;
    int8_t *dst_base = dst;
 8016644:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8016648:	637b      	str	r3, [r7, #52]	; 0x34

    for (int i_y = 0, base_idx_y = -pad_y; i_y < output_y; base_idx_y += stride_y, i_y++)
 801664a:	2300      	movs	r3, #0
 801664c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8016650:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016652:	425b      	negs	r3, r3
 8016654:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8016658:	e086      	b.n	8016768 <arm_max_pool_s8+0x188>
    {
        for (int i_x = 0, base_idx_x = -pad_x; i_x < output_x; base_idx_x += stride_x, i_x++)
 801665a:	2300      	movs	r3, #0
 801665c:	67fb      	str	r3, [r7, #124]	; 0x7c
 801665e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016660:	425b      	negs	r3, r3
 8016662:	67bb      	str	r3, [r7, #120]	; 0x78
 8016664:	e071      	b.n	801674a <arm_max_pool_s8+0x16a>
        {
            /* Condition for kernel start dimension: (base_idx_<x,y> + kernel_<x,y>_start) >= 0 */
            const int32_t ker_y_start = MAX(0, -base_idx_y);
 8016666:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801666a:	2b00      	cmp	r3, #0
 801666c:	dc03      	bgt.n	8016676 <arm_max_pool_s8+0x96>
 801666e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016672:	425b      	negs	r3, r3
 8016674:	e000      	b.n	8016678 <arm_max_pool_s8+0x98>
 8016676:	2300      	movs	r3, #0
 8016678:	633b      	str	r3, [r7, #48]	; 0x30
            const int32_t ker_x_start = MAX(0, -base_idx_x);
 801667a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801667c:	2b00      	cmp	r3, #0
 801667e:	dc02      	bgt.n	8016686 <arm_max_pool_s8+0xa6>
 8016680:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016682:	425b      	negs	r3, r3
 8016684:	e000      	b.n	8016688 <arm_max_pool_s8+0xa8>
 8016686:	2300      	movs	r3, #0
 8016688:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Condition for kernel end dimension: (base_idx_<x,y> + kernel_<x,y>_end) < dim_src_<width,height> */
            const int32_t kernel_y_end = MIN(kernel_y, input_y - base_idx_y);
 801668a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801668c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016690:	1ad3      	subs	r3, r2, r3
 8016692:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8016694:	4293      	cmp	r3, r2
 8016696:	bfa8      	it	ge
 8016698:	4613      	movge	r3, r2
 801669a:	62bb      	str	r3, [r7, #40]	; 0x28
            const int32_t kernel_x_end = MIN(kernel_x, input_x - base_idx_x);
 801669c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801669e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80166a0:	1ad3      	subs	r3, r2, r3
 80166a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80166a4:	4293      	cmp	r3, r2
 80166a6:	bfa8      	it	ge
 80166a8:	4613      	movge	r3, r2
 80166aa:	627b      	str	r3, [r7, #36]	; 0x24

            int count = 0;
 80166ac:	2300      	movs	r3, #0
 80166ae:	677b      	str	r3, [r7, #116]	; 0x74

            for (int k_y = ker_y_start; k_y < kernel_y_end; k_y++)
 80166b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166b2:	673b      	str	r3, [r7, #112]	; 0x70
 80166b4:	e038      	b.n	8016728 <arm_max_pool_s8+0x148>
            {
                for (int k_x = ker_x_start; k_x < kernel_x_end; k_x++)
 80166b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80166ba:	e02e      	b.n	801671a <arm_max_pool_s8+0x13a>
                {
                    const int8_t *start = src + channel_in * (k_x + base_idx_x + (k_y + base_idx_y) * input_x);
 80166bc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80166be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80166c0:	441a      	add	r2, r3
 80166c2:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80166c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80166c8:	440b      	add	r3, r1
 80166ca:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80166cc:	fb01 f303 	mul.w	r3, r1, r3
 80166d0:	4413      	add	r3, r2
 80166d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80166d4:	fb02 f303 	mul.w	r3, r2, r3
 80166d8:	461a      	mov	r2, r3
 80166da:	683b      	ldr	r3, [r7, #0]
 80166dc:	4413      	add	r3, r2
 80166de:	623b      	str	r3, [r7, #32]

                    if (count == 0)
 80166e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80166e2:	2b00      	cmp	r3, #0
 80166e4:	d110      	bne.n	8016708 <arm_max_pool_s8+0x128>
                    {
                        arm_memcpy_s8(dst, start, channel_in);
 80166e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80166e8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80166ec:	61fa      	str	r2, [r7, #28]
 80166ee:	6a3a      	ldr	r2, [r7, #32]
 80166f0:	61ba      	str	r2, [r7, #24]
 80166f2:	617b      	str	r3, [r7, #20]
    memcpy(dst, src, block_size);
 80166f4:	697a      	ldr	r2, [r7, #20]
 80166f6:	69b9      	ldr	r1, [r7, #24]
 80166f8:	69f8      	ldr	r0, [r7, #28]
 80166fa:	f001 f9dc 	bl	8017ab6 <memcpy>
}
 80166fe:	bf00      	nop
                        count++;
 8016700:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016702:	3301      	adds	r3, #1
 8016704:	677b      	str	r3, [r7, #116]	; 0x74
 8016706:	e005      	b.n	8016714 <arm_max_pool_s8+0x134>
                    }
                    else
                    {
                        compare_and_replace_if_larger_q7(dst, start, channel_in);
 8016708:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801670a:	6a39      	ldr	r1, [r7, #32]
 801670c:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8016710:	f7ff fe4a 	bl	80163a8 <compare_and_replace_if_larger_q7>
                for (int k_x = ker_x_start; k_x < kernel_x_end; k_x++)
 8016714:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016716:	3301      	adds	r3, #1
 8016718:	66fb      	str	r3, [r7, #108]	; 0x6c
 801671a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801671c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801671e:	429a      	cmp	r2, r3
 8016720:	dbcc      	blt.n	80166bc <arm_max_pool_s8+0xdc>
            for (int k_y = ker_y_start; k_y < kernel_y_end; k_y++)
 8016722:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016724:	3301      	adds	r3, #1
 8016726:	673b      	str	r3, [r7, #112]	; 0x70
 8016728:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801672a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801672c:	429a      	cmp	r2, r3
 801672e:	dbc2      	blt.n	80166b6 <arm_max_pool_s8+0xd6>
                    }
                }
            }
            /* 'count' is expected to be non-zero here. */
            dst += channel_in;
 8016730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016732:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8016736:	4413      	add	r3, r2
 8016738:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        for (int i_x = 0, base_idx_x = -pad_x; i_x < output_x; base_idx_x += stride_x, i_x++)
 801673c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801673e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016740:	4413      	add	r3, r2
 8016742:	67bb      	str	r3, [r7, #120]	; 0x78
 8016744:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8016746:	3301      	adds	r3, #1
 8016748:	67fb      	str	r3, [r7, #124]	; 0x7c
 801674a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801674c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801674e:	429a      	cmp	r2, r3
 8016750:	db89      	blt.n	8016666 <arm_max_pool_s8+0x86>
    for (int i_y = 0, base_idx_y = -pad_y; i_y < output_y; base_idx_y += stride_y, i_y++)
 8016752:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8016756:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016758:	4413      	add	r3, r2
 801675a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801675e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8016762:	3301      	adds	r3, #1
 8016764:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8016768:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801676c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801676e:	429a      	cmp	r2, r3
 8016770:	f6ff af73 	blt.w	801665a <arm_max_pool_s8+0x7a>
        }
    }

    clamp_output(dst_base, output_x * output_y * channel_in, act_min, act_max);
 8016774:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016776:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8016778:	fb02 f303 	mul.w	r3, r2, r3
 801677c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801677e:	fb02 f103 	mul.w	r1, r2, r3
 8016782:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016784:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016786:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8016788:	f7ff fe93 	bl	80164b2 <clamp_output>

    return ARM_CMSIS_NN_SUCCESS;
 801678c:	2300      	movs	r3, #0
}
 801678e:	4618      	mov	r0, r3
 8016790:	3788      	adds	r7, #136	; 0x88
 8016792:	46bd      	mov	sp, r7
 8016794:	bd80      	pop	{r7, pc}

08016796 <_ZdlPvj>:
 8016796:	f000 b80f 	b.w	80167b8 <_ZdlPv>

0801679a <__cxa_guard_acquire>:
 801679a:	6803      	ldr	r3, [r0, #0]
 801679c:	07db      	lsls	r3, r3, #31
 801679e:	d406      	bmi.n	80167ae <__cxa_guard_acquire+0x14>
 80167a0:	7843      	ldrb	r3, [r0, #1]
 80167a2:	b103      	cbz	r3, 80167a6 <__cxa_guard_acquire+0xc>
 80167a4:	deff      	udf	#255	; 0xff
 80167a6:	2301      	movs	r3, #1
 80167a8:	7043      	strb	r3, [r0, #1]
 80167aa:	4618      	mov	r0, r3
 80167ac:	4770      	bx	lr
 80167ae:	2000      	movs	r0, #0
 80167b0:	4770      	bx	lr

080167b2 <__cxa_guard_release>:
 80167b2:	2301      	movs	r3, #1
 80167b4:	6003      	str	r3, [r0, #0]
 80167b6:	4770      	bx	lr

080167b8 <_ZdlPv>:
 80167b8:	f000 ba0c 	b.w	8016bd4 <free>

080167bc <frexp>:
 80167bc:	b570      	push	{r4, r5, r6, lr}
 80167be:	2100      	movs	r1, #0
 80167c0:	ec55 4b10 	vmov	r4, r5, d0
 80167c4:	6001      	str	r1, [r0, #0]
 80167c6:	4916      	ldr	r1, [pc, #88]	; (8016820 <frexp+0x64>)
 80167c8:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 80167cc:	428a      	cmp	r2, r1
 80167ce:	4606      	mov	r6, r0
 80167d0:	462b      	mov	r3, r5
 80167d2:	dc22      	bgt.n	801681a <frexp+0x5e>
 80167d4:	ee10 1a10 	vmov	r1, s0
 80167d8:	4311      	orrs	r1, r2
 80167da:	d01e      	beq.n	801681a <frexp+0x5e>
 80167dc:	4911      	ldr	r1, [pc, #68]	; (8016824 <frexp+0x68>)
 80167de:	4029      	ands	r1, r5
 80167e0:	b969      	cbnz	r1, 80167fe <frexp+0x42>
 80167e2:	4b11      	ldr	r3, [pc, #68]	; (8016828 <frexp+0x6c>)
 80167e4:	2200      	movs	r2, #0
 80167e6:	ee10 0a10 	vmov	r0, s0
 80167ea:	4629      	mov	r1, r5
 80167ec:	f7e9 ff3c 	bl	8000668 <__aeabi_dmul>
 80167f0:	460b      	mov	r3, r1
 80167f2:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80167f6:	f06f 0135 	mvn.w	r1, #53	; 0x35
 80167fa:	4604      	mov	r4, r0
 80167fc:	6031      	str	r1, [r6, #0]
 80167fe:	6831      	ldr	r1, [r6, #0]
 8016800:	1512      	asrs	r2, r2, #20
 8016802:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8016806:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 801680a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801680e:	4411      	add	r1, r2
 8016810:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 8016814:	6031      	str	r1, [r6, #0]
 8016816:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 801681a:	ec45 4b10 	vmov	d0, r4, r5
 801681e:	bd70      	pop	{r4, r5, r6, pc}
 8016820:	7fefffff 	.word	0x7fefffff
 8016824:	7ff00000 	.word	0x7ff00000
 8016828:	43500000 	.word	0x43500000

0801682c <expf>:
 801682c:	b508      	push	{r3, lr}
 801682e:	ed2d 8b02 	vpush	{d8}
 8016832:	eef0 8a40 	vmov.f32	s17, s0
 8016836:	f000 f8cb 	bl	80169d0 <__ieee754_expf>
 801683a:	eeb0 8a40 	vmov.f32	s16, s0
 801683e:	eeb0 0a68 	vmov.f32	s0, s17
 8016842:	f000 f829 	bl	8016898 <finitef>
 8016846:	b160      	cbz	r0, 8016862 <expf+0x36>
 8016848:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8016888 <expf+0x5c>
 801684c:	eef4 8ae7 	vcmpe.f32	s17, s15
 8016850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016854:	dd0a      	ble.n	801686c <expf+0x40>
 8016856:	f001 f901 	bl	8017a5c <__errno>
 801685a:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 801688c <expf+0x60>
 801685e:	2322      	movs	r3, #34	; 0x22
 8016860:	6003      	str	r3, [r0, #0]
 8016862:	eeb0 0a48 	vmov.f32	s0, s16
 8016866:	ecbd 8b02 	vpop	{d8}
 801686a:	bd08      	pop	{r3, pc}
 801686c:	eddf 7a08 	vldr	s15, [pc, #32]	; 8016890 <expf+0x64>
 8016870:	eef4 8ae7 	vcmpe.f32	s17, s15
 8016874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016878:	d5f3      	bpl.n	8016862 <expf+0x36>
 801687a:	f001 f8ef 	bl	8017a5c <__errno>
 801687e:	2322      	movs	r3, #34	; 0x22
 8016880:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8016894 <expf+0x68>
 8016884:	6003      	str	r3, [r0, #0]
 8016886:	e7ec      	b.n	8016862 <expf+0x36>
 8016888:	42b17217 	.word	0x42b17217
 801688c:	7f800000 	.word	0x7f800000
 8016890:	c2cff1b5 	.word	0xc2cff1b5
 8016894:	00000000 	.word	0x00000000

08016898 <finitef>:
 8016898:	b082      	sub	sp, #8
 801689a:	ed8d 0a01 	vstr	s0, [sp, #4]
 801689e:	9801      	ldr	r0, [sp, #4]
 80168a0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80168a4:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80168a8:	bfac      	ite	ge
 80168aa:	2000      	movge	r0, #0
 80168ac:	2001      	movlt	r0, #1
 80168ae:	b002      	add	sp, #8
 80168b0:	4770      	bx	lr

080168b2 <with_errnof>:
 80168b2:	b513      	push	{r0, r1, r4, lr}
 80168b4:	4604      	mov	r4, r0
 80168b6:	ed8d 0a01 	vstr	s0, [sp, #4]
 80168ba:	f001 f8cf 	bl	8017a5c <__errno>
 80168be:	ed9d 0a01 	vldr	s0, [sp, #4]
 80168c2:	6004      	str	r4, [r0, #0]
 80168c4:	b002      	add	sp, #8
 80168c6:	bd10      	pop	{r4, pc}

080168c8 <xflowf>:
 80168c8:	b130      	cbz	r0, 80168d8 <xflowf+0x10>
 80168ca:	eef1 7a40 	vneg.f32	s15, s0
 80168ce:	ee27 0a80 	vmul.f32	s0, s15, s0
 80168d2:	2022      	movs	r0, #34	; 0x22
 80168d4:	f7ff bfed 	b.w	80168b2 <with_errnof>
 80168d8:	eef0 7a40 	vmov.f32	s15, s0
 80168dc:	e7f7      	b.n	80168ce <xflowf+0x6>
	...

080168e0 <__math_uflowf>:
 80168e0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80168e8 <__math_uflowf+0x8>
 80168e4:	f7ff bff0 	b.w	80168c8 <xflowf>
 80168e8:	10000000 	.word	0x10000000

080168ec <__math_oflowf>:
 80168ec:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80168f4 <__math_oflowf+0x8>
 80168f0:	f7ff bfea 	b.w	80168c8 <xflowf>
 80168f4:	70000000 	.word	0x70000000

080168f8 <round>:
 80168f8:	ec53 2b10 	vmov	r2, r3, d0
 80168fc:	b570      	push	{r4, r5, r6, lr}
 80168fe:	f3c3 540a 	ubfx	r4, r3, #20, #11
 8016902:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 8016906:	2813      	cmp	r0, #19
 8016908:	ee10 5a10 	vmov	r5, s0
 801690c:	4619      	mov	r1, r3
 801690e:	dc18      	bgt.n	8016942 <round+0x4a>
 8016910:	2800      	cmp	r0, #0
 8016912:	da09      	bge.n	8016928 <round+0x30>
 8016914:	3001      	adds	r0, #1
 8016916:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 801691a:	d103      	bne.n	8016924 <round+0x2c>
 801691c:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8016920:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8016924:	2300      	movs	r3, #0
 8016926:	e02a      	b.n	801697e <round+0x86>
 8016928:	4c16      	ldr	r4, [pc, #88]	; (8016984 <round+0x8c>)
 801692a:	4104      	asrs	r4, r0
 801692c:	ea03 0604 	and.w	r6, r3, r4
 8016930:	4316      	orrs	r6, r2
 8016932:	d011      	beq.n	8016958 <round+0x60>
 8016934:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8016938:	4103      	asrs	r3, r0
 801693a:	440b      	add	r3, r1
 801693c:	ea23 0104 	bic.w	r1, r3, r4
 8016940:	e7f0      	b.n	8016924 <round+0x2c>
 8016942:	2833      	cmp	r0, #51	; 0x33
 8016944:	dd0b      	ble.n	801695e <round+0x66>
 8016946:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 801694a:	d105      	bne.n	8016958 <round+0x60>
 801694c:	ee10 0a10 	vmov	r0, s0
 8016950:	f7e9 fcd4 	bl	80002fc <__adddf3>
 8016954:	4602      	mov	r2, r0
 8016956:	460b      	mov	r3, r1
 8016958:	ec43 2b10 	vmov	d0, r2, r3
 801695c:	bd70      	pop	{r4, r5, r6, pc}
 801695e:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 8016962:	f04f 34ff 	mov.w	r4, #4294967295
 8016966:	40f4      	lsrs	r4, r6
 8016968:	4214      	tst	r4, r2
 801696a:	d0f5      	beq.n	8016958 <round+0x60>
 801696c:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 8016970:	2301      	movs	r3, #1
 8016972:	4083      	lsls	r3, r0
 8016974:	195b      	adds	r3, r3, r5
 8016976:	bf28      	it	cs
 8016978:	3101      	addcs	r1, #1
 801697a:	ea23 0304 	bic.w	r3, r3, r4
 801697e:	461a      	mov	r2, r3
 8016980:	460b      	mov	r3, r1
 8016982:	e7e9      	b.n	8016958 <round+0x60>
 8016984:	000fffff 	.word	0x000fffff

08016988 <roundf>:
 8016988:	ee10 0a10 	vmov	r0, s0
 801698c:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8016990:	3a7f      	subs	r2, #127	; 0x7f
 8016992:	2a16      	cmp	r2, #22
 8016994:	dc15      	bgt.n	80169c2 <roundf+0x3a>
 8016996:	2a00      	cmp	r2, #0
 8016998:	da08      	bge.n	80169ac <roundf+0x24>
 801699a:	3201      	adds	r2, #1
 801699c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80169a0:	d101      	bne.n	80169a6 <roundf+0x1e>
 80169a2:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 80169a6:	ee00 3a10 	vmov	s0, r3
 80169aa:	4770      	bx	lr
 80169ac:	4907      	ldr	r1, [pc, #28]	; (80169cc <roundf+0x44>)
 80169ae:	4111      	asrs	r1, r2
 80169b0:	4208      	tst	r0, r1
 80169b2:	d0fa      	beq.n	80169aa <roundf+0x22>
 80169b4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80169b8:	4113      	asrs	r3, r2
 80169ba:	4403      	add	r3, r0
 80169bc:	ea23 0301 	bic.w	r3, r3, r1
 80169c0:	e7f1      	b.n	80169a6 <roundf+0x1e>
 80169c2:	2a80      	cmp	r2, #128	; 0x80
 80169c4:	d1f1      	bne.n	80169aa <roundf+0x22>
 80169c6:	ee30 0a00 	vadd.f32	s0, s0, s0
 80169ca:	4770      	bx	lr
 80169cc:	007fffff 	.word	0x007fffff

080169d0 <__ieee754_expf>:
 80169d0:	ee10 2a10 	vmov	r2, s0
 80169d4:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 80169d8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80169dc:	d902      	bls.n	80169e4 <__ieee754_expf+0x14>
 80169de:	ee30 0a00 	vadd.f32	s0, s0, s0
 80169e2:	4770      	bx	lr
 80169e4:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 80169e8:	d106      	bne.n	80169f8 <__ieee754_expf+0x28>
 80169ea:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8016b24 <__ieee754_expf+0x154>
 80169ee:	2900      	cmp	r1, #0
 80169f0:	bf18      	it	ne
 80169f2:	eeb0 0a67 	vmovne.f32	s0, s15
 80169f6:	4770      	bx	lr
 80169f8:	484b      	ldr	r0, [pc, #300]	; (8016b28 <__ieee754_expf+0x158>)
 80169fa:	4282      	cmp	r2, r0
 80169fc:	dd02      	ble.n	8016a04 <__ieee754_expf+0x34>
 80169fe:	2000      	movs	r0, #0
 8016a00:	f7ff bf74 	b.w	80168ec <__math_oflowf>
 8016a04:	2a00      	cmp	r2, #0
 8016a06:	da05      	bge.n	8016a14 <__ieee754_expf+0x44>
 8016a08:	4a48      	ldr	r2, [pc, #288]	; (8016b2c <__ieee754_expf+0x15c>)
 8016a0a:	4293      	cmp	r3, r2
 8016a0c:	d902      	bls.n	8016a14 <__ieee754_expf+0x44>
 8016a0e:	2000      	movs	r0, #0
 8016a10:	f7ff bf66 	b.w	80168e0 <__math_uflowf>
 8016a14:	4a46      	ldr	r2, [pc, #280]	; (8016b30 <__ieee754_expf+0x160>)
 8016a16:	4293      	cmp	r3, r2
 8016a18:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8016a1c:	d952      	bls.n	8016ac4 <__ieee754_expf+0xf4>
 8016a1e:	4a45      	ldr	r2, [pc, #276]	; (8016b34 <__ieee754_expf+0x164>)
 8016a20:	4293      	cmp	r3, r2
 8016a22:	ea4f 0281 	mov.w	r2, r1, lsl #2
 8016a26:	d834      	bhi.n	8016a92 <__ieee754_expf+0xc2>
 8016a28:	4b43      	ldr	r3, [pc, #268]	; (8016b38 <__ieee754_expf+0x168>)
 8016a2a:	4413      	add	r3, r2
 8016a2c:	ed93 7a00 	vldr	s14, [r3]
 8016a30:	4b42      	ldr	r3, [pc, #264]	; (8016b3c <__ieee754_expf+0x16c>)
 8016a32:	4413      	add	r3, r2
 8016a34:	ee30 7a47 	vsub.f32	s14, s0, s14
 8016a38:	f1c1 0201 	rsb	r2, r1, #1
 8016a3c:	edd3 7a00 	vldr	s15, [r3]
 8016a40:	1a52      	subs	r2, r2, r1
 8016a42:	ee37 0a67 	vsub.f32	s0, s14, s15
 8016a46:	ee20 6a00 	vmul.f32	s12, s0, s0
 8016a4a:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 8016b40 <__ieee754_expf+0x170>
 8016a4e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8016b44 <__ieee754_expf+0x174>
 8016a52:	eee6 6a05 	vfma.f32	s13, s12, s10
 8016a56:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 8016b48 <__ieee754_expf+0x178>
 8016a5a:	eea6 5a86 	vfma.f32	s10, s13, s12
 8016a5e:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8016b4c <__ieee754_expf+0x17c>
 8016a62:	eee5 6a06 	vfma.f32	s13, s10, s12
 8016a66:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8016b50 <__ieee754_expf+0x180>
 8016a6a:	eea6 5a86 	vfma.f32	s10, s13, s12
 8016a6e:	eef0 6a40 	vmov.f32	s13, s0
 8016a72:	eee5 6a46 	vfms.f32	s13, s10, s12
 8016a76:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8016a7a:	ee20 5a26 	vmul.f32	s10, s0, s13
 8016a7e:	bb92      	cbnz	r2, 8016ae6 <__ieee754_expf+0x116>
 8016a80:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8016a84:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8016a88:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8016a8c:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8016a90:	4770      	bx	lr
 8016a92:	4b30      	ldr	r3, [pc, #192]	; (8016b54 <__ieee754_expf+0x184>)
 8016a94:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8016b58 <__ieee754_expf+0x188>
 8016a98:	eddf 6a30 	vldr	s13, [pc, #192]	; 8016b5c <__ieee754_expf+0x18c>
 8016a9c:	4413      	add	r3, r2
 8016a9e:	edd3 7a00 	vldr	s15, [r3]
 8016aa2:	eee0 7a07 	vfma.f32	s15, s0, s14
 8016aa6:	eeb0 7a40 	vmov.f32	s14, s0
 8016aaa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016aae:	ee17 2a90 	vmov	r2, s15
 8016ab2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016ab6:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8016aba:	eddf 6a29 	vldr	s13, [pc, #164]	; 8016b60 <__ieee754_expf+0x190>
 8016abe:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016ac2:	e7be      	b.n	8016a42 <__ieee754_expf+0x72>
 8016ac4:	f1b3 5f50 	cmp.w	r3, #872415232	; 0x34000000
 8016ac8:	d20b      	bcs.n	8016ae2 <__ieee754_expf+0x112>
 8016aca:	eddf 6a26 	vldr	s13, [pc, #152]	; 8016b64 <__ieee754_expf+0x194>
 8016ace:	ee70 6a26 	vadd.f32	s13, s0, s13
 8016ad2:	eef4 6ae5 	vcmpe.f32	s13, s11
 8016ad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ada:	dd02      	ble.n	8016ae2 <__ieee754_expf+0x112>
 8016adc:	ee30 0a25 	vadd.f32	s0, s0, s11
 8016ae0:	4770      	bx	lr
 8016ae2:	2200      	movs	r2, #0
 8016ae4:	e7af      	b.n	8016a46 <__ieee754_expf+0x76>
 8016ae6:	ee36 6a66 	vsub.f32	s12, s12, s13
 8016aea:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8016aee:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8016af2:	bfb8      	it	lt
 8016af4:	3264      	addlt	r2, #100	; 0x64
 8016af6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8016afa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016afe:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8016b02:	ee17 3a90 	vmov	r3, s15
 8016b06:	bfab      	itete	ge
 8016b08:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8016b0c:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8016b10:	ee00 3a10 	vmovge	s0, r3
 8016b14:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 8016b68 <__ieee754_expf+0x198>
 8016b18:	bfbc      	itt	lt
 8016b1a:	ee00 3a10 	vmovlt	s0, r3
 8016b1e:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8016b22:	4770      	bx	lr
 8016b24:	00000000 	.word	0x00000000
 8016b28:	42b17217 	.word	0x42b17217
 8016b2c:	42cff1b5 	.word	0x42cff1b5
 8016b30:	3eb17218 	.word	0x3eb17218
 8016b34:	3f851591 	.word	0x3f851591
 8016b38:	0806cfb0 	.word	0x0806cfb0
 8016b3c:	0806cfb8 	.word	0x0806cfb8
 8016b40:	3331bb4c 	.word	0x3331bb4c
 8016b44:	b5ddea0e 	.word	0xb5ddea0e
 8016b48:	388ab355 	.word	0x388ab355
 8016b4c:	bb360b61 	.word	0xbb360b61
 8016b50:	3e2aaaab 	.word	0x3e2aaaab
 8016b54:	0806cfa8 	.word	0x0806cfa8
 8016b58:	3fb8aa3b 	.word	0x3fb8aa3b
 8016b5c:	3f317180 	.word	0x3f317180
 8016b60:	3717f7d1 	.word	0x3717f7d1
 8016b64:	7149f2ca 	.word	0x7149f2ca
 8016b68:	0d800000 	.word	0x0d800000

08016b6c <abort>:
 8016b6c:	b508      	push	{r3, lr}
 8016b6e:	2006      	movs	r0, #6
 8016b70:	f000 fefe 	bl	8017970 <raise>
 8016b74:	2001      	movs	r0, #1
 8016b76:	f7eb f899 	bl	8001cac <_exit>
	...

08016b7c <__assert_func>:
 8016b7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016b7e:	4614      	mov	r4, r2
 8016b80:	461a      	mov	r2, r3
 8016b82:	4b09      	ldr	r3, [pc, #36]	; (8016ba8 <__assert_func+0x2c>)
 8016b84:	681b      	ldr	r3, [r3, #0]
 8016b86:	4605      	mov	r5, r0
 8016b88:	68d8      	ldr	r0, [r3, #12]
 8016b8a:	b14c      	cbz	r4, 8016ba0 <__assert_func+0x24>
 8016b8c:	4b07      	ldr	r3, [pc, #28]	; (8016bac <__assert_func+0x30>)
 8016b8e:	9100      	str	r1, [sp, #0]
 8016b90:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016b94:	4906      	ldr	r1, [pc, #24]	; (8016bb0 <__assert_func+0x34>)
 8016b96:	462b      	mov	r3, r5
 8016b98:	f000 fdda 	bl	8017750 <fiprintf>
 8016b9c:	f7ff ffe6 	bl	8016b6c <abort>
 8016ba0:	4b04      	ldr	r3, [pc, #16]	; (8016bb4 <__assert_func+0x38>)
 8016ba2:	461c      	mov	r4, r3
 8016ba4:	e7f3      	b.n	8016b8e <__assert_func+0x12>
 8016ba6:	bf00      	nop
 8016ba8:	20000068 	.word	0x20000068
 8016bac:	0806cfc0 	.word	0x0806cfc0
 8016bb0:	0806cfcd 	.word	0x0806cfcd
 8016bb4:	0806cffb 	.word	0x0806cffb

08016bb8 <atexit>:
 8016bb8:	2300      	movs	r3, #0
 8016bba:	4601      	mov	r1, r0
 8016bbc:	461a      	mov	r2, r3
 8016bbe:	4618      	mov	r0, r3
 8016bc0:	f000 bf88 	b.w	8017ad4 <__register_exitproc>

08016bc4 <malloc>:
 8016bc4:	4b02      	ldr	r3, [pc, #8]	; (8016bd0 <malloc+0xc>)
 8016bc6:	4601      	mov	r1, r0
 8016bc8:	6818      	ldr	r0, [r3, #0]
 8016bca:	f000 b82b 	b.w	8016c24 <_malloc_r>
 8016bce:	bf00      	nop
 8016bd0:	20000068 	.word	0x20000068

08016bd4 <free>:
 8016bd4:	4b02      	ldr	r3, [pc, #8]	; (8016be0 <free+0xc>)
 8016bd6:	4601      	mov	r1, r0
 8016bd8:	6818      	ldr	r0, [r3, #0]
 8016bda:	f001 be53 	b.w	8018884 <_free_r>
 8016bde:	bf00      	nop
 8016be0:	20000068 	.word	0x20000068

08016be4 <sbrk_aligned>:
 8016be4:	b570      	push	{r4, r5, r6, lr}
 8016be6:	4e0e      	ldr	r6, [pc, #56]	; (8016c20 <sbrk_aligned+0x3c>)
 8016be8:	460c      	mov	r4, r1
 8016bea:	6831      	ldr	r1, [r6, #0]
 8016bec:	4605      	mov	r5, r0
 8016bee:	b911      	cbnz	r1, 8016bf6 <sbrk_aligned+0x12>
 8016bf0:	f000 ff12 	bl	8017a18 <_sbrk_r>
 8016bf4:	6030      	str	r0, [r6, #0]
 8016bf6:	4621      	mov	r1, r4
 8016bf8:	4628      	mov	r0, r5
 8016bfa:	f000 ff0d 	bl	8017a18 <_sbrk_r>
 8016bfe:	1c43      	adds	r3, r0, #1
 8016c00:	d00a      	beq.n	8016c18 <sbrk_aligned+0x34>
 8016c02:	1cc4      	adds	r4, r0, #3
 8016c04:	f024 0403 	bic.w	r4, r4, #3
 8016c08:	42a0      	cmp	r0, r4
 8016c0a:	d007      	beq.n	8016c1c <sbrk_aligned+0x38>
 8016c0c:	1a21      	subs	r1, r4, r0
 8016c0e:	4628      	mov	r0, r5
 8016c10:	f000 ff02 	bl	8017a18 <_sbrk_r>
 8016c14:	3001      	adds	r0, #1
 8016c16:	d101      	bne.n	8016c1c <sbrk_aligned+0x38>
 8016c18:	f04f 34ff 	mov.w	r4, #4294967295
 8016c1c:	4620      	mov	r0, r4
 8016c1e:	bd70      	pop	{r4, r5, r6, pc}
 8016c20:	20009cc8 	.word	0x20009cc8

08016c24 <_malloc_r>:
 8016c24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016c28:	1ccd      	adds	r5, r1, #3
 8016c2a:	f025 0503 	bic.w	r5, r5, #3
 8016c2e:	3508      	adds	r5, #8
 8016c30:	2d0c      	cmp	r5, #12
 8016c32:	bf38      	it	cc
 8016c34:	250c      	movcc	r5, #12
 8016c36:	2d00      	cmp	r5, #0
 8016c38:	4607      	mov	r7, r0
 8016c3a:	db01      	blt.n	8016c40 <_malloc_r+0x1c>
 8016c3c:	42a9      	cmp	r1, r5
 8016c3e:	d905      	bls.n	8016c4c <_malloc_r+0x28>
 8016c40:	230c      	movs	r3, #12
 8016c42:	603b      	str	r3, [r7, #0]
 8016c44:	2600      	movs	r6, #0
 8016c46:	4630      	mov	r0, r6
 8016c48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016c4c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8016d20 <_malloc_r+0xfc>
 8016c50:	f000 f868 	bl	8016d24 <__malloc_lock>
 8016c54:	f8d8 3000 	ldr.w	r3, [r8]
 8016c58:	461c      	mov	r4, r3
 8016c5a:	bb5c      	cbnz	r4, 8016cb4 <_malloc_r+0x90>
 8016c5c:	4629      	mov	r1, r5
 8016c5e:	4638      	mov	r0, r7
 8016c60:	f7ff ffc0 	bl	8016be4 <sbrk_aligned>
 8016c64:	1c43      	adds	r3, r0, #1
 8016c66:	4604      	mov	r4, r0
 8016c68:	d155      	bne.n	8016d16 <_malloc_r+0xf2>
 8016c6a:	f8d8 4000 	ldr.w	r4, [r8]
 8016c6e:	4626      	mov	r6, r4
 8016c70:	2e00      	cmp	r6, #0
 8016c72:	d145      	bne.n	8016d00 <_malloc_r+0xdc>
 8016c74:	2c00      	cmp	r4, #0
 8016c76:	d048      	beq.n	8016d0a <_malloc_r+0xe6>
 8016c78:	6823      	ldr	r3, [r4, #0]
 8016c7a:	4631      	mov	r1, r6
 8016c7c:	4638      	mov	r0, r7
 8016c7e:	eb04 0903 	add.w	r9, r4, r3
 8016c82:	f000 fec9 	bl	8017a18 <_sbrk_r>
 8016c86:	4581      	cmp	r9, r0
 8016c88:	d13f      	bne.n	8016d0a <_malloc_r+0xe6>
 8016c8a:	6821      	ldr	r1, [r4, #0]
 8016c8c:	1a6d      	subs	r5, r5, r1
 8016c8e:	4629      	mov	r1, r5
 8016c90:	4638      	mov	r0, r7
 8016c92:	f7ff ffa7 	bl	8016be4 <sbrk_aligned>
 8016c96:	3001      	adds	r0, #1
 8016c98:	d037      	beq.n	8016d0a <_malloc_r+0xe6>
 8016c9a:	6823      	ldr	r3, [r4, #0]
 8016c9c:	442b      	add	r3, r5
 8016c9e:	6023      	str	r3, [r4, #0]
 8016ca0:	f8d8 3000 	ldr.w	r3, [r8]
 8016ca4:	2b00      	cmp	r3, #0
 8016ca6:	d038      	beq.n	8016d1a <_malloc_r+0xf6>
 8016ca8:	685a      	ldr	r2, [r3, #4]
 8016caa:	42a2      	cmp	r2, r4
 8016cac:	d12b      	bne.n	8016d06 <_malloc_r+0xe2>
 8016cae:	2200      	movs	r2, #0
 8016cb0:	605a      	str	r2, [r3, #4]
 8016cb2:	e00f      	b.n	8016cd4 <_malloc_r+0xb0>
 8016cb4:	6822      	ldr	r2, [r4, #0]
 8016cb6:	1b52      	subs	r2, r2, r5
 8016cb8:	d41f      	bmi.n	8016cfa <_malloc_r+0xd6>
 8016cba:	2a0b      	cmp	r2, #11
 8016cbc:	d917      	bls.n	8016cee <_malloc_r+0xca>
 8016cbe:	1961      	adds	r1, r4, r5
 8016cc0:	42a3      	cmp	r3, r4
 8016cc2:	6025      	str	r5, [r4, #0]
 8016cc4:	bf18      	it	ne
 8016cc6:	6059      	strne	r1, [r3, #4]
 8016cc8:	6863      	ldr	r3, [r4, #4]
 8016cca:	bf08      	it	eq
 8016ccc:	f8c8 1000 	streq.w	r1, [r8]
 8016cd0:	5162      	str	r2, [r4, r5]
 8016cd2:	604b      	str	r3, [r1, #4]
 8016cd4:	4638      	mov	r0, r7
 8016cd6:	f104 060b 	add.w	r6, r4, #11
 8016cda:	f000 f829 	bl	8016d30 <__malloc_unlock>
 8016cde:	f026 0607 	bic.w	r6, r6, #7
 8016ce2:	1d23      	adds	r3, r4, #4
 8016ce4:	1af2      	subs	r2, r6, r3
 8016ce6:	d0ae      	beq.n	8016c46 <_malloc_r+0x22>
 8016ce8:	1b9b      	subs	r3, r3, r6
 8016cea:	50a3      	str	r3, [r4, r2]
 8016cec:	e7ab      	b.n	8016c46 <_malloc_r+0x22>
 8016cee:	42a3      	cmp	r3, r4
 8016cf0:	6862      	ldr	r2, [r4, #4]
 8016cf2:	d1dd      	bne.n	8016cb0 <_malloc_r+0x8c>
 8016cf4:	f8c8 2000 	str.w	r2, [r8]
 8016cf8:	e7ec      	b.n	8016cd4 <_malloc_r+0xb0>
 8016cfa:	4623      	mov	r3, r4
 8016cfc:	6864      	ldr	r4, [r4, #4]
 8016cfe:	e7ac      	b.n	8016c5a <_malloc_r+0x36>
 8016d00:	4634      	mov	r4, r6
 8016d02:	6876      	ldr	r6, [r6, #4]
 8016d04:	e7b4      	b.n	8016c70 <_malloc_r+0x4c>
 8016d06:	4613      	mov	r3, r2
 8016d08:	e7cc      	b.n	8016ca4 <_malloc_r+0x80>
 8016d0a:	230c      	movs	r3, #12
 8016d0c:	603b      	str	r3, [r7, #0]
 8016d0e:	4638      	mov	r0, r7
 8016d10:	f000 f80e 	bl	8016d30 <__malloc_unlock>
 8016d14:	e797      	b.n	8016c46 <_malloc_r+0x22>
 8016d16:	6025      	str	r5, [r4, #0]
 8016d18:	e7dc      	b.n	8016cd4 <_malloc_r+0xb0>
 8016d1a:	605b      	str	r3, [r3, #4]
 8016d1c:	deff      	udf	#255	; 0xff
 8016d1e:	bf00      	nop
 8016d20:	20009cc4 	.word	0x20009cc4

08016d24 <__malloc_lock>:
 8016d24:	4801      	ldr	r0, [pc, #4]	; (8016d2c <__malloc_lock+0x8>)
 8016d26:	f000 bec4 	b.w	8017ab2 <__retarget_lock_acquire_recursive>
 8016d2a:	bf00      	nop
 8016d2c:	20009e0d 	.word	0x20009e0d

08016d30 <__malloc_unlock>:
 8016d30:	4801      	ldr	r0, [pc, #4]	; (8016d38 <__malloc_unlock+0x8>)
 8016d32:	f000 bebf 	b.w	8017ab4 <__retarget_lock_release_recursive>
 8016d36:	bf00      	nop
 8016d38:	20009e0d 	.word	0x20009e0d

08016d3c <__cvt>:
 8016d3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016d40:	ec55 4b10 	vmov	r4, r5, d0
 8016d44:	2d00      	cmp	r5, #0
 8016d46:	460e      	mov	r6, r1
 8016d48:	4619      	mov	r1, r3
 8016d4a:	462b      	mov	r3, r5
 8016d4c:	bfbb      	ittet	lt
 8016d4e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8016d52:	461d      	movlt	r5, r3
 8016d54:	2300      	movge	r3, #0
 8016d56:	232d      	movlt	r3, #45	; 0x2d
 8016d58:	700b      	strb	r3, [r1, #0]
 8016d5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016d5c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8016d60:	4691      	mov	r9, r2
 8016d62:	f023 0820 	bic.w	r8, r3, #32
 8016d66:	bfbc      	itt	lt
 8016d68:	4622      	movlt	r2, r4
 8016d6a:	4614      	movlt	r4, r2
 8016d6c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8016d70:	d005      	beq.n	8016d7e <__cvt+0x42>
 8016d72:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8016d76:	d100      	bne.n	8016d7a <__cvt+0x3e>
 8016d78:	3601      	adds	r6, #1
 8016d7a:	2102      	movs	r1, #2
 8016d7c:	e000      	b.n	8016d80 <__cvt+0x44>
 8016d7e:	2103      	movs	r1, #3
 8016d80:	ab03      	add	r3, sp, #12
 8016d82:	9301      	str	r3, [sp, #4]
 8016d84:	ab02      	add	r3, sp, #8
 8016d86:	9300      	str	r3, [sp, #0]
 8016d88:	ec45 4b10 	vmov	d0, r4, r5
 8016d8c:	4653      	mov	r3, sl
 8016d8e:	4632      	mov	r2, r6
 8016d90:	f000 ff86 	bl	8017ca0 <_dtoa_r>
 8016d94:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8016d98:	4607      	mov	r7, r0
 8016d9a:	d102      	bne.n	8016da2 <__cvt+0x66>
 8016d9c:	f019 0f01 	tst.w	r9, #1
 8016da0:	d022      	beq.n	8016de8 <__cvt+0xac>
 8016da2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8016da6:	eb07 0906 	add.w	r9, r7, r6
 8016daa:	d110      	bne.n	8016dce <__cvt+0x92>
 8016dac:	783b      	ldrb	r3, [r7, #0]
 8016dae:	2b30      	cmp	r3, #48	; 0x30
 8016db0:	d10a      	bne.n	8016dc8 <__cvt+0x8c>
 8016db2:	2200      	movs	r2, #0
 8016db4:	2300      	movs	r3, #0
 8016db6:	4620      	mov	r0, r4
 8016db8:	4629      	mov	r1, r5
 8016dba:	f7e9 febd 	bl	8000b38 <__aeabi_dcmpeq>
 8016dbe:	b918      	cbnz	r0, 8016dc8 <__cvt+0x8c>
 8016dc0:	f1c6 0601 	rsb	r6, r6, #1
 8016dc4:	f8ca 6000 	str.w	r6, [sl]
 8016dc8:	f8da 3000 	ldr.w	r3, [sl]
 8016dcc:	4499      	add	r9, r3
 8016dce:	2200      	movs	r2, #0
 8016dd0:	2300      	movs	r3, #0
 8016dd2:	4620      	mov	r0, r4
 8016dd4:	4629      	mov	r1, r5
 8016dd6:	f7e9 feaf 	bl	8000b38 <__aeabi_dcmpeq>
 8016dda:	b108      	cbz	r0, 8016de0 <__cvt+0xa4>
 8016ddc:	f8cd 900c 	str.w	r9, [sp, #12]
 8016de0:	2230      	movs	r2, #48	; 0x30
 8016de2:	9b03      	ldr	r3, [sp, #12]
 8016de4:	454b      	cmp	r3, r9
 8016de6:	d307      	bcc.n	8016df8 <__cvt+0xbc>
 8016de8:	9b03      	ldr	r3, [sp, #12]
 8016dea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016dec:	1bdb      	subs	r3, r3, r7
 8016dee:	4638      	mov	r0, r7
 8016df0:	6013      	str	r3, [r2, #0]
 8016df2:	b004      	add	sp, #16
 8016df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016df8:	1c59      	adds	r1, r3, #1
 8016dfa:	9103      	str	r1, [sp, #12]
 8016dfc:	701a      	strb	r2, [r3, #0]
 8016dfe:	e7f0      	b.n	8016de2 <__cvt+0xa6>

08016e00 <__exponent>:
 8016e00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016e02:	4603      	mov	r3, r0
 8016e04:	2900      	cmp	r1, #0
 8016e06:	bfb8      	it	lt
 8016e08:	4249      	neglt	r1, r1
 8016e0a:	f803 2b02 	strb.w	r2, [r3], #2
 8016e0e:	bfb4      	ite	lt
 8016e10:	222d      	movlt	r2, #45	; 0x2d
 8016e12:	222b      	movge	r2, #43	; 0x2b
 8016e14:	2909      	cmp	r1, #9
 8016e16:	7042      	strb	r2, [r0, #1]
 8016e18:	dd2a      	ble.n	8016e70 <__exponent+0x70>
 8016e1a:	f10d 0207 	add.w	r2, sp, #7
 8016e1e:	4617      	mov	r7, r2
 8016e20:	260a      	movs	r6, #10
 8016e22:	4694      	mov	ip, r2
 8016e24:	fb91 f5f6 	sdiv	r5, r1, r6
 8016e28:	fb06 1415 	mls	r4, r6, r5, r1
 8016e2c:	3430      	adds	r4, #48	; 0x30
 8016e2e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8016e32:	460c      	mov	r4, r1
 8016e34:	2c63      	cmp	r4, #99	; 0x63
 8016e36:	f102 32ff 	add.w	r2, r2, #4294967295
 8016e3a:	4629      	mov	r1, r5
 8016e3c:	dcf1      	bgt.n	8016e22 <__exponent+0x22>
 8016e3e:	3130      	adds	r1, #48	; 0x30
 8016e40:	f1ac 0402 	sub.w	r4, ip, #2
 8016e44:	f802 1c01 	strb.w	r1, [r2, #-1]
 8016e48:	1c41      	adds	r1, r0, #1
 8016e4a:	4622      	mov	r2, r4
 8016e4c:	42ba      	cmp	r2, r7
 8016e4e:	d30a      	bcc.n	8016e66 <__exponent+0x66>
 8016e50:	f10d 0209 	add.w	r2, sp, #9
 8016e54:	eba2 020c 	sub.w	r2, r2, ip
 8016e58:	42bc      	cmp	r4, r7
 8016e5a:	bf88      	it	hi
 8016e5c:	2200      	movhi	r2, #0
 8016e5e:	4413      	add	r3, r2
 8016e60:	1a18      	subs	r0, r3, r0
 8016e62:	b003      	add	sp, #12
 8016e64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016e66:	f812 5b01 	ldrb.w	r5, [r2], #1
 8016e6a:	f801 5f01 	strb.w	r5, [r1, #1]!
 8016e6e:	e7ed      	b.n	8016e4c <__exponent+0x4c>
 8016e70:	2330      	movs	r3, #48	; 0x30
 8016e72:	3130      	adds	r1, #48	; 0x30
 8016e74:	7083      	strb	r3, [r0, #2]
 8016e76:	70c1      	strb	r1, [r0, #3]
 8016e78:	1d03      	adds	r3, r0, #4
 8016e7a:	e7f1      	b.n	8016e60 <__exponent+0x60>

08016e7c <_printf_float>:
 8016e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e80:	ed2d 8b02 	vpush	{d8}
 8016e84:	b08d      	sub	sp, #52	; 0x34
 8016e86:	460c      	mov	r4, r1
 8016e88:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8016e8c:	4616      	mov	r6, r2
 8016e8e:	461f      	mov	r7, r3
 8016e90:	4605      	mov	r5, r0
 8016e92:	f000 fd75 	bl	8017980 <_localeconv_r>
 8016e96:	f8d0 a000 	ldr.w	sl, [r0]
 8016e9a:	4650      	mov	r0, sl
 8016e9c:	f7e9 fa20 	bl	80002e0 <strlen>
 8016ea0:	2300      	movs	r3, #0
 8016ea2:	930a      	str	r3, [sp, #40]	; 0x28
 8016ea4:	6823      	ldr	r3, [r4, #0]
 8016ea6:	9305      	str	r3, [sp, #20]
 8016ea8:	f8d8 3000 	ldr.w	r3, [r8]
 8016eac:	f894 b018 	ldrb.w	fp, [r4, #24]
 8016eb0:	3307      	adds	r3, #7
 8016eb2:	f023 0307 	bic.w	r3, r3, #7
 8016eb6:	f103 0208 	add.w	r2, r3, #8
 8016eba:	f8c8 2000 	str.w	r2, [r8]
 8016ebe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8016ec2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8016ec6:	9307      	str	r3, [sp, #28]
 8016ec8:	f8cd 8018 	str.w	r8, [sp, #24]
 8016ecc:	ee08 0a10 	vmov	s16, r0
 8016ed0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8016ed4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016ed8:	4b9e      	ldr	r3, [pc, #632]	; (8017154 <_printf_float+0x2d8>)
 8016eda:	f04f 32ff 	mov.w	r2, #4294967295
 8016ede:	f7e9 fe5d 	bl	8000b9c <__aeabi_dcmpun>
 8016ee2:	bb88      	cbnz	r0, 8016f48 <_printf_float+0xcc>
 8016ee4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016ee8:	4b9a      	ldr	r3, [pc, #616]	; (8017154 <_printf_float+0x2d8>)
 8016eea:	f04f 32ff 	mov.w	r2, #4294967295
 8016eee:	f7e9 fe37 	bl	8000b60 <__aeabi_dcmple>
 8016ef2:	bb48      	cbnz	r0, 8016f48 <_printf_float+0xcc>
 8016ef4:	2200      	movs	r2, #0
 8016ef6:	2300      	movs	r3, #0
 8016ef8:	4640      	mov	r0, r8
 8016efa:	4649      	mov	r1, r9
 8016efc:	f7e9 fe26 	bl	8000b4c <__aeabi_dcmplt>
 8016f00:	b110      	cbz	r0, 8016f08 <_printf_float+0x8c>
 8016f02:	232d      	movs	r3, #45	; 0x2d
 8016f04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016f08:	4a93      	ldr	r2, [pc, #588]	; (8017158 <_printf_float+0x2dc>)
 8016f0a:	4b94      	ldr	r3, [pc, #592]	; (801715c <_printf_float+0x2e0>)
 8016f0c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8016f10:	bf94      	ite	ls
 8016f12:	4690      	movls	r8, r2
 8016f14:	4698      	movhi	r8, r3
 8016f16:	2303      	movs	r3, #3
 8016f18:	6123      	str	r3, [r4, #16]
 8016f1a:	9b05      	ldr	r3, [sp, #20]
 8016f1c:	f023 0304 	bic.w	r3, r3, #4
 8016f20:	6023      	str	r3, [r4, #0]
 8016f22:	f04f 0900 	mov.w	r9, #0
 8016f26:	9700      	str	r7, [sp, #0]
 8016f28:	4633      	mov	r3, r6
 8016f2a:	aa0b      	add	r2, sp, #44	; 0x2c
 8016f2c:	4621      	mov	r1, r4
 8016f2e:	4628      	mov	r0, r5
 8016f30:	f000 f9da 	bl	80172e8 <_printf_common>
 8016f34:	3001      	adds	r0, #1
 8016f36:	f040 8090 	bne.w	801705a <_printf_float+0x1de>
 8016f3a:	f04f 30ff 	mov.w	r0, #4294967295
 8016f3e:	b00d      	add	sp, #52	; 0x34
 8016f40:	ecbd 8b02 	vpop	{d8}
 8016f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f48:	4642      	mov	r2, r8
 8016f4a:	464b      	mov	r3, r9
 8016f4c:	4640      	mov	r0, r8
 8016f4e:	4649      	mov	r1, r9
 8016f50:	f7e9 fe24 	bl	8000b9c <__aeabi_dcmpun>
 8016f54:	b140      	cbz	r0, 8016f68 <_printf_float+0xec>
 8016f56:	464b      	mov	r3, r9
 8016f58:	2b00      	cmp	r3, #0
 8016f5a:	bfbc      	itt	lt
 8016f5c:	232d      	movlt	r3, #45	; 0x2d
 8016f5e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8016f62:	4a7f      	ldr	r2, [pc, #508]	; (8017160 <_printf_float+0x2e4>)
 8016f64:	4b7f      	ldr	r3, [pc, #508]	; (8017164 <_printf_float+0x2e8>)
 8016f66:	e7d1      	b.n	8016f0c <_printf_float+0x90>
 8016f68:	6863      	ldr	r3, [r4, #4]
 8016f6a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8016f6e:	9206      	str	r2, [sp, #24]
 8016f70:	1c5a      	adds	r2, r3, #1
 8016f72:	d13f      	bne.n	8016ff4 <_printf_float+0x178>
 8016f74:	2306      	movs	r3, #6
 8016f76:	6063      	str	r3, [r4, #4]
 8016f78:	9b05      	ldr	r3, [sp, #20]
 8016f7a:	6861      	ldr	r1, [r4, #4]
 8016f7c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8016f80:	2300      	movs	r3, #0
 8016f82:	9303      	str	r3, [sp, #12]
 8016f84:	ab0a      	add	r3, sp, #40	; 0x28
 8016f86:	e9cd b301 	strd	fp, r3, [sp, #4]
 8016f8a:	ab09      	add	r3, sp, #36	; 0x24
 8016f8c:	ec49 8b10 	vmov	d0, r8, r9
 8016f90:	9300      	str	r3, [sp, #0]
 8016f92:	6022      	str	r2, [r4, #0]
 8016f94:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8016f98:	4628      	mov	r0, r5
 8016f9a:	f7ff fecf 	bl	8016d3c <__cvt>
 8016f9e:	9b06      	ldr	r3, [sp, #24]
 8016fa0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016fa2:	2b47      	cmp	r3, #71	; 0x47
 8016fa4:	4680      	mov	r8, r0
 8016fa6:	d108      	bne.n	8016fba <_printf_float+0x13e>
 8016fa8:	1cc8      	adds	r0, r1, #3
 8016faa:	db02      	blt.n	8016fb2 <_printf_float+0x136>
 8016fac:	6863      	ldr	r3, [r4, #4]
 8016fae:	4299      	cmp	r1, r3
 8016fb0:	dd41      	ble.n	8017036 <_printf_float+0x1ba>
 8016fb2:	f1ab 0302 	sub.w	r3, fp, #2
 8016fb6:	fa5f fb83 	uxtb.w	fp, r3
 8016fba:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8016fbe:	d820      	bhi.n	8017002 <_printf_float+0x186>
 8016fc0:	3901      	subs	r1, #1
 8016fc2:	465a      	mov	r2, fp
 8016fc4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8016fc8:	9109      	str	r1, [sp, #36]	; 0x24
 8016fca:	f7ff ff19 	bl	8016e00 <__exponent>
 8016fce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016fd0:	1813      	adds	r3, r2, r0
 8016fd2:	2a01      	cmp	r2, #1
 8016fd4:	4681      	mov	r9, r0
 8016fd6:	6123      	str	r3, [r4, #16]
 8016fd8:	dc02      	bgt.n	8016fe0 <_printf_float+0x164>
 8016fda:	6822      	ldr	r2, [r4, #0]
 8016fdc:	07d2      	lsls	r2, r2, #31
 8016fde:	d501      	bpl.n	8016fe4 <_printf_float+0x168>
 8016fe0:	3301      	adds	r3, #1
 8016fe2:	6123      	str	r3, [r4, #16]
 8016fe4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8016fe8:	2b00      	cmp	r3, #0
 8016fea:	d09c      	beq.n	8016f26 <_printf_float+0xaa>
 8016fec:	232d      	movs	r3, #45	; 0x2d
 8016fee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016ff2:	e798      	b.n	8016f26 <_printf_float+0xaa>
 8016ff4:	9a06      	ldr	r2, [sp, #24]
 8016ff6:	2a47      	cmp	r2, #71	; 0x47
 8016ff8:	d1be      	bne.n	8016f78 <_printf_float+0xfc>
 8016ffa:	2b00      	cmp	r3, #0
 8016ffc:	d1bc      	bne.n	8016f78 <_printf_float+0xfc>
 8016ffe:	2301      	movs	r3, #1
 8017000:	e7b9      	b.n	8016f76 <_printf_float+0xfa>
 8017002:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8017006:	d118      	bne.n	801703a <_printf_float+0x1be>
 8017008:	2900      	cmp	r1, #0
 801700a:	6863      	ldr	r3, [r4, #4]
 801700c:	dd0b      	ble.n	8017026 <_printf_float+0x1aa>
 801700e:	6121      	str	r1, [r4, #16]
 8017010:	b913      	cbnz	r3, 8017018 <_printf_float+0x19c>
 8017012:	6822      	ldr	r2, [r4, #0]
 8017014:	07d0      	lsls	r0, r2, #31
 8017016:	d502      	bpl.n	801701e <_printf_float+0x1a2>
 8017018:	3301      	adds	r3, #1
 801701a:	440b      	add	r3, r1
 801701c:	6123      	str	r3, [r4, #16]
 801701e:	65a1      	str	r1, [r4, #88]	; 0x58
 8017020:	f04f 0900 	mov.w	r9, #0
 8017024:	e7de      	b.n	8016fe4 <_printf_float+0x168>
 8017026:	b913      	cbnz	r3, 801702e <_printf_float+0x1b2>
 8017028:	6822      	ldr	r2, [r4, #0]
 801702a:	07d2      	lsls	r2, r2, #31
 801702c:	d501      	bpl.n	8017032 <_printf_float+0x1b6>
 801702e:	3302      	adds	r3, #2
 8017030:	e7f4      	b.n	801701c <_printf_float+0x1a0>
 8017032:	2301      	movs	r3, #1
 8017034:	e7f2      	b.n	801701c <_printf_float+0x1a0>
 8017036:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801703a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801703c:	4299      	cmp	r1, r3
 801703e:	db05      	blt.n	801704c <_printf_float+0x1d0>
 8017040:	6823      	ldr	r3, [r4, #0]
 8017042:	6121      	str	r1, [r4, #16]
 8017044:	07d8      	lsls	r0, r3, #31
 8017046:	d5ea      	bpl.n	801701e <_printf_float+0x1a2>
 8017048:	1c4b      	adds	r3, r1, #1
 801704a:	e7e7      	b.n	801701c <_printf_float+0x1a0>
 801704c:	2900      	cmp	r1, #0
 801704e:	bfd4      	ite	le
 8017050:	f1c1 0202 	rsble	r2, r1, #2
 8017054:	2201      	movgt	r2, #1
 8017056:	4413      	add	r3, r2
 8017058:	e7e0      	b.n	801701c <_printf_float+0x1a0>
 801705a:	6823      	ldr	r3, [r4, #0]
 801705c:	055a      	lsls	r2, r3, #21
 801705e:	d407      	bmi.n	8017070 <_printf_float+0x1f4>
 8017060:	6923      	ldr	r3, [r4, #16]
 8017062:	4642      	mov	r2, r8
 8017064:	4631      	mov	r1, r6
 8017066:	4628      	mov	r0, r5
 8017068:	47b8      	blx	r7
 801706a:	3001      	adds	r0, #1
 801706c:	d12c      	bne.n	80170c8 <_printf_float+0x24c>
 801706e:	e764      	b.n	8016f3a <_printf_float+0xbe>
 8017070:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8017074:	f240 80e0 	bls.w	8017238 <_printf_float+0x3bc>
 8017078:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801707c:	2200      	movs	r2, #0
 801707e:	2300      	movs	r3, #0
 8017080:	f7e9 fd5a 	bl	8000b38 <__aeabi_dcmpeq>
 8017084:	2800      	cmp	r0, #0
 8017086:	d034      	beq.n	80170f2 <_printf_float+0x276>
 8017088:	4a37      	ldr	r2, [pc, #220]	; (8017168 <_printf_float+0x2ec>)
 801708a:	2301      	movs	r3, #1
 801708c:	4631      	mov	r1, r6
 801708e:	4628      	mov	r0, r5
 8017090:	47b8      	blx	r7
 8017092:	3001      	adds	r0, #1
 8017094:	f43f af51 	beq.w	8016f3a <_printf_float+0xbe>
 8017098:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801709c:	429a      	cmp	r2, r3
 801709e:	db02      	blt.n	80170a6 <_printf_float+0x22a>
 80170a0:	6823      	ldr	r3, [r4, #0]
 80170a2:	07d8      	lsls	r0, r3, #31
 80170a4:	d510      	bpl.n	80170c8 <_printf_float+0x24c>
 80170a6:	ee18 3a10 	vmov	r3, s16
 80170aa:	4652      	mov	r2, sl
 80170ac:	4631      	mov	r1, r6
 80170ae:	4628      	mov	r0, r5
 80170b0:	47b8      	blx	r7
 80170b2:	3001      	adds	r0, #1
 80170b4:	f43f af41 	beq.w	8016f3a <_printf_float+0xbe>
 80170b8:	f04f 0800 	mov.w	r8, #0
 80170bc:	f104 091a 	add.w	r9, r4, #26
 80170c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80170c2:	3b01      	subs	r3, #1
 80170c4:	4543      	cmp	r3, r8
 80170c6:	dc09      	bgt.n	80170dc <_printf_float+0x260>
 80170c8:	6823      	ldr	r3, [r4, #0]
 80170ca:	079b      	lsls	r3, r3, #30
 80170cc:	f100 8107 	bmi.w	80172de <_printf_float+0x462>
 80170d0:	68e0      	ldr	r0, [r4, #12]
 80170d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80170d4:	4298      	cmp	r0, r3
 80170d6:	bfb8      	it	lt
 80170d8:	4618      	movlt	r0, r3
 80170da:	e730      	b.n	8016f3e <_printf_float+0xc2>
 80170dc:	2301      	movs	r3, #1
 80170de:	464a      	mov	r2, r9
 80170e0:	4631      	mov	r1, r6
 80170e2:	4628      	mov	r0, r5
 80170e4:	47b8      	blx	r7
 80170e6:	3001      	adds	r0, #1
 80170e8:	f43f af27 	beq.w	8016f3a <_printf_float+0xbe>
 80170ec:	f108 0801 	add.w	r8, r8, #1
 80170f0:	e7e6      	b.n	80170c0 <_printf_float+0x244>
 80170f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80170f4:	2b00      	cmp	r3, #0
 80170f6:	dc39      	bgt.n	801716c <_printf_float+0x2f0>
 80170f8:	4a1b      	ldr	r2, [pc, #108]	; (8017168 <_printf_float+0x2ec>)
 80170fa:	2301      	movs	r3, #1
 80170fc:	4631      	mov	r1, r6
 80170fe:	4628      	mov	r0, r5
 8017100:	47b8      	blx	r7
 8017102:	3001      	adds	r0, #1
 8017104:	f43f af19 	beq.w	8016f3a <_printf_float+0xbe>
 8017108:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801710c:	4313      	orrs	r3, r2
 801710e:	d102      	bne.n	8017116 <_printf_float+0x29a>
 8017110:	6823      	ldr	r3, [r4, #0]
 8017112:	07d9      	lsls	r1, r3, #31
 8017114:	d5d8      	bpl.n	80170c8 <_printf_float+0x24c>
 8017116:	ee18 3a10 	vmov	r3, s16
 801711a:	4652      	mov	r2, sl
 801711c:	4631      	mov	r1, r6
 801711e:	4628      	mov	r0, r5
 8017120:	47b8      	blx	r7
 8017122:	3001      	adds	r0, #1
 8017124:	f43f af09 	beq.w	8016f3a <_printf_float+0xbe>
 8017128:	f04f 0900 	mov.w	r9, #0
 801712c:	f104 0a1a 	add.w	sl, r4, #26
 8017130:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017132:	425b      	negs	r3, r3
 8017134:	454b      	cmp	r3, r9
 8017136:	dc01      	bgt.n	801713c <_printf_float+0x2c0>
 8017138:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801713a:	e792      	b.n	8017062 <_printf_float+0x1e6>
 801713c:	2301      	movs	r3, #1
 801713e:	4652      	mov	r2, sl
 8017140:	4631      	mov	r1, r6
 8017142:	4628      	mov	r0, r5
 8017144:	47b8      	blx	r7
 8017146:	3001      	adds	r0, #1
 8017148:	f43f aef7 	beq.w	8016f3a <_printf_float+0xbe>
 801714c:	f109 0901 	add.w	r9, r9, #1
 8017150:	e7ee      	b.n	8017130 <_printf_float+0x2b4>
 8017152:	bf00      	nop
 8017154:	7fefffff 	.word	0x7fefffff
 8017158:	0806d0fd 	.word	0x0806d0fd
 801715c:	0806d101 	.word	0x0806d101
 8017160:	0806d105 	.word	0x0806d105
 8017164:	0806d109 	.word	0x0806d109
 8017168:	0806d10d 	.word	0x0806d10d
 801716c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801716e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8017170:	429a      	cmp	r2, r3
 8017172:	bfa8      	it	ge
 8017174:	461a      	movge	r2, r3
 8017176:	2a00      	cmp	r2, #0
 8017178:	4691      	mov	r9, r2
 801717a:	dc37      	bgt.n	80171ec <_printf_float+0x370>
 801717c:	f04f 0b00 	mov.w	fp, #0
 8017180:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8017184:	f104 021a 	add.w	r2, r4, #26
 8017188:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801718a:	9305      	str	r3, [sp, #20]
 801718c:	eba3 0309 	sub.w	r3, r3, r9
 8017190:	455b      	cmp	r3, fp
 8017192:	dc33      	bgt.n	80171fc <_printf_float+0x380>
 8017194:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017198:	429a      	cmp	r2, r3
 801719a:	db3b      	blt.n	8017214 <_printf_float+0x398>
 801719c:	6823      	ldr	r3, [r4, #0]
 801719e:	07da      	lsls	r2, r3, #31
 80171a0:	d438      	bmi.n	8017214 <_printf_float+0x398>
 80171a2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80171a6:	eba2 0903 	sub.w	r9, r2, r3
 80171aa:	9b05      	ldr	r3, [sp, #20]
 80171ac:	1ad2      	subs	r2, r2, r3
 80171ae:	4591      	cmp	r9, r2
 80171b0:	bfa8      	it	ge
 80171b2:	4691      	movge	r9, r2
 80171b4:	f1b9 0f00 	cmp.w	r9, #0
 80171b8:	dc35      	bgt.n	8017226 <_printf_float+0x3aa>
 80171ba:	f04f 0800 	mov.w	r8, #0
 80171be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80171c2:	f104 0a1a 	add.w	sl, r4, #26
 80171c6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80171ca:	1a9b      	subs	r3, r3, r2
 80171cc:	eba3 0309 	sub.w	r3, r3, r9
 80171d0:	4543      	cmp	r3, r8
 80171d2:	f77f af79 	ble.w	80170c8 <_printf_float+0x24c>
 80171d6:	2301      	movs	r3, #1
 80171d8:	4652      	mov	r2, sl
 80171da:	4631      	mov	r1, r6
 80171dc:	4628      	mov	r0, r5
 80171de:	47b8      	blx	r7
 80171e0:	3001      	adds	r0, #1
 80171e2:	f43f aeaa 	beq.w	8016f3a <_printf_float+0xbe>
 80171e6:	f108 0801 	add.w	r8, r8, #1
 80171ea:	e7ec      	b.n	80171c6 <_printf_float+0x34a>
 80171ec:	4613      	mov	r3, r2
 80171ee:	4631      	mov	r1, r6
 80171f0:	4642      	mov	r2, r8
 80171f2:	4628      	mov	r0, r5
 80171f4:	47b8      	blx	r7
 80171f6:	3001      	adds	r0, #1
 80171f8:	d1c0      	bne.n	801717c <_printf_float+0x300>
 80171fa:	e69e      	b.n	8016f3a <_printf_float+0xbe>
 80171fc:	2301      	movs	r3, #1
 80171fe:	4631      	mov	r1, r6
 8017200:	4628      	mov	r0, r5
 8017202:	9205      	str	r2, [sp, #20]
 8017204:	47b8      	blx	r7
 8017206:	3001      	adds	r0, #1
 8017208:	f43f ae97 	beq.w	8016f3a <_printf_float+0xbe>
 801720c:	9a05      	ldr	r2, [sp, #20]
 801720e:	f10b 0b01 	add.w	fp, fp, #1
 8017212:	e7b9      	b.n	8017188 <_printf_float+0x30c>
 8017214:	ee18 3a10 	vmov	r3, s16
 8017218:	4652      	mov	r2, sl
 801721a:	4631      	mov	r1, r6
 801721c:	4628      	mov	r0, r5
 801721e:	47b8      	blx	r7
 8017220:	3001      	adds	r0, #1
 8017222:	d1be      	bne.n	80171a2 <_printf_float+0x326>
 8017224:	e689      	b.n	8016f3a <_printf_float+0xbe>
 8017226:	9a05      	ldr	r2, [sp, #20]
 8017228:	464b      	mov	r3, r9
 801722a:	4442      	add	r2, r8
 801722c:	4631      	mov	r1, r6
 801722e:	4628      	mov	r0, r5
 8017230:	47b8      	blx	r7
 8017232:	3001      	adds	r0, #1
 8017234:	d1c1      	bne.n	80171ba <_printf_float+0x33e>
 8017236:	e680      	b.n	8016f3a <_printf_float+0xbe>
 8017238:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801723a:	2a01      	cmp	r2, #1
 801723c:	dc01      	bgt.n	8017242 <_printf_float+0x3c6>
 801723e:	07db      	lsls	r3, r3, #31
 8017240:	d53a      	bpl.n	80172b8 <_printf_float+0x43c>
 8017242:	2301      	movs	r3, #1
 8017244:	4642      	mov	r2, r8
 8017246:	4631      	mov	r1, r6
 8017248:	4628      	mov	r0, r5
 801724a:	47b8      	blx	r7
 801724c:	3001      	adds	r0, #1
 801724e:	f43f ae74 	beq.w	8016f3a <_printf_float+0xbe>
 8017252:	ee18 3a10 	vmov	r3, s16
 8017256:	4652      	mov	r2, sl
 8017258:	4631      	mov	r1, r6
 801725a:	4628      	mov	r0, r5
 801725c:	47b8      	blx	r7
 801725e:	3001      	adds	r0, #1
 8017260:	f43f ae6b 	beq.w	8016f3a <_printf_float+0xbe>
 8017264:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8017268:	2200      	movs	r2, #0
 801726a:	2300      	movs	r3, #0
 801726c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8017270:	f7e9 fc62 	bl	8000b38 <__aeabi_dcmpeq>
 8017274:	b9d8      	cbnz	r0, 80172ae <_printf_float+0x432>
 8017276:	f10a 33ff 	add.w	r3, sl, #4294967295
 801727a:	f108 0201 	add.w	r2, r8, #1
 801727e:	4631      	mov	r1, r6
 8017280:	4628      	mov	r0, r5
 8017282:	47b8      	blx	r7
 8017284:	3001      	adds	r0, #1
 8017286:	d10e      	bne.n	80172a6 <_printf_float+0x42a>
 8017288:	e657      	b.n	8016f3a <_printf_float+0xbe>
 801728a:	2301      	movs	r3, #1
 801728c:	4652      	mov	r2, sl
 801728e:	4631      	mov	r1, r6
 8017290:	4628      	mov	r0, r5
 8017292:	47b8      	blx	r7
 8017294:	3001      	adds	r0, #1
 8017296:	f43f ae50 	beq.w	8016f3a <_printf_float+0xbe>
 801729a:	f108 0801 	add.w	r8, r8, #1
 801729e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80172a0:	3b01      	subs	r3, #1
 80172a2:	4543      	cmp	r3, r8
 80172a4:	dcf1      	bgt.n	801728a <_printf_float+0x40e>
 80172a6:	464b      	mov	r3, r9
 80172a8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80172ac:	e6da      	b.n	8017064 <_printf_float+0x1e8>
 80172ae:	f04f 0800 	mov.w	r8, #0
 80172b2:	f104 0a1a 	add.w	sl, r4, #26
 80172b6:	e7f2      	b.n	801729e <_printf_float+0x422>
 80172b8:	2301      	movs	r3, #1
 80172ba:	4642      	mov	r2, r8
 80172bc:	e7df      	b.n	801727e <_printf_float+0x402>
 80172be:	2301      	movs	r3, #1
 80172c0:	464a      	mov	r2, r9
 80172c2:	4631      	mov	r1, r6
 80172c4:	4628      	mov	r0, r5
 80172c6:	47b8      	blx	r7
 80172c8:	3001      	adds	r0, #1
 80172ca:	f43f ae36 	beq.w	8016f3a <_printf_float+0xbe>
 80172ce:	f108 0801 	add.w	r8, r8, #1
 80172d2:	68e3      	ldr	r3, [r4, #12]
 80172d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80172d6:	1a5b      	subs	r3, r3, r1
 80172d8:	4543      	cmp	r3, r8
 80172da:	dcf0      	bgt.n	80172be <_printf_float+0x442>
 80172dc:	e6f8      	b.n	80170d0 <_printf_float+0x254>
 80172de:	f04f 0800 	mov.w	r8, #0
 80172e2:	f104 0919 	add.w	r9, r4, #25
 80172e6:	e7f4      	b.n	80172d2 <_printf_float+0x456>

080172e8 <_printf_common>:
 80172e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80172ec:	4616      	mov	r6, r2
 80172ee:	4699      	mov	r9, r3
 80172f0:	688a      	ldr	r2, [r1, #8]
 80172f2:	690b      	ldr	r3, [r1, #16]
 80172f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80172f8:	4293      	cmp	r3, r2
 80172fa:	bfb8      	it	lt
 80172fc:	4613      	movlt	r3, r2
 80172fe:	6033      	str	r3, [r6, #0]
 8017300:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017304:	4607      	mov	r7, r0
 8017306:	460c      	mov	r4, r1
 8017308:	b10a      	cbz	r2, 801730e <_printf_common+0x26>
 801730a:	3301      	adds	r3, #1
 801730c:	6033      	str	r3, [r6, #0]
 801730e:	6823      	ldr	r3, [r4, #0]
 8017310:	0699      	lsls	r1, r3, #26
 8017312:	bf42      	ittt	mi
 8017314:	6833      	ldrmi	r3, [r6, #0]
 8017316:	3302      	addmi	r3, #2
 8017318:	6033      	strmi	r3, [r6, #0]
 801731a:	6825      	ldr	r5, [r4, #0]
 801731c:	f015 0506 	ands.w	r5, r5, #6
 8017320:	d106      	bne.n	8017330 <_printf_common+0x48>
 8017322:	f104 0a19 	add.w	sl, r4, #25
 8017326:	68e3      	ldr	r3, [r4, #12]
 8017328:	6832      	ldr	r2, [r6, #0]
 801732a:	1a9b      	subs	r3, r3, r2
 801732c:	42ab      	cmp	r3, r5
 801732e:	dc26      	bgt.n	801737e <_printf_common+0x96>
 8017330:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017334:	1e13      	subs	r3, r2, #0
 8017336:	6822      	ldr	r2, [r4, #0]
 8017338:	bf18      	it	ne
 801733a:	2301      	movne	r3, #1
 801733c:	0692      	lsls	r2, r2, #26
 801733e:	d42b      	bmi.n	8017398 <_printf_common+0xb0>
 8017340:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017344:	4649      	mov	r1, r9
 8017346:	4638      	mov	r0, r7
 8017348:	47c0      	blx	r8
 801734a:	3001      	adds	r0, #1
 801734c:	d01e      	beq.n	801738c <_printf_common+0xa4>
 801734e:	6823      	ldr	r3, [r4, #0]
 8017350:	6922      	ldr	r2, [r4, #16]
 8017352:	f003 0306 	and.w	r3, r3, #6
 8017356:	2b04      	cmp	r3, #4
 8017358:	bf02      	ittt	eq
 801735a:	68e5      	ldreq	r5, [r4, #12]
 801735c:	6833      	ldreq	r3, [r6, #0]
 801735e:	1aed      	subeq	r5, r5, r3
 8017360:	68a3      	ldr	r3, [r4, #8]
 8017362:	bf0c      	ite	eq
 8017364:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017368:	2500      	movne	r5, #0
 801736a:	4293      	cmp	r3, r2
 801736c:	bfc4      	itt	gt
 801736e:	1a9b      	subgt	r3, r3, r2
 8017370:	18ed      	addgt	r5, r5, r3
 8017372:	2600      	movs	r6, #0
 8017374:	341a      	adds	r4, #26
 8017376:	42b5      	cmp	r5, r6
 8017378:	d11a      	bne.n	80173b0 <_printf_common+0xc8>
 801737a:	2000      	movs	r0, #0
 801737c:	e008      	b.n	8017390 <_printf_common+0xa8>
 801737e:	2301      	movs	r3, #1
 8017380:	4652      	mov	r2, sl
 8017382:	4649      	mov	r1, r9
 8017384:	4638      	mov	r0, r7
 8017386:	47c0      	blx	r8
 8017388:	3001      	adds	r0, #1
 801738a:	d103      	bne.n	8017394 <_printf_common+0xac>
 801738c:	f04f 30ff 	mov.w	r0, #4294967295
 8017390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017394:	3501      	adds	r5, #1
 8017396:	e7c6      	b.n	8017326 <_printf_common+0x3e>
 8017398:	18e1      	adds	r1, r4, r3
 801739a:	1c5a      	adds	r2, r3, #1
 801739c:	2030      	movs	r0, #48	; 0x30
 801739e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80173a2:	4422      	add	r2, r4
 80173a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80173a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80173ac:	3302      	adds	r3, #2
 80173ae:	e7c7      	b.n	8017340 <_printf_common+0x58>
 80173b0:	2301      	movs	r3, #1
 80173b2:	4622      	mov	r2, r4
 80173b4:	4649      	mov	r1, r9
 80173b6:	4638      	mov	r0, r7
 80173b8:	47c0      	blx	r8
 80173ba:	3001      	adds	r0, #1
 80173bc:	d0e6      	beq.n	801738c <_printf_common+0xa4>
 80173be:	3601      	adds	r6, #1
 80173c0:	e7d9      	b.n	8017376 <_printf_common+0x8e>
	...

080173c4 <_printf_i>:
 80173c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80173c8:	7e0f      	ldrb	r7, [r1, #24]
 80173ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80173cc:	2f78      	cmp	r7, #120	; 0x78
 80173ce:	4691      	mov	r9, r2
 80173d0:	4680      	mov	r8, r0
 80173d2:	460c      	mov	r4, r1
 80173d4:	469a      	mov	sl, r3
 80173d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80173da:	d807      	bhi.n	80173ec <_printf_i+0x28>
 80173dc:	2f62      	cmp	r7, #98	; 0x62
 80173de:	d80a      	bhi.n	80173f6 <_printf_i+0x32>
 80173e0:	2f00      	cmp	r7, #0
 80173e2:	f000 80d4 	beq.w	801758e <_printf_i+0x1ca>
 80173e6:	2f58      	cmp	r7, #88	; 0x58
 80173e8:	f000 80c0 	beq.w	801756c <_printf_i+0x1a8>
 80173ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80173f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80173f4:	e03a      	b.n	801746c <_printf_i+0xa8>
 80173f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80173fa:	2b15      	cmp	r3, #21
 80173fc:	d8f6      	bhi.n	80173ec <_printf_i+0x28>
 80173fe:	a101      	add	r1, pc, #4	; (adr r1, 8017404 <_printf_i+0x40>)
 8017400:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017404:	0801745d 	.word	0x0801745d
 8017408:	08017471 	.word	0x08017471
 801740c:	080173ed 	.word	0x080173ed
 8017410:	080173ed 	.word	0x080173ed
 8017414:	080173ed 	.word	0x080173ed
 8017418:	080173ed 	.word	0x080173ed
 801741c:	08017471 	.word	0x08017471
 8017420:	080173ed 	.word	0x080173ed
 8017424:	080173ed 	.word	0x080173ed
 8017428:	080173ed 	.word	0x080173ed
 801742c:	080173ed 	.word	0x080173ed
 8017430:	08017575 	.word	0x08017575
 8017434:	0801749d 	.word	0x0801749d
 8017438:	0801752f 	.word	0x0801752f
 801743c:	080173ed 	.word	0x080173ed
 8017440:	080173ed 	.word	0x080173ed
 8017444:	08017597 	.word	0x08017597
 8017448:	080173ed 	.word	0x080173ed
 801744c:	0801749d 	.word	0x0801749d
 8017450:	080173ed 	.word	0x080173ed
 8017454:	080173ed 	.word	0x080173ed
 8017458:	08017537 	.word	0x08017537
 801745c:	682b      	ldr	r3, [r5, #0]
 801745e:	1d1a      	adds	r2, r3, #4
 8017460:	681b      	ldr	r3, [r3, #0]
 8017462:	602a      	str	r2, [r5, #0]
 8017464:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017468:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801746c:	2301      	movs	r3, #1
 801746e:	e09f      	b.n	80175b0 <_printf_i+0x1ec>
 8017470:	6820      	ldr	r0, [r4, #0]
 8017472:	682b      	ldr	r3, [r5, #0]
 8017474:	0607      	lsls	r7, r0, #24
 8017476:	f103 0104 	add.w	r1, r3, #4
 801747a:	6029      	str	r1, [r5, #0]
 801747c:	d501      	bpl.n	8017482 <_printf_i+0xbe>
 801747e:	681e      	ldr	r6, [r3, #0]
 8017480:	e003      	b.n	801748a <_printf_i+0xc6>
 8017482:	0646      	lsls	r6, r0, #25
 8017484:	d5fb      	bpl.n	801747e <_printf_i+0xba>
 8017486:	f9b3 6000 	ldrsh.w	r6, [r3]
 801748a:	2e00      	cmp	r6, #0
 801748c:	da03      	bge.n	8017496 <_printf_i+0xd2>
 801748e:	232d      	movs	r3, #45	; 0x2d
 8017490:	4276      	negs	r6, r6
 8017492:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017496:	485a      	ldr	r0, [pc, #360]	; (8017600 <_printf_i+0x23c>)
 8017498:	230a      	movs	r3, #10
 801749a:	e012      	b.n	80174c2 <_printf_i+0xfe>
 801749c:	682b      	ldr	r3, [r5, #0]
 801749e:	6820      	ldr	r0, [r4, #0]
 80174a0:	1d19      	adds	r1, r3, #4
 80174a2:	6029      	str	r1, [r5, #0]
 80174a4:	0605      	lsls	r5, r0, #24
 80174a6:	d501      	bpl.n	80174ac <_printf_i+0xe8>
 80174a8:	681e      	ldr	r6, [r3, #0]
 80174aa:	e002      	b.n	80174b2 <_printf_i+0xee>
 80174ac:	0641      	lsls	r1, r0, #25
 80174ae:	d5fb      	bpl.n	80174a8 <_printf_i+0xe4>
 80174b0:	881e      	ldrh	r6, [r3, #0]
 80174b2:	4853      	ldr	r0, [pc, #332]	; (8017600 <_printf_i+0x23c>)
 80174b4:	2f6f      	cmp	r7, #111	; 0x6f
 80174b6:	bf0c      	ite	eq
 80174b8:	2308      	moveq	r3, #8
 80174ba:	230a      	movne	r3, #10
 80174bc:	2100      	movs	r1, #0
 80174be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80174c2:	6865      	ldr	r5, [r4, #4]
 80174c4:	60a5      	str	r5, [r4, #8]
 80174c6:	2d00      	cmp	r5, #0
 80174c8:	bfa2      	ittt	ge
 80174ca:	6821      	ldrge	r1, [r4, #0]
 80174cc:	f021 0104 	bicge.w	r1, r1, #4
 80174d0:	6021      	strge	r1, [r4, #0]
 80174d2:	b90e      	cbnz	r6, 80174d8 <_printf_i+0x114>
 80174d4:	2d00      	cmp	r5, #0
 80174d6:	d04b      	beq.n	8017570 <_printf_i+0x1ac>
 80174d8:	4615      	mov	r5, r2
 80174da:	fbb6 f1f3 	udiv	r1, r6, r3
 80174de:	fb03 6711 	mls	r7, r3, r1, r6
 80174e2:	5dc7      	ldrb	r7, [r0, r7]
 80174e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80174e8:	4637      	mov	r7, r6
 80174ea:	42bb      	cmp	r3, r7
 80174ec:	460e      	mov	r6, r1
 80174ee:	d9f4      	bls.n	80174da <_printf_i+0x116>
 80174f0:	2b08      	cmp	r3, #8
 80174f2:	d10b      	bne.n	801750c <_printf_i+0x148>
 80174f4:	6823      	ldr	r3, [r4, #0]
 80174f6:	07de      	lsls	r6, r3, #31
 80174f8:	d508      	bpl.n	801750c <_printf_i+0x148>
 80174fa:	6923      	ldr	r3, [r4, #16]
 80174fc:	6861      	ldr	r1, [r4, #4]
 80174fe:	4299      	cmp	r1, r3
 8017500:	bfde      	ittt	le
 8017502:	2330      	movle	r3, #48	; 0x30
 8017504:	f805 3c01 	strble.w	r3, [r5, #-1]
 8017508:	f105 35ff 	addle.w	r5, r5, #4294967295
 801750c:	1b52      	subs	r2, r2, r5
 801750e:	6122      	str	r2, [r4, #16]
 8017510:	f8cd a000 	str.w	sl, [sp]
 8017514:	464b      	mov	r3, r9
 8017516:	aa03      	add	r2, sp, #12
 8017518:	4621      	mov	r1, r4
 801751a:	4640      	mov	r0, r8
 801751c:	f7ff fee4 	bl	80172e8 <_printf_common>
 8017520:	3001      	adds	r0, #1
 8017522:	d14a      	bne.n	80175ba <_printf_i+0x1f6>
 8017524:	f04f 30ff 	mov.w	r0, #4294967295
 8017528:	b004      	add	sp, #16
 801752a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801752e:	6823      	ldr	r3, [r4, #0]
 8017530:	f043 0320 	orr.w	r3, r3, #32
 8017534:	6023      	str	r3, [r4, #0]
 8017536:	4833      	ldr	r0, [pc, #204]	; (8017604 <_printf_i+0x240>)
 8017538:	2778      	movs	r7, #120	; 0x78
 801753a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801753e:	6823      	ldr	r3, [r4, #0]
 8017540:	6829      	ldr	r1, [r5, #0]
 8017542:	061f      	lsls	r7, r3, #24
 8017544:	f851 6b04 	ldr.w	r6, [r1], #4
 8017548:	d402      	bmi.n	8017550 <_printf_i+0x18c>
 801754a:	065f      	lsls	r7, r3, #25
 801754c:	bf48      	it	mi
 801754e:	b2b6      	uxthmi	r6, r6
 8017550:	07df      	lsls	r7, r3, #31
 8017552:	bf48      	it	mi
 8017554:	f043 0320 	orrmi.w	r3, r3, #32
 8017558:	6029      	str	r1, [r5, #0]
 801755a:	bf48      	it	mi
 801755c:	6023      	strmi	r3, [r4, #0]
 801755e:	b91e      	cbnz	r6, 8017568 <_printf_i+0x1a4>
 8017560:	6823      	ldr	r3, [r4, #0]
 8017562:	f023 0320 	bic.w	r3, r3, #32
 8017566:	6023      	str	r3, [r4, #0]
 8017568:	2310      	movs	r3, #16
 801756a:	e7a7      	b.n	80174bc <_printf_i+0xf8>
 801756c:	4824      	ldr	r0, [pc, #144]	; (8017600 <_printf_i+0x23c>)
 801756e:	e7e4      	b.n	801753a <_printf_i+0x176>
 8017570:	4615      	mov	r5, r2
 8017572:	e7bd      	b.n	80174f0 <_printf_i+0x12c>
 8017574:	682b      	ldr	r3, [r5, #0]
 8017576:	6826      	ldr	r6, [r4, #0]
 8017578:	6961      	ldr	r1, [r4, #20]
 801757a:	1d18      	adds	r0, r3, #4
 801757c:	6028      	str	r0, [r5, #0]
 801757e:	0635      	lsls	r5, r6, #24
 8017580:	681b      	ldr	r3, [r3, #0]
 8017582:	d501      	bpl.n	8017588 <_printf_i+0x1c4>
 8017584:	6019      	str	r1, [r3, #0]
 8017586:	e002      	b.n	801758e <_printf_i+0x1ca>
 8017588:	0670      	lsls	r0, r6, #25
 801758a:	d5fb      	bpl.n	8017584 <_printf_i+0x1c0>
 801758c:	8019      	strh	r1, [r3, #0]
 801758e:	2300      	movs	r3, #0
 8017590:	6123      	str	r3, [r4, #16]
 8017592:	4615      	mov	r5, r2
 8017594:	e7bc      	b.n	8017510 <_printf_i+0x14c>
 8017596:	682b      	ldr	r3, [r5, #0]
 8017598:	1d1a      	adds	r2, r3, #4
 801759a:	602a      	str	r2, [r5, #0]
 801759c:	681d      	ldr	r5, [r3, #0]
 801759e:	6862      	ldr	r2, [r4, #4]
 80175a0:	2100      	movs	r1, #0
 80175a2:	4628      	mov	r0, r5
 80175a4:	f7e8 fe4c 	bl	8000240 <memchr>
 80175a8:	b108      	cbz	r0, 80175ae <_printf_i+0x1ea>
 80175aa:	1b40      	subs	r0, r0, r5
 80175ac:	6060      	str	r0, [r4, #4]
 80175ae:	6863      	ldr	r3, [r4, #4]
 80175b0:	6123      	str	r3, [r4, #16]
 80175b2:	2300      	movs	r3, #0
 80175b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80175b8:	e7aa      	b.n	8017510 <_printf_i+0x14c>
 80175ba:	6923      	ldr	r3, [r4, #16]
 80175bc:	462a      	mov	r2, r5
 80175be:	4649      	mov	r1, r9
 80175c0:	4640      	mov	r0, r8
 80175c2:	47d0      	blx	sl
 80175c4:	3001      	adds	r0, #1
 80175c6:	d0ad      	beq.n	8017524 <_printf_i+0x160>
 80175c8:	6823      	ldr	r3, [r4, #0]
 80175ca:	079b      	lsls	r3, r3, #30
 80175cc:	d413      	bmi.n	80175f6 <_printf_i+0x232>
 80175ce:	68e0      	ldr	r0, [r4, #12]
 80175d0:	9b03      	ldr	r3, [sp, #12]
 80175d2:	4298      	cmp	r0, r3
 80175d4:	bfb8      	it	lt
 80175d6:	4618      	movlt	r0, r3
 80175d8:	e7a6      	b.n	8017528 <_printf_i+0x164>
 80175da:	2301      	movs	r3, #1
 80175dc:	4632      	mov	r2, r6
 80175de:	4649      	mov	r1, r9
 80175e0:	4640      	mov	r0, r8
 80175e2:	47d0      	blx	sl
 80175e4:	3001      	adds	r0, #1
 80175e6:	d09d      	beq.n	8017524 <_printf_i+0x160>
 80175e8:	3501      	adds	r5, #1
 80175ea:	68e3      	ldr	r3, [r4, #12]
 80175ec:	9903      	ldr	r1, [sp, #12]
 80175ee:	1a5b      	subs	r3, r3, r1
 80175f0:	42ab      	cmp	r3, r5
 80175f2:	dcf2      	bgt.n	80175da <_printf_i+0x216>
 80175f4:	e7eb      	b.n	80175ce <_printf_i+0x20a>
 80175f6:	2500      	movs	r5, #0
 80175f8:	f104 0619 	add.w	r6, r4, #25
 80175fc:	e7f5      	b.n	80175ea <_printf_i+0x226>
 80175fe:	bf00      	nop
 8017600:	0806d10f 	.word	0x0806d10f
 8017604:	0806d120 	.word	0x0806d120

08017608 <std>:
 8017608:	2300      	movs	r3, #0
 801760a:	b510      	push	{r4, lr}
 801760c:	4604      	mov	r4, r0
 801760e:	e9c0 3300 	strd	r3, r3, [r0]
 8017612:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017616:	6083      	str	r3, [r0, #8]
 8017618:	8181      	strh	r1, [r0, #12]
 801761a:	6643      	str	r3, [r0, #100]	; 0x64
 801761c:	81c2      	strh	r2, [r0, #14]
 801761e:	6183      	str	r3, [r0, #24]
 8017620:	4619      	mov	r1, r3
 8017622:	2208      	movs	r2, #8
 8017624:	305c      	adds	r0, #92	; 0x5c
 8017626:	f000 f961 	bl	80178ec <memset>
 801762a:	4b0d      	ldr	r3, [pc, #52]	; (8017660 <std+0x58>)
 801762c:	6263      	str	r3, [r4, #36]	; 0x24
 801762e:	4b0d      	ldr	r3, [pc, #52]	; (8017664 <std+0x5c>)
 8017630:	62a3      	str	r3, [r4, #40]	; 0x28
 8017632:	4b0d      	ldr	r3, [pc, #52]	; (8017668 <std+0x60>)
 8017634:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017636:	4b0d      	ldr	r3, [pc, #52]	; (801766c <std+0x64>)
 8017638:	6323      	str	r3, [r4, #48]	; 0x30
 801763a:	4b0d      	ldr	r3, [pc, #52]	; (8017670 <std+0x68>)
 801763c:	6224      	str	r4, [r4, #32]
 801763e:	429c      	cmp	r4, r3
 8017640:	d006      	beq.n	8017650 <std+0x48>
 8017642:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8017646:	4294      	cmp	r4, r2
 8017648:	d002      	beq.n	8017650 <std+0x48>
 801764a:	33d0      	adds	r3, #208	; 0xd0
 801764c:	429c      	cmp	r4, r3
 801764e:	d105      	bne.n	801765c <std+0x54>
 8017650:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017654:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017658:	f000 ba2a 	b.w	8017ab0 <__retarget_lock_init_recursive>
 801765c:	bd10      	pop	{r4, pc}
 801765e:	bf00      	nop
 8017660:	080177f1 	.word	0x080177f1
 8017664:	08017813 	.word	0x08017813
 8017668:	0801784b 	.word	0x0801784b
 801766c:	0801786f 	.word	0x0801786f
 8017670:	20009ccc 	.word	0x20009ccc

08017674 <stdio_exit_handler>:
 8017674:	4a02      	ldr	r2, [pc, #8]	; (8017680 <stdio_exit_handler+0xc>)
 8017676:	4903      	ldr	r1, [pc, #12]	; (8017684 <stdio_exit_handler+0x10>)
 8017678:	4803      	ldr	r0, [pc, #12]	; (8017688 <stdio_exit_handler+0x14>)
 801767a:	f000 b87b 	b.w	8017774 <_fwalk_sglue>
 801767e:	bf00      	nop
 8017680:	20000010 	.word	0x20000010
 8017684:	08019659 	.word	0x08019659
 8017688:	2000001c 	.word	0x2000001c

0801768c <cleanup_stdio>:
 801768c:	6841      	ldr	r1, [r0, #4]
 801768e:	4b0c      	ldr	r3, [pc, #48]	; (80176c0 <cleanup_stdio+0x34>)
 8017690:	4299      	cmp	r1, r3
 8017692:	b510      	push	{r4, lr}
 8017694:	4604      	mov	r4, r0
 8017696:	d001      	beq.n	801769c <cleanup_stdio+0x10>
 8017698:	f001 ffde 	bl	8019658 <_fflush_r>
 801769c:	68a1      	ldr	r1, [r4, #8]
 801769e:	4b09      	ldr	r3, [pc, #36]	; (80176c4 <cleanup_stdio+0x38>)
 80176a0:	4299      	cmp	r1, r3
 80176a2:	d002      	beq.n	80176aa <cleanup_stdio+0x1e>
 80176a4:	4620      	mov	r0, r4
 80176a6:	f001 ffd7 	bl	8019658 <_fflush_r>
 80176aa:	68e1      	ldr	r1, [r4, #12]
 80176ac:	4b06      	ldr	r3, [pc, #24]	; (80176c8 <cleanup_stdio+0x3c>)
 80176ae:	4299      	cmp	r1, r3
 80176b0:	d004      	beq.n	80176bc <cleanup_stdio+0x30>
 80176b2:	4620      	mov	r0, r4
 80176b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80176b8:	f001 bfce 	b.w	8019658 <_fflush_r>
 80176bc:	bd10      	pop	{r4, pc}
 80176be:	bf00      	nop
 80176c0:	20009ccc 	.word	0x20009ccc
 80176c4:	20009d34 	.word	0x20009d34
 80176c8:	20009d9c 	.word	0x20009d9c

080176cc <global_stdio_init.part.0>:
 80176cc:	b510      	push	{r4, lr}
 80176ce:	4b0b      	ldr	r3, [pc, #44]	; (80176fc <global_stdio_init.part.0+0x30>)
 80176d0:	4c0b      	ldr	r4, [pc, #44]	; (8017700 <global_stdio_init.part.0+0x34>)
 80176d2:	4a0c      	ldr	r2, [pc, #48]	; (8017704 <global_stdio_init.part.0+0x38>)
 80176d4:	601a      	str	r2, [r3, #0]
 80176d6:	4620      	mov	r0, r4
 80176d8:	2200      	movs	r2, #0
 80176da:	2104      	movs	r1, #4
 80176dc:	f7ff ff94 	bl	8017608 <std>
 80176e0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80176e4:	2201      	movs	r2, #1
 80176e6:	2109      	movs	r1, #9
 80176e8:	f7ff ff8e 	bl	8017608 <std>
 80176ec:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80176f0:	2202      	movs	r2, #2
 80176f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80176f6:	2112      	movs	r1, #18
 80176f8:	f7ff bf86 	b.w	8017608 <std>
 80176fc:	20009e04 	.word	0x20009e04
 8017700:	20009ccc 	.word	0x20009ccc
 8017704:	08017675 	.word	0x08017675

08017708 <__sfp_lock_acquire>:
 8017708:	4801      	ldr	r0, [pc, #4]	; (8017710 <__sfp_lock_acquire+0x8>)
 801770a:	f000 b9d2 	b.w	8017ab2 <__retarget_lock_acquire_recursive>
 801770e:	bf00      	nop
 8017710:	20009e0e 	.word	0x20009e0e

08017714 <__sfp_lock_release>:
 8017714:	4801      	ldr	r0, [pc, #4]	; (801771c <__sfp_lock_release+0x8>)
 8017716:	f000 b9cd 	b.w	8017ab4 <__retarget_lock_release_recursive>
 801771a:	bf00      	nop
 801771c:	20009e0e 	.word	0x20009e0e

08017720 <__sinit>:
 8017720:	b510      	push	{r4, lr}
 8017722:	4604      	mov	r4, r0
 8017724:	f7ff fff0 	bl	8017708 <__sfp_lock_acquire>
 8017728:	6a23      	ldr	r3, [r4, #32]
 801772a:	b11b      	cbz	r3, 8017734 <__sinit+0x14>
 801772c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017730:	f7ff bff0 	b.w	8017714 <__sfp_lock_release>
 8017734:	4b04      	ldr	r3, [pc, #16]	; (8017748 <__sinit+0x28>)
 8017736:	6223      	str	r3, [r4, #32]
 8017738:	4b04      	ldr	r3, [pc, #16]	; (801774c <__sinit+0x2c>)
 801773a:	681b      	ldr	r3, [r3, #0]
 801773c:	2b00      	cmp	r3, #0
 801773e:	d1f5      	bne.n	801772c <__sinit+0xc>
 8017740:	f7ff ffc4 	bl	80176cc <global_stdio_init.part.0>
 8017744:	e7f2      	b.n	801772c <__sinit+0xc>
 8017746:	bf00      	nop
 8017748:	0801768d 	.word	0x0801768d
 801774c:	20009e04 	.word	0x20009e04

08017750 <fiprintf>:
 8017750:	b40e      	push	{r1, r2, r3}
 8017752:	b503      	push	{r0, r1, lr}
 8017754:	4601      	mov	r1, r0
 8017756:	ab03      	add	r3, sp, #12
 8017758:	4805      	ldr	r0, [pc, #20]	; (8017770 <fiprintf+0x20>)
 801775a:	f853 2b04 	ldr.w	r2, [r3], #4
 801775e:	6800      	ldr	r0, [r0, #0]
 8017760:	9301      	str	r3, [sp, #4]
 8017762:	f001 fdd9 	bl	8019318 <_vfiprintf_r>
 8017766:	b002      	add	sp, #8
 8017768:	f85d eb04 	ldr.w	lr, [sp], #4
 801776c:	b003      	add	sp, #12
 801776e:	4770      	bx	lr
 8017770:	20000068 	.word	0x20000068

08017774 <_fwalk_sglue>:
 8017774:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017778:	4607      	mov	r7, r0
 801777a:	4688      	mov	r8, r1
 801777c:	4614      	mov	r4, r2
 801777e:	2600      	movs	r6, #0
 8017780:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017784:	f1b9 0901 	subs.w	r9, r9, #1
 8017788:	d505      	bpl.n	8017796 <_fwalk_sglue+0x22>
 801778a:	6824      	ldr	r4, [r4, #0]
 801778c:	2c00      	cmp	r4, #0
 801778e:	d1f7      	bne.n	8017780 <_fwalk_sglue+0xc>
 8017790:	4630      	mov	r0, r6
 8017792:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017796:	89ab      	ldrh	r3, [r5, #12]
 8017798:	2b01      	cmp	r3, #1
 801779a:	d907      	bls.n	80177ac <_fwalk_sglue+0x38>
 801779c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80177a0:	3301      	adds	r3, #1
 80177a2:	d003      	beq.n	80177ac <_fwalk_sglue+0x38>
 80177a4:	4629      	mov	r1, r5
 80177a6:	4638      	mov	r0, r7
 80177a8:	47c0      	blx	r8
 80177aa:	4306      	orrs	r6, r0
 80177ac:	3568      	adds	r5, #104	; 0x68
 80177ae:	e7e9      	b.n	8017784 <_fwalk_sglue+0x10>

080177b0 <siprintf>:
 80177b0:	b40e      	push	{r1, r2, r3}
 80177b2:	b500      	push	{lr}
 80177b4:	b09c      	sub	sp, #112	; 0x70
 80177b6:	ab1d      	add	r3, sp, #116	; 0x74
 80177b8:	9002      	str	r0, [sp, #8]
 80177ba:	9006      	str	r0, [sp, #24]
 80177bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80177c0:	4809      	ldr	r0, [pc, #36]	; (80177e8 <siprintf+0x38>)
 80177c2:	9107      	str	r1, [sp, #28]
 80177c4:	9104      	str	r1, [sp, #16]
 80177c6:	4909      	ldr	r1, [pc, #36]	; (80177ec <siprintf+0x3c>)
 80177c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80177cc:	9105      	str	r1, [sp, #20]
 80177ce:	6800      	ldr	r0, [r0, #0]
 80177d0:	9301      	str	r3, [sp, #4]
 80177d2:	a902      	add	r1, sp, #8
 80177d4:	f001 fc78 	bl	80190c8 <_svfiprintf_r>
 80177d8:	9b02      	ldr	r3, [sp, #8]
 80177da:	2200      	movs	r2, #0
 80177dc:	701a      	strb	r2, [r3, #0]
 80177de:	b01c      	add	sp, #112	; 0x70
 80177e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80177e4:	b003      	add	sp, #12
 80177e6:	4770      	bx	lr
 80177e8:	20000068 	.word	0x20000068
 80177ec:	ffff0208 	.word	0xffff0208

080177f0 <__sread>:
 80177f0:	b510      	push	{r4, lr}
 80177f2:	460c      	mov	r4, r1
 80177f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80177f8:	f000 f8e8 	bl	80179cc <_read_r>
 80177fc:	2800      	cmp	r0, #0
 80177fe:	bfab      	itete	ge
 8017800:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017802:	89a3      	ldrhlt	r3, [r4, #12]
 8017804:	181b      	addge	r3, r3, r0
 8017806:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801780a:	bfac      	ite	ge
 801780c:	6563      	strge	r3, [r4, #84]	; 0x54
 801780e:	81a3      	strhlt	r3, [r4, #12]
 8017810:	bd10      	pop	{r4, pc}

08017812 <__swrite>:
 8017812:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017816:	461f      	mov	r7, r3
 8017818:	898b      	ldrh	r3, [r1, #12]
 801781a:	05db      	lsls	r3, r3, #23
 801781c:	4605      	mov	r5, r0
 801781e:	460c      	mov	r4, r1
 8017820:	4616      	mov	r6, r2
 8017822:	d505      	bpl.n	8017830 <__swrite+0x1e>
 8017824:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017828:	2302      	movs	r3, #2
 801782a:	2200      	movs	r2, #0
 801782c:	f000 f8bc 	bl	80179a8 <_lseek_r>
 8017830:	89a3      	ldrh	r3, [r4, #12]
 8017832:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017836:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801783a:	81a3      	strh	r3, [r4, #12]
 801783c:	4632      	mov	r2, r6
 801783e:	463b      	mov	r3, r7
 8017840:	4628      	mov	r0, r5
 8017842:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017846:	f000 b8f7 	b.w	8017a38 <_write_r>

0801784a <__sseek>:
 801784a:	b510      	push	{r4, lr}
 801784c:	460c      	mov	r4, r1
 801784e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017852:	f000 f8a9 	bl	80179a8 <_lseek_r>
 8017856:	1c43      	adds	r3, r0, #1
 8017858:	89a3      	ldrh	r3, [r4, #12]
 801785a:	bf15      	itete	ne
 801785c:	6560      	strne	r0, [r4, #84]	; 0x54
 801785e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017862:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017866:	81a3      	strheq	r3, [r4, #12]
 8017868:	bf18      	it	ne
 801786a:	81a3      	strhne	r3, [r4, #12]
 801786c:	bd10      	pop	{r4, pc}

0801786e <__sclose>:
 801786e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017872:	f000 b889 	b.w	8017988 <_close_r>
	...

08017878 <_vsiprintf_r>:
 8017878:	b500      	push	{lr}
 801787a:	b09b      	sub	sp, #108	; 0x6c
 801787c:	9100      	str	r1, [sp, #0]
 801787e:	9104      	str	r1, [sp, #16]
 8017880:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017884:	9105      	str	r1, [sp, #20]
 8017886:	9102      	str	r1, [sp, #8]
 8017888:	4905      	ldr	r1, [pc, #20]	; (80178a0 <_vsiprintf_r+0x28>)
 801788a:	9103      	str	r1, [sp, #12]
 801788c:	4669      	mov	r1, sp
 801788e:	f001 fc1b 	bl	80190c8 <_svfiprintf_r>
 8017892:	9b00      	ldr	r3, [sp, #0]
 8017894:	2200      	movs	r2, #0
 8017896:	701a      	strb	r2, [r3, #0]
 8017898:	b01b      	add	sp, #108	; 0x6c
 801789a:	f85d fb04 	ldr.w	pc, [sp], #4
 801789e:	bf00      	nop
 80178a0:	ffff0208 	.word	0xffff0208

080178a4 <vsiprintf>:
 80178a4:	4613      	mov	r3, r2
 80178a6:	460a      	mov	r2, r1
 80178a8:	4601      	mov	r1, r0
 80178aa:	4802      	ldr	r0, [pc, #8]	; (80178b4 <vsiprintf+0x10>)
 80178ac:	6800      	ldr	r0, [r0, #0]
 80178ae:	f7ff bfe3 	b.w	8017878 <_vsiprintf_r>
 80178b2:	bf00      	nop
 80178b4:	20000068 	.word	0x20000068

080178b8 <memmove>:
 80178b8:	4288      	cmp	r0, r1
 80178ba:	b510      	push	{r4, lr}
 80178bc:	eb01 0402 	add.w	r4, r1, r2
 80178c0:	d902      	bls.n	80178c8 <memmove+0x10>
 80178c2:	4284      	cmp	r4, r0
 80178c4:	4623      	mov	r3, r4
 80178c6:	d807      	bhi.n	80178d8 <memmove+0x20>
 80178c8:	1e43      	subs	r3, r0, #1
 80178ca:	42a1      	cmp	r1, r4
 80178cc:	d008      	beq.n	80178e0 <memmove+0x28>
 80178ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80178d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80178d6:	e7f8      	b.n	80178ca <memmove+0x12>
 80178d8:	4402      	add	r2, r0
 80178da:	4601      	mov	r1, r0
 80178dc:	428a      	cmp	r2, r1
 80178de:	d100      	bne.n	80178e2 <memmove+0x2a>
 80178e0:	bd10      	pop	{r4, pc}
 80178e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80178e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80178ea:	e7f7      	b.n	80178dc <memmove+0x24>

080178ec <memset>:
 80178ec:	4402      	add	r2, r0
 80178ee:	4603      	mov	r3, r0
 80178f0:	4293      	cmp	r3, r2
 80178f2:	d100      	bne.n	80178f6 <memset+0xa>
 80178f4:	4770      	bx	lr
 80178f6:	f803 1b01 	strb.w	r1, [r3], #1
 80178fa:	e7f9      	b.n	80178f0 <memset+0x4>

080178fc <strncmp>:
 80178fc:	b510      	push	{r4, lr}
 80178fe:	b16a      	cbz	r2, 801791c <strncmp+0x20>
 8017900:	3901      	subs	r1, #1
 8017902:	1884      	adds	r4, r0, r2
 8017904:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017908:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801790c:	429a      	cmp	r2, r3
 801790e:	d103      	bne.n	8017918 <strncmp+0x1c>
 8017910:	42a0      	cmp	r0, r4
 8017912:	d001      	beq.n	8017918 <strncmp+0x1c>
 8017914:	2a00      	cmp	r2, #0
 8017916:	d1f5      	bne.n	8017904 <strncmp+0x8>
 8017918:	1ad0      	subs	r0, r2, r3
 801791a:	bd10      	pop	{r4, pc}
 801791c:	4610      	mov	r0, r2
 801791e:	e7fc      	b.n	801791a <strncmp+0x1e>

08017920 <_raise_r>:
 8017920:	291f      	cmp	r1, #31
 8017922:	b538      	push	{r3, r4, r5, lr}
 8017924:	4604      	mov	r4, r0
 8017926:	460d      	mov	r5, r1
 8017928:	d904      	bls.n	8017934 <_raise_r+0x14>
 801792a:	2316      	movs	r3, #22
 801792c:	6003      	str	r3, [r0, #0]
 801792e:	f04f 30ff 	mov.w	r0, #4294967295
 8017932:	bd38      	pop	{r3, r4, r5, pc}
 8017934:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8017936:	b112      	cbz	r2, 801793e <_raise_r+0x1e>
 8017938:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801793c:	b94b      	cbnz	r3, 8017952 <_raise_r+0x32>
 801793e:	4620      	mov	r0, r4
 8017940:	f000 f868 	bl	8017a14 <_getpid_r>
 8017944:	462a      	mov	r2, r5
 8017946:	4601      	mov	r1, r0
 8017948:	4620      	mov	r0, r4
 801794a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801794e:	f000 b84f 	b.w	80179f0 <_kill_r>
 8017952:	2b01      	cmp	r3, #1
 8017954:	d00a      	beq.n	801796c <_raise_r+0x4c>
 8017956:	1c59      	adds	r1, r3, #1
 8017958:	d103      	bne.n	8017962 <_raise_r+0x42>
 801795a:	2316      	movs	r3, #22
 801795c:	6003      	str	r3, [r0, #0]
 801795e:	2001      	movs	r0, #1
 8017960:	e7e7      	b.n	8017932 <_raise_r+0x12>
 8017962:	2400      	movs	r4, #0
 8017964:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8017968:	4628      	mov	r0, r5
 801796a:	4798      	blx	r3
 801796c:	2000      	movs	r0, #0
 801796e:	e7e0      	b.n	8017932 <_raise_r+0x12>

08017970 <raise>:
 8017970:	4b02      	ldr	r3, [pc, #8]	; (801797c <raise+0xc>)
 8017972:	4601      	mov	r1, r0
 8017974:	6818      	ldr	r0, [r3, #0]
 8017976:	f7ff bfd3 	b.w	8017920 <_raise_r>
 801797a:	bf00      	nop
 801797c:	20000068 	.word	0x20000068

08017980 <_localeconv_r>:
 8017980:	4800      	ldr	r0, [pc, #0]	; (8017984 <_localeconv_r+0x4>)
 8017982:	4770      	bx	lr
 8017984:	20000160 	.word	0x20000160

08017988 <_close_r>:
 8017988:	b538      	push	{r3, r4, r5, lr}
 801798a:	4d06      	ldr	r5, [pc, #24]	; (80179a4 <_close_r+0x1c>)
 801798c:	2300      	movs	r3, #0
 801798e:	4604      	mov	r4, r0
 8017990:	4608      	mov	r0, r1
 8017992:	602b      	str	r3, [r5, #0]
 8017994:	f7ea f9cd 	bl	8001d32 <_close>
 8017998:	1c43      	adds	r3, r0, #1
 801799a:	d102      	bne.n	80179a2 <_close_r+0x1a>
 801799c:	682b      	ldr	r3, [r5, #0]
 801799e:	b103      	cbz	r3, 80179a2 <_close_r+0x1a>
 80179a0:	6023      	str	r3, [r4, #0]
 80179a2:	bd38      	pop	{r3, r4, r5, pc}
 80179a4:	20009e08 	.word	0x20009e08

080179a8 <_lseek_r>:
 80179a8:	b538      	push	{r3, r4, r5, lr}
 80179aa:	4d07      	ldr	r5, [pc, #28]	; (80179c8 <_lseek_r+0x20>)
 80179ac:	4604      	mov	r4, r0
 80179ae:	4608      	mov	r0, r1
 80179b0:	4611      	mov	r1, r2
 80179b2:	2200      	movs	r2, #0
 80179b4:	602a      	str	r2, [r5, #0]
 80179b6:	461a      	mov	r2, r3
 80179b8:	f7ea f9e2 	bl	8001d80 <_lseek>
 80179bc:	1c43      	adds	r3, r0, #1
 80179be:	d102      	bne.n	80179c6 <_lseek_r+0x1e>
 80179c0:	682b      	ldr	r3, [r5, #0]
 80179c2:	b103      	cbz	r3, 80179c6 <_lseek_r+0x1e>
 80179c4:	6023      	str	r3, [r4, #0]
 80179c6:	bd38      	pop	{r3, r4, r5, pc}
 80179c8:	20009e08 	.word	0x20009e08

080179cc <_read_r>:
 80179cc:	b538      	push	{r3, r4, r5, lr}
 80179ce:	4d07      	ldr	r5, [pc, #28]	; (80179ec <_read_r+0x20>)
 80179d0:	4604      	mov	r4, r0
 80179d2:	4608      	mov	r0, r1
 80179d4:	4611      	mov	r1, r2
 80179d6:	2200      	movs	r2, #0
 80179d8:	602a      	str	r2, [r5, #0]
 80179da:	461a      	mov	r2, r3
 80179dc:	f7ea f970 	bl	8001cc0 <_read>
 80179e0:	1c43      	adds	r3, r0, #1
 80179e2:	d102      	bne.n	80179ea <_read_r+0x1e>
 80179e4:	682b      	ldr	r3, [r5, #0]
 80179e6:	b103      	cbz	r3, 80179ea <_read_r+0x1e>
 80179e8:	6023      	str	r3, [r4, #0]
 80179ea:	bd38      	pop	{r3, r4, r5, pc}
 80179ec:	20009e08 	.word	0x20009e08

080179f0 <_kill_r>:
 80179f0:	b538      	push	{r3, r4, r5, lr}
 80179f2:	4d07      	ldr	r5, [pc, #28]	; (8017a10 <_kill_r+0x20>)
 80179f4:	2300      	movs	r3, #0
 80179f6:	4604      	mov	r4, r0
 80179f8:	4608      	mov	r0, r1
 80179fa:	4611      	mov	r1, r2
 80179fc:	602b      	str	r3, [r5, #0]
 80179fe:	f7ea f945 	bl	8001c8c <_kill>
 8017a02:	1c43      	adds	r3, r0, #1
 8017a04:	d102      	bne.n	8017a0c <_kill_r+0x1c>
 8017a06:	682b      	ldr	r3, [r5, #0]
 8017a08:	b103      	cbz	r3, 8017a0c <_kill_r+0x1c>
 8017a0a:	6023      	str	r3, [r4, #0]
 8017a0c:	bd38      	pop	{r3, r4, r5, pc}
 8017a0e:	bf00      	nop
 8017a10:	20009e08 	.word	0x20009e08

08017a14 <_getpid_r>:
 8017a14:	f7ea b932 	b.w	8001c7c <_getpid>

08017a18 <_sbrk_r>:
 8017a18:	b538      	push	{r3, r4, r5, lr}
 8017a1a:	4d06      	ldr	r5, [pc, #24]	; (8017a34 <_sbrk_r+0x1c>)
 8017a1c:	2300      	movs	r3, #0
 8017a1e:	4604      	mov	r4, r0
 8017a20:	4608      	mov	r0, r1
 8017a22:	602b      	str	r3, [r5, #0]
 8017a24:	f7ea f9ba 	bl	8001d9c <_sbrk>
 8017a28:	1c43      	adds	r3, r0, #1
 8017a2a:	d102      	bne.n	8017a32 <_sbrk_r+0x1a>
 8017a2c:	682b      	ldr	r3, [r5, #0]
 8017a2e:	b103      	cbz	r3, 8017a32 <_sbrk_r+0x1a>
 8017a30:	6023      	str	r3, [r4, #0]
 8017a32:	bd38      	pop	{r3, r4, r5, pc}
 8017a34:	20009e08 	.word	0x20009e08

08017a38 <_write_r>:
 8017a38:	b538      	push	{r3, r4, r5, lr}
 8017a3a:	4d07      	ldr	r5, [pc, #28]	; (8017a58 <_write_r+0x20>)
 8017a3c:	4604      	mov	r4, r0
 8017a3e:	4608      	mov	r0, r1
 8017a40:	4611      	mov	r1, r2
 8017a42:	2200      	movs	r2, #0
 8017a44:	602a      	str	r2, [r5, #0]
 8017a46:	461a      	mov	r2, r3
 8017a48:	f7ea f957 	bl	8001cfa <_write>
 8017a4c:	1c43      	adds	r3, r0, #1
 8017a4e:	d102      	bne.n	8017a56 <_write_r+0x1e>
 8017a50:	682b      	ldr	r3, [r5, #0]
 8017a52:	b103      	cbz	r3, 8017a56 <_write_r+0x1e>
 8017a54:	6023      	str	r3, [r4, #0]
 8017a56:	bd38      	pop	{r3, r4, r5, pc}
 8017a58:	20009e08 	.word	0x20009e08

08017a5c <__errno>:
 8017a5c:	4b01      	ldr	r3, [pc, #4]	; (8017a64 <__errno+0x8>)
 8017a5e:	6818      	ldr	r0, [r3, #0]
 8017a60:	4770      	bx	lr
 8017a62:	bf00      	nop
 8017a64:	20000068 	.word	0x20000068

08017a68 <__libc_init_array>:
 8017a68:	b570      	push	{r4, r5, r6, lr}
 8017a6a:	4d0d      	ldr	r5, [pc, #52]	; (8017aa0 <__libc_init_array+0x38>)
 8017a6c:	4c0d      	ldr	r4, [pc, #52]	; (8017aa4 <__libc_init_array+0x3c>)
 8017a6e:	1b64      	subs	r4, r4, r5
 8017a70:	10a4      	asrs	r4, r4, #2
 8017a72:	2600      	movs	r6, #0
 8017a74:	42a6      	cmp	r6, r4
 8017a76:	d109      	bne.n	8017a8c <__libc_init_array+0x24>
 8017a78:	4d0b      	ldr	r5, [pc, #44]	; (8017aa8 <__libc_init_array+0x40>)
 8017a7a:	4c0c      	ldr	r4, [pc, #48]	; (8017aac <__libc_init_array+0x44>)
 8017a7c:	f001 ff9a 	bl	80199b4 <_init>
 8017a80:	1b64      	subs	r4, r4, r5
 8017a82:	10a4      	asrs	r4, r4, #2
 8017a84:	2600      	movs	r6, #0
 8017a86:	42a6      	cmp	r6, r4
 8017a88:	d105      	bne.n	8017a96 <__libc_init_array+0x2e>
 8017a8a:	bd70      	pop	{r4, r5, r6, pc}
 8017a8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8017a90:	4798      	blx	r3
 8017a92:	3601      	adds	r6, #1
 8017a94:	e7ee      	b.n	8017a74 <__libc_init_array+0xc>
 8017a96:	f855 3b04 	ldr.w	r3, [r5], #4
 8017a9a:	4798      	blx	r3
 8017a9c:	3601      	adds	r6, #1
 8017a9e:	e7f2      	b.n	8017a86 <__libc_init_array+0x1e>
 8017aa0:	0806d338 	.word	0x0806d338
 8017aa4:	0806d338 	.word	0x0806d338
 8017aa8:	0806d338 	.word	0x0806d338
 8017aac:	0806d33c 	.word	0x0806d33c

08017ab0 <__retarget_lock_init_recursive>:
 8017ab0:	4770      	bx	lr

08017ab2 <__retarget_lock_acquire_recursive>:
 8017ab2:	4770      	bx	lr

08017ab4 <__retarget_lock_release_recursive>:
 8017ab4:	4770      	bx	lr

08017ab6 <memcpy>:
 8017ab6:	440a      	add	r2, r1
 8017ab8:	4291      	cmp	r1, r2
 8017aba:	f100 33ff 	add.w	r3, r0, #4294967295
 8017abe:	d100      	bne.n	8017ac2 <memcpy+0xc>
 8017ac0:	4770      	bx	lr
 8017ac2:	b510      	push	{r4, lr}
 8017ac4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017ac8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017acc:	4291      	cmp	r1, r2
 8017ace:	d1f9      	bne.n	8017ac4 <memcpy+0xe>
 8017ad0:	bd10      	pop	{r4, pc}
	...

08017ad4 <__register_exitproc>:
 8017ad4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017ad8:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8017b8c <__register_exitproc+0xb8>
 8017adc:	4606      	mov	r6, r0
 8017ade:	f8d8 0000 	ldr.w	r0, [r8]
 8017ae2:	461f      	mov	r7, r3
 8017ae4:	460d      	mov	r5, r1
 8017ae6:	4691      	mov	r9, r2
 8017ae8:	f7ff ffe3 	bl	8017ab2 <__retarget_lock_acquire_recursive>
 8017aec:	4b23      	ldr	r3, [pc, #140]	; (8017b7c <__register_exitproc+0xa8>)
 8017aee:	681c      	ldr	r4, [r3, #0]
 8017af0:	b934      	cbnz	r4, 8017b00 <__register_exitproc+0x2c>
 8017af2:	4c23      	ldr	r4, [pc, #140]	; (8017b80 <__register_exitproc+0xac>)
 8017af4:	601c      	str	r4, [r3, #0]
 8017af6:	4b23      	ldr	r3, [pc, #140]	; (8017b84 <__register_exitproc+0xb0>)
 8017af8:	b113      	cbz	r3, 8017b00 <__register_exitproc+0x2c>
 8017afa:	681b      	ldr	r3, [r3, #0]
 8017afc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8017b00:	6863      	ldr	r3, [r4, #4]
 8017b02:	2b1f      	cmp	r3, #31
 8017b04:	dd07      	ble.n	8017b16 <__register_exitproc+0x42>
 8017b06:	f8d8 0000 	ldr.w	r0, [r8]
 8017b0a:	f7ff ffd3 	bl	8017ab4 <__retarget_lock_release_recursive>
 8017b0e:	f04f 30ff 	mov.w	r0, #4294967295
 8017b12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017b16:	b32e      	cbz	r6, 8017b64 <__register_exitproc+0x90>
 8017b18:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8017b1c:	b968      	cbnz	r0, 8017b3a <__register_exitproc+0x66>
 8017b1e:	4b1a      	ldr	r3, [pc, #104]	; (8017b88 <__register_exitproc+0xb4>)
 8017b20:	2b00      	cmp	r3, #0
 8017b22:	d0f0      	beq.n	8017b06 <__register_exitproc+0x32>
 8017b24:	f44f 7084 	mov.w	r0, #264	; 0x108
 8017b28:	f7ff f84c 	bl	8016bc4 <malloc>
 8017b2c:	2800      	cmp	r0, #0
 8017b2e:	d0ea      	beq.n	8017b06 <__register_exitproc+0x32>
 8017b30:	2300      	movs	r3, #0
 8017b32:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8017b36:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8017b3a:	6863      	ldr	r3, [r4, #4]
 8017b3c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8017b40:	2201      	movs	r2, #1
 8017b42:	409a      	lsls	r2, r3
 8017b44:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8017b48:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8017b4c:	4313      	orrs	r3, r2
 8017b4e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8017b52:	2e02      	cmp	r6, #2
 8017b54:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8017b58:	bf02      	ittt	eq
 8017b5a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8017b5e:	4313      	orreq	r3, r2
 8017b60:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8017b64:	6863      	ldr	r3, [r4, #4]
 8017b66:	f8d8 0000 	ldr.w	r0, [r8]
 8017b6a:	1c5a      	adds	r2, r3, #1
 8017b6c:	3302      	adds	r3, #2
 8017b6e:	6062      	str	r2, [r4, #4]
 8017b70:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8017b74:	f7ff ff9e 	bl	8017ab4 <__retarget_lock_release_recursive>
 8017b78:	2000      	movs	r0, #0
 8017b7a:	e7ca      	b.n	8017b12 <__register_exitproc+0x3e>
 8017b7c:	20009e9c 	.word	0x20009e9c
 8017b80:	20009e10 	.word	0x20009e10
 8017b84:	00000000 	.word	0x00000000
 8017b88:	08016bc5 	.word	0x08016bc5
 8017b8c:	2000006c 	.word	0x2000006c

08017b90 <quorem>:
 8017b90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b94:	6903      	ldr	r3, [r0, #16]
 8017b96:	690c      	ldr	r4, [r1, #16]
 8017b98:	42a3      	cmp	r3, r4
 8017b9a:	4607      	mov	r7, r0
 8017b9c:	db7e      	blt.n	8017c9c <quorem+0x10c>
 8017b9e:	3c01      	subs	r4, #1
 8017ba0:	f101 0814 	add.w	r8, r1, #20
 8017ba4:	f100 0514 	add.w	r5, r0, #20
 8017ba8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017bac:	9301      	str	r3, [sp, #4]
 8017bae:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8017bb2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017bb6:	3301      	adds	r3, #1
 8017bb8:	429a      	cmp	r2, r3
 8017bba:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8017bbe:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8017bc2:	fbb2 f6f3 	udiv	r6, r2, r3
 8017bc6:	d331      	bcc.n	8017c2c <quorem+0x9c>
 8017bc8:	f04f 0e00 	mov.w	lr, #0
 8017bcc:	4640      	mov	r0, r8
 8017bce:	46ac      	mov	ip, r5
 8017bd0:	46f2      	mov	sl, lr
 8017bd2:	f850 2b04 	ldr.w	r2, [r0], #4
 8017bd6:	b293      	uxth	r3, r2
 8017bd8:	fb06 e303 	mla	r3, r6, r3, lr
 8017bdc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8017be0:	0c1a      	lsrs	r2, r3, #16
 8017be2:	b29b      	uxth	r3, r3
 8017be4:	ebaa 0303 	sub.w	r3, sl, r3
 8017be8:	f8dc a000 	ldr.w	sl, [ip]
 8017bec:	fa13 f38a 	uxtah	r3, r3, sl
 8017bf0:	fb06 220e 	mla	r2, r6, lr, r2
 8017bf4:	9300      	str	r3, [sp, #0]
 8017bf6:	9b00      	ldr	r3, [sp, #0]
 8017bf8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8017bfc:	b292      	uxth	r2, r2
 8017bfe:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8017c02:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017c06:	f8bd 3000 	ldrh.w	r3, [sp]
 8017c0a:	4581      	cmp	r9, r0
 8017c0c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017c10:	f84c 3b04 	str.w	r3, [ip], #4
 8017c14:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8017c18:	d2db      	bcs.n	8017bd2 <quorem+0x42>
 8017c1a:	f855 300b 	ldr.w	r3, [r5, fp]
 8017c1e:	b92b      	cbnz	r3, 8017c2c <quorem+0x9c>
 8017c20:	9b01      	ldr	r3, [sp, #4]
 8017c22:	3b04      	subs	r3, #4
 8017c24:	429d      	cmp	r5, r3
 8017c26:	461a      	mov	r2, r3
 8017c28:	d32c      	bcc.n	8017c84 <quorem+0xf4>
 8017c2a:	613c      	str	r4, [r7, #16]
 8017c2c:	4638      	mov	r0, r7
 8017c2e:	f001 f8f1 	bl	8018e14 <__mcmp>
 8017c32:	2800      	cmp	r0, #0
 8017c34:	db22      	blt.n	8017c7c <quorem+0xec>
 8017c36:	3601      	adds	r6, #1
 8017c38:	4629      	mov	r1, r5
 8017c3a:	2000      	movs	r0, #0
 8017c3c:	f858 2b04 	ldr.w	r2, [r8], #4
 8017c40:	f8d1 c000 	ldr.w	ip, [r1]
 8017c44:	b293      	uxth	r3, r2
 8017c46:	1ac3      	subs	r3, r0, r3
 8017c48:	0c12      	lsrs	r2, r2, #16
 8017c4a:	fa13 f38c 	uxtah	r3, r3, ip
 8017c4e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8017c52:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017c56:	b29b      	uxth	r3, r3
 8017c58:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017c5c:	45c1      	cmp	r9, r8
 8017c5e:	f841 3b04 	str.w	r3, [r1], #4
 8017c62:	ea4f 4022 	mov.w	r0, r2, asr #16
 8017c66:	d2e9      	bcs.n	8017c3c <quorem+0xac>
 8017c68:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017c6c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017c70:	b922      	cbnz	r2, 8017c7c <quorem+0xec>
 8017c72:	3b04      	subs	r3, #4
 8017c74:	429d      	cmp	r5, r3
 8017c76:	461a      	mov	r2, r3
 8017c78:	d30a      	bcc.n	8017c90 <quorem+0x100>
 8017c7a:	613c      	str	r4, [r7, #16]
 8017c7c:	4630      	mov	r0, r6
 8017c7e:	b003      	add	sp, #12
 8017c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c84:	6812      	ldr	r2, [r2, #0]
 8017c86:	3b04      	subs	r3, #4
 8017c88:	2a00      	cmp	r2, #0
 8017c8a:	d1ce      	bne.n	8017c2a <quorem+0x9a>
 8017c8c:	3c01      	subs	r4, #1
 8017c8e:	e7c9      	b.n	8017c24 <quorem+0x94>
 8017c90:	6812      	ldr	r2, [r2, #0]
 8017c92:	3b04      	subs	r3, #4
 8017c94:	2a00      	cmp	r2, #0
 8017c96:	d1f0      	bne.n	8017c7a <quorem+0xea>
 8017c98:	3c01      	subs	r4, #1
 8017c9a:	e7eb      	b.n	8017c74 <quorem+0xe4>
 8017c9c:	2000      	movs	r0, #0
 8017c9e:	e7ee      	b.n	8017c7e <quorem+0xee>

08017ca0 <_dtoa_r>:
 8017ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ca4:	ed2d 8b04 	vpush	{d8-d9}
 8017ca8:	69c5      	ldr	r5, [r0, #28]
 8017caa:	b093      	sub	sp, #76	; 0x4c
 8017cac:	ed8d 0b02 	vstr	d0, [sp, #8]
 8017cb0:	ec57 6b10 	vmov	r6, r7, d0
 8017cb4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8017cb8:	9107      	str	r1, [sp, #28]
 8017cba:	4604      	mov	r4, r0
 8017cbc:	920a      	str	r2, [sp, #40]	; 0x28
 8017cbe:	930d      	str	r3, [sp, #52]	; 0x34
 8017cc0:	b975      	cbnz	r5, 8017ce0 <_dtoa_r+0x40>
 8017cc2:	2010      	movs	r0, #16
 8017cc4:	f7fe ff7e 	bl	8016bc4 <malloc>
 8017cc8:	4602      	mov	r2, r0
 8017cca:	61e0      	str	r0, [r4, #28]
 8017ccc:	b920      	cbnz	r0, 8017cd8 <_dtoa_r+0x38>
 8017cce:	4bae      	ldr	r3, [pc, #696]	; (8017f88 <_dtoa_r+0x2e8>)
 8017cd0:	21ef      	movs	r1, #239	; 0xef
 8017cd2:	48ae      	ldr	r0, [pc, #696]	; (8017f8c <_dtoa_r+0x2ec>)
 8017cd4:	f7fe ff52 	bl	8016b7c <__assert_func>
 8017cd8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8017cdc:	6005      	str	r5, [r0, #0]
 8017cde:	60c5      	str	r5, [r0, #12]
 8017ce0:	69e3      	ldr	r3, [r4, #28]
 8017ce2:	6819      	ldr	r1, [r3, #0]
 8017ce4:	b151      	cbz	r1, 8017cfc <_dtoa_r+0x5c>
 8017ce6:	685a      	ldr	r2, [r3, #4]
 8017ce8:	604a      	str	r2, [r1, #4]
 8017cea:	2301      	movs	r3, #1
 8017cec:	4093      	lsls	r3, r2
 8017cee:	608b      	str	r3, [r1, #8]
 8017cf0:	4620      	mov	r0, r4
 8017cf2:	f000 fe53 	bl	801899c <_Bfree>
 8017cf6:	69e3      	ldr	r3, [r4, #28]
 8017cf8:	2200      	movs	r2, #0
 8017cfa:	601a      	str	r2, [r3, #0]
 8017cfc:	1e3b      	subs	r3, r7, #0
 8017cfe:	bfbb      	ittet	lt
 8017d00:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8017d04:	9303      	strlt	r3, [sp, #12]
 8017d06:	2300      	movge	r3, #0
 8017d08:	2201      	movlt	r2, #1
 8017d0a:	bfac      	ite	ge
 8017d0c:	f8c8 3000 	strge.w	r3, [r8]
 8017d10:	f8c8 2000 	strlt.w	r2, [r8]
 8017d14:	4b9e      	ldr	r3, [pc, #632]	; (8017f90 <_dtoa_r+0x2f0>)
 8017d16:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8017d1a:	ea33 0308 	bics.w	r3, r3, r8
 8017d1e:	d11b      	bne.n	8017d58 <_dtoa_r+0xb8>
 8017d20:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017d22:	f242 730f 	movw	r3, #9999	; 0x270f
 8017d26:	6013      	str	r3, [r2, #0]
 8017d28:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8017d2c:	4333      	orrs	r3, r6
 8017d2e:	f000 8593 	beq.w	8018858 <_dtoa_r+0xbb8>
 8017d32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017d34:	b963      	cbnz	r3, 8017d50 <_dtoa_r+0xb0>
 8017d36:	4b97      	ldr	r3, [pc, #604]	; (8017f94 <_dtoa_r+0x2f4>)
 8017d38:	e027      	b.n	8017d8a <_dtoa_r+0xea>
 8017d3a:	4b97      	ldr	r3, [pc, #604]	; (8017f98 <_dtoa_r+0x2f8>)
 8017d3c:	9300      	str	r3, [sp, #0]
 8017d3e:	3308      	adds	r3, #8
 8017d40:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017d42:	6013      	str	r3, [r2, #0]
 8017d44:	9800      	ldr	r0, [sp, #0]
 8017d46:	b013      	add	sp, #76	; 0x4c
 8017d48:	ecbd 8b04 	vpop	{d8-d9}
 8017d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d50:	4b90      	ldr	r3, [pc, #576]	; (8017f94 <_dtoa_r+0x2f4>)
 8017d52:	9300      	str	r3, [sp, #0]
 8017d54:	3303      	adds	r3, #3
 8017d56:	e7f3      	b.n	8017d40 <_dtoa_r+0xa0>
 8017d58:	ed9d 7b02 	vldr	d7, [sp, #8]
 8017d5c:	2200      	movs	r2, #0
 8017d5e:	ec51 0b17 	vmov	r0, r1, d7
 8017d62:	eeb0 8a47 	vmov.f32	s16, s14
 8017d66:	eef0 8a67 	vmov.f32	s17, s15
 8017d6a:	2300      	movs	r3, #0
 8017d6c:	f7e8 fee4 	bl	8000b38 <__aeabi_dcmpeq>
 8017d70:	4681      	mov	r9, r0
 8017d72:	b160      	cbz	r0, 8017d8e <_dtoa_r+0xee>
 8017d74:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017d76:	2301      	movs	r3, #1
 8017d78:	6013      	str	r3, [r2, #0]
 8017d7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017d7c:	2b00      	cmp	r3, #0
 8017d7e:	f000 8568 	beq.w	8018852 <_dtoa_r+0xbb2>
 8017d82:	4b86      	ldr	r3, [pc, #536]	; (8017f9c <_dtoa_r+0x2fc>)
 8017d84:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017d86:	6013      	str	r3, [r2, #0]
 8017d88:	3b01      	subs	r3, #1
 8017d8a:	9300      	str	r3, [sp, #0]
 8017d8c:	e7da      	b.n	8017d44 <_dtoa_r+0xa4>
 8017d8e:	aa10      	add	r2, sp, #64	; 0x40
 8017d90:	a911      	add	r1, sp, #68	; 0x44
 8017d92:	4620      	mov	r0, r4
 8017d94:	eeb0 0a48 	vmov.f32	s0, s16
 8017d98:	eef0 0a68 	vmov.f32	s1, s17
 8017d9c:	f001 f8e0 	bl	8018f60 <__d2b>
 8017da0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8017da4:	4682      	mov	sl, r0
 8017da6:	2d00      	cmp	r5, #0
 8017da8:	d07f      	beq.n	8017eaa <_dtoa_r+0x20a>
 8017daa:	ee18 3a90 	vmov	r3, s17
 8017dae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017db2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8017db6:	ec51 0b18 	vmov	r0, r1, d8
 8017dba:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8017dbe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8017dc2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8017dc6:	4619      	mov	r1, r3
 8017dc8:	2200      	movs	r2, #0
 8017dca:	4b75      	ldr	r3, [pc, #468]	; (8017fa0 <_dtoa_r+0x300>)
 8017dcc:	f7e8 fa94 	bl	80002f8 <__aeabi_dsub>
 8017dd0:	a367      	add	r3, pc, #412	; (adr r3, 8017f70 <_dtoa_r+0x2d0>)
 8017dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017dd6:	f7e8 fc47 	bl	8000668 <__aeabi_dmul>
 8017dda:	a367      	add	r3, pc, #412	; (adr r3, 8017f78 <_dtoa_r+0x2d8>)
 8017ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017de0:	f7e8 fa8c 	bl	80002fc <__adddf3>
 8017de4:	4606      	mov	r6, r0
 8017de6:	4628      	mov	r0, r5
 8017de8:	460f      	mov	r7, r1
 8017dea:	f7e8 fbd3 	bl	8000594 <__aeabi_i2d>
 8017dee:	a364      	add	r3, pc, #400	; (adr r3, 8017f80 <_dtoa_r+0x2e0>)
 8017df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017df4:	f7e8 fc38 	bl	8000668 <__aeabi_dmul>
 8017df8:	4602      	mov	r2, r0
 8017dfa:	460b      	mov	r3, r1
 8017dfc:	4630      	mov	r0, r6
 8017dfe:	4639      	mov	r1, r7
 8017e00:	f7e8 fa7c 	bl	80002fc <__adddf3>
 8017e04:	4606      	mov	r6, r0
 8017e06:	460f      	mov	r7, r1
 8017e08:	f7e8 fede 	bl	8000bc8 <__aeabi_d2iz>
 8017e0c:	2200      	movs	r2, #0
 8017e0e:	4683      	mov	fp, r0
 8017e10:	2300      	movs	r3, #0
 8017e12:	4630      	mov	r0, r6
 8017e14:	4639      	mov	r1, r7
 8017e16:	f7e8 fe99 	bl	8000b4c <__aeabi_dcmplt>
 8017e1a:	b148      	cbz	r0, 8017e30 <_dtoa_r+0x190>
 8017e1c:	4658      	mov	r0, fp
 8017e1e:	f7e8 fbb9 	bl	8000594 <__aeabi_i2d>
 8017e22:	4632      	mov	r2, r6
 8017e24:	463b      	mov	r3, r7
 8017e26:	f7e8 fe87 	bl	8000b38 <__aeabi_dcmpeq>
 8017e2a:	b908      	cbnz	r0, 8017e30 <_dtoa_r+0x190>
 8017e2c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8017e30:	f1bb 0f16 	cmp.w	fp, #22
 8017e34:	d857      	bhi.n	8017ee6 <_dtoa_r+0x246>
 8017e36:	4b5b      	ldr	r3, [pc, #364]	; (8017fa4 <_dtoa_r+0x304>)
 8017e38:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8017e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017e40:	ec51 0b18 	vmov	r0, r1, d8
 8017e44:	f7e8 fe82 	bl	8000b4c <__aeabi_dcmplt>
 8017e48:	2800      	cmp	r0, #0
 8017e4a:	d04e      	beq.n	8017eea <_dtoa_r+0x24a>
 8017e4c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8017e50:	2300      	movs	r3, #0
 8017e52:	930c      	str	r3, [sp, #48]	; 0x30
 8017e54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017e56:	1b5b      	subs	r3, r3, r5
 8017e58:	1e5a      	subs	r2, r3, #1
 8017e5a:	bf45      	ittet	mi
 8017e5c:	f1c3 0301 	rsbmi	r3, r3, #1
 8017e60:	9305      	strmi	r3, [sp, #20]
 8017e62:	2300      	movpl	r3, #0
 8017e64:	2300      	movmi	r3, #0
 8017e66:	9206      	str	r2, [sp, #24]
 8017e68:	bf54      	ite	pl
 8017e6a:	9305      	strpl	r3, [sp, #20]
 8017e6c:	9306      	strmi	r3, [sp, #24]
 8017e6e:	f1bb 0f00 	cmp.w	fp, #0
 8017e72:	db3c      	blt.n	8017eee <_dtoa_r+0x24e>
 8017e74:	9b06      	ldr	r3, [sp, #24]
 8017e76:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8017e7a:	445b      	add	r3, fp
 8017e7c:	9306      	str	r3, [sp, #24]
 8017e7e:	2300      	movs	r3, #0
 8017e80:	9308      	str	r3, [sp, #32]
 8017e82:	9b07      	ldr	r3, [sp, #28]
 8017e84:	2b09      	cmp	r3, #9
 8017e86:	d868      	bhi.n	8017f5a <_dtoa_r+0x2ba>
 8017e88:	2b05      	cmp	r3, #5
 8017e8a:	bfc4      	itt	gt
 8017e8c:	3b04      	subgt	r3, #4
 8017e8e:	9307      	strgt	r3, [sp, #28]
 8017e90:	9b07      	ldr	r3, [sp, #28]
 8017e92:	f1a3 0302 	sub.w	r3, r3, #2
 8017e96:	bfcc      	ite	gt
 8017e98:	2500      	movgt	r5, #0
 8017e9a:	2501      	movle	r5, #1
 8017e9c:	2b03      	cmp	r3, #3
 8017e9e:	f200 8085 	bhi.w	8017fac <_dtoa_r+0x30c>
 8017ea2:	e8df f003 	tbb	[pc, r3]
 8017ea6:	3b2e      	.short	0x3b2e
 8017ea8:	5839      	.short	0x5839
 8017eaa:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8017eae:	441d      	add	r5, r3
 8017eb0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8017eb4:	2b20      	cmp	r3, #32
 8017eb6:	bfc1      	itttt	gt
 8017eb8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8017ebc:	fa08 f803 	lslgt.w	r8, r8, r3
 8017ec0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8017ec4:	fa26 f303 	lsrgt.w	r3, r6, r3
 8017ec8:	bfd6      	itet	le
 8017eca:	f1c3 0320 	rsble	r3, r3, #32
 8017ece:	ea48 0003 	orrgt.w	r0, r8, r3
 8017ed2:	fa06 f003 	lslle.w	r0, r6, r3
 8017ed6:	f7e8 fb4d 	bl	8000574 <__aeabi_ui2d>
 8017eda:	2201      	movs	r2, #1
 8017edc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8017ee0:	3d01      	subs	r5, #1
 8017ee2:	920e      	str	r2, [sp, #56]	; 0x38
 8017ee4:	e76f      	b.n	8017dc6 <_dtoa_r+0x126>
 8017ee6:	2301      	movs	r3, #1
 8017ee8:	e7b3      	b.n	8017e52 <_dtoa_r+0x1b2>
 8017eea:	900c      	str	r0, [sp, #48]	; 0x30
 8017eec:	e7b2      	b.n	8017e54 <_dtoa_r+0x1b4>
 8017eee:	9b05      	ldr	r3, [sp, #20]
 8017ef0:	eba3 030b 	sub.w	r3, r3, fp
 8017ef4:	9305      	str	r3, [sp, #20]
 8017ef6:	f1cb 0300 	rsb	r3, fp, #0
 8017efa:	9308      	str	r3, [sp, #32]
 8017efc:	2300      	movs	r3, #0
 8017efe:	930b      	str	r3, [sp, #44]	; 0x2c
 8017f00:	e7bf      	b.n	8017e82 <_dtoa_r+0x1e2>
 8017f02:	2300      	movs	r3, #0
 8017f04:	9309      	str	r3, [sp, #36]	; 0x24
 8017f06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017f08:	2b00      	cmp	r3, #0
 8017f0a:	dc52      	bgt.n	8017fb2 <_dtoa_r+0x312>
 8017f0c:	2301      	movs	r3, #1
 8017f0e:	9301      	str	r3, [sp, #4]
 8017f10:	9304      	str	r3, [sp, #16]
 8017f12:	461a      	mov	r2, r3
 8017f14:	920a      	str	r2, [sp, #40]	; 0x28
 8017f16:	e00b      	b.n	8017f30 <_dtoa_r+0x290>
 8017f18:	2301      	movs	r3, #1
 8017f1a:	e7f3      	b.n	8017f04 <_dtoa_r+0x264>
 8017f1c:	2300      	movs	r3, #0
 8017f1e:	9309      	str	r3, [sp, #36]	; 0x24
 8017f20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017f22:	445b      	add	r3, fp
 8017f24:	9301      	str	r3, [sp, #4]
 8017f26:	3301      	adds	r3, #1
 8017f28:	2b01      	cmp	r3, #1
 8017f2a:	9304      	str	r3, [sp, #16]
 8017f2c:	bfb8      	it	lt
 8017f2e:	2301      	movlt	r3, #1
 8017f30:	69e0      	ldr	r0, [r4, #28]
 8017f32:	2100      	movs	r1, #0
 8017f34:	2204      	movs	r2, #4
 8017f36:	f102 0614 	add.w	r6, r2, #20
 8017f3a:	429e      	cmp	r6, r3
 8017f3c:	d93d      	bls.n	8017fba <_dtoa_r+0x31a>
 8017f3e:	6041      	str	r1, [r0, #4]
 8017f40:	4620      	mov	r0, r4
 8017f42:	f000 fceb 	bl	801891c <_Balloc>
 8017f46:	9000      	str	r0, [sp, #0]
 8017f48:	2800      	cmp	r0, #0
 8017f4a:	d139      	bne.n	8017fc0 <_dtoa_r+0x320>
 8017f4c:	4b16      	ldr	r3, [pc, #88]	; (8017fa8 <_dtoa_r+0x308>)
 8017f4e:	4602      	mov	r2, r0
 8017f50:	f240 11af 	movw	r1, #431	; 0x1af
 8017f54:	e6bd      	b.n	8017cd2 <_dtoa_r+0x32>
 8017f56:	2301      	movs	r3, #1
 8017f58:	e7e1      	b.n	8017f1e <_dtoa_r+0x27e>
 8017f5a:	2501      	movs	r5, #1
 8017f5c:	2300      	movs	r3, #0
 8017f5e:	9307      	str	r3, [sp, #28]
 8017f60:	9509      	str	r5, [sp, #36]	; 0x24
 8017f62:	f04f 33ff 	mov.w	r3, #4294967295
 8017f66:	9301      	str	r3, [sp, #4]
 8017f68:	9304      	str	r3, [sp, #16]
 8017f6a:	2200      	movs	r2, #0
 8017f6c:	2312      	movs	r3, #18
 8017f6e:	e7d1      	b.n	8017f14 <_dtoa_r+0x274>
 8017f70:	636f4361 	.word	0x636f4361
 8017f74:	3fd287a7 	.word	0x3fd287a7
 8017f78:	8b60c8b3 	.word	0x8b60c8b3
 8017f7c:	3fc68a28 	.word	0x3fc68a28
 8017f80:	509f79fb 	.word	0x509f79fb
 8017f84:	3fd34413 	.word	0x3fd34413
 8017f88:	0806d13e 	.word	0x0806d13e
 8017f8c:	0806d155 	.word	0x0806d155
 8017f90:	7ff00000 	.word	0x7ff00000
 8017f94:	0806d13a 	.word	0x0806d13a
 8017f98:	0806d131 	.word	0x0806d131
 8017f9c:	0806d10e 	.word	0x0806d10e
 8017fa0:	3ff80000 	.word	0x3ff80000
 8017fa4:	0806d240 	.word	0x0806d240
 8017fa8:	0806d1ad 	.word	0x0806d1ad
 8017fac:	2301      	movs	r3, #1
 8017fae:	9309      	str	r3, [sp, #36]	; 0x24
 8017fb0:	e7d7      	b.n	8017f62 <_dtoa_r+0x2c2>
 8017fb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017fb4:	9301      	str	r3, [sp, #4]
 8017fb6:	9304      	str	r3, [sp, #16]
 8017fb8:	e7ba      	b.n	8017f30 <_dtoa_r+0x290>
 8017fba:	3101      	adds	r1, #1
 8017fbc:	0052      	lsls	r2, r2, #1
 8017fbe:	e7ba      	b.n	8017f36 <_dtoa_r+0x296>
 8017fc0:	69e3      	ldr	r3, [r4, #28]
 8017fc2:	9a00      	ldr	r2, [sp, #0]
 8017fc4:	601a      	str	r2, [r3, #0]
 8017fc6:	9b04      	ldr	r3, [sp, #16]
 8017fc8:	2b0e      	cmp	r3, #14
 8017fca:	f200 80a8 	bhi.w	801811e <_dtoa_r+0x47e>
 8017fce:	2d00      	cmp	r5, #0
 8017fd0:	f000 80a5 	beq.w	801811e <_dtoa_r+0x47e>
 8017fd4:	f1bb 0f00 	cmp.w	fp, #0
 8017fd8:	dd38      	ble.n	801804c <_dtoa_r+0x3ac>
 8017fda:	4bc0      	ldr	r3, [pc, #768]	; (80182dc <_dtoa_r+0x63c>)
 8017fdc:	f00b 020f 	and.w	r2, fp, #15
 8017fe0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017fe4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8017fe8:	e9d3 6700 	ldrd	r6, r7, [r3]
 8017fec:	ea4f 182b 	mov.w	r8, fp, asr #4
 8017ff0:	d019      	beq.n	8018026 <_dtoa_r+0x386>
 8017ff2:	4bbb      	ldr	r3, [pc, #748]	; (80182e0 <_dtoa_r+0x640>)
 8017ff4:	ec51 0b18 	vmov	r0, r1, d8
 8017ff8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8017ffc:	f7e8 fc5e 	bl	80008bc <__aeabi_ddiv>
 8018000:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018004:	f008 080f 	and.w	r8, r8, #15
 8018008:	2503      	movs	r5, #3
 801800a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80182e0 <_dtoa_r+0x640>
 801800e:	f1b8 0f00 	cmp.w	r8, #0
 8018012:	d10a      	bne.n	801802a <_dtoa_r+0x38a>
 8018014:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018018:	4632      	mov	r2, r6
 801801a:	463b      	mov	r3, r7
 801801c:	f7e8 fc4e 	bl	80008bc <__aeabi_ddiv>
 8018020:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018024:	e02b      	b.n	801807e <_dtoa_r+0x3de>
 8018026:	2502      	movs	r5, #2
 8018028:	e7ef      	b.n	801800a <_dtoa_r+0x36a>
 801802a:	f018 0f01 	tst.w	r8, #1
 801802e:	d008      	beq.n	8018042 <_dtoa_r+0x3a2>
 8018030:	4630      	mov	r0, r6
 8018032:	4639      	mov	r1, r7
 8018034:	e9d9 2300 	ldrd	r2, r3, [r9]
 8018038:	f7e8 fb16 	bl	8000668 <__aeabi_dmul>
 801803c:	3501      	adds	r5, #1
 801803e:	4606      	mov	r6, r0
 8018040:	460f      	mov	r7, r1
 8018042:	ea4f 0868 	mov.w	r8, r8, asr #1
 8018046:	f109 0908 	add.w	r9, r9, #8
 801804a:	e7e0      	b.n	801800e <_dtoa_r+0x36e>
 801804c:	f000 809f 	beq.w	801818e <_dtoa_r+0x4ee>
 8018050:	f1cb 0600 	rsb	r6, fp, #0
 8018054:	4ba1      	ldr	r3, [pc, #644]	; (80182dc <_dtoa_r+0x63c>)
 8018056:	4fa2      	ldr	r7, [pc, #648]	; (80182e0 <_dtoa_r+0x640>)
 8018058:	f006 020f 	and.w	r2, r6, #15
 801805c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018064:	ec51 0b18 	vmov	r0, r1, d8
 8018068:	f7e8 fafe 	bl	8000668 <__aeabi_dmul>
 801806c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018070:	1136      	asrs	r6, r6, #4
 8018072:	2300      	movs	r3, #0
 8018074:	2502      	movs	r5, #2
 8018076:	2e00      	cmp	r6, #0
 8018078:	d17e      	bne.n	8018178 <_dtoa_r+0x4d8>
 801807a:	2b00      	cmp	r3, #0
 801807c:	d1d0      	bne.n	8018020 <_dtoa_r+0x380>
 801807e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018080:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8018084:	2b00      	cmp	r3, #0
 8018086:	f000 8084 	beq.w	8018192 <_dtoa_r+0x4f2>
 801808a:	4b96      	ldr	r3, [pc, #600]	; (80182e4 <_dtoa_r+0x644>)
 801808c:	2200      	movs	r2, #0
 801808e:	4640      	mov	r0, r8
 8018090:	4649      	mov	r1, r9
 8018092:	f7e8 fd5b 	bl	8000b4c <__aeabi_dcmplt>
 8018096:	2800      	cmp	r0, #0
 8018098:	d07b      	beq.n	8018192 <_dtoa_r+0x4f2>
 801809a:	9b04      	ldr	r3, [sp, #16]
 801809c:	2b00      	cmp	r3, #0
 801809e:	d078      	beq.n	8018192 <_dtoa_r+0x4f2>
 80180a0:	9b01      	ldr	r3, [sp, #4]
 80180a2:	2b00      	cmp	r3, #0
 80180a4:	dd39      	ble.n	801811a <_dtoa_r+0x47a>
 80180a6:	4b90      	ldr	r3, [pc, #576]	; (80182e8 <_dtoa_r+0x648>)
 80180a8:	2200      	movs	r2, #0
 80180aa:	4640      	mov	r0, r8
 80180ac:	4649      	mov	r1, r9
 80180ae:	f7e8 fadb 	bl	8000668 <__aeabi_dmul>
 80180b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80180b6:	9e01      	ldr	r6, [sp, #4]
 80180b8:	f10b 37ff 	add.w	r7, fp, #4294967295
 80180bc:	3501      	adds	r5, #1
 80180be:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80180c2:	4628      	mov	r0, r5
 80180c4:	f7e8 fa66 	bl	8000594 <__aeabi_i2d>
 80180c8:	4642      	mov	r2, r8
 80180ca:	464b      	mov	r3, r9
 80180cc:	f7e8 facc 	bl	8000668 <__aeabi_dmul>
 80180d0:	4b86      	ldr	r3, [pc, #536]	; (80182ec <_dtoa_r+0x64c>)
 80180d2:	2200      	movs	r2, #0
 80180d4:	f7e8 f912 	bl	80002fc <__adddf3>
 80180d8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80180dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80180e0:	9303      	str	r3, [sp, #12]
 80180e2:	2e00      	cmp	r6, #0
 80180e4:	d158      	bne.n	8018198 <_dtoa_r+0x4f8>
 80180e6:	4b82      	ldr	r3, [pc, #520]	; (80182f0 <_dtoa_r+0x650>)
 80180e8:	2200      	movs	r2, #0
 80180ea:	4640      	mov	r0, r8
 80180ec:	4649      	mov	r1, r9
 80180ee:	f7e8 f903 	bl	80002f8 <__aeabi_dsub>
 80180f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80180f6:	4680      	mov	r8, r0
 80180f8:	4689      	mov	r9, r1
 80180fa:	f7e8 fd45 	bl	8000b88 <__aeabi_dcmpgt>
 80180fe:	2800      	cmp	r0, #0
 8018100:	f040 8296 	bne.w	8018630 <_dtoa_r+0x990>
 8018104:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8018108:	4640      	mov	r0, r8
 801810a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801810e:	4649      	mov	r1, r9
 8018110:	f7e8 fd1c 	bl	8000b4c <__aeabi_dcmplt>
 8018114:	2800      	cmp	r0, #0
 8018116:	f040 8289 	bne.w	801862c <_dtoa_r+0x98c>
 801811a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801811e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018120:	2b00      	cmp	r3, #0
 8018122:	f2c0 814e 	blt.w	80183c2 <_dtoa_r+0x722>
 8018126:	f1bb 0f0e 	cmp.w	fp, #14
 801812a:	f300 814a 	bgt.w	80183c2 <_dtoa_r+0x722>
 801812e:	4b6b      	ldr	r3, [pc, #428]	; (80182dc <_dtoa_r+0x63c>)
 8018130:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8018134:	e9d3 8900 	ldrd	r8, r9, [r3]
 8018138:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801813a:	2b00      	cmp	r3, #0
 801813c:	f280 80dc 	bge.w	80182f8 <_dtoa_r+0x658>
 8018140:	9b04      	ldr	r3, [sp, #16]
 8018142:	2b00      	cmp	r3, #0
 8018144:	f300 80d8 	bgt.w	80182f8 <_dtoa_r+0x658>
 8018148:	f040 826f 	bne.w	801862a <_dtoa_r+0x98a>
 801814c:	4b68      	ldr	r3, [pc, #416]	; (80182f0 <_dtoa_r+0x650>)
 801814e:	2200      	movs	r2, #0
 8018150:	4640      	mov	r0, r8
 8018152:	4649      	mov	r1, r9
 8018154:	f7e8 fa88 	bl	8000668 <__aeabi_dmul>
 8018158:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801815c:	f7e8 fd0a 	bl	8000b74 <__aeabi_dcmpge>
 8018160:	9e04      	ldr	r6, [sp, #16]
 8018162:	4637      	mov	r7, r6
 8018164:	2800      	cmp	r0, #0
 8018166:	f040 8245 	bne.w	80185f4 <_dtoa_r+0x954>
 801816a:	9d00      	ldr	r5, [sp, #0]
 801816c:	2331      	movs	r3, #49	; 0x31
 801816e:	f805 3b01 	strb.w	r3, [r5], #1
 8018172:	f10b 0b01 	add.w	fp, fp, #1
 8018176:	e241      	b.n	80185fc <_dtoa_r+0x95c>
 8018178:	07f2      	lsls	r2, r6, #31
 801817a:	d505      	bpl.n	8018188 <_dtoa_r+0x4e8>
 801817c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018180:	f7e8 fa72 	bl	8000668 <__aeabi_dmul>
 8018184:	3501      	adds	r5, #1
 8018186:	2301      	movs	r3, #1
 8018188:	1076      	asrs	r6, r6, #1
 801818a:	3708      	adds	r7, #8
 801818c:	e773      	b.n	8018076 <_dtoa_r+0x3d6>
 801818e:	2502      	movs	r5, #2
 8018190:	e775      	b.n	801807e <_dtoa_r+0x3de>
 8018192:	9e04      	ldr	r6, [sp, #16]
 8018194:	465f      	mov	r7, fp
 8018196:	e792      	b.n	80180be <_dtoa_r+0x41e>
 8018198:	9900      	ldr	r1, [sp, #0]
 801819a:	4b50      	ldr	r3, [pc, #320]	; (80182dc <_dtoa_r+0x63c>)
 801819c:	ed9d 7b02 	vldr	d7, [sp, #8]
 80181a0:	4431      	add	r1, r6
 80181a2:	9102      	str	r1, [sp, #8]
 80181a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80181a6:	eeb0 9a47 	vmov.f32	s18, s14
 80181aa:	eef0 9a67 	vmov.f32	s19, s15
 80181ae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80181b2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80181b6:	2900      	cmp	r1, #0
 80181b8:	d044      	beq.n	8018244 <_dtoa_r+0x5a4>
 80181ba:	494e      	ldr	r1, [pc, #312]	; (80182f4 <_dtoa_r+0x654>)
 80181bc:	2000      	movs	r0, #0
 80181be:	f7e8 fb7d 	bl	80008bc <__aeabi_ddiv>
 80181c2:	ec53 2b19 	vmov	r2, r3, d9
 80181c6:	f7e8 f897 	bl	80002f8 <__aeabi_dsub>
 80181ca:	9d00      	ldr	r5, [sp, #0]
 80181cc:	ec41 0b19 	vmov	d9, r0, r1
 80181d0:	4649      	mov	r1, r9
 80181d2:	4640      	mov	r0, r8
 80181d4:	f7e8 fcf8 	bl	8000bc8 <__aeabi_d2iz>
 80181d8:	4606      	mov	r6, r0
 80181da:	f7e8 f9db 	bl	8000594 <__aeabi_i2d>
 80181de:	4602      	mov	r2, r0
 80181e0:	460b      	mov	r3, r1
 80181e2:	4640      	mov	r0, r8
 80181e4:	4649      	mov	r1, r9
 80181e6:	f7e8 f887 	bl	80002f8 <__aeabi_dsub>
 80181ea:	3630      	adds	r6, #48	; 0x30
 80181ec:	f805 6b01 	strb.w	r6, [r5], #1
 80181f0:	ec53 2b19 	vmov	r2, r3, d9
 80181f4:	4680      	mov	r8, r0
 80181f6:	4689      	mov	r9, r1
 80181f8:	f7e8 fca8 	bl	8000b4c <__aeabi_dcmplt>
 80181fc:	2800      	cmp	r0, #0
 80181fe:	d164      	bne.n	80182ca <_dtoa_r+0x62a>
 8018200:	4642      	mov	r2, r8
 8018202:	464b      	mov	r3, r9
 8018204:	4937      	ldr	r1, [pc, #220]	; (80182e4 <_dtoa_r+0x644>)
 8018206:	2000      	movs	r0, #0
 8018208:	f7e8 f876 	bl	80002f8 <__aeabi_dsub>
 801820c:	ec53 2b19 	vmov	r2, r3, d9
 8018210:	f7e8 fc9c 	bl	8000b4c <__aeabi_dcmplt>
 8018214:	2800      	cmp	r0, #0
 8018216:	f040 80b6 	bne.w	8018386 <_dtoa_r+0x6e6>
 801821a:	9b02      	ldr	r3, [sp, #8]
 801821c:	429d      	cmp	r5, r3
 801821e:	f43f af7c 	beq.w	801811a <_dtoa_r+0x47a>
 8018222:	4b31      	ldr	r3, [pc, #196]	; (80182e8 <_dtoa_r+0x648>)
 8018224:	ec51 0b19 	vmov	r0, r1, d9
 8018228:	2200      	movs	r2, #0
 801822a:	f7e8 fa1d 	bl	8000668 <__aeabi_dmul>
 801822e:	4b2e      	ldr	r3, [pc, #184]	; (80182e8 <_dtoa_r+0x648>)
 8018230:	ec41 0b19 	vmov	d9, r0, r1
 8018234:	2200      	movs	r2, #0
 8018236:	4640      	mov	r0, r8
 8018238:	4649      	mov	r1, r9
 801823a:	f7e8 fa15 	bl	8000668 <__aeabi_dmul>
 801823e:	4680      	mov	r8, r0
 8018240:	4689      	mov	r9, r1
 8018242:	e7c5      	b.n	80181d0 <_dtoa_r+0x530>
 8018244:	ec51 0b17 	vmov	r0, r1, d7
 8018248:	f7e8 fa0e 	bl	8000668 <__aeabi_dmul>
 801824c:	9b02      	ldr	r3, [sp, #8]
 801824e:	9d00      	ldr	r5, [sp, #0]
 8018250:	930f      	str	r3, [sp, #60]	; 0x3c
 8018252:	ec41 0b19 	vmov	d9, r0, r1
 8018256:	4649      	mov	r1, r9
 8018258:	4640      	mov	r0, r8
 801825a:	f7e8 fcb5 	bl	8000bc8 <__aeabi_d2iz>
 801825e:	4606      	mov	r6, r0
 8018260:	f7e8 f998 	bl	8000594 <__aeabi_i2d>
 8018264:	3630      	adds	r6, #48	; 0x30
 8018266:	4602      	mov	r2, r0
 8018268:	460b      	mov	r3, r1
 801826a:	4640      	mov	r0, r8
 801826c:	4649      	mov	r1, r9
 801826e:	f7e8 f843 	bl	80002f8 <__aeabi_dsub>
 8018272:	f805 6b01 	strb.w	r6, [r5], #1
 8018276:	9b02      	ldr	r3, [sp, #8]
 8018278:	429d      	cmp	r5, r3
 801827a:	4680      	mov	r8, r0
 801827c:	4689      	mov	r9, r1
 801827e:	f04f 0200 	mov.w	r2, #0
 8018282:	d124      	bne.n	80182ce <_dtoa_r+0x62e>
 8018284:	4b1b      	ldr	r3, [pc, #108]	; (80182f4 <_dtoa_r+0x654>)
 8018286:	ec51 0b19 	vmov	r0, r1, d9
 801828a:	f7e8 f837 	bl	80002fc <__adddf3>
 801828e:	4602      	mov	r2, r0
 8018290:	460b      	mov	r3, r1
 8018292:	4640      	mov	r0, r8
 8018294:	4649      	mov	r1, r9
 8018296:	f7e8 fc77 	bl	8000b88 <__aeabi_dcmpgt>
 801829a:	2800      	cmp	r0, #0
 801829c:	d173      	bne.n	8018386 <_dtoa_r+0x6e6>
 801829e:	ec53 2b19 	vmov	r2, r3, d9
 80182a2:	4914      	ldr	r1, [pc, #80]	; (80182f4 <_dtoa_r+0x654>)
 80182a4:	2000      	movs	r0, #0
 80182a6:	f7e8 f827 	bl	80002f8 <__aeabi_dsub>
 80182aa:	4602      	mov	r2, r0
 80182ac:	460b      	mov	r3, r1
 80182ae:	4640      	mov	r0, r8
 80182b0:	4649      	mov	r1, r9
 80182b2:	f7e8 fc4b 	bl	8000b4c <__aeabi_dcmplt>
 80182b6:	2800      	cmp	r0, #0
 80182b8:	f43f af2f 	beq.w	801811a <_dtoa_r+0x47a>
 80182bc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80182be:	1e6b      	subs	r3, r5, #1
 80182c0:	930f      	str	r3, [sp, #60]	; 0x3c
 80182c2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80182c6:	2b30      	cmp	r3, #48	; 0x30
 80182c8:	d0f8      	beq.n	80182bc <_dtoa_r+0x61c>
 80182ca:	46bb      	mov	fp, r7
 80182cc:	e04a      	b.n	8018364 <_dtoa_r+0x6c4>
 80182ce:	4b06      	ldr	r3, [pc, #24]	; (80182e8 <_dtoa_r+0x648>)
 80182d0:	f7e8 f9ca 	bl	8000668 <__aeabi_dmul>
 80182d4:	4680      	mov	r8, r0
 80182d6:	4689      	mov	r9, r1
 80182d8:	e7bd      	b.n	8018256 <_dtoa_r+0x5b6>
 80182da:	bf00      	nop
 80182dc:	0806d240 	.word	0x0806d240
 80182e0:	0806d218 	.word	0x0806d218
 80182e4:	3ff00000 	.word	0x3ff00000
 80182e8:	40240000 	.word	0x40240000
 80182ec:	401c0000 	.word	0x401c0000
 80182f0:	40140000 	.word	0x40140000
 80182f4:	3fe00000 	.word	0x3fe00000
 80182f8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80182fc:	9d00      	ldr	r5, [sp, #0]
 80182fe:	4642      	mov	r2, r8
 8018300:	464b      	mov	r3, r9
 8018302:	4630      	mov	r0, r6
 8018304:	4639      	mov	r1, r7
 8018306:	f7e8 fad9 	bl	80008bc <__aeabi_ddiv>
 801830a:	f7e8 fc5d 	bl	8000bc8 <__aeabi_d2iz>
 801830e:	9001      	str	r0, [sp, #4]
 8018310:	f7e8 f940 	bl	8000594 <__aeabi_i2d>
 8018314:	4642      	mov	r2, r8
 8018316:	464b      	mov	r3, r9
 8018318:	f7e8 f9a6 	bl	8000668 <__aeabi_dmul>
 801831c:	4602      	mov	r2, r0
 801831e:	460b      	mov	r3, r1
 8018320:	4630      	mov	r0, r6
 8018322:	4639      	mov	r1, r7
 8018324:	f7e7 ffe8 	bl	80002f8 <__aeabi_dsub>
 8018328:	9e01      	ldr	r6, [sp, #4]
 801832a:	9f04      	ldr	r7, [sp, #16]
 801832c:	3630      	adds	r6, #48	; 0x30
 801832e:	f805 6b01 	strb.w	r6, [r5], #1
 8018332:	9e00      	ldr	r6, [sp, #0]
 8018334:	1bae      	subs	r6, r5, r6
 8018336:	42b7      	cmp	r7, r6
 8018338:	4602      	mov	r2, r0
 801833a:	460b      	mov	r3, r1
 801833c:	d134      	bne.n	80183a8 <_dtoa_r+0x708>
 801833e:	f7e7 ffdd 	bl	80002fc <__adddf3>
 8018342:	4642      	mov	r2, r8
 8018344:	464b      	mov	r3, r9
 8018346:	4606      	mov	r6, r0
 8018348:	460f      	mov	r7, r1
 801834a:	f7e8 fc1d 	bl	8000b88 <__aeabi_dcmpgt>
 801834e:	b9c8      	cbnz	r0, 8018384 <_dtoa_r+0x6e4>
 8018350:	4642      	mov	r2, r8
 8018352:	464b      	mov	r3, r9
 8018354:	4630      	mov	r0, r6
 8018356:	4639      	mov	r1, r7
 8018358:	f7e8 fbee 	bl	8000b38 <__aeabi_dcmpeq>
 801835c:	b110      	cbz	r0, 8018364 <_dtoa_r+0x6c4>
 801835e:	9b01      	ldr	r3, [sp, #4]
 8018360:	07db      	lsls	r3, r3, #31
 8018362:	d40f      	bmi.n	8018384 <_dtoa_r+0x6e4>
 8018364:	4651      	mov	r1, sl
 8018366:	4620      	mov	r0, r4
 8018368:	f000 fb18 	bl	801899c <_Bfree>
 801836c:	2300      	movs	r3, #0
 801836e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018370:	702b      	strb	r3, [r5, #0]
 8018372:	f10b 0301 	add.w	r3, fp, #1
 8018376:	6013      	str	r3, [r2, #0]
 8018378:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801837a:	2b00      	cmp	r3, #0
 801837c:	f43f ace2 	beq.w	8017d44 <_dtoa_r+0xa4>
 8018380:	601d      	str	r5, [r3, #0]
 8018382:	e4df      	b.n	8017d44 <_dtoa_r+0xa4>
 8018384:	465f      	mov	r7, fp
 8018386:	462b      	mov	r3, r5
 8018388:	461d      	mov	r5, r3
 801838a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801838e:	2a39      	cmp	r2, #57	; 0x39
 8018390:	d106      	bne.n	80183a0 <_dtoa_r+0x700>
 8018392:	9a00      	ldr	r2, [sp, #0]
 8018394:	429a      	cmp	r2, r3
 8018396:	d1f7      	bne.n	8018388 <_dtoa_r+0x6e8>
 8018398:	9900      	ldr	r1, [sp, #0]
 801839a:	2230      	movs	r2, #48	; 0x30
 801839c:	3701      	adds	r7, #1
 801839e:	700a      	strb	r2, [r1, #0]
 80183a0:	781a      	ldrb	r2, [r3, #0]
 80183a2:	3201      	adds	r2, #1
 80183a4:	701a      	strb	r2, [r3, #0]
 80183a6:	e790      	b.n	80182ca <_dtoa_r+0x62a>
 80183a8:	4ba3      	ldr	r3, [pc, #652]	; (8018638 <_dtoa_r+0x998>)
 80183aa:	2200      	movs	r2, #0
 80183ac:	f7e8 f95c 	bl	8000668 <__aeabi_dmul>
 80183b0:	2200      	movs	r2, #0
 80183b2:	2300      	movs	r3, #0
 80183b4:	4606      	mov	r6, r0
 80183b6:	460f      	mov	r7, r1
 80183b8:	f7e8 fbbe 	bl	8000b38 <__aeabi_dcmpeq>
 80183bc:	2800      	cmp	r0, #0
 80183be:	d09e      	beq.n	80182fe <_dtoa_r+0x65e>
 80183c0:	e7d0      	b.n	8018364 <_dtoa_r+0x6c4>
 80183c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80183c4:	2a00      	cmp	r2, #0
 80183c6:	f000 80ca 	beq.w	801855e <_dtoa_r+0x8be>
 80183ca:	9a07      	ldr	r2, [sp, #28]
 80183cc:	2a01      	cmp	r2, #1
 80183ce:	f300 80ad 	bgt.w	801852c <_dtoa_r+0x88c>
 80183d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80183d4:	2a00      	cmp	r2, #0
 80183d6:	f000 80a5 	beq.w	8018524 <_dtoa_r+0x884>
 80183da:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80183de:	9e08      	ldr	r6, [sp, #32]
 80183e0:	9d05      	ldr	r5, [sp, #20]
 80183e2:	9a05      	ldr	r2, [sp, #20]
 80183e4:	441a      	add	r2, r3
 80183e6:	9205      	str	r2, [sp, #20]
 80183e8:	9a06      	ldr	r2, [sp, #24]
 80183ea:	2101      	movs	r1, #1
 80183ec:	441a      	add	r2, r3
 80183ee:	4620      	mov	r0, r4
 80183f0:	9206      	str	r2, [sp, #24]
 80183f2:	f000 fb89 	bl	8018b08 <__i2b>
 80183f6:	4607      	mov	r7, r0
 80183f8:	b165      	cbz	r5, 8018414 <_dtoa_r+0x774>
 80183fa:	9b06      	ldr	r3, [sp, #24]
 80183fc:	2b00      	cmp	r3, #0
 80183fe:	dd09      	ble.n	8018414 <_dtoa_r+0x774>
 8018400:	42ab      	cmp	r3, r5
 8018402:	9a05      	ldr	r2, [sp, #20]
 8018404:	bfa8      	it	ge
 8018406:	462b      	movge	r3, r5
 8018408:	1ad2      	subs	r2, r2, r3
 801840a:	9205      	str	r2, [sp, #20]
 801840c:	9a06      	ldr	r2, [sp, #24]
 801840e:	1aed      	subs	r5, r5, r3
 8018410:	1ad3      	subs	r3, r2, r3
 8018412:	9306      	str	r3, [sp, #24]
 8018414:	9b08      	ldr	r3, [sp, #32]
 8018416:	b1f3      	cbz	r3, 8018456 <_dtoa_r+0x7b6>
 8018418:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801841a:	2b00      	cmp	r3, #0
 801841c:	f000 80a3 	beq.w	8018566 <_dtoa_r+0x8c6>
 8018420:	2e00      	cmp	r6, #0
 8018422:	dd10      	ble.n	8018446 <_dtoa_r+0x7a6>
 8018424:	4639      	mov	r1, r7
 8018426:	4632      	mov	r2, r6
 8018428:	4620      	mov	r0, r4
 801842a:	f000 fc2d 	bl	8018c88 <__pow5mult>
 801842e:	4652      	mov	r2, sl
 8018430:	4601      	mov	r1, r0
 8018432:	4607      	mov	r7, r0
 8018434:	4620      	mov	r0, r4
 8018436:	f000 fb7d 	bl	8018b34 <__multiply>
 801843a:	4651      	mov	r1, sl
 801843c:	4680      	mov	r8, r0
 801843e:	4620      	mov	r0, r4
 8018440:	f000 faac 	bl	801899c <_Bfree>
 8018444:	46c2      	mov	sl, r8
 8018446:	9b08      	ldr	r3, [sp, #32]
 8018448:	1b9a      	subs	r2, r3, r6
 801844a:	d004      	beq.n	8018456 <_dtoa_r+0x7b6>
 801844c:	4651      	mov	r1, sl
 801844e:	4620      	mov	r0, r4
 8018450:	f000 fc1a 	bl	8018c88 <__pow5mult>
 8018454:	4682      	mov	sl, r0
 8018456:	2101      	movs	r1, #1
 8018458:	4620      	mov	r0, r4
 801845a:	f000 fb55 	bl	8018b08 <__i2b>
 801845e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018460:	2b00      	cmp	r3, #0
 8018462:	4606      	mov	r6, r0
 8018464:	f340 8081 	ble.w	801856a <_dtoa_r+0x8ca>
 8018468:	461a      	mov	r2, r3
 801846a:	4601      	mov	r1, r0
 801846c:	4620      	mov	r0, r4
 801846e:	f000 fc0b 	bl	8018c88 <__pow5mult>
 8018472:	9b07      	ldr	r3, [sp, #28]
 8018474:	2b01      	cmp	r3, #1
 8018476:	4606      	mov	r6, r0
 8018478:	dd7a      	ble.n	8018570 <_dtoa_r+0x8d0>
 801847a:	f04f 0800 	mov.w	r8, #0
 801847e:	6933      	ldr	r3, [r6, #16]
 8018480:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8018484:	6918      	ldr	r0, [r3, #16]
 8018486:	f000 faf1 	bl	8018a6c <__hi0bits>
 801848a:	f1c0 0020 	rsb	r0, r0, #32
 801848e:	9b06      	ldr	r3, [sp, #24]
 8018490:	4418      	add	r0, r3
 8018492:	f010 001f 	ands.w	r0, r0, #31
 8018496:	f000 8094 	beq.w	80185c2 <_dtoa_r+0x922>
 801849a:	f1c0 0320 	rsb	r3, r0, #32
 801849e:	2b04      	cmp	r3, #4
 80184a0:	f340 8085 	ble.w	80185ae <_dtoa_r+0x90e>
 80184a4:	9b05      	ldr	r3, [sp, #20]
 80184a6:	f1c0 001c 	rsb	r0, r0, #28
 80184aa:	4403      	add	r3, r0
 80184ac:	9305      	str	r3, [sp, #20]
 80184ae:	9b06      	ldr	r3, [sp, #24]
 80184b0:	4403      	add	r3, r0
 80184b2:	4405      	add	r5, r0
 80184b4:	9306      	str	r3, [sp, #24]
 80184b6:	9b05      	ldr	r3, [sp, #20]
 80184b8:	2b00      	cmp	r3, #0
 80184ba:	dd05      	ble.n	80184c8 <_dtoa_r+0x828>
 80184bc:	4651      	mov	r1, sl
 80184be:	461a      	mov	r2, r3
 80184c0:	4620      	mov	r0, r4
 80184c2:	f000 fc3b 	bl	8018d3c <__lshift>
 80184c6:	4682      	mov	sl, r0
 80184c8:	9b06      	ldr	r3, [sp, #24]
 80184ca:	2b00      	cmp	r3, #0
 80184cc:	dd05      	ble.n	80184da <_dtoa_r+0x83a>
 80184ce:	4631      	mov	r1, r6
 80184d0:	461a      	mov	r2, r3
 80184d2:	4620      	mov	r0, r4
 80184d4:	f000 fc32 	bl	8018d3c <__lshift>
 80184d8:	4606      	mov	r6, r0
 80184da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80184dc:	2b00      	cmp	r3, #0
 80184de:	d072      	beq.n	80185c6 <_dtoa_r+0x926>
 80184e0:	4631      	mov	r1, r6
 80184e2:	4650      	mov	r0, sl
 80184e4:	f000 fc96 	bl	8018e14 <__mcmp>
 80184e8:	2800      	cmp	r0, #0
 80184ea:	da6c      	bge.n	80185c6 <_dtoa_r+0x926>
 80184ec:	2300      	movs	r3, #0
 80184ee:	4651      	mov	r1, sl
 80184f0:	220a      	movs	r2, #10
 80184f2:	4620      	mov	r0, r4
 80184f4:	f000 fa74 	bl	80189e0 <__multadd>
 80184f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80184fa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80184fe:	4682      	mov	sl, r0
 8018500:	2b00      	cmp	r3, #0
 8018502:	f000 81b0 	beq.w	8018866 <_dtoa_r+0xbc6>
 8018506:	2300      	movs	r3, #0
 8018508:	4639      	mov	r1, r7
 801850a:	220a      	movs	r2, #10
 801850c:	4620      	mov	r0, r4
 801850e:	f000 fa67 	bl	80189e0 <__multadd>
 8018512:	9b01      	ldr	r3, [sp, #4]
 8018514:	2b00      	cmp	r3, #0
 8018516:	4607      	mov	r7, r0
 8018518:	f300 8096 	bgt.w	8018648 <_dtoa_r+0x9a8>
 801851c:	9b07      	ldr	r3, [sp, #28]
 801851e:	2b02      	cmp	r3, #2
 8018520:	dc59      	bgt.n	80185d6 <_dtoa_r+0x936>
 8018522:	e091      	b.n	8018648 <_dtoa_r+0x9a8>
 8018524:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018526:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801852a:	e758      	b.n	80183de <_dtoa_r+0x73e>
 801852c:	9b04      	ldr	r3, [sp, #16]
 801852e:	1e5e      	subs	r6, r3, #1
 8018530:	9b08      	ldr	r3, [sp, #32]
 8018532:	42b3      	cmp	r3, r6
 8018534:	bfbf      	itttt	lt
 8018536:	9b08      	ldrlt	r3, [sp, #32]
 8018538:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 801853a:	9608      	strlt	r6, [sp, #32]
 801853c:	1af3      	sublt	r3, r6, r3
 801853e:	bfb4      	ite	lt
 8018540:	18d2      	addlt	r2, r2, r3
 8018542:	1b9e      	subge	r6, r3, r6
 8018544:	9b04      	ldr	r3, [sp, #16]
 8018546:	bfbc      	itt	lt
 8018548:	920b      	strlt	r2, [sp, #44]	; 0x2c
 801854a:	2600      	movlt	r6, #0
 801854c:	2b00      	cmp	r3, #0
 801854e:	bfb7      	itett	lt
 8018550:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8018554:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8018558:	1a9d      	sublt	r5, r3, r2
 801855a:	2300      	movlt	r3, #0
 801855c:	e741      	b.n	80183e2 <_dtoa_r+0x742>
 801855e:	9e08      	ldr	r6, [sp, #32]
 8018560:	9d05      	ldr	r5, [sp, #20]
 8018562:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8018564:	e748      	b.n	80183f8 <_dtoa_r+0x758>
 8018566:	9a08      	ldr	r2, [sp, #32]
 8018568:	e770      	b.n	801844c <_dtoa_r+0x7ac>
 801856a:	9b07      	ldr	r3, [sp, #28]
 801856c:	2b01      	cmp	r3, #1
 801856e:	dc19      	bgt.n	80185a4 <_dtoa_r+0x904>
 8018570:	9b02      	ldr	r3, [sp, #8]
 8018572:	b9bb      	cbnz	r3, 80185a4 <_dtoa_r+0x904>
 8018574:	9b03      	ldr	r3, [sp, #12]
 8018576:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801857a:	b99b      	cbnz	r3, 80185a4 <_dtoa_r+0x904>
 801857c:	9b03      	ldr	r3, [sp, #12]
 801857e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018582:	0d1b      	lsrs	r3, r3, #20
 8018584:	051b      	lsls	r3, r3, #20
 8018586:	b183      	cbz	r3, 80185aa <_dtoa_r+0x90a>
 8018588:	9b05      	ldr	r3, [sp, #20]
 801858a:	3301      	adds	r3, #1
 801858c:	9305      	str	r3, [sp, #20]
 801858e:	9b06      	ldr	r3, [sp, #24]
 8018590:	3301      	adds	r3, #1
 8018592:	9306      	str	r3, [sp, #24]
 8018594:	f04f 0801 	mov.w	r8, #1
 8018598:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801859a:	2b00      	cmp	r3, #0
 801859c:	f47f af6f 	bne.w	801847e <_dtoa_r+0x7de>
 80185a0:	2001      	movs	r0, #1
 80185a2:	e774      	b.n	801848e <_dtoa_r+0x7ee>
 80185a4:	f04f 0800 	mov.w	r8, #0
 80185a8:	e7f6      	b.n	8018598 <_dtoa_r+0x8f8>
 80185aa:	4698      	mov	r8, r3
 80185ac:	e7f4      	b.n	8018598 <_dtoa_r+0x8f8>
 80185ae:	d082      	beq.n	80184b6 <_dtoa_r+0x816>
 80185b0:	9a05      	ldr	r2, [sp, #20]
 80185b2:	331c      	adds	r3, #28
 80185b4:	441a      	add	r2, r3
 80185b6:	9205      	str	r2, [sp, #20]
 80185b8:	9a06      	ldr	r2, [sp, #24]
 80185ba:	441a      	add	r2, r3
 80185bc:	441d      	add	r5, r3
 80185be:	9206      	str	r2, [sp, #24]
 80185c0:	e779      	b.n	80184b6 <_dtoa_r+0x816>
 80185c2:	4603      	mov	r3, r0
 80185c4:	e7f4      	b.n	80185b0 <_dtoa_r+0x910>
 80185c6:	9b04      	ldr	r3, [sp, #16]
 80185c8:	2b00      	cmp	r3, #0
 80185ca:	dc37      	bgt.n	801863c <_dtoa_r+0x99c>
 80185cc:	9b07      	ldr	r3, [sp, #28]
 80185ce:	2b02      	cmp	r3, #2
 80185d0:	dd34      	ble.n	801863c <_dtoa_r+0x99c>
 80185d2:	9b04      	ldr	r3, [sp, #16]
 80185d4:	9301      	str	r3, [sp, #4]
 80185d6:	9b01      	ldr	r3, [sp, #4]
 80185d8:	b963      	cbnz	r3, 80185f4 <_dtoa_r+0x954>
 80185da:	4631      	mov	r1, r6
 80185dc:	2205      	movs	r2, #5
 80185de:	4620      	mov	r0, r4
 80185e0:	f000 f9fe 	bl	80189e0 <__multadd>
 80185e4:	4601      	mov	r1, r0
 80185e6:	4606      	mov	r6, r0
 80185e8:	4650      	mov	r0, sl
 80185ea:	f000 fc13 	bl	8018e14 <__mcmp>
 80185ee:	2800      	cmp	r0, #0
 80185f0:	f73f adbb 	bgt.w	801816a <_dtoa_r+0x4ca>
 80185f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80185f6:	9d00      	ldr	r5, [sp, #0]
 80185f8:	ea6f 0b03 	mvn.w	fp, r3
 80185fc:	f04f 0800 	mov.w	r8, #0
 8018600:	4631      	mov	r1, r6
 8018602:	4620      	mov	r0, r4
 8018604:	f000 f9ca 	bl	801899c <_Bfree>
 8018608:	2f00      	cmp	r7, #0
 801860a:	f43f aeab 	beq.w	8018364 <_dtoa_r+0x6c4>
 801860e:	f1b8 0f00 	cmp.w	r8, #0
 8018612:	d005      	beq.n	8018620 <_dtoa_r+0x980>
 8018614:	45b8      	cmp	r8, r7
 8018616:	d003      	beq.n	8018620 <_dtoa_r+0x980>
 8018618:	4641      	mov	r1, r8
 801861a:	4620      	mov	r0, r4
 801861c:	f000 f9be 	bl	801899c <_Bfree>
 8018620:	4639      	mov	r1, r7
 8018622:	4620      	mov	r0, r4
 8018624:	f000 f9ba 	bl	801899c <_Bfree>
 8018628:	e69c      	b.n	8018364 <_dtoa_r+0x6c4>
 801862a:	2600      	movs	r6, #0
 801862c:	4637      	mov	r7, r6
 801862e:	e7e1      	b.n	80185f4 <_dtoa_r+0x954>
 8018630:	46bb      	mov	fp, r7
 8018632:	4637      	mov	r7, r6
 8018634:	e599      	b.n	801816a <_dtoa_r+0x4ca>
 8018636:	bf00      	nop
 8018638:	40240000 	.word	0x40240000
 801863c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801863e:	2b00      	cmp	r3, #0
 8018640:	f000 80c8 	beq.w	80187d4 <_dtoa_r+0xb34>
 8018644:	9b04      	ldr	r3, [sp, #16]
 8018646:	9301      	str	r3, [sp, #4]
 8018648:	2d00      	cmp	r5, #0
 801864a:	dd05      	ble.n	8018658 <_dtoa_r+0x9b8>
 801864c:	4639      	mov	r1, r7
 801864e:	462a      	mov	r2, r5
 8018650:	4620      	mov	r0, r4
 8018652:	f000 fb73 	bl	8018d3c <__lshift>
 8018656:	4607      	mov	r7, r0
 8018658:	f1b8 0f00 	cmp.w	r8, #0
 801865c:	d05b      	beq.n	8018716 <_dtoa_r+0xa76>
 801865e:	6879      	ldr	r1, [r7, #4]
 8018660:	4620      	mov	r0, r4
 8018662:	f000 f95b 	bl	801891c <_Balloc>
 8018666:	4605      	mov	r5, r0
 8018668:	b928      	cbnz	r0, 8018676 <_dtoa_r+0x9d6>
 801866a:	4b83      	ldr	r3, [pc, #524]	; (8018878 <_dtoa_r+0xbd8>)
 801866c:	4602      	mov	r2, r0
 801866e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8018672:	f7ff bb2e 	b.w	8017cd2 <_dtoa_r+0x32>
 8018676:	693a      	ldr	r2, [r7, #16]
 8018678:	3202      	adds	r2, #2
 801867a:	0092      	lsls	r2, r2, #2
 801867c:	f107 010c 	add.w	r1, r7, #12
 8018680:	300c      	adds	r0, #12
 8018682:	f7ff fa18 	bl	8017ab6 <memcpy>
 8018686:	2201      	movs	r2, #1
 8018688:	4629      	mov	r1, r5
 801868a:	4620      	mov	r0, r4
 801868c:	f000 fb56 	bl	8018d3c <__lshift>
 8018690:	9b00      	ldr	r3, [sp, #0]
 8018692:	3301      	adds	r3, #1
 8018694:	9304      	str	r3, [sp, #16]
 8018696:	e9dd 2300 	ldrd	r2, r3, [sp]
 801869a:	4413      	add	r3, r2
 801869c:	9308      	str	r3, [sp, #32]
 801869e:	9b02      	ldr	r3, [sp, #8]
 80186a0:	f003 0301 	and.w	r3, r3, #1
 80186a4:	46b8      	mov	r8, r7
 80186a6:	9306      	str	r3, [sp, #24]
 80186a8:	4607      	mov	r7, r0
 80186aa:	9b04      	ldr	r3, [sp, #16]
 80186ac:	4631      	mov	r1, r6
 80186ae:	3b01      	subs	r3, #1
 80186b0:	4650      	mov	r0, sl
 80186b2:	9301      	str	r3, [sp, #4]
 80186b4:	f7ff fa6c 	bl	8017b90 <quorem>
 80186b8:	4641      	mov	r1, r8
 80186ba:	9002      	str	r0, [sp, #8]
 80186bc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80186c0:	4650      	mov	r0, sl
 80186c2:	f000 fba7 	bl	8018e14 <__mcmp>
 80186c6:	463a      	mov	r2, r7
 80186c8:	9005      	str	r0, [sp, #20]
 80186ca:	4631      	mov	r1, r6
 80186cc:	4620      	mov	r0, r4
 80186ce:	f000 fbbd 	bl	8018e4c <__mdiff>
 80186d2:	68c2      	ldr	r2, [r0, #12]
 80186d4:	4605      	mov	r5, r0
 80186d6:	bb02      	cbnz	r2, 801871a <_dtoa_r+0xa7a>
 80186d8:	4601      	mov	r1, r0
 80186da:	4650      	mov	r0, sl
 80186dc:	f000 fb9a 	bl	8018e14 <__mcmp>
 80186e0:	4602      	mov	r2, r0
 80186e2:	4629      	mov	r1, r5
 80186e4:	4620      	mov	r0, r4
 80186e6:	9209      	str	r2, [sp, #36]	; 0x24
 80186e8:	f000 f958 	bl	801899c <_Bfree>
 80186ec:	9b07      	ldr	r3, [sp, #28]
 80186ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80186f0:	9d04      	ldr	r5, [sp, #16]
 80186f2:	ea43 0102 	orr.w	r1, r3, r2
 80186f6:	9b06      	ldr	r3, [sp, #24]
 80186f8:	4319      	orrs	r1, r3
 80186fa:	d110      	bne.n	801871e <_dtoa_r+0xa7e>
 80186fc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8018700:	d029      	beq.n	8018756 <_dtoa_r+0xab6>
 8018702:	9b05      	ldr	r3, [sp, #20]
 8018704:	2b00      	cmp	r3, #0
 8018706:	dd02      	ble.n	801870e <_dtoa_r+0xa6e>
 8018708:	9b02      	ldr	r3, [sp, #8]
 801870a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 801870e:	9b01      	ldr	r3, [sp, #4]
 8018710:	f883 9000 	strb.w	r9, [r3]
 8018714:	e774      	b.n	8018600 <_dtoa_r+0x960>
 8018716:	4638      	mov	r0, r7
 8018718:	e7ba      	b.n	8018690 <_dtoa_r+0x9f0>
 801871a:	2201      	movs	r2, #1
 801871c:	e7e1      	b.n	80186e2 <_dtoa_r+0xa42>
 801871e:	9b05      	ldr	r3, [sp, #20]
 8018720:	2b00      	cmp	r3, #0
 8018722:	db04      	blt.n	801872e <_dtoa_r+0xa8e>
 8018724:	9907      	ldr	r1, [sp, #28]
 8018726:	430b      	orrs	r3, r1
 8018728:	9906      	ldr	r1, [sp, #24]
 801872a:	430b      	orrs	r3, r1
 801872c:	d120      	bne.n	8018770 <_dtoa_r+0xad0>
 801872e:	2a00      	cmp	r2, #0
 8018730:	dded      	ble.n	801870e <_dtoa_r+0xa6e>
 8018732:	4651      	mov	r1, sl
 8018734:	2201      	movs	r2, #1
 8018736:	4620      	mov	r0, r4
 8018738:	f000 fb00 	bl	8018d3c <__lshift>
 801873c:	4631      	mov	r1, r6
 801873e:	4682      	mov	sl, r0
 8018740:	f000 fb68 	bl	8018e14 <__mcmp>
 8018744:	2800      	cmp	r0, #0
 8018746:	dc03      	bgt.n	8018750 <_dtoa_r+0xab0>
 8018748:	d1e1      	bne.n	801870e <_dtoa_r+0xa6e>
 801874a:	f019 0f01 	tst.w	r9, #1
 801874e:	d0de      	beq.n	801870e <_dtoa_r+0xa6e>
 8018750:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8018754:	d1d8      	bne.n	8018708 <_dtoa_r+0xa68>
 8018756:	9a01      	ldr	r2, [sp, #4]
 8018758:	2339      	movs	r3, #57	; 0x39
 801875a:	7013      	strb	r3, [r2, #0]
 801875c:	462b      	mov	r3, r5
 801875e:	461d      	mov	r5, r3
 8018760:	3b01      	subs	r3, #1
 8018762:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8018766:	2a39      	cmp	r2, #57	; 0x39
 8018768:	d06c      	beq.n	8018844 <_dtoa_r+0xba4>
 801876a:	3201      	adds	r2, #1
 801876c:	701a      	strb	r2, [r3, #0]
 801876e:	e747      	b.n	8018600 <_dtoa_r+0x960>
 8018770:	2a00      	cmp	r2, #0
 8018772:	dd07      	ble.n	8018784 <_dtoa_r+0xae4>
 8018774:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8018778:	d0ed      	beq.n	8018756 <_dtoa_r+0xab6>
 801877a:	9a01      	ldr	r2, [sp, #4]
 801877c:	f109 0301 	add.w	r3, r9, #1
 8018780:	7013      	strb	r3, [r2, #0]
 8018782:	e73d      	b.n	8018600 <_dtoa_r+0x960>
 8018784:	9b04      	ldr	r3, [sp, #16]
 8018786:	9a08      	ldr	r2, [sp, #32]
 8018788:	f803 9c01 	strb.w	r9, [r3, #-1]
 801878c:	4293      	cmp	r3, r2
 801878e:	d043      	beq.n	8018818 <_dtoa_r+0xb78>
 8018790:	4651      	mov	r1, sl
 8018792:	2300      	movs	r3, #0
 8018794:	220a      	movs	r2, #10
 8018796:	4620      	mov	r0, r4
 8018798:	f000 f922 	bl	80189e0 <__multadd>
 801879c:	45b8      	cmp	r8, r7
 801879e:	4682      	mov	sl, r0
 80187a0:	f04f 0300 	mov.w	r3, #0
 80187a4:	f04f 020a 	mov.w	r2, #10
 80187a8:	4641      	mov	r1, r8
 80187aa:	4620      	mov	r0, r4
 80187ac:	d107      	bne.n	80187be <_dtoa_r+0xb1e>
 80187ae:	f000 f917 	bl	80189e0 <__multadd>
 80187b2:	4680      	mov	r8, r0
 80187b4:	4607      	mov	r7, r0
 80187b6:	9b04      	ldr	r3, [sp, #16]
 80187b8:	3301      	adds	r3, #1
 80187ba:	9304      	str	r3, [sp, #16]
 80187bc:	e775      	b.n	80186aa <_dtoa_r+0xa0a>
 80187be:	f000 f90f 	bl	80189e0 <__multadd>
 80187c2:	4639      	mov	r1, r7
 80187c4:	4680      	mov	r8, r0
 80187c6:	2300      	movs	r3, #0
 80187c8:	220a      	movs	r2, #10
 80187ca:	4620      	mov	r0, r4
 80187cc:	f000 f908 	bl	80189e0 <__multadd>
 80187d0:	4607      	mov	r7, r0
 80187d2:	e7f0      	b.n	80187b6 <_dtoa_r+0xb16>
 80187d4:	9b04      	ldr	r3, [sp, #16]
 80187d6:	9301      	str	r3, [sp, #4]
 80187d8:	9d00      	ldr	r5, [sp, #0]
 80187da:	4631      	mov	r1, r6
 80187dc:	4650      	mov	r0, sl
 80187de:	f7ff f9d7 	bl	8017b90 <quorem>
 80187e2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80187e6:	9b00      	ldr	r3, [sp, #0]
 80187e8:	f805 9b01 	strb.w	r9, [r5], #1
 80187ec:	1aea      	subs	r2, r5, r3
 80187ee:	9b01      	ldr	r3, [sp, #4]
 80187f0:	4293      	cmp	r3, r2
 80187f2:	dd07      	ble.n	8018804 <_dtoa_r+0xb64>
 80187f4:	4651      	mov	r1, sl
 80187f6:	2300      	movs	r3, #0
 80187f8:	220a      	movs	r2, #10
 80187fa:	4620      	mov	r0, r4
 80187fc:	f000 f8f0 	bl	80189e0 <__multadd>
 8018800:	4682      	mov	sl, r0
 8018802:	e7ea      	b.n	80187da <_dtoa_r+0xb3a>
 8018804:	9b01      	ldr	r3, [sp, #4]
 8018806:	2b00      	cmp	r3, #0
 8018808:	bfc8      	it	gt
 801880a:	461d      	movgt	r5, r3
 801880c:	9b00      	ldr	r3, [sp, #0]
 801880e:	bfd8      	it	le
 8018810:	2501      	movle	r5, #1
 8018812:	441d      	add	r5, r3
 8018814:	f04f 0800 	mov.w	r8, #0
 8018818:	4651      	mov	r1, sl
 801881a:	2201      	movs	r2, #1
 801881c:	4620      	mov	r0, r4
 801881e:	f000 fa8d 	bl	8018d3c <__lshift>
 8018822:	4631      	mov	r1, r6
 8018824:	4682      	mov	sl, r0
 8018826:	f000 faf5 	bl	8018e14 <__mcmp>
 801882a:	2800      	cmp	r0, #0
 801882c:	dc96      	bgt.n	801875c <_dtoa_r+0xabc>
 801882e:	d102      	bne.n	8018836 <_dtoa_r+0xb96>
 8018830:	f019 0f01 	tst.w	r9, #1
 8018834:	d192      	bne.n	801875c <_dtoa_r+0xabc>
 8018836:	462b      	mov	r3, r5
 8018838:	461d      	mov	r5, r3
 801883a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801883e:	2a30      	cmp	r2, #48	; 0x30
 8018840:	d0fa      	beq.n	8018838 <_dtoa_r+0xb98>
 8018842:	e6dd      	b.n	8018600 <_dtoa_r+0x960>
 8018844:	9a00      	ldr	r2, [sp, #0]
 8018846:	429a      	cmp	r2, r3
 8018848:	d189      	bne.n	801875e <_dtoa_r+0xabe>
 801884a:	f10b 0b01 	add.w	fp, fp, #1
 801884e:	2331      	movs	r3, #49	; 0x31
 8018850:	e796      	b.n	8018780 <_dtoa_r+0xae0>
 8018852:	4b0a      	ldr	r3, [pc, #40]	; (801887c <_dtoa_r+0xbdc>)
 8018854:	f7ff ba99 	b.w	8017d8a <_dtoa_r+0xea>
 8018858:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801885a:	2b00      	cmp	r3, #0
 801885c:	f47f aa6d 	bne.w	8017d3a <_dtoa_r+0x9a>
 8018860:	4b07      	ldr	r3, [pc, #28]	; (8018880 <_dtoa_r+0xbe0>)
 8018862:	f7ff ba92 	b.w	8017d8a <_dtoa_r+0xea>
 8018866:	9b01      	ldr	r3, [sp, #4]
 8018868:	2b00      	cmp	r3, #0
 801886a:	dcb5      	bgt.n	80187d8 <_dtoa_r+0xb38>
 801886c:	9b07      	ldr	r3, [sp, #28]
 801886e:	2b02      	cmp	r3, #2
 8018870:	f73f aeb1 	bgt.w	80185d6 <_dtoa_r+0x936>
 8018874:	e7b0      	b.n	80187d8 <_dtoa_r+0xb38>
 8018876:	bf00      	nop
 8018878:	0806d1ad 	.word	0x0806d1ad
 801887c:	0806d10d 	.word	0x0806d10d
 8018880:	0806d131 	.word	0x0806d131

08018884 <_free_r>:
 8018884:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018886:	2900      	cmp	r1, #0
 8018888:	d044      	beq.n	8018914 <_free_r+0x90>
 801888a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801888e:	9001      	str	r0, [sp, #4]
 8018890:	2b00      	cmp	r3, #0
 8018892:	f1a1 0404 	sub.w	r4, r1, #4
 8018896:	bfb8      	it	lt
 8018898:	18e4      	addlt	r4, r4, r3
 801889a:	f7fe fa43 	bl	8016d24 <__malloc_lock>
 801889e:	4a1e      	ldr	r2, [pc, #120]	; (8018918 <_free_r+0x94>)
 80188a0:	9801      	ldr	r0, [sp, #4]
 80188a2:	6813      	ldr	r3, [r2, #0]
 80188a4:	b933      	cbnz	r3, 80188b4 <_free_r+0x30>
 80188a6:	6063      	str	r3, [r4, #4]
 80188a8:	6014      	str	r4, [r2, #0]
 80188aa:	b003      	add	sp, #12
 80188ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80188b0:	f7fe ba3e 	b.w	8016d30 <__malloc_unlock>
 80188b4:	42a3      	cmp	r3, r4
 80188b6:	d908      	bls.n	80188ca <_free_r+0x46>
 80188b8:	6825      	ldr	r5, [r4, #0]
 80188ba:	1961      	adds	r1, r4, r5
 80188bc:	428b      	cmp	r3, r1
 80188be:	bf01      	itttt	eq
 80188c0:	6819      	ldreq	r1, [r3, #0]
 80188c2:	685b      	ldreq	r3, [r3, #4]
 80188c4:	1949      	addeq	r1, r1, r5
 80188c6:	6021      	streq	r1, [r4, #0]
 80188c8:	e7ed      	b.n	80188a6 <_free_r+0x22>
 80188ca:	461a      	mov	r2, r3
 80188cc:	685b      	ldr	r3, [r3, #4]
 80188ce:	b10b      	cbz	r3, 80188d4 <_free_r+0x50>
 80188d0:	42a3      	cmp	r3, r4
 80188d2:	d9fa      	bls.n	80188ca <_free_r+0x46>
 80188d4:	6811      	ldr	r1, [r2, #0]
 80188d6:	1855      	adds	r5, r2, r1
 80188d8:	42a5      	cmp	r5, r4
 80188da:	d10b      	bne.n	80188f4 <_free_r+0x70>
 80188dc:	6824      	ldr	r4, [r4, #0]
 80188de:	4421      	add	r1, r4
 80188e0:	1854      	adds	r4, r2, r1
 80188e2:	42a3      	cmp	r3, r4
 80188e4:	6011      	str	r1, [r2, #0]
 80188e6:	d1e0      	bne.n	80188aa <_free_r+0x26>
 80188e8:	681c      	ldr	r4, [r3, #0]
 80188ea:	685b      	ldr	r3, [r3, #4]
 80188ec:	6053      	str	r3, [r2, #4]
 80188ee:	440c      	add	r4, r1
 80188f0:	6014      	str	r4, [r2, #0]
 80188f2:	e7da      	b.n	80188aa <_free_r+0x26>
 80188f4:	d902      	bls.n	80188fc <_free_r+0x78>
 80188f6:	230c      	movs	r3, #12
 80188f8:	6003      	str	r3, [r0, #0]
 80188fa:	e7d6      	b.n	80188aa <_free_r+0x26>
 80188fc:	6825      	ldr	r5, [r4, #0]
 80188fe:	1961      	adds	r1, r4, r5
 8018900:	428b      	cmp	r3, r1
 8018902:	bf04      	itt	eq
 8018904:	6819      	ldreq	r1, [r3, #0]
 8018906:	685b      	ldreq	r3, [r3, #4]
 8018908:	6063      	str	r3, [r4, #4]
 801890a:	bf04      	itt	eq
 801890c:	1949      	addeq	r1, r1, r5
 801890e:	6021      	streq	r1, [r4, #0]
 8018910:	6054      	str	r4, [r2, #4]
 8018912:	e7ca      	b.n	80188aa <_free_r+0x26>
 8018914:	b003      	add	sp, #12
 8018916:	bd30      	pop	{r4, r5, pc}
 8018918:	20009cc4 	.word	0x20009cc4

0801891c <_Balloc>:
 801891c:	b570      	push	{r4, r5, r6, lr}
 801891e:	69c6      	ldr	r6, [r0, #28]
 8018920:	4604      	mov	r4, r0
 8018922:	460d      	mov	r5, r1
 8018924:	b976      	cbnz	r6, 8018944 <_Balloc+0x28>
 8018926:	2010      	movs	r0, #16
 8018928:	f7fe f94c 	bl	8016bc4 <malloc>
 801892c:	4602      	mov	r2, r0
 801892e:	61e0      	str	r0, [r4, #28]
 8018930:	b920      	cbnz	r0, 801893c <_Balloc+0x20>
 8018932:	4b18      	ldr	r3, [pc, #96]	; (8018994 <_Balloc+0x78>)
 8018934:	4818      	ldr	r0, [pc, #96]	; (8018998 <_Balloc+0x7c>)
 8018936:	216b      	movs	r1, #107	; 0x6b
 8018938:	f7fe f920 	bl	8016b7c <__assert_func>
 801893c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018940:	6006      	str	r6, [r0, #0]
 8018942:	60c6      	str	r6, [r0, #12]
 8018944:	69e6      	ldr	r6, [r4, #28]
 8018946:	68f3      	ldr	r3, [r6, #12]
 8018948:	b183      	cbz	r3, 801896c <_Balloc+0x50>
 801894a:	69e3      	ldr	r3, [r4, #28]
 801894c:	68db      	ldr	r3, [r3, #12]
 801894e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8018952:	b9b8      	cbnz	r0, 8018984 <_Balloc+0x68>
 8018954:	2101      	movs	r1, #1
 8018956:	fa01 f605 	lsl.w	r6, r1, r5
 801895a:	1d72      	adds	r2, r6, #5
 801895c:	0092      	lsls	r2, r2, #2
 801895e:	4620      	mov	r0, r4
 8018960:	f000 ff38 	bl	80197d4 <_calloc_r>
 8018964:	b160      	cbz	r0, 8018980 <_Balloc+0x64>
 8018966:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801896a:	e00e      	b.n	801898a <_Balloc+0x6e>
 801896c:	2221      	movs	r2, #33	; 0x21
 801896e:	2104      	movs	r1, #4
 8018970:	4620      	mov	r0, r4
 8018972:	f000 ff2f 	bl	80197d4 <_calloc_r>
 8018976:	69e3      	ldr	r3, [r4, #28]
 8018978:	60f0      	str	r0, [r6, #12]
 801897a:	68db      	ldr	r3, [r3, #12]
 801897c:	2b00      	cmp	r3, #0
 801897e:	d1e4      	bne.n	801894a <_Balloc+0x2e>
 8018980:	2000      	movs	r0, #0
 8018982:	bd70      	pop	{r4, r5, r6, pc}
 8018984:	6802      	ldr	r2, [r0, #0]
 8018986:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801898a:	2300      	movs	r3, #0
 801898c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018990:	e7f7      	b.n	8018982 <_Balloc+0x66>
 8018992:	bf00      	nop
 8018994:	0806d13e 	.word	0x0806d13e
 8018998:	0806d1be 	.word	0x0806d1be

0801899c <_Bfree>:
 801899c:	b570      	push	{r4, r5, r6, lr}
 801899e:	69c6      	ldr	r6, [r0, #28]
 80189a0:	4605      	mov	r5, r0
 80189a2:	460c      	mov	r4, r1
 80189a4:	b976      	cbnz	r6, 80189c4 <_Bfree+0x28>
 80189a6:	2010      	movs	r0, #16
 80189a8:	f7fe f90c 	bl	8016bc4 <malloc>
 80189ac:	4602      	mov	r2, r0
 80189ae:	61e8      	str	r0, [r5, #28]
 80189b0:	b920      	cbnz	r0, 80189bc <_Bfree+0x20>
 80189b2:	4b09      	ldr	r3, [pc, #36]	; (80189d8 <_Bfree+0x3c>)
 80189b4:	4809      	ldr	r0, [pc, #36]	; (80189dc <_Bfree+0x40>)
 80189b6:	218f      	movs	r1, #143	; 0x8f
 80189b8:	f7fe f8e0 	bl	8016b7c <__assert_func>
 80189bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80189c0:	6006      	str	r6, [r0, #0]
 80189c2:	60c6      	str	r6, [r0, #12]
 80189c4:	b13c      	cbz	r4, 80189d6 <_Bfree+0x3a>
 80189c6:	69eb      	ldr	r3, [r5, #28]
 80189c8:	6862      	ldr	r2, [r4, #4]
 80189ca:	68db      	ldr	r3, [r3, #12]
 80189cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80189d0:	6021      	str	r1, [r4, #0]
 80189d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80189d6:	bd70      	pop	{r4, r5, r6, pc}
 80189d8:	0806d13e 	.word	0x0806d13e
 80189dc:	0806d1be 	.word	0x0806d1be

080189e0 <__multadd>:
 80189e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80189e4:	690d      	ldr	r5, [r1, #16]
 80189e6:	4607      	mov	r7, r0
 80189e8:	460c      	mov	r4, r1
 80189ea:	461e      	mov	r6, r3
 80189ec:	f101 0c14 	add.w	ip, r1, #20
 80189f0:	2000      	movs	r0, #0
 80189f2:	f8dc 3000 	ldr.w	r3, [ip]
 80189f6:	b299      	uxth	r1, r3
 80189f8:	fb02 6101 	mla	r1, r2, r1, r6
 80189fc:	0c1e      	lsrs	r6, r3, #16
 80189fe:	0c0b      	lsrs	r3, r1, #16
 8018a00:	fb02 3306 	mla	r3, r2, r6, r3
 8018a04:	b289      	uxth	r1, r1
 8018a06:	3001      	adds	r0, #1
 8018a08:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8018a0c:	4285      	cmp	r5, r0
 8018a0e:	f84c 1b04 	str.w	r1, [ip], #4
 8018a12:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8018a16:	dcec      	bgt.n	80189f2 <__multadd+0x12>
 8018a18:	b30e      	cbz	r6, 8018a5e <__multadd+0x7e>
 8018a1a:	68a3      	ldr	r3, [r4, #8]
 8018a1c:	42ab      	cmp	r3, r5
 8018a1e:	dc19      	bgt.n	8018a54 <__multadd+0x74>
 8018a20:	6861      	ldr	r1, [r4, #4]
 8018a22:	4638      	mov	r0, r7
 8018a24:	3101      	adds	r1, #1
 8018a26:	f7ff ff79 	bl	801891c <_Balloc>
 8018a2a:	4680      	mov	r8, r0
 8018a2c:	b928      	cbnz	r0, 8018a3a <__multadd+0x5a>
 8018a2e:	4602      	mov	r2, r0
 8018a30:	4b0c      	ldr	r3, [pc, #48]	; (8018a64 <__multadd+0x84>)
 8018a32:	480d      	ldr	r0, [pc, #52]	; (8018a68 <__multadd+0x88>)
 8018a34:	21ba      	movs	r1, #186	; 0xba
 8018a36:	f7fe f8a1 	bl	8016b7c <__assert_func>
 8018a3a:	6922      	ldr	r2, [r4, #16]
 8018a3c:	3202      	adds	r2, #2
 8018a3e:	f104 010c 	add.w	r1, r4, #12
 8018a42:	0092      	lsls	r2, r2, #2
 8018a44:	300c      	adds	r0, #12
 8018a46:	f7ff f836 	bl	8017ab6 <memcpy>
 8018a4a:	4621      	mov	r1, r4
 8018a4c:	4638      	mov	r0, r7
 8018a4e:	f7ff ffa5 	bl	801899c <_Bfree>
 8018a52:	4644      	mov	r4, r8
 8018a54:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8018a58:	3501      	adds	r5, #1
 8018a5a:	615e      	str	r6, [r3, #20]
 8018a5c:	6125      	str	r5, [r4, #16]
 8018a5e:	4620      	mov	r0, r4
 8018a60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018a64:	0806d1ad 	.word	0x0806d1ad
 8018a68:	0806d1be 	.word	0x0806d1be

08018a6c <__hi0bits>:
 8018a6c:	0c03      	lsrs	r3, r0, #16
 8018a6e:	041b      	lsls	r3, r3, #16
 8018a70:	b9d3      	cbnz	r3, 8018aa8 <__hi0bits+0x3c>
 8018a72:	0400      	lsls	r0, r0, #16
 8018a74:	2310      	movs	r3, #16
 8018a76:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8018a7a:	bf04      	itt	eq
 8018a7c:	0200      	lsleq	r0, r0, #8
 8018a7e:	3308      	addeq	r3, #8
 8018a80:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8018a84:	bf04      	itt	eq
 8018a86:	0100      	lsleq	r0, r0, #4
 8018a88:	3304      	addeq	r3, #4
 8018a8a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8018a8e:	bf04      	itt	eq
 8018a90:	0080      	lsleq	r0, r0, #2
 8018a92:	3302      	addeq	r3, #2
 8018a94:	2800      	cmp	r0, #0
 8018a96:	db05      	blt.n	8018aa4 <__hi0bits+0x38>
 8018a98:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8018a9c:	f103 0301 	add.w	r3, r3, #1
 8018aa0:	bf08      	it	eq
 8018aa2:	2320      	moveq	r3, #32
 8018aa4:	4618      	mov	r0, r3
 8018aa6:	4770      	bx	lr
 8018aa8:	2300      	movs	r3, #0
 8018aaa:	e7e4      	b.n	8018a76 <__hi0bits+0xa>

08018aac <__lo0bits>:
 8018aac:	6803      	ldr	r3, [r0, #0]
 8018aae:	f013 0207 	ands.w	r2, r3, #7
 8018ab2:	d00c      	beq.n	8018ace <__lo0bits+0x22>
 8018ab4:	07d9      	lsls	r1, r3, #31
 8018ab6:	d422      	bmi.n	8018afe <__lo0bits+0x52>
 8018ab8:	079a      	lsls	r2, r3, #30
 8018aba:	bf49      	itett	mi
 8018abc:	085b      	lsrmi	r3, r3, #1
 8018abe:	089b      	lsrpl	r3, r3, #2
 8018ac0:	6003      	strmi	r3, [r0, #0]
 8018ac2:	2201      	movmi	r2, #1
 8018ac4:	bf5c      	itt	pl
 8018ac6:	6003      	strpl	r3, [r0, #0]
 8018ac8:	2202      	movpl	r2, #2
 8018aca:	4610      	mov	r0, r2
 8018acc:	4770      	bx	lr
 8018ace:	b299      	uxth	r1, r3
 8018ad0:	b909      	cbnz	r1, 8018ad6 <__lo0bits+0x2a>
 8018ad2:	0c1b      	lsrs	r3, r3, #16
 8018ad4:	2210      	movs	r2, #16
 8018ad6:	b2d9      	uxtb	r1, r3
 8018ad8:	b909      	cbnz	r1, 8018ade <__lo0bits+0x32>
 8018ada:	3208      	adds	r2, #8
 8018adc:	0a1b      	lsrs	r3, r3, #8
 8018ade:	0719      	lsls	r1, r3, #28
 8018ae0:	bf04      	itt	eq
 8018ae2:	091b      	lsreq	r3, r3, #4
 8018ae4:	3204      	addeq	r2, #4
 8018ae6:	0799      	lsls	r1, r3, #30
 8018ae8:	bf04      	itt	eq
 8018aea:	089b      	lsreq	r3, r3, #2
 8018aec:	3202      	addeq	r2, #2
 8018aee:	07d9      	lsls	r1, r3, #31
 8018af0:	d403      	bmi.n	8018afa <__lo0bits+0x4e>
 8018af2:	085b      	lsrs	r3, r3, #1
 8018af4:	f102 0201 	add.w	r2, r2, #1
 8018af8:	d003      	beq.n	8018b02 <__lo0bits+0x56>
 8018afa:	6003      	str	r3, [r0, #0]
 8018afc:	e7e5      	b.n	8018aca <__lo0bits+0x1e>
 8018afe:	2200      	movs	r2, #0
 8018b00:	e7e3      	b.n	8018aca <__lo0bits+0x1e>
 8018b02:	2220      	movs	r2, #32
 8018b04:	e7e1      	b.n	8018aca <__lo0bits+0x1e>
	...

08018b08 <__i2b>:
 8018b08:	b510      	push	{r4, lr}
 8018b0a:	460c      	mov	r4, r1
 8018b0c:	2101      	movs	r1, #1
 8018b0e:	f7ff ff05 	bl	801891c <_Balloc>
 8018b12:	4602      	mov	r2, r0
 8018b14:	b928      	cbnz	r0, 8018b22 <__i2b+0x1a>
 8018b16:	4b05      	ldr	r3, [pc, #20]	; (8018b2c <__i2b+0x24>)
 8018b18:	4805      	ldr	r0, [pc, #20]	; (8018b30 <__i2b+0x28>)
 8018b1a:	f240 1145 	movw	r1, #325	; 0x145
 8018b1e:	f7fe f82d 	bl	8016b7c <__assert_func>
 8018b22:	2301      	movs	r3, #1
 8018b24:	6144      	str	r4, [r0, #20]
 8018b26:	6103      	str	r3, [r0, #16]
 8018b28:	bd10      	pop	{r4, pc}
 8018b2a:	bf00      	nop
 8018b2c:	0806d1ad 	.word	0x0806d1ad
 8018b30:	0806d1be 	.word	0x0806d1be

08018b34 <__multiply>:
 8018b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b38:	4691      	mov	r9, r2
 8018b3a:	690a      	ldr	r2, [r1, #16]
 8018b3c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018b40:	429a      	cmp	r2, r3
 8018b42:	bfb8      	it	lt
 8018b44:	460b      	movlt	r3, r1
 8018b46:	460c      	mov	r4, r1
 8018b48:	bfbc      	itt	lt
 8018b4a:	464c      	movlt	r4, r9
 8018b4c:	4699      	movlt	r9, r3
 8018b4e:	6927      	ldr	r7, [r4, #16]
 8018b50:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8018b54:	68a3      	ldr	r3, [r4, #8]
 8018b56:	6861      	ldr	r1, [r4, #4]
 8018b58:	eb07 060a 	add.w	r6, r7, sl
 8018b5c:	42b3      	cmp	r3, r6
 8018b5e:	b085      	sub	sp, #20
 8018b60:	bfb8      	it	lt
 8018b62:	3101      	addlt	r1, #1
 8018b64:	f7ff feda 	bl	801891c <_Balloc>
 8018b68:	b930      	cbnz	r0, 8018b78 <__multiply+0x44>
 8018b6a:	4602      	mov	r2, r0
 8018b6c:	4b44      	ldr	r3, [pc, #272]	; (8018c80 <__multiply+0x14c>)
 8018b6e:	4845      	ldr	r0, [pc, #276]	; (8018c84 <__multiply+0x150>)
 8018b70:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8018b74:	f7fe f802 	bl	8016b7c <__assert_func>
 8018b78:	f100 0514 	add.w	r5, r0, #20
 8018b7c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8018b80:	462b      	mov	r3, r5
 8018b82:	2200      	movs	r2, #0
 8018b84:	4543      	cmp	r3, r8
 8018b86:	d321      	bcc.n	8018bcc <__multiply+0x98>
 8018b88:	f104 0314 	add.w	r3, r4, #20
 8018b8c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8018b90:	f109 0314 	add.w	r3, r9, #20
 8018b94:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8018b98:	9202      	str	r2, [sp, #8]
 8018b9a:	1b3a      	subs	r2, r7, r4
 8018b9c:	3a15      	subs	r2, #21
 8018b9e:	f022 0203 	bic.w	r2, r2, #3
 8018ba2:	3204      	adds	r2, #4
 8018ba4:	f104 0115 	add.w	r1, r4, #21
 8018ba8:	428f      	cmp	r7, r1
 8018baa:	bf38      	it	cc
 8018bac:	2204      	movcc	r2, #4
 8018bae:	9201      	str	r2, [sp, #4]
 8018bb0:	9a02      	ldr	r2, [sp, #8]
 8018bb2:	9303      	str	r3, [sp, #12]
 8018bb4:	429a      	cmp	r2, r3
 8018bb6:	d80c      	bhi.n	8018bd2 <__multiply+0x9e>
 8018bb8:	2e00      	cmp	r6, #0
 8018bba:	dd03      	ble.n	8018bc4 <__multiply+0x90>
 8018bbc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8018bc0:	2b00      	cmp	r3, #0
 8018bc2:	d05b      	beq.n	8018c7c <__multiply+0x148>
 8018bc4:	6106      	str	r6, [r0, #16]
 8018bc6:	b005      	add	sp, #20
 8018bc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018bcc:	f843 2b04 	str.w	r2, [r3], #4
 8018bd0:	e7d8      	b.n	8018b84 <__multiply+0x50>
 8018bd2:	f8b3 a000 	ldrh.w	sl, [r3]
 8018bd6:	f1ba 0f00 	cmp.w	sl, #0
 8018bda:	d024      	beq.n	8018c26 <__multiply+0xf2>
 8018bdc:	f104 0e14 	add.w	lr, r4, #20
 8018be0:	46a9      	mov	r9, r5
 8018be2:	f04f 0c00 	mov.w	ip, #0
 8018be6:	f85e 2b04 	ldr.w	r2, [lr], #4
 8018bea:	f8d9 1000 	ldr.w	r1, [r9]
 8018bee:	fa1f fb82 	uxth.w	fp, r2
 8018bf2:	b289      	uxth	r1, r1
 8018bf4:	fb0a 110b 	mla	r1, sl, fp, r1
 8018bf8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8018bfc:	f8d9 2000 	ldr.w	r2, [r9]
 8018c00:	4461      	add	r1, ip
 8018c02:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8018c06:	fb0a c20b 	mla	r2, sl, fp, ip
 8018c0a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8018c0e:	b289      	uxth	r1, r1
 8018c10:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8018c14:	4577      	cmp	r7, lr
 8018c16:	f849 1b04 	str.w	r1, [r9], #4
 8018c1a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8018c1e:	d8e2      	bhi.n	8018be6 <__multiply+0xb2>
 8018c20:	9a01      	ldr	r2, [sp, #4]
 8018c22:	f845 c002 	str.w	ip, [r5, r2]
 8018c26:	9a03      	ldr	r2, [sp, #12]
 8018c28:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8018c2c:	3304      	adds	r3, #4
 8018c2e:	f1b9 0f00 	cmp.w	r9, #0
 8018c32:	d021      	beq.n	8018c78 <__multiply+0x144>
 8018c34:	6829      	ldr	r1, [r5, #0]
 8018c36:	f104 0c14 	add.w	ip, r4, #20
 8018c3a:	46ae      	mov	lr, r5
 8018c3c:	f04f 0a00 	mov.w	sl, #0
 8018c40:	f8bc b000 	ldrh.w	fp, [ip]
 8018c44:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8018c48:	fb09 220b 	mla	r2, r9, fp, r2
 8018c4c:	4452      	add	r2, sl
 8018c4e:	b289      	uxth	r1, r1
 8018c50:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8018c54:	f84e 1b04 	str.w	r1, [lr], #4
 8018c58:	f85c 1b04 	ldr.w	r1, [ip], #4
 8018c5c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8018c60:	f8be 1000 	ldrh.w	r1, [lr]
 8018c64:	fb09 110a 	mla	r1, r9, sl, r1
 8018c68:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8018c6c:	4567      	cmp	r7, ip
 8018c6e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8018c72:	d8e5      	bhi.n	8018c40 <__multiply+0x10c>
 8018c74:	9a01      	ldr	r2, [sp, #4]
 8018c76:	50a9      	str	r1, [r5, r2]
 8018c78:	3504      	adds	r5, #4
 8018c7a:	e799      	b.n	8018bb0 <__multiply+0x7c>
 8018c7c:	3e01      	subs	r6, #1
 8018c7e:	e79b      	b.n	8018bb8 <__multiply+0x84>
 8018c80:	0806d1ad 	.word	0x0806d1ad
 8018c84:	0806d1be 	.word	0x0806d1be

08018c88 <__pow5mult>:
 8018c88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018c8c:	4615      	mov	r5, r2
 8018c8e:	f012 0203 	ands.w	r2, r2, #3
 8018c92:	4606      	mov	r6, r0
 8018c94:	460f      	mov	r7, r1
 8018c96:	d007      	beq.n	8018ca8 <__pow5mult+0x20>
 8018c98:	4c25      	ldr	r4, [pc, #148]	; (8018d30 <__pow5mult+0xa8>)
 8018c9a:	3a01      	subs	r2, #1
 8018c9c:	2300      	movs	r3, #0
 8018c9e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8018ca2:	f7ff fe9d 	bl	80189e0 <__multadd>
 8018ca6:	4607      	mov	r7, r0
 8018ca8:	10ad      	asrs	r5, r5, #2
 8018caa:	d03d      	beq.n	8018d28 <__pow5mult+0xa0>
 8018cac:	69f4      	ldr	r4, [r6, #28]
 8018cae:	b97c      	cbnz	r4, 8018cd0 <__pow5mult+0x48>
 8018cb0:	2010      	movs	r0, #16
 8018cb2:	f7fd ff87 	bl	8016bc4 <malloc>
 8018cb6:	4602      	mov	r2, r0
 8018cb8:	61f0      	str	r0, [r6, #28]
 8018cba:	b928      	cbnz	r0, 8018cc8 <__pow5mult+0x40>
 8018cbc:	4b1d      	ldr	r3, [pc, #116]	; (8018d34 <__pow5mult+0xac>)
 8018cbe:	481e      	ldr	r0, [pc, #120]	; (8018d38 <__pow5mult+0xb0>)
 8018cc0:	f240 11b3 	movw	r1, #435	; 0x1b3
 8018cc4:	f7fd ff5a 	bl	8016b7c <__assert_func>
 8018cc8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018ccc:	6004      	str	r4, [r0, #0]
 8018cce:	60c4      	str	r4, [r0, #12]
 8018cd0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8018cd4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018cd8:	b94c      	cbnz	r4, 8018cee <__pow5mult+0x66>
 8018cda:	f240 2171 	movw	r1, #625	; 0x271
 8018cde:	4630      	mov	r0, r6
 8018ce0:	f7ff ff12 	bl	8018b08 <__i2b>
 8018ce4:	2300      	movs	r3, #0
 8018ce6:	f8c8 0008 	str.w	r0, [r8, #8]
 8018cea:	4604      	mov	r4, r0
 8018cec:	6003      	str	r3, [r0, #0]
 8018cee:	f04f 0900 	mov.w	r9, #0
 8018cf2:	07eb      	lsls	r3, r5, #31
 8018cf4:	d50a      	bpl.n	8018d0c <__pow5mult+0x84>
 8018cf6:	4639      	mov	r1, r7
 8018cf8:	4622      	mov	r2, r4
 8018cfa:	4630      	mov	r0, r6
 8018cfc:	f7ff ff1a 	bl	8018b34 <__multiply>
 8018d00:	4639      	mov	r1, r7
 8018d02:	4680      	mov	r8, r0
 8018d04:	4630      	mov	r0, r6
 8018d06:	f7ff fe49 	bl	801899c <_Bfree>
 8018d0a:	4647      	mov	r7, r8
 8018d0c:	106d      	asrs	r5, r5, #1
 8018d0e:	d00b      	beq.n	8018d28 <__pow5mult+0xa0>
 8018d10:	6820      	ldr	r0, [r4, #0]
 8018d12:	b938      	cbnz	r0, 8018d24 <__pow5mult+0x9c>
 8018d14:	4622      	mov	r2, r4
 8018d16:	4621      	mov	r1, r4
 8018d18:	4630      	mov	r0, r6
 8018d1a:	f7ff ff0b 	bl	8018b34 <__multiply>
 8018d1e:	6020      	str	r0, [r4, #0]
 8018d20:	f8c0 9000 	str.w	r9, [r0]
 8018d24:	4604      	mov	r4, r0
 8018d26:	e7e4      	b.n	8018cf2 <__pow5mult+0x6a>
 8018d28:	4638      	mov	r0, r7
 8018d2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018d2e:	bf00      	nop
 8018d30:	0806d308 	.word	0x0806d308
 8018d34:	0806d13e 	.word	0x0806d13e
 8018d38:	0806d1be 	.word	0x0806d1be

08018d3c <__lshift>:
 8018d3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018d40:	460c      	mov	r4, r1
 8018d42:	6849      	ldr	r1, [r1, #4]
 8018d44:	6923      	ldr	r3, [r4, #16]
 8018d46:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8018d4a:	68a3      	ldr	r3, [r4, #8]
 8018d4c:	4607      	mov	r7, r0
 8018d4e:	4691      	mov	r9, r2
 8018d50:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018d54:	f108 0601 	add.w	r6, r8, #1
 8018d58:	42b3      	cmp	r3, r6
 8018d5a:	db0b      	blt.n	8018d74 <__lshift+0x38>
 8018d5c:	4638      	mov	r0, r7
 8018d5e:	f7ff fddd 	bl	801891c <_Balloc>
 8018d62:	4605      	mov	r5, r0
 8018d64:	b948      	cbnz	r0, 8018d7a <__lshift+0x3e>
 8018d66:	4602      	mov	r2, r0
 8018d68:	4b28      	ldr	r3, [pc, #160]	; (8018e0c <__lshift+0xd0>)
 8018d6a:	4829      	ldr	r0, [pc, #164]	; (8018e10 <__lshift+0xd4>)
 8018d6c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8018d70:	f7fd ff04 	bl	8016b7c <__assert_func>
 8018d74:	3101      	adds	r1, #1
 8018d76:	005b      	lsls	r3, r3, #1
 8018d78:	e7ee      	b.n	8018d58 <__lshift+0x1c>
 8018d7a:	2300      	movs	r3, #0
 8018d7c:	f100 0114 	add.w	r1, r0, #20
 8018d80:	f100 0210 	add.w	r2, r0, #16
 8018d84:	4618      	mov	r0, r3
 8018d86:	4553      	cmp	r3, sl
 8018d88:	db33      	blt.n	8018df2 <__lshift+0xb6>
 8018d8a:	6920      	ldr	r0, [r4, #16]
 8018d8c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018d90:	f104 0314 	add.w	r3, r4, #20
 8018d94:	f019 091f 	ands.w	r9, r9, #31
 8018d98:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018d9c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8018da0:	d02b      	beq.n	8018dfa <__lshift+0xbe>
 8018da2:	f1c9 0e20 	rsb	lr, r9, #32
 8018da6:	468a      	mov	sl, r1
 8018da8:	2200      	movs	r2, #0
 8018daa:	6818      	ldr	r0, [r3, #0]
 8018dac:	fa00 f009 	lsl.w	r0, r0, r9
 8018db0:	4310      	orrs	r0, r2
 8018db2:	f84a 0b04 	str.w	r0, [sl], #4
 8018db6:	f853 2b04 	ldr.w	r2, [r3], #4
 8018dba:	459c      	cmp	ip, r3
 8018dbc:	fa22 f20e 	lsr.w	r2, r2, lr
 8018dc0:	d8f3      	bhi.n	8018daa <__lshift+0x6e>
 8018dc2:	ebac 0304 	sub.w	r3, ip, r4
 8018dc6:	3b15      	subs	r3, #21
 8018dc8:	f023 0303 	bic.w	r3, r3, #3
 8018dcc:	3304      	adds	r3, #4
 8018dce:	f104 0015 	add.w	r0, r4, #21
 8018dd2:	4584      	cmp	ip, r0
 8018dd4:	bf38      	it	cc
 8018dd6:	2304      	movcc	r3, #4
 8018dd8:	50ca      	str	r2, [r1, r3]
 8018dda:	b10a      	cbz	r2, 8018de0 <__lshift+0xa4>
 8018ddc:	f108 0602 	add.w	r6, r8, #2
 8018de0:	3e01      	subs	r6, #1
 8018de2:	4638      	mov	r0, r7
 8018de4:	612e      	str	r6, [r5, #16]
 8018de6:	4621      	mov	r1, r4
 8018de8:	f7ff fdd8 	bl	801899c <_Bfree>
 8018dec:	4628      	mov	r0, r5
 8018dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018df2:	f842 0f04 	str.w	r0, [r2, #4]!
 8018df6:	3301      	adds	r3, #1
 8018df8:	e7c5      	b.n	8018d86 <__lshift+0x4a>
 8018dfa:	3904      	subs	r1, #4
 8018dfc:	f853 2b04 	ldr.w	r2, [r3], #4
 8018e00:	f841 2f04 	str.w	r2, [r1, #4]!
 8018e04:	459c      	cmp	ip, r3
 8018e06:	d8f9      	bhi.n	8018dfc <__lshift+0xc0>
 8018e08:	e7ea      	b.n	8018de0 <__lshift+0xa4>
 8018e0a:	bf00      	nop
 8018e0c:	0806d1ad 	.word	0x0806d1ad
 8018e10:	0806d1be 	.word	0x0806d1be

08018e14 <__mcmp>:
 8018e14:	b530      	push	{r4, r5, lr}
 8018e16:	6902      	ldr	r2, [r0, #16]
 8018e18:	690c      	ldr	r4, [r1, #16]
 8018e1a:	1b12      	subs	r2, r2, r4
 8018e1c:	d10e      	bne.n	8018e3c <__mcmp+0x28>
 8018e1e:	f100 0314 	add.w	r3, r0, #20
 8018e22:	3114      	adds	r1, #20
 8018e24:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8018e28:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8018e2c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8018e30:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8018e34:	42a5      	cmp	r5, r4
 8018e36:	d003      	beq.n	8018e40 <__mcmp+0x2c>
 8018e38:	d305      	bcc.n	8018e46 <__mcmp+0x32>
 8018e3a:	2201      	movs	r2, #1
 8018e3c:	4610      	mov	r0, r2
 8018e3e:	bd30      	pop	{r4, r5, pc}
 8018e40:	4283      	cmp	r3, r0
 8018e42:	d3f3      	bcc.n	8018e2c <__mcmp+0x18>
 8018e44:	e7fa      	b.n	8018e3c <__mcmp+0x28>
 8018e46:	f04f 32ff 	mov.w	r2, #4294967295
 8018e4a:	e7f7      	b.n	8018e3c <__mcmp+0x28>

08018e4c <__mdiff>:
 8018e4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e50:	460c      	mov	r4, r1
 8018e52:	4606      	mov	r6, r0
 8018e54:	4611      	mov	r1, r2
 8018e56:	4620      	mov	r0, r4
 8018e58:	4690      	mov	r8, r2
 8018e5a:	f7ff ffdb 	bl	8018e14 <__mcmp>
 8018e5e:	1e05      	subs	r5, r0, #0
 8018e60:	d110      	bne.n	8018e84 <__mdiff+0x38>
 8018e62:	4629      	mov	r1, r5
 8018e64:	4630      	mov	r0, r6
 8018e66:	f7ff fd59 	bl	801891c <_Balloc>
 8018e6a:	b930      	cbnz	r0, 8018e7a <__mdiff+0x2e>
 8018e6c:	4b3a      	ldr	r3, [pc, #232]	; (8018f58 <__mdiff+0x10c>)
 8018e6e:	4602      	mov	r2, r0
 8018e70:	f240 2137 	movw	r1, #567	; 0x237
 8018e74:	4839      	ldr	r0, [pc, #228]	; (8018f5c <__mdiff+0x110>)
 8018e76:	f7fd fe81 	bl	8016b7c <__assert_func>
 8018e7a:	2301      	movs	r3, #1
 8018e7c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8018e80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e84:	bfa4      	itt	ge
 8018e86:	4643      	movge	r3, r8
 8018e88:	46a0      	movge	r8, r4
 8018e8a:	4630      	mov	r0, r6
 8018e8c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8018e90:	bfa6      	itte	ge
 8018e92:	461c      	movge	r4, r3
 8018e94:	2500      	movge	r5, #0
 8018e96:	2501      	movlt	r5, #1
 8018e98:	f7ff fd40 	bl	801891c <_Balloc>
 8018e9c:	b920      	cbnz	r0, 8018ea8 <__mdiff+0x5c>
 8018e9e:	4b2e      	ldr	r3, [pc, #184]	; (8018f58 <__mdiff+0x10c>)
 8018ea0:	4602      	mov	r2, r0
 8018ea2:	f240 2145 	movw	r1, #581	; 0x245
 8018ea6:	e7e5      	b.n	8018e74 <__mdiff+0x28>
 8018ea8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8018eac:	6926      	ldr	r6, [r4, #16]
 8018eae:	60c5      	str	r5, [r0, #12]
 8018eb0:	f104 0914 	add.w	r9, r4, #20
 8018eb4:	f108 0514 	add.w	r5, r8, #20
 8018eb8:	f100 0e14 	add.w	lr, r0, #20
 8018ebc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8018ec0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8018ec4:	f108 0210 	add.w	r2, r8, #16
 8018ec8:	46f2      	mov	sl, lr
 8018eca:	2100      	movs	r1, #0
 8018ecc:	f859 3b04 	ldr.w	r3, [r9], #4
 8018ed0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8018ed4:	fa11 f88b 	uxtah	r8, r1, fp
 8018ed8:	b299      	uxth	r1, r3
 8018eda:	0c1b      	lsrs	r3, r3, #16
 8018edc:	eba8 0801 	sub.w	r8, r8, r1
 8018ee0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8018ee4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8018ee8:	fa1f f888 	uxth.w	r8, r8
 8018eec:	1419      	asrs	r1, r3, #16
 8018eee:	454e      	cmp	r6, r9
 8018ef0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8018ef4:	f84a 3b04 	str.w	r3, [sl], #4
 8018ef8:	d8e8      	bhi.n	8018ecc <__mdiff+0x80>
 8018efa:	1b33      	subs	r3, r6, r4
 8018efc:	3b15      	subs	r3, #21
 8018efe:	f023 0303 	bic.w	r3, r3, #3
 8018f02:	3304      	adds	r3, #4
 8018f04:	3415      	adds	r4, #21
 8018f06:	42a6      	cmp	r6, r4
 8018f08:	bf38      	it	cc
 8018f0a:	2304      	movcc	r3, #4
 8018f0c:	441d      	add	r5, r3
 8018f0e:	4473      	add	r3, lr
 8018f10:	469e      	mov	lr, r3
 8018f12:	462e      	mov	r6, r5
 8018f14:	4566      	cmp	r6, ip
 8018f16:	d30e      	bcc.n	8018f36 <__mdiff+0xea>
 8018f18:	f10c 0203 	add.w	r2, ip, #3
 8018f1c:	1b52      	subs	r2, r2, r5
 8018f1e:	f022 0203 	bic.w	r2, r2, #3
 8018f22:	3d03      	subs	r5, #3
 8018f24:	45ac      	cmp	ip, r5
 8018f26:	bf38      	it	cc
 8018f28:	2200      	movcc	r2, #0
 8018f2a:	4413      	add	r3, r2
 8018f2c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8018f30:	b17a      	cbz	r2, 8018f52 <__mdiff+0x106>
 8018f32:	6107      	str	r7, [r0, #16]
 8018f34:	e7a4      	b.n	8018e80 <__mdiff+0x34>
 8018f36:	f856 8b04 	ldr.w	r8, [r6], #4
 8018f3a:	fa11 f288 	uxtah	r2, r1, r8
 8018f3e:	1414      	asrs	r4, r2, #16
 8018f40:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8018f44:	b292      	uxth	r2, r2
 8018f46:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8018f4a:	f84e 2b04 	str.w	r2, [lr], #4
 8018f4e:	1421      	asrs	r1, r4, #16
 8018f50:	e7e0      	b.n	8018f14 <__mdiff+0xc8>
 8018f52:	3f01      	subs	r7, #1
 8018f54:	e7ea      	b.n	8018f2c <__mdiff+0xe0>
 8018f56:	bf00      	nop
 8018f58:	0806d1ad 	.word	0x0806d1ad
 8018f5c:	0806d1be 	.word	0x0806d1be

08018f60 <__d2b>:
 8018f60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018f64:	460f      	mov	r7, r1
 8018f66:	2101      	movs	r1, #1
 8018f68:	ec59 8b10 	vmov	r8, r9, d0
 8018f6c:	4616      	mov	r6, r2
 8018f6e:	f7ff fcd5 	bl	801891c <_Balloc>
 8018f72:	4604      	mov	r4, r0
 8018f74:	b930      	cbnz	r0, 8018f84 <__d2b+0x24>
 8018f76:	4602      	mov	r2, r0
 8018f78:	4b24      	ldr	r3, [pc, #144]	; (801900c <__d2b+0xac>)
 8018f7a:	4825      	ldr	r0, [pc, #148]	; (8019010 <__d2b+0xb0>)
 8018f7c:	f240 310f 	movw	r1, #783	; 0x30f
 8018f80:	f7fd fdfc 	bl	8016b7c <__assert_func>
 8018f84:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8018f88:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018f8c:	bb2d      	cbnz	r5, 8018fda <__d2b+0x7a>
 8018f8e:	9301      	str	r3, [sp, #4]
 8018f90:	f1b8 0300 	subs.w	r3, r8, #0
 8018f94:	d026      	beq.n	8018fe4 <__d2b+0x84>
 8018f96:	4668      	mov	r0, sp
 8018f98:	9300      	str	r3, [sp, #0]
 8018f9a:	f7ff fd87 	bl	8018aac <__lo0bits>
 8018f9e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8018fa2:	b1e8      	cbz	r0, 8018fe0 <__d2b+0x80>
 8018fa4:	f1c0 0320 	rsb	r3, r0, #32
 8018fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8018fac:	430b      	orrs	r3, r1
 8018fae:	40c2      	lsrs	r2, r0
 8018fb0:	6163      	str	r3, [r4, #20]
 8018fb2:	9201      	str	r2, [sp, #4]
 8018fb4:	9b01      	ldr	r3, [sp, #4]
 8018fb6:	61a3      	str	r3, [r4, #24]
 8018fb8:	2b00      	cmp	r3, #0
 8018fba:	bf14      	ite	ne
 8018fbc:	2202      	movne	r2, #2
 8018fbe:	2201      	moveq	r2, #1
 8018fc0:	6122      	str	r2, [r4, #16]
 8018fc2:	b1bd      	cbz	r5, 8018ff4 <__d2b+0x94>
 8018fc4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8018fc8:	4405      	add	r5, r0
 8018fca:	603d      	str	r5, [r7, #0]
 8018fcc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8018fd0:	6030      	str	r0, [r6, #0]
 8018fd2:	4620      	mov	r0, r4
 8018fd4:	b003      	add	sp, #12
 8018fd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018fda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018fde:	e7d6      	b.n	8018f8e <__d2b+0x2e>
 8018fe0:	6161      	str	r1, [r4, #20]
 8018fe2:	e7e7      	b.n	8018fb4 <__d2b+0x54>
 8018fe4:	a801      	add	r0, sp, #4
 8018fe6:	f7ff fd61 	bl	8018aac <__lo0bits>
 8018fea:	9b01      	ldr	r3, [sp, #4]
 8018fec:	6163      	str	r3, [r4, #20]
 8018fee:	3020      	adds	r0, #32
 8018ff0:	2201      	movs	r2, #1
 8018ff2:	e7e5      	b.n	8018fc0 <__d2b+0x60>
 8018ff4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8018ff8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8018ffc:	6038      	str	r0, [r7, #0]
 8018ffe:	6918      	ldr	r0, [r3, #16]
 8019000:	f7ff fd34 	bl	8018a6c <__hi0bits>
 8019004:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8019008:	e7e2      	b.n	8018fd0 <__d2b+0x70>
 801900a:	bf00      	nop
 801900c:	0806d1ad 	.word	0x0806d1ad
 8019010:	0806d1be 	.word	0x0806d1be

08019014 <__ssputs_r>:
 8019014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019018:	688e      	ldr	r6, [r1, #8]
 801901a:	461f      	mov	r7, r3
 801901c:	42be      	cmp	r6, r7
 801901e:	680b      	ldr	r3, [r1, #0]
 8019020:	4682      	mov	sl, r0
 8019022:	460c      	mov	r4, r1
 8019024:	4690      	mov	r8, r2
 8019026:	d82c      	bhi.n	8019082 <__ssputs_r+0x6e>
 8019028:	898a      	ldrh	r2, [r1, #12]
 801902a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801902e:	d026      	beq.n	801907e <__ssputs_r+0x6a>
 8019030:	6965      	ldr	r5, [r4, #20]
 8019032:	6909      	ldr	r1, [r1, #16]
 8019034:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019038:	eba3 0901 	sub.w	r9, r3, r1
 801903c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8019040:	1c7b      	adds	r3, r7, #1
 8019042:	444b      	add	r3, r9
 8019044:	106d      	asrs	r5, r5, #1
 8019046:	429d      	cmp	r5, r3
 8019048:	bf38      	it	cc
 801904a:	461d      	movcc	r5, r3
 801904c:	0553      	lsls	r3, r2, #21
 801904e:	d527      	bpl.n	80190a0 <__ssputs_r+0x8c>
 8019050:	4629      	mov	r1, r5
 8019052:	f7fd fde7 	bl	8016c24 <_malloc_r>
 8019056:	4606      	mov	r6, r0
 8019058:	b360      	cbz	r0, 80190b4 <__ssputs_r+0xa0>
 801905a:	6921      	ldr	r1, [r4, #16]
 801905c:	464a      	mov	r2, r9
 801905e:	f7fe fd2a 	bl	8017ab6 <memcpy>
 8019062:	89a3      	ldrh	r3, [r4, #12]
 8019064:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019068:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801906c:	81a3      	strh	r3, [r4, #12]
 801906e:	6126      	str	r6, [r4, #16]
 8019070:	6165      	str	r5, [r4, #20]
 8019072:	444e      	add	r6, r9
 8019074:	eba5 0509 	sub.w	r5, r5, r9
 8019078:	6026      	str	r6, [r4, #0]
 801907a:	60a5      	str	r5, [r4, #8]
 801907c:	463e      	mov	r6, r7
 801907e:	42be      	cmp	r6, r7
 8019080:	d900      	bls.n	8019084 <__ssputs_r+0x70>
 8019082:	463e      	mov	r6, r7
 8019084:	6820      	ldr	r0, [r4, #0]
 8019086:	4632      	mov	r2, r6
 8019088:	4641      	mov	r1, r8
 801908a:	f7fe fc15 	bl	80178b8 <memmove>
 801908e:	68a3      	ldr	r3, [r4, #8]
 8019090:	1b9b      	subs	r3, r3, r6
 8019092:	60a3      	str	r3, [r4, #8]
 8019094:	6823      	ldr	r3, [r4, #0]
 8019096:	4433      	add	r3, r6
 8019098:	6023      	str	r3, [r4, #0]
 801909a:	2000      	movs	r0, #0
 801909c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80190a0:	462a      	mov	r2, r5
 80190a2:	f000 fbbf 	bl	8019824 <_realloc_r>
 80190a6:	4606      	mov	r6, r0
 80190a8:	2800      	cmp	r0, #0
 80190aa:	d1e0      	bne.n	801906e <__ssputs_r+0x5a>
 80190ac:	6921      	ldr	r1, [r4, #16]
 80190ae:	4650      	mov	r0, sl
 80190b0:	f7ff fbe8 	bl	8018884 <_free_r>
 80190b4:	230c      	movs	r3, #12
 80190b6:	f8ca 3000 	str.w	r3, [sl]
 80190ba:	89a3      	ldrh	r3, [r4, #12]
 80190bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80190c0:	81a3      	strh	r3, [r4, #12]
 80190c2:	f04f 30ff 	mov.w	r0, #4294967295
 80190c6:	e7e9      	b.n	801909c <__ssputs_r+0x88>

080190c8 <_svfiprintf_r>:
 80190c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80190cc:	4698      	mov	r8, r3
 80190ce:	898b      	ldrh	r3, [r1, #12]
 80190d0:	061b      	lsls	r3, r3, #24
 80190d2:	b09d      	sub	sp, #116	; 0x74
 80190d4:	4607      	mov	r7, r0
 80190d6:	460d      	mov	r5, r1
 80190d8:	4614      	mov	r4, r2
 80190da:	d50e      	bpl.n	80190fa <_svfiprintf_r+0x32>
 80190dc:	690b      	ldr	r3, [r1, #16]
 80190de:	b963      	cbnz	r3, 80190fa <_svfiprintf_r+0x32>
 80190e0:	2140      	movs	r1, #64	; 0x40
 80190e2:	f7fd fd9f 	bl	8016c24 <_malloc_r>
 80190e6:	6028      	str	r0, [r5, #0]
 80190e8:	6128      	str	r0, [r5, #16]
 80190ea:	b920      	cbnz	r0, 80190f6 <_svfiprintf_r+0x2e>
 80190ec:	230c      	movs	r3, #12
 80190ee:	603b      	str	r3, [r7, #0]
 80190f0:	f04f 30ff 	mov.w	r0, #4294967295
 80190f4:	e0d0      	b.n	8019298 <_svfiprintf_r+0x1d0>
 80190f6:	2340      	movs	r3, #64	; 0x40
 80190f8:	616b      	str	r3, [r5, #20]
 80190fa:	2300      	movs	r3, #0
 80190fc:	9309      	str	r3, [sp, #36]	; 0x24
 80190fe:	2320      	movs	r3, #32
 8019100:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019104:	f8cd 800c 	str.w	r8, [sp, #12]
 8019108:	2330      	movs	r3, #48	; 0x30
 801910a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80192b0 <_svfiprintf_r+0x1e8>
 801910e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019112:	f04f 0901 	mov.w	r9, #1
 8019116:	4623      	mov	r3, r4
 8019118:	469a      	mov	sl, r3
 801911a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801911e:	b10a      	cbz	r2, 8019124 <_svfiprintf_r+0x5c>
 8019120:	2a25      	cmp	r2, #37	; 0x25
 8019122:	d1f9      	bne.n	8019118 <_svfiprintf_r+0x50>
 8019124:	ebba 0b04 	subs.w	fp, sl, r4
 8019128:	d00b      	beq.n	8019142 <_svfiprintf_r+0x7a>
 801912a:	465b      	mov	r3, fp
 801912c:	4622      	mov	r2, r4
 801912e:	4629      	mov	r1, r5
 8019130:	4638      	mov	r0, r7
 8019132:	f7ff ff6f 	bl	8019014 <__ssputs_r>
 8019136:	3001      	adds	r0, #1
 8019138:	f000 80a9 	beq.w	801928e <_svfiprintf_r+0x1c6>
 801913c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801913e:	445a      	add	r2, fp
 8019140:	9209      	str	r2, [sp, #36]	; 0x24
 8019142:	f89a 3000 	ldrb.w	r3, [sl]
 8019146:	2b00      	cmp	r3, #0
 8019148:	f000 80a1 	beq.w	801928e <_svfiprintf_r+0x1c6>
 801914c:	2300      	movs	r3, #0
 801914e:	f04f 32ff 	mov.w	r2, #4294967295
 8019152:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019156:	f10a 0a01 	add.w	sl, sl, #1
 801915a:	9304      	str	r3, [sp, #16]
 801915c:	9307      	str	r3, [sp, #28]
 801915e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019162:	931a      	str	r3, [sp, #104]	; 0x68
 8019164:	4654      	mov	r4, sl
 8019166:	2205      	movs	r2, #5
 8019168:	f814 1b01 	ldrb.w	r1, [r4], #1
 801916c:	4850      	ldr	r0, [pc, #320]	; (80192b0 <_svfiprintf_r+0x1e8>)
 801916e:	f7e7 f867 	bl	8000240 <memchr>
 8019172:	9a04      	ldr	r2, [sp, #16]
 8019174:	b9d8      	cbnz	r0, 80191ae <_svfiprintf_r+0xe6>
 8019176:	06d0      	lsls	r0, r2, #27
 8019178:	bf44      	itt	mi
 801917a:	2320      	movmi	r3, #32
 801917c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019180:	0711      	lsls	r1, r2, #28
 8019182:	bf44      	itt	mi
 8019184:	232b      	movmi	r3, #43	; 0x2b
 8019186:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801918a:	f89a 3000 	ldrb.w	r3, [sl]
 801918e:	2b2a      	cmp	r3, #42	; 0x2a
 8019190:	d015      	beq.n	80191be <_svfiprintf_r+0xf6>
 8019192:	9a07      	ldr	r2, [sp, #28]
 8019194:	4654      	mov	r4, sl
 8019196:	2000      	movs	r0, #0
 8019198:	f04f 0c0a 	mov.w	ip, #10
 801919c:	4621      	mov	r1, r4
 801919e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80191a2:	3b30      	subs	r3, #48	; 0x30
 80191a4:	2b09      	cmp	r3, #9
 80191a6:	d94d      	bls.n	8019244 <_svfiprintf_r+0x17c>
 80191a8:	b1b0      	cbz	r0, 80191d8 <_svfiprintf_r+0x110>
 80191aa:	9207      	str	r2, [sp, #28]
 80191ac:	e014      	b.n	80191d8 <_svfiprintf_r+0x110>
 80191ae:	eba0 0308 	sub.w	r3, r0, r8
 80191b2:	fa09 f303 	lsl.w	r3, r9, r3
 80191b6:	4313      	orrs	r3, r2
 80191b8:	9304      	str	r3, [sp, #16]
 80191ba:	46a2      	mov	sl, r4
 80191bc:	e7d2      	b.n	8019164 <_svfiprintf_r+0x9c>
 80191be:	9b03      	ldr	r3, [sp, #12]
 80191c0:	1d19      	adds	r1, r3, #4
 80191c2:	681b      	ldr	r3, [r3, #0]
 80191c4:	9103      	str	r1, [sp, #12]
 80191c6:	2b00      	cmp	r3, #0
 80191c8:	bfbb      	ittet	lt
 80191ca:	425b      	neglt	r3, r3
 80191cc:	f042 0202 	orrlt.w	r2, r2, #2
 80191d0:	9307      	strge	r3, [sp, #28]
 80191d2:	9307      	strlt	r3, [sp, #28]
 80191d4:	bfb8      	it	lt
 80191d6:	9204      	strlt	r2, [sp, #16]
 80191d8:	7823      	ldrb	r3, [r4, #0]
 80191da:	2b2e      	cmp	r3, #46	; 0x2e
 80191dc:	d10c      	bne.n	80191f8 <_svfiprintf_r+0x130>
 80191de:	7863      	ldrb	r3, [r4, #1]
 80191e0:	2b2a      	cmp	r3, #42	; 0x2a
 80191e2:	d134      	bne.n	801924e <_svfiprintf_r+0x186>
 80191e4:	9b03      	ldr	r3, [sp, #12]
 80191e6:	1d1a      	adds	r2, r3, #4
 80191e8:	681b      	ldr	r3, [r3, #0]
 80191ea:	9203      	str	r2, [sp, #12]
 80191ec:	2b00      	cmp	r3, #0
 80191ee:	bfb8      	it	lt
 80191f0:	f04f 33ff 	movlt.w	r3, #4294967295
 80191f4:	3402      	adds	r4, #2
 80191f6:	9305      	str	r3, [sp, #20]
 80191f8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80192c0 <_svfiprintf_r+0x1f8>
 80191fc:	7821      	ldrb	r1, [r4, #0]
 80191fe:	2203      	movs	r2, #3
 8019200:	4650      	mov	r0, sl
 8019202:	f7e7 f81d 	bl	8000240 <memchr>
 8019206:	b138      	cbz	r0, 8019218 <_svfiprintf_r+0x150>
 8019208:	9b04      	ldr	r3, [sp, #16]
 801920a:	eba0 000a 	sub.w	r0, r0, sl
 801920e:	2240      	movs	r2, #64	; 0x40
 8019210:	4082      	lsls	r2, r0
 8019212:	4313      	orrs	r3, r2
 8019214:	3401      	adds	r4, #1
 8019216:	9304      	str	r3, [sp, #16]
 8019218:	f814 1b01 	ldrb.w	r1, [r4], #1
 801921c:	4825      	ldr	r0, [pc, #148]	; (80192b4 <_svfiprintf_r+0x1ec>)
 801921e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019222:	2206      	movs	r2, #6
 8019224:	f7e7 f80c 	bl	8000240 <memchr>
 8019228:	2800      	cmp	r0, #0
 801922a:	d038      	beq.n	801929e <_svfiprintf_r+0x1d6>
 801922c:	4b22      	ldr	r3, [pc, #136]	; (80192b8 <_svfiprintf_r+0x1f0>)
 801922e:	bb1b      	cbnz	r3, 8019278 <_svfiprintf_r+0x1b0>
 8019230:	9b03      	ldr	r3, [sp, #12]
 8019232:	3307      	adds	r3, #7
 8019234:	f023 0307 	bic.w	r3, r3, #7
 8019238:	3308      	adds	r3, #8
 801923a:	9303      	str	r3, [sp, #12]
 801923c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801923e:	4433      	add	r3, r6
 8019240:	9309      	str	r3, [sp, #36]	; 0x24
 8019242:	e768      	b.n	8019116 <_svfiprintf_r+0x4e>
 8019244:	fb0c 3202 	mla	r2, ip, r2, r3
 8019248:	460c      	mov	r4, r1
 801924a:	2001      	movs	r0, #1
 801924c:	e7a6      	b.n	801919c <_svfiprintf_r+0xd4>
 801924e:	2300      	movs	r3, #0
 8019250:	3401      	adds	r4, #1
 8019252:	9305      	str	r3, [sp, #20]
 8019254:	4619      	mov	r1, r3
 8019256:	f04f 0c0a 	mov.w	ip, #10
 801925a:	4620      	mov	r0, r4
 801925c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019260:	3a30      	subs	r2, #48	; 0x30
 8019262:	2a09      	cmp	r2, #9
 8019264:	d903      	bls.n	801926e <_svfiprintf_r+0x1a6>
 8019266:	2b00      	cmp	r3, #0
 8019268:	d0c6      	beq.n	80191f8 <_svfiprintf_r+0x130>
 801926a:	9105      	str	r1, [sp, #20]
 801926c:	e7c4      	b.n	80191f8 <_svfiprintf_r+0x130>
 801926e:	fb0c 2101 	mla	r1, ip, r1, r2
 8019272:	4604      	mov	r4, r0
 8019274:	2301      	movs	r3, #1
 8019276:	e7f0      	b.n	801925a <_svfiprintf_r+0x192>
 8019278:	ab03      	add	r3, sp, #12
 801927a:	9300      	str	r3, [sp, #0]
 801927c:	462a      	mov	r2, r5
 801927e:	4b0f      	ldr	r3, [pc, #60]	; (80192bc <_svfiprintf_r+0x1f4>)
 8019280:	a904      	add	r1, sp, #16
 8019282:	4638      	mov	r0, r7
 8019284:	f7fd fdfa 	bl	8016e7c <_printf_float>
 8019288:	1c42      	adds	r2, r0, #1
 801928a:	4606      	mov	r6, r0
 801928c:	d1d6      	bne.n	801923c <_svfiprintf_r+0x174>
 801928e:	89ab      	ldrh	r3, [r5, #12]
 8019290:	065b      	lsls	r3, r3, #25
 8019292:	f53f af2d 	bmi.w	80190f0 <_svfiprintf_r+0x28>
 8019296:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019298:	b01d      	add	sp, #116	; 0x74
 801929a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801929e:	ab03      	add	r3, sp, #12
 80192a0:	9300      	str	r3, [sp, #0]
 80192a2:	462a      	mov	r2, r5
 80192a4:	4b05      	ldr	r3, [pc, #20]	; (80192bc <_svfiprintf_r+0x1f4>)
 80192a6:	a904      	add	r1, sp, #16
 80192a8:	4638      	mov	r0, r7
 80192aa:	f7fe f88b 	bl	80173c4 <_printf_i>
 80192ae:	e7eb      	b.n	8019288 <_svfiprintf_r+0x1c0>
 80192b0:	0806d314 	.word	0x0806d314
 80192b4:	0806d31e 	.word	0x0806d31e
 80192b8:	08016e7d 	.word	0x08016e7d
 80192bc:	08019015 	.word	0x08019015
 80192c0:	0806d31a 	.word	0x0806d31a

080192c4 <__sfputc_r>:
 80192c4:	6893      	ldr	r3, [r2, #8]
 80192c6:	3b01      	subs	r3, #1
 80192c8:	2b00      	cmp	r3, #0
 80192ca:	b410      	push	{r4}
 80192cc:	6093      	str	r3, [r2, #8]
 80192ce:	da08      	bge.n	80192e2 <__sfputc_r+0x1e>
 80192d0:	6994      	ldr	r4, [r2, #24]
 80192d2:	42a3      	cmp	r3, r4
 80192d4:	db01      	blt.n	80192da <__sfputc_r+0x16>
 80192d6:	290a      	cmp	r1, #10
 80192d8:	d103      	bne.n	80192e2 <__sfputc_r+0x1e>
 80192da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80192de:	f000 b9e3 	b.w	80196a8 <__swbuf_r>
 80192e2:	6813      	ldr	r3, [r2, #0]
 80192e4:	1c58      	adds	r0, r3, #1
 80192e6:	6010      	str	r0, [r2, #0]
 80192e8:	7019      	strb	r1, [r3, #0]
 80192ea:	4608      	mov	r0, r1
 80192ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80192f0:	4770      	bx	lr

080192f2 <__sfputs_r>:
 80192f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80192f4:	4606      	mov	r6, r0
 80192f6:	460f      	mov	r7, r1
 80192f8:	4614      	mov	r4, r2
 80192fa:	18d5      	adds	r5, r2, r3
 80192fc:	42ac      	cmp	r4, r5
 80192fe:	d101      	bne.n	8019304 <__sfputs_r+0x12>
 8019300:	2000      	movs	r0, #0
 8019302:	e007      	b.n	8019314 <__sfputs_r+0x22>
 8019304:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019308:	463a      	mov	r2, r7
 801930a:	4630      	mov	r0, r6
 801930c:	f7ff ffda 	bl	80192c4 <__sfputc_r>
 8019310:	1c43      	adds	r3, r0, #1
 8019312:	d1f3      	bne.n	80192fc <__sfputs_r+0xa>
 8019314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019318 <_vfiprintf_r>:
 8019318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801931c:	460d      	mov	r5, r1
 801931e:	b09d      	sub	sp, #116	; 0x74
 8019320:	4614      	mov	r4, r2
 8019322:	4698      	mov	r8, r3
 8019324:	4606      	mov	r6, r0
 8019326:	b118      	cbz	r0, 8019330 <_vfiprintf_r+0x18>
 8019328:	6a03      	ldr	r3, [r0, #32]
 801932a:	b90b      	cbnz	r3, 8019330 <_vfiprintf_r+0x18>
 801932c:	f7fe f9f8 	bl	8017720 <__sinit>
 8019330:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019332:	07d9      	lsls	r1, r3, #31
 8019334:	d405      	bmi.n	8019342 <_vfiprintf_r+0x2a>
 8019336:	89ab      	ldrh	r3, [r5, #12]
 8019338:	059a      	lsls	r2, r3, #22
 801933a:	d402      	bmi.n	8019342 <_vfiprintf_r+0x2a>
 801933c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801933e:	f7fe fbb8 	bl	8017ab2 <__retarget_lock_acquire_recursive>
 8019342:	89ab      	ldrh	r3, [r5, #12]
 8019344:	071b      	lsls	r3, r3, #28
 8019346:	d501      	bpl.n	801934c <_vfiprintf_r+0x34>
 8019348:	692b      	ldr	r3, [r5, #16]
 801934a:	b99b      	cbnz	r3, 8019374 <_vfiprintf_r+0x5c>
 801934c:	4629      	mov	r1, r5
 801934e:	4630      	mov	r0, r6
 8019350:	f000 f9e8 	bl	8019724 <__swsetup_r>
 8019354:	b170      	cbz	r0, 8019374 <_vfiprintf_r+0x5c>
 8019356:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019358:	07dc      	lsls	r4, r3, #31
 801935a:	d504      	bpl.n	8019366 <_vfiprintf_r+0x4e>
 801935c:	f04f 30ff 	mov.w	r0, #4294967295
 8019360:	b01d      	add	sp, #116	; 0x74
 8019362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019366:	89ab      	ldrh	r3, [r5, #12]
 8019368:	0598      	lsls	r0, r3, #22
 801936a:	d4f7      	bmi.n	801935c <_vfiprintf_r+0x44>
 801936c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801936e:	f7fe fba1 	bl	8017ab4 <__retarget_lock_release_recursive>
 8019372:	e7f3      	b.n	801935c <_vfiprintf_r+0x44>
 8019374:	2300      	movs	r3, #0
 8019376:	9309      	str	r3, [sp, #36]	; 0x24
 8019378:	2320      	movs	r3, #32
 801937a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801937e:	f8cd 800c 	str.w	r8, [sp, #12]
 8019382:	2330      	movs	r3, #48	; 0x30
 8019384:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8019538 <_vfiprintf_r+0x220>
 8019388:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801938c:	f04f 0901 	mov.w	r9, #1
 8019390:	4623      	mov	r3, r4
 8019392:	469a      	mov	sl, r3
 8019394:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019398:	b10a      	cbz	r2, 801939e <_vfiprintf_r+0x86>
 801939a:	2a25      	cmp	r2, #37	; 0x25
 801939c:	d1f9      	bne.n	8019392 <_vfiprintf_r+0x7a>
 801939e:	ebba 0b04 	subs.w	fp, sl, r4
 80193a2:	d00b      	beq.n	80193bc <_vfiprintf_r+0xa4>
 80193a4:	465b      	mov	r3, fp
 80193a6:	4622      	mov	r2, r4
 80193a8:	4629      	mov	r1, r5
 80193aa:	4630      	mov	r0, r6
 80193ac:	f7ff ffa1 	bl	80192f2 <__sfputs_r>
 80193b0:	3001      	adds	r0, #1
 80193b2:	f000 80a9 	beq.w	8019508 <_vfiprintf_r+0x1f0>
 80193b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80193b8:	445a      	add	r2, fp
 80193ba:	9209      	str	r2, [sp, #36]	; 0x24
 80193bc:	f89a 3000 	ldrb.w	r3, [sl]
 80193c0:	2b00      	cmp	r3, #0
 80193c2:	f000 80a1 	beq.w	8019508 <_vfiprintf_r+0x1f0>
 80193c6:	2300      	movs	r3, #0
 80193c8:	f04f 32ff 	mov.w	r2, #4294967295
 80193cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80193d0:	f10a 0a01 	add.w	sl, sl, #1
 80193d4:	9304      	str	r3, [sp, #16]
 80193d6:	9307      	str	r3, [sp, #28]
 80193d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80193dc:	931a      	str	r3, [sp, #104]	; 0x68
 80193de:	4654      	mov	r4, sl
 80193e0:	2205      	movs	r2, #5
 80193e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80193e6:	4854      	ldr	r0, [pc, #336]	; (8019538 <_vfiprintf_r+0x220>)
 80193e8:	f7e6 ff2a 	bl	8000240 <memchr>
 80193ec:	9a04      	ldr	r2, [sp, #16]
 80193ee:	b9d8      	cbnz	r0, 8019428 <_vfiprintf_r+0x110>
 80193f0:	06d1      	lsls	r1, r2, #27
 80193f2:	bf44      	itt	mi
 80193f4:	2320      	movmi	r3, #32
 80193f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80193fa:	0713      	lsls	r3, r2, #28
 80193fc:	bf44      	itt	mi
 80193fe:	232b      	movmi	r3, #43	; 0x2b
 8019400:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019404:	f89a 3000 	ldrb.w	r3, [sl]
 8019408:	2b2a      	cmp	r3, #42	; 0x2a
 801940a:	d015      	beq.n	8019438 <_vfiprintf_r+0x120>
 801940c:	9a07      	ldr	r2, [sp, #28]
 801940e:	4654      	mov	r4, sl
 8019410:	2000      	movs	r0, #0
 8019412:	f04f 0c0a 	mov.w	ip, #10
 8019416:	4621      	mov	r1, r4
 8019418:	f811 3b01 	ldrb.w	r3, [r1], #1
 801941c:	3b30      	subs	r3, #48	; 0x30
 801941e:	2b09      	cmp	r3, #9
 8019420:	d94d      	bls.n	80194be <_vfiprintf_r+0x1a6>
 8019422:	b1b0      	cbz	r0, 8019452 <_vfiprintf_r+0x13a>
 8019424:	9207      	str	r2, [sp, #28]
 8019426:	e014      	b.n	8019452 <_vfiprintf_r+0x13a>
 8019428:	eba0 0308 	sub.w	r3, r0, r8
 801942c:	fa09 f303 	lsl.w	r3, r9, r3
 8019430:	4313      	orrs	r3, r2
 8019432:	9304      	str	r3, [sp, #16]
 8019434:	46a2      	mov	sl, r4
 8019436:	e7d2      	b.n	80193de <_vfiprintf_r+0xc6>
 8019438:	9b03      	ldr	r3, [sp, #12]
 801943a:	1d19      	adds	r1, r3, #4
 801943c:	681b      	ldr	r3, [r3, #0]
 801943e:	9103      	str	r1, [sp, #12]
 8019440:	2b00      	cmp	r3, #0
 8019442:	bfbb      	ittet	lt
 8019444:	425b      	neglt	r3, r3
 8019446:	f042 0202 	orrlt.w	r2, r2, #2
 801944a:	9307      	strge	r3, [sp, #28]
 801944c:	9307      	strlt	r3, [sp, #28]
 801944e:	bfb8      	it	lt
 8019450:	9204      	strlt	r2, [sp, #16]
 8019452:	7823      	ldrb	r3, [r4, #0]
 8019454:	2b2e      	cmp	r3, #46	; 0x2e
 8019456:	d10c      	bne.n	8019472 <_vfiprintf_r+0x15a>
 8019458:	7863      	ldrb	r3, [r4, #1]
 801945a:	2b2a      	cmp	r3, #42	; 0x2a
 801945c:	d134      	bne.n	80194c8 <_vfiprintf_r+0x1b0>
 801945e:	9b03      	ldr	r3, [sp, #12]
 8019460:	1d1a      	adds	r2, r3, #4
 8019462:	681b      	ldr	r3, [r3, #0]
 8019464:	9203      	str	r2, [sp, #12]
 8019466:	2b00      	cmp	r3, #0
 8019468:	bfb8      	it	lt
 801946a:	f04f 33ff 	movlt.w	r3, #4294967295
 801946e:	3402      	adds	r4, #2
 8019470:	9305      	str	r3, [sp, #20]
 8019472:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8019548 <_vfiprintf_r+0x230>
 8019476:	7821      	ldrb	r1, [r4, #0]
 8019478:	2203      	movs	r2, #3
 801947a:	4650      	mov	r0, sl
 801947c:	f7e6 fee0 	bl	8000240 <memchr>
 8019480:	b138      	cbz	r0, 8019492 <_vfiprintf_r+0x17a>
 8019482:	9b04      	ldr	r3, [sp, #16]
 8019484:	eba0 000a 	sub.w	r0, r0, sl
 8019488:	2240      	movs	r2, #64	; 0x40
 801948a:	4082      	lsls	r2, r0
 801948c:	4313      	orrs	r3, r2
 801948e:	3401      	adds	r4, #1
 8019490:	9304      	str	r3, [sp, #16]
 8019492:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019496:	4829      	ldr	r0, [pc, #164]	; (801953c <_vfiprintf_r+0x224>)
 8019498:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801949c:	2206      	movs	r2, #6
 801949e:	f7e6 fecf 	bl	8000240 <memchr>
 80194a2:	2800      	cmp	r0, #0
 80194a4:	d03f      	beq.n	8019526 <_vfiprintf_r+0x20e>
 80194a6:	4b26      	ldr	r3, [pc, #152]	; (8019540 <_vfiprintf_r+0x228>)
 80194a8:	bb1b      	cbnz	r3, 80194f2 <_vfiprintf_r+0x1da>
 80194aa:	9b03      	ldr	r3, [sp, #12]
 80194ac:	3307      	adds	r3, #7
 80194ae:	f023 0307 	bic.w	r3, r3, #7
 80194b2:	3308      	adds	r3, #8
 80194b4:	9303      	str	r3, [sp, #12]
 80194b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80194b8:	443b      	add	r3, r7
 80194ba:	9309      	str	r3, [sp, #36]	; 0x24
 80194bc:	e768      	b.n	8019390 <_vfiprintf_r+0x78>
 80194be:	fb0c 3202 	mla	r2, ip, r2, r3
 80194c2:	460c      	mov	r4, r1
 80194c4:	2001      	movs	r0, #1
 80194c6:	e7a6      	b.n	8019416 <_vfiprintf_r+0xfe>
 80194c8:	2300      	movs	r3, #0
 80194ca:	3401      	adds	r4, #1
 80194cc:	9305      	str	r3, [sp, #20]
 80194ce:	4619      	mov	r1, r3
 80194d0:	f04f 0c0a 	mov.w	ip, #10
 80194d4:	4620      	mov	r0, r4
 80194d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80194da:	3a30      	subs	r2, #48	; 0x30
 80194dc:	2a09      	cmp	r2, #9
 80194de:	d903      	bls.n	80194e8 <_vfiprintf_r+0x1d0>
 80194e0:	2b00      	cmp	r3, #0
 80194e2:	d0c6      	beq.n	8019472 <_vfiprintf_r+0x15a>
 80194e4:	9105      	str	r1, [sp, #20]
 80194e6:	e7c4      	b.n	8019472 <_vfiprintf_r+0x15a>
 80194e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80194ec:	4604      	mov	r4, r0
 80194ee:	2301      	movs	r3, #1
 80194f0:	e7f0      	b.n	80194d4 <_vfiprintf_r+0x1bc>
 80194f2:	ab03      	add	r3, sp, #12
 80194f4:	9300      	str	r3, [sp, #0]
 80194f6:	462a      	mov	r2, r5
 80194f8:	4b12      	ldr	r3, [pc, #72]	; (8019544 <_vfiprintf_r+0x22c>)
 80194fa:	a904      	add	r1, sp, #16
 80194fc:	4630      	mov	r0, r6
 80194fe:	f7fd fcbd 	bl	8016e7c <_printf_float>
 8019502:	4607      	mov	r7, r0
 8019504:	1c78      	adds	r0, r7, #1
 8019506:	d1d6      	bne.n	80194b6 <_vfiprintf_r+0x19e>
 8019508:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801950a:	07d9      	lsls	r1, r3, #31
 801950c:	d405      	bmi.n	801951a <_vfiprintf_r+0x202>
 801950e:	89ab      	ldrh	r3, [r5, #12]
 8019510:	059a      	lsls	r2, r3, #22
 8019512:	d402      	bmi.n	801951a <_vfiprintf_r+0x202>
 8019514:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019516:	f7fe facd 	bl	8017ab4 <__retarget_lock_release_recursive>
 801951a:	89ab      	ldrh	r3, [r5, #12]
 801951c:	065b      	lsls	r3, r3, #25
 801951e:	f53f af1d 	bmi.w	801935c <_vfiprintf_r+0x44>
 8019522:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019524:	e71c      	b.n	8019360 <_vfiprintf_r+0x48>
 8019526:	ab03      	add	r3, sp, #12
 8019528:	9300      	str	r3, [sp, #0]
 801952a:	462a      	mov	r2, r5
 801952c:	4b05      	ldr	r3, [pc, #20]	; (8019544 <_vfiprintf_r+0x22c>)
 801952e:	a904      	add	r1, sp, #16
 8019530:	4630      	mov	r0, r6
 8019532:	f7fd ff47 	bl	80173c4 <_printf_i>
 8019536:	e7e4      	b.n	8019502 <_vfiprintf_r+0x1ea>
 8019538:	0806d314 	.word	0x0806d314
 801953c:	0806d31e 	.word	0x0806d31e
 8019540:	08016e7d 	.word	0x08016e7d
 8019544:	080192f3 	.word	0x080192f3
 8019548:	0806d31a 	.word	0x0806d31a

0801954c <__sflush_r>:
 801954c:	898a      	ldrh	r2, [r1, #12]
 801954e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019552:	4605      	mov	r5, r0
 8019554:	0710      	lsls	r0, r2, #28
 8019556:	460c      	mov	r4, r1
 8019558:	d458      	bmi.n	801960c <__sflush_r+0xc0>
 801955a:	684b      	ldr	r3, [r1, #4]
 801955c:	2b00      	cmp	r3, #0
 801955e:	dc05      	bgt.n	801956c <__sflush_r+0x20>
 8019560:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8019562:	2b00      	cmp	r3, #0
 8019564:	dc02      	bgt.n	801956c <__sflush_r+0x20>
 8019566:	2000      	movs	r0, #0
 8019568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801956c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801956e:	2e00      	cmp	r6, #0
 8019570:	d0f9      	beq.n	8019566 <__sflush_r+0x1a>
 8019572:	2300      	movs	r3, #0
 8019574:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8019578:	682f      	ldr	r7, [r5, #0]
 801957a:	6a21      	ldr	r1, [r4, #32]
 801957c:	602b      	str	r3, [r5, #0]
 801957e:	d032      	beq.n	80195e6 <__sflush_r+0x9a>
 8019580:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8019582:	89a3      	ldrh	r3, [r4, #12]
 8019584:	075a      	lsls	r2, r3, #29
 8019586:	d505      	bpl.n	8019594 <__sflush_r+0x48>
 8019588:	6863      	ldr	r3, [r4, #4]
 801958a:	1ac0      	subs	r0, r0, r3
 801958c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801958e:	b10b      	cbz	r3, 8019594 <__sflush_r+0x48>
 8019590:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019592:	1ac0      	subs	r0, r0, r3
 8019594:	2300      	movs	r3, #0
 8019596:	4602      	mov	r2, r0
 8019598:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801959a:	6a21      	ldr	r1, [r4, #32]
 801959c:	4628      	mov	r0, r5
 801959e:	47b0      	blx	r6
 80195a0:	1c43      	adds	r3, r0, #1
 80195a2:	89a3      	ldrh	r3, [r4, #12]
 80195a4:	d106      	bne.n	80195b4 <__sflush_r+0x68>
 80195a6:	6829      	ldr	r1, [r5, #0]
 80195a8:	291d      	cmp	r1, #29
 80195aa:	d82b      	bhi.n	8019604 <__sflush_r+0xb8>
 80195ac:	4a29      	ldr	r2, [pc, #164]	; (8019654 <__sflush_r+0x108>)
 80195ae:	410a      	asrs	r2, r1
 80195b0:	07d6      	lsls	r6, r2, #31
 80195b2:	d427      	bmi.n	8019604 <__sflush_r+0xb8>
 80195b4:	2200      	movs	r2, #0
 80195b6:	6062      	str	r2, [r4, #4]
 80195b8:	04d9      	lsls	r1, r3, #19
 80195ba:	6922      	ldr	r2, [r4, #16]
 80195bc:	6022      	str	r2, [r4, #0]
 80195be:	d504      	bpl.n	80195ca <__sflush_r+0x7e>
 80195c0:	1c42      	adds	r2, r0, #1
 80195c2:	d101      	bne.n	80195c8 <__sflush_r+0x7c>
 80195c4:	682b      	ldr	r3, [r5, #0]
 80195c6:	b903      	cbnz	r3, 80195ca <__sflush_r+0x7e>
 80195c8:	6560      	str	r0, [r4, #84]	; 0x54
 80195ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80195cc:	602f      	str	r7, [r5, #0]
 80195ce:	2900      	cmp	r1, #0
 80195d0:	d0c9      	beq.n	8019566 <__sflush_r+0x1a>
 80195d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80195d6:	4299      	cmp	r1, r3
 80195d8:	d002      	beq.n	80195e0 <__sflush_r+0x94>
 80195da:	4628      	mov	r0, r5
 80195dc:	f7ff f952 	bl	8018884 <_free_r>
 80195e0:	2000      	movs	r0, #0
 80195e2:	6360      	str	r0, [r4, #52]	; 0x34
 80195e4:	e7c0      	b.n	8019568 <__sflush_r+0x1c>
 80195e6:	2301      	movs	r3, #1
 80195e8:	4628      	mov	r0, r5
 80195ea:	47b0      	blx	r6
 80195ec:	1c41      	adds	r1, r0, #1
 80195ee:	d1c8      	bne.n	8019582 <__sflush_r+0x36>
 80195f0:	682b      	ldr	r3, [r5, #0]
 80195f2:	2b00      	cmp	r3, #0
 80195f4:	d0c5      	beq.n	8019582 <__sflush_r+0x36>
 80195f6:	2b1d      	cmp	r3, #29
 80195f8:	d001      	beq.n	80195fe <__sflush_r+0xb2>
 80195fa:	2b16      	cmp	r3, #22
 80195fc:	d101      	bne.n	8019602 <__sflush_r+0xb6>
 80195fe:	602f      	str	r7, [r5, #0]
 8019600:	e7b1      	b.n	8019566 <__sflush_r+0x1a>
 8019602:	89a3      	ldrh	r3, [r4, #12]
 8019604:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019608:	81a3      	strh	r3, [r4, #12]
 801960a:	e7ad      	b.n	8019568 <__sflush_r+0x1c>
 801960c:	690f      	ldr	r7, [r1, #16]
 801960e:	2f00      	cmp	r7, #0
 8019610:	d0a9      	beq.n	8019566 <__sflush_r+0x1a>
 8019612:	0793      	lsls	r3, r2, #30
 8019614:	680e      	ldr	r6, [r1, #0]
 8019616:	bf08      	it	eq
 8019618:	694b      	ldreq	r3, [r1, #20]
 801961a:	600f      	str	r7, [r1, #0]
 801961c:	bf18      	it	ne
 801961e:	2300      	movne	r3, #0
 8019620:	eba6 0807 	sub.w	r8, r6, r7
 8019624:	608b      	str	r3, [r1, #8]
 8019626:	f1b8 0f00 	cmp.w	r8, #0
 801962a:	dd9c      	ble.n	8019566 <__sflush_r+0x1a>
 801962c:	6a21      	ldr	r1, [r4, #32]
 801962e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8019630:	4643      	mov	r3, r8
 8019632:	463a      	mov	r2, r7
 8019634:	4628      	mov	r0, r5
 8019636:	47b0      	blx	r6
 8019638:	2800      	cmp	r0, #0
 801963a:	dc06      	bgt.n	801964a <__sflush_r+0xfe>
 801963c:	89a3      	ldrh	r3, [r4, #12]
 801963e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019642:	81a3      	strh	r3, [r4, #12]
 8019644:	f04f 30ff 	mov.w	r0, #4294967295
 8019648:	e78e      	b.n	8019568 <__sflush_r+0x1c>
 801964a:	4407      	add	r7, r0
 801964c:	eba8 0800 	sub.w	r8, r8, r0
 8019650:	e7e9      	b.n	8019626 <__sflush_r+0xda>
 8019652:	bf00      	nop
 8019654:	dfbffffe 	.word	0xdfbffffe

08019658 <_fflush_r>:
 8019658:	b538      	push	{r3, r4, r5, lr}
 801965a:	690b      	ldr	r3, [r1, #16]
 801965c:	4605      	mov	r5, r0
 801965e:	460c      	mov	r4, r1
 8019660:	b913      	cbnz	r3, 8019668 <_fflush_r+0x10>
 8019662:	2500      	movs	r5, #0
 8019664:	4628      	mov	r0, r5
 8019666:	bd38      	pop	{r3, r4, r5, pc}
 8019668:	b118      	cbz	r0, 8019672 <_fflush_r+0x1a>
 801966a:	6a03      	ldr	r3, [r0, #32]
 801966c:	b90b      	cbnz	r3, 8019672 <_fflush_r+0x1a>
 801966e:	f7fe f857 	bl	8017720 <__sinit>
 8019672:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019676:	2b00      	cmp	r3, #0
 8019678:	d0f3      	beq.n	8019662 <_fflush_r+0xa>
 801967a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801967c:	07d0      	lsls	r0, r2, #31
 801967e:	d404      	bmi.n	801968a <_fflush_r+0x32>
 8019680:	0599      	lsls	r1, r3, #22
 8019682:	d402      	bmi.n	801968a <_fflush_r+0x32>
 8019684:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019686:	f7fe fa14 	bl	8017ab2 <__retarget_lock_acquire_recursive>
 801968a:	4628      	mov	r0, r5
 801968c:	4621      	mov	r1, r4
 801968e:	f7ff ff5d 	bl	801954c <__sflush_r>
 8019692:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019694:	07da      	lsls	r2, r3, #31
 8019696:	4605      	mov	r5, r0
 8019698:	d4e4      	bmi.n	8019664 <_fflush_r+0xc>
 801969a:	89a3      	ldrh	r3, [r4, #12]
 801969c:	059b      	lsls	r3, r3, #22
 801969e:	d4e1      	bmi.n	8019664 <_fflush_r+0xc>
 80196a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80196a2:	f7fe fa07 	bl	8017ab4 <__retarget_lock_release_recursive>
 80196a6:	e7dd      	b.n	8019664 <_fflush_r+0xc>

080196a8 <__swbuf_r>:
 80196a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80196aa:	460e      	mov	r6, r1
 80196ac:	4614      	mov	r4, r2
 80196ae:	4605      	mov	r5, r0
 80196b0:	b118      	cbz	r0, 80196ba <__swbuf_r+0x12>
 80196b2:	6a03      	ldr	r3, [r0, #32]
 80196b4:	b90b      	cbnz	r3, 80196ba <__swbuf_r+0x12>
 80196b6:	f7fe f833 	bl	8017720 <__sinit>
 80196ba:	69a3      	ldr	r3, [r4, #24]
 80196bc:	60a3      	str	r3, [r4, #8]
 80196be:	89a3      	ldrh	r3, [r4, #12]
 80196c0:	071a      	lsls	r2, r3, #28
 80196c2:	d525      	bpl.n	8019710 <__swbuf_r+0x68>
 80196c4:	6923      	ldr	r3, [r4, #16]
 80196c6:	b31b      	cbz	r3, 8019710 <__swbuf_r+0x68>
 80196c8:	6823      	ldr	r3, [r4, #0]
 80196ca:	6922      	ldr	r2, [r4, #16]
 80196cc:	1a98      	subs	r0, r3, r2
 80196ce:	6963      	ldr	r3, [r4, #20]
 80196d0:	b2f6      	uxtb	r6, r6
 80196d2:	4283      	cmp	r3, r0
 80196d4:	4637      	mov	r7, r6
 80196d6:	dc04      	bgt.n	80196e2 <__swbuf_r+0x3a>
 80196d8:	4621      	mov	r1, r4
 80196da:	4628      	mov	r0, r5
 80196dc:	f7ff ffbc 	bl	8019658 <_fflush_r>
 80196e0:	b9e0      	cbnz	r0, 801971c <__swbuf_r+0x74>
 80196e2:	68a3      	ldr	r3, [r4, #8]
 80196e4:	3b01      	subs	r3, #1
 80196e6:	60a3      	str	r3, [r4, #8]
 80196e8:	6823      	ldr	r3, [r4, #0]
 80196ea:	1c5a      	adds	r2, r3, #1
 80196ec:	6022      	str	r2, [r4, #0]
 80196ee:	701e      	strb	r6, [r3, #0]
 80196f0:	6962      	ldr	r2, [r4, #20]
 80196f2:	1c43      	adds	r3, r0, #1
 80196f4:	429a      	cmp	r2, r3
 80196f6:	d004      	beq.n	8019702 <__swbuf_r+0x5a>
 80196f8:	89a3      	ldrh	r3, [r4, #12]
 80196fa:	07db      	lsls	r3, r3, #31
 80196fc:	d506      	bpl.n	801970c <__swbuf_r+0x64>
 80196fe:	2e0a      	cmp	r6, #10
 8019700:	d104      	bne.n	801970c <__swbuf_r+0x64>
 8019702:	4621      	mov	r1, r4
 8019704:	4628      	mov	r0, r5
 8019706:	f7ff ffa7 	bl	8019658 <_fflush_r>
 801970a:	b938      	cbnz	r0, 801971c <__swbuf_r+0x74>
 801970c:	4638      	mov	r0, r7
 801970e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019710:	4621      	mov	r1, r4
 8019712:	4628      	mov	r0, r5
 8019714:	f000 f806 	bl	8019724 <__swsetup_r>
 8019718:	2800      	cmp	r0, #0
 801971a:	d0d5      	beq.n	80196c8 <__swbuf_r+0x20>
 801971c:	f04f 37ff 	mov.w	r7, #4294967295
 8019720:	e7f4      	b.n	801970c <__swbuf_r+0x64>
	...

08019724 <__swsetup_r>:
 8019724:	b538      	push	{r3, r4, r5, lr}
 8019726:	4b2a      	ldr	r3, [pc, #168]	; (80197d0 <__swsetup_r+0xac>)
 8019728:	4605      	mov	r5, r0
 801972a:	6818      	ldr	r0, [r3, #0]
 801972c:	460c      	mov	r4, r1
 801972e:	b118      	cbz	r0, 8019738 <__swsetup_r+0x14>
 8019730:	6a03      	ldr	r3, [r0, #32]
 8019732:	b90b      	cbnz	r3, 8019738 <__swsetup_r+0x14>
 8019734:	f7fd fff4 	bl	8017720 <__sinit>
 8019738:	89a3      	ldrh	r3, [r4, #12]
 801973a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801973e:	0718      	lsls	r0, r3, #28
 8019740:	d422      	bmi.n	8019788 <__swsetup_r+0x64>
 8019742:	06d9      	lsls	r1, r3, #27
 8019744:	d407      	bmi.n	8019756 <__swsetup_r+0x32>
 8019746:	2309      	movs	r3, #9
 8019748:	602b      	str	r3, [r5, #0]
 801974a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801974e:	81a3      	strh	r3, [r4, #12]
 8019750:	f04f 30ff 	mov.w	r0, #4294967295
 8019754:	e034      	b.n	80197c0 <__swsetup_r+0x9c>
 8019756:	0758      	lsls	r0, r3, #29
 8019758:	d512      	bpl.n	8019780 <__swsetup_r+0x5c>
 801975a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801975c:	b141      	cbz	r1, 8019770 <__swsetup_r+0x4c>
 801975e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019762:	4299      	cmp	r1, r3
 8019764:	d002      	beq.n	801976c <__swsetup_r+0x48>
 8019766:	4628      	mov	r0, r5
 8019768:	f7ff f88c 	bl	8018884 <_free_r>
 801976c:	2300      	movs	r3, #0
 801976e:	6363      	str	r3, [r4, #52]	; 0x34
 8019770:	89a3      	ldrh	r3, [r4, #12]
 8019772:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8019776:	81a3      	strh	r3, [r4, #12]
 8019778:	2300      	movs	r3, #0
 801977a:	6063      	str	r3, [r4, #4]
 801977c:	6923      	ldr	r3, [r4, #16]
 801977e:	6023      	str	r3, [r4, #0]
 8019780:	89a3      	ldrh	r3, [r4, #12]
 8019782:	f043 0308 	orr.w	r3, r3, #8
 8019786:	81a3      	strh	r3, [r4, #12]
 8019788:	6923      	ldr	r3, [r4, #16]
 801978a:	b94b      	cbnz	r3, 80197a0 <__swsetup_r+0x7c>
 801978c:	89a3      	ldrh	r3, [r4, #12]
 801978e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8019792:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019796:	d003      	beq.n	80197a0 <__swsetup_r+0x7c>
 8019798:	4621      	mov	r1, r4
 801979a:	4628      	mov	r0, r5
 801979c:	f000 f8a4 	bl	80198e8 <__smakebuf_r>
 80197a0:	89a0      	ldrh	r0, [r4, #12]
 80197a2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80197a6:	f010 0301 	ands.w	r3, r0, #1
 80197aa:	d00a      	beq.n	80197c2 <__swsetup_r+0x9e>
 80197ac:	2300      	movs	r3, #0
 80197ae:	60a3      	str	r3, [r4, #8]
 80197b0:	6963      	ldr	r3, [r4, #20]
 80197b2:	425b      	negs	r3, r3
 80197b4:	61a3      	str	r3, [r4, #24]
 80197b6:	6923      	ldr	r3, [r4, #16]
 80197b8:	b943      	cbnz	r3, 80197cc <__swsetup_r+0xa8>
 80197ba:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80197be:	d1c4      	bne.n	801974a <__swsetup_r+0x26>
 80197c0:	bd38      	pop	{r3, r4, r5, pc}
 80197c2:	0781      	lsls	r1, r0, #30
 80197c4:	bf58      	it	pl
 80197c6:	6963      	ldrpl	r3, [r4, #20]
 80197c8:	60a3      	str	r3, [r4, #8]
 80197ca:	e7f4      	b.n	80197b6 <__swsetup_r+0x92>
 80197cc:	2000      	movs	r0, #0
 80197ce:	e7f7      	b.n	80197c0 <__swsetup_r+0x9c>
 80197d0:	20000068 	.word	0x20000068

080197d4 <_calloc_r>:
 80197d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80197d6:	fba1 2402 	umull	r2, r4, r1, r2
 80197da:	b94c      	cbnz	r4, 80197f0 <_calloc_r+0x1c>
 80197dc:	4611      	mov	r1, r2
 80197de:	9201      	str	r2, [sp, #4]
 80197e0:	f7fd fa20 	bl	8016c24 <_malloc_r>
 80197e4:	9a01      	ldr	r2, [sp, #4]
 80197e6:	4605      	mov	r5, r0
 80197e8:	b930      	cbnz	r0, 80197f8 <_calloc_r+0x24>
 80197ea:	4628      	mov	r0, r5
 80197ec:	b003      	add	sp, #12
 80197ee:	bd30      	pop	{r4, r5, pc}
 80197f0:	220c      	movs	r2, #12
 80197f2:	6002      	str	r2, [r0, #0]
 80197f4:	2500      	movs	r5, #0
 80197f6:	e7f8      	b.n	80197ea <_calloc_r+0x16>
 80197f8:	4621      	mov	r1, r4
 80197fa:	f7fe f877 	bl	80178ec <memset>
 80197fe:	e7f4      	b.n	80197ea <_calloc_r+0x16>

08019800 <__ascii_mbtowc>:
 8019800:	b082      	sub	sp, #8
 8019802:	b901      	cbnz	r1, 8019806 <__ascii_mbtowc+0x6>
 8019804:	a901      	add	r1, sp, #4
 8019806:	b142      	cbz	r2, 801981a <__ascii_mbtowc+0x1a>
 8019808:	b14b      	cbz	r3, 801981e <__ascii_mbtowc+0x1e>
 801980a:	7813      	ldrb	r3, [r2, #0]
 801980c:	600b      	str	r3, [r1, #0]
 801980e:	7812      	ldrb	r2, [r2, #0]
 8019810:	1e10      	subs	r0, r2, #0
 8019812:	bf18      	it	ne
 8019814:	2001      	movne	r0, #1
 8019816:	b002      	add	sp, #8
 8019818:	4770      	bx	lr
 801981a:	4610      	mov	r0, r2
 801981c:	e7fb      	b.n	8019816 <__ascii_mbtowc+0x16>
 801981e:	f06f 0001 	mvn.w	r0, #1
 8019822:	e7f8      	b.n	8019816 <__ascii_mbtowc+0x16>

08019824 <_realloc_r>:
 8019824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019828:	4680      	mov	r8, r0
 801982a:	4614      	mov	r4, r2
 801982c:	460e      	mov	r6, r1
 801982e:	b921      	cbnz	r1, 801983a <_realloc_r+0x16>
 8019830:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019834:	4611      	mov	r1, r2
 8019836:	f7fd b9f5 	b.w	8016c24 <_malloc_r>
 801983a:	b92a      	cbnz	r2, 8019848 <_realloc_r+0x24>
 801983c:	f7ff f822 	bl	8018884 <_free_r>
 8019840:	4625      	mov	r5, r4
 8019842:	4628      	mov	r0, r5
 8019844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019848:	f000 f8ac 	bl	80199a4 <_malloc_usable_size_r>
 801984c:	4284      	cmp	r4, r0
 801984e:	4607      	mov	r7, r0
 8019850:	d802      	bhi.n	8019858 <_realloc_r+0x34>
 8019852:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8019856:	d812      	bhi.n	801987e <_realloc_r+0x5a>
 8019858:	4621      	mov	r1, r4
 801985a:	4640      	mov	r0, r8
 801985c:	f7fd f9e2 	bl	8016c24 <_malloc_r>
 8019860:	4605      	mov	r5, r0
 8019862:	2800      	cmp	r0, #0
 8019864:	d0ed      	beq.n	8019842 <_realloc_r+0x1e>
 8019866:	42bc      	cmp	r4, r7
 8019868:	4622      	mov	r2, r4
 801986a:	4631      	mov	r1, r6
 801986c:	bf28      	it	cs
 801986e:	463a      	movcs	r2, r7
 8019870:	f7fe f921 	bl	8017ab6 <memcpy>
 8019874:	4631      	mov	r1, r6
 8019876:	4640      	mov	r0, r8
 8019878:	f7ff f804 	bl	8018884 <_free_r>
 801987c:	e7e1      	b.n	8019842 <_realloc_r+0x1e>
 801987e:	4635      	mov	r5, r6
 8019880:	e7df      	b.n	8019842 <_realloc_r+0x1e>

08019882 <__ascii_wctomb>:
 8019882:	b149      	cbz	r1, 8019898 <__ascii_wctomb+0x16>
 8019884:	2aff      	cmp	r2, #255	; 0xff
 8019886:	bf85      	ittet	hi
 8019888:	238a      	movhi	r3, #138	; 0x8a
 801988a:	6003      	strhi	r3, [r0, #0]
 801988c:	700a      	strbls	r2, [r1, #0]
 801988e:	f04f 30ff 	movhi.w	r0, #4294967295
 8019892:	bf98      	it	ls
 8019894:	2001      	movls	r0, #1
 8019896:	4770      	bx	lr
 8019898:	4608      	mov	r0, r1
 801989a:	4770      	bx	lr

0801989c <__swhatbuf_r>:
 801989c:	b570      	push	{r4, r5, r6, lr}
 801989e:	460c      	mov	r4, r1
 80198a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80198a4:	2900      	cmp	r1, #0
 80198a6:	b096      	sub	sp, #88	; 0x58
 80198a8:	4615      	mov	r5, r2
 80198aa:	461e      	mov	r6, r3
 80198ac:	da0d      	bge.n	80198ca <__swhatbuf_r+0x2e>
 80198ae:	89a3      	ldrh	r3, [r4, #12]
 80198b0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80198b4:	f04f 0100 	mov.w	r1, #0
 80198b8:	bf0c      	ite	eq
 80198ba:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80198be:	2340      	movne	r3, #64	; 0x40
 80198c0:	2000      	movs	r0, #0
 80198c2:	6031      	str	r1, [r6, #0]
 80198c4:	602b      	str	r3, [r5, #0]
 80198c6:	b016      	add	sp, #88	; 0x58
 80198c8:	bd70      	pop	{r4, r5, r6, pc}
 80198ca:	466a      	mov	r2, sp
 80198cc:	f000 f848 	bl	8019960 <_fstat_r>
 80198d0:	2800      	cmp	r0, #0
 80198d2:	dbec      	blt.n	80198ae <__swhatbuf_r+0x12>
 80198d4:	9901      	ldr	r1, [sp, #4]
 80198d6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80198da:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80198de:	4259      	negs	r1, r3
 80198e0:	4159      	adcs	r1, r3
 80198e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80198e6:	e7eb      	b.n	80198c0 <__swhatbuf_r+0x24>

080198e8 <__smakebuf_r>:
 80198e8:	898b      	ldrh	r3, [r1, #12]
 80198ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80198ec:	079d      	lsls	r5, r3, #30
 80198ee:	4606      	mov	r6, r0
 80198f0:	460c      	mov	r4, r1
 80198f2:	d507      	bpl.n	8019904 <__smakebuf_r+0x1c>
 80198f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80198f8:	6023      	str	r3, [r4, #0]
 80198fa:	6123      	str	r3, [r4, #16]
 80198fc:	2301      	movs	r3, #1
 80198fe:	6163      	str	r3, [r4, #20]
 8019900:	b002      	add	sp, #8
 8019902:	bd70      	pop	{r4, r5, r6, pc}
 8019904:	ab01      	add	r3, sp, #4
 8019906:	466a      	mov	r2, sp
 8019908:	f7ff ffc8 	bl	801989c <__swhatbuf_r>
 801990c:	9900      	ldr	r1, [sp, #0]
 801990e:	4605      	mov	r5, r0
 8019910:	4630      	mov	r0, r6
 8019912:	f7fd f987 	bl	8016c24 <_malloc_r>
 8019916:	b948      	cbnz	r0, 801992c <__smakebuf_r+0x44>
 8019918:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801991c:	059a      	lsls	r2, r3, #22
 801991e:	d4ef      	bmi.n	8019900 <__smakebuf_r+0x18>
 8019920:	f023 0303 	bic.w	r3, r3, #3
 8019924:	f043 0302 	orr.w	r3, r3, #2
 8019928:	81a3      	strh	r3, [r4, #12]
 801992a:	e7e3      	b.n	80198f4 <__smakebuf_r+0xc>
 801992c:	89a3      	ldrh	r3, [r4, #12]
 801992e:	6020      	str	r0, [r4, #0]
 8019930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019934:	81a3      	strh	r3, [r4, #12]
 8019936:	9b00      	ldr	r3, [sp, #0]
 8019938:	6163      	str	r3, [r4, #20]
 801993a:	9b01      	ldr	r3, [sp, #4]
 801993c:	6120      	str	r0, [r4, #16]
 801993e:	b15b      	cbz	r3, 8019958 <__smakebuf_r+0x70>
 8019940:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019944:	4630      	mov	r0, r6
 8019946:	f000 f81d 	bl	8019984 <_isatty_r>
 801994a:	b128      	cbz	r0, 8019958 <__smakebuf_r+0x70>
 801994c:	89a3      	ldrh	r3, [r4, #12]
 801994e:	f023 0303 	bic.w	r3, r3, #3
 8019952:	f043 0301 	orr.w	r3, r3, #1
 8019956:	81a3      	strh	r3, [r4, #12]
 8019958:	89a3      	ldrh	r3, [r4, #12]
 801995a:	431d      	orrs	r5, r3
 801995c:	81a5      	strh	r5, [r4, #12]
 801995e:	e7cf      	b.n	8019900 <__smakebuf_r+0x18>

08019960 <_fstat_r>:
 8019960:	b538      	push	{r3, r4, r5, lr}
 8019962:	4d07      	ldr	r5, [pc, #28]	; (8019980 <_fstat_r+0x20>)
 8019964:	2300      	movs	r3, #0
 8019966:	4604      	mov	r4, r0
 8019968:	4608      	mov	r0, r1
 801996a:	4611      	mov	r1, r2
 801996c:	602b      	str	r3, [r5, #0]
 801996e:	f7e8 f9ec 	bl	8001d4a <_fstat>
 8019972:	1c43      	adds	r3, r0, #1
 8019974:	d102      	bne.n	801997c <_fstat_r+0x1c>
 8019976:	682b      	ldr	r3, [r5, #0]
 8019978:	b103      	cbz	r3, 801997c <_fstat_r+0x1c>
 801997a:	6023      	str	r3, [r4, #0]
 801997c:	bd38      	pop	{r3, r4, r5, pc}
 801997e:	bf00      	nop
 8019980:	20009e08 	.word	0x20009e08

08019984 <_isatty_r>:
 8019984:	b538      	push	{r3, r4, r5, lr}
 8019986:	4d06      	ldr	r5, [pc, #24]	; (80199a0 <_isatty_r+0x1c>)
 8019988:	2300      	movs	r3, #0
 801998a:	4604      	mov	r4, r0
 801998c:	4608      	mov	r0, r1
 801998e:	602b      	str	r3, [r5, #0]
 8019990:	f7e8 f9eb 	bl	8001d6a <_isatty>
 8019994:	1c43      	adds	r3, r0, #1
 8019996:	d102      	bne.n	801999e <_isatty_r+0x1a>
 8019998:	682b      	ldr	r3, [r5, #0]
 801999a:	b103      	cbz	r3, 801999e <_isatty_r+0x1a>
 801999c:	6023      	str	r3, [r4, #0]
 801999e:	bd38      	pop	{r3, r4, r5, pc}
 80199a0:	20009e08 	.word	0x20009e08

080199a4 <_malloc_usable_size_r>:
 80199a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80199a8:	1f18      	subs	r0, r3, #4
 80199aa:	2b00      	cmp	r3, #0
 80199ac:	bfbc      	itt	lt
 80199ae:	580b      	ldrlt	r3, [r1, r0]
 80199b0:	18c0      	addlt	r0, r0, r3
 80199b2:	4770      	bx	lr

080199b4 <_init>:
 80199b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80199b6:	bf00      	nop
 80199b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80199ba:	bc08      	pop	{r3}
 80199bc:	469e      	mov	lr, r3
 80199be:	4770      	bx	lr

080199c0 <_fini>:
 80199c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80199c2:	bf00      	nop
 80199c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80199c6:	bc08      	pop	{r3}
 80199c8:	469e      	mov	lr, r3
 80199ca:	4770      	bx	lr
